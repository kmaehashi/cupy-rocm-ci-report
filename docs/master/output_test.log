master: 7bd40c5 Merge pull request #5514 from leofang/fft_doc
============================= test session starts ==============================
platform linux -- Python 3.8.7, pytest-6.2.2, py-1.10.0, pluggy-0.13.1
rootdir: /home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy, configfile: setup.cfg
plugins: html-3.1.1, metadata-1.11.0
collected 96896 items / 647 deselected / 2 skipped / 96247 selected

tests/cupy_tests/test_cublas.py ........................................ [  0%]
........................................................................ [  0%]
........................................................................ [  0%]
........................................................................ [  0%]
........................................................................ [  0%]
........................................................................ [  0%]
........................................................................ [  0%]
........................................................................ [  0%]
........................................................................ [  0%]
........................................................................ [  0%]
........................................................................ [  0%]
........................................................................ [  0%]
........................................................................ [  0%]
........................................................................ [  1%]
........................................................................ [  1%]
........................................................................ [  1%]
........................................................................ [  1%]
........................................................................ [  1%]
........................................................................ [  1%]
........................................................................ [  1%]
........................................................................ [  1%]
........................................................................ [  1%]
........................................................................ [  1%]
........................................................................ [  1%]
........................................................................ [  1%]
........................................................................ [  1%]
........................................................................ [  1%]
........................................................................ [  2%]
........................................................................ [  2%]
........................................................................ [  2%]
........................................................................ [  2%]
........................................................................ [  2%]
........................................................................ [  2%]
...........................x...........x.............................x.. [  2%]
.........x..........                                                     [  2%]
tests/cupy_tests/test_cudnn.py sssssssssssssssssssssssssssssssssssssssss [  2%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  2%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  2%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  2%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  2%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  2%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  3%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  3%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  3%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  3%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  3%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  3%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  3%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  3%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  3%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  3%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  3%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  3%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  3%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  3%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  4%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  4%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  4%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  4%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  4%]
sssssssssssssssssssssssssssssssssssssssssssssssssssssss                  [  4%]
tests/cupy_tests/test_cusolver.py ssssssssssssssssssssssssssssssssssssss [  4%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  4%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  4%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  4%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  4%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  4%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  4%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  4%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  5%]
ssssssssssssssssssssssssssssssssss                                       [  5%]
tests/cupy_tests/test_cusparse.py xx..xx....xx....xx...................x [  5%]
xx.xxx.................ssss.xssssx.ssss.xssssx..xx..xxxx..xx....xx..xx.. [  5%]
xx..xxxx..xx....xx..xx..xx..xxxx..xx....xx..xx..xx..xxxx..xx....xx..xx.. [  5%]
..xxxxxxxx........xxxx....xxxxxxxx........xxxx....xxxxxxxx........xxxx.. [  5%]
..xxxxxxxx........xxxx....xxxxxxxx........xxxx....xxxxxxxx........xxxx.. [  5%]
..xxxxxxxx........xxxx....xxxxxxxx........xxxx....xx....xx....xx....xx.. [  5%]
..xx....xx....xx....xx....xx....xx....xx....xx....xx....xx....xx....xx.. [  5%]
..xx....xx....xx....xx....xx....xx....xx....xx....xx....xx....xx....xx.. [  5%]
..xx....xx....xx....xx....xx....xx....xx....xx....xx....xx....xx....xx.. [  5%]
..xx....xx....xx....xx....xx....xx....xx....xx....xx....xx....xx....xx.. [  5%]
..xx....xx....xx....xx....xx....xx....xx....xx....xx....xx....xx....xx.. [  5%]
..xx....xx....xx....xx....xx....xx....xx....xx....xx....xx....xx....xx.. [  5%]
..xx....xx....xx....xx....xx....xx....xx....xx....xx....xx....xx....xx.. [  6%]
..xx....xx....xx....xx....xx....xx....xx....xx.........x.x.x.x.x.x.x.x.x [  6%]
..................x.x.x.x.x.x.x.x.x..................                    [  6%]
tests/cupy_tests/test_cutensor.py ssssssssssssssssssssssssssssssssssssss [  6%]
sssssssssssssssssssssssssssssssssssss                                    [  6%]
tests/cupy_tests/test_init.py ..s........                                [  6%]
tests/cupy_tests/test_ndim.py ............                               [  6%]
tests/cupy_tests/test_numpy_interop.py ..x......                         [  6%]
tests/cupy_tests/test_type_routines.py ................................. [  6%]
.                                                                        [  6%]
tests/cupy_tests/binary_tests/test_elementwise.py ......                 [  6%]
tests/cupy_tests/binary_tests/test_packing.py ...                        [  6%]
tests/cupy_tests/core_tests/test_array_function.py .....                 [  6%]
tests/cupy_tests/core_tests/test_carray.py .....                         [  6%]
tests/cupy_tests/core_tests/test_core.py ......                          [  6%]
tests/cupy_tests/core_tests/test_cub_reduction.py ...................... [  6%]
...                                                                      [  6%]
tests/cupy_tests/core_tests/test_dlpack.py ......                        [  6%]
tests/cupy_tests/core_tests/test_elementwise.py ...............          [  6%]
tests/cupy_tests/core_tests/test_flags.py .............................  [  6%]
tests/cupy_tests/core_tests/test_function.py .....                       [  6%]
tests/cupy_tests/core_tests/test_gufuncs.py ............................ [  6%]
................................                                         [  6%]
tests/cupy_tests/core_tests/test_internal.py ........................... [  6%]
...............................................................          [  6%]
tests/cupy_tests/core_tests/test_iter.py ............                    [  6%]
tests/cupy_tests/core_tests/test_ndarray.py ..........................ss [  6%]
ssss.................................................................... [  6%]
......................F...sss...............                             [  6%]
tests/cupy_tests/core_tests/test_ndarray_adv_indexing.py ............... [  6%]
........................................................................ [  6%]
........................................................................ [  6%]
........................................................................ [  6%]
.............................................                            [  7%]
tests/cupy_tests/core_tests/test_ndarray_complex_ops.py ................ [  7%]
.....                                                                    [  7%]
tests/cupy_tests/core_tests/test_ndarray_contiguity.py .                 [  7%]
tests/cupy_tests/core_tests/test_ndarray_conversion.py .......xx..       [  7%]
tests/cupy_tests/core_tests/test_ndarray_copy_and_view.py .............. [  7%]
.........................sssssss                                         [  7%]
tests/cupy_tests/core_tests/test_ndarray_cuda_array_interface.py sssssss [  7%]
sssssssssssssssssssssssssssssssssssssssssssssssss                        [  7%]
tests/cupy_tests/core_tests/test_ndarray_elementwise_op.py ............. [  7%]
........................................................................ [  7%]
.................................................................        [  7%]
tests/cupy_tests/core_tests/test_ndarray_get.py ............             [  7%]
tests/cupy_tests/core_tests/test_ndarray_indexing.py xxxx..........x...x [  7%]
........x..........x.............................                        [  7%]
tests/cupy_tests/core_tests/test_ndarray_math.py ......................s [  7%]
sssssssssss                                                              [  7%]
tests/cupy_tests/core_tests/test_ndarray_owndata.py ...                  [  7%]
tests/cupy_tests/core_tests/test_ndarray_reduction.py .................. [  7%]
........................................................................ [  7%]
........................................................................ [  7%]
................................                                         [  7%]
tests/cupy_tests/core_tests/test_ndarray_scatter.py .................... [  7%]
........................................................................ [  7%]
...............................................................          [  7%]
tests/cupy_tests/core_tests/test_ndarray_ufunc.py .........              [  7%]
tests/cupy_tests/core_tests/test_ndarray_unary_op.py .......F..........s [  7%]
...                                                                      [  7%]
tests/cupy_tests/core_tests/test_raw.py .ss.........sss..s.s.s........ss [  7%]
.........sss..s.s.s........ss.........sss..s.s.s......ssssssssssssssssss [  7%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss.s [  8%]
s.......sssss....s.s......sssssssssssssssssssssssssssss                  [  8%]
tests/cupy_tests/core_tests/test_reduction.py .......................    [  8%]
tests/cupy_tests/core_tests/test_scan.py ....                            [  8%]
tests/cupy_tests/core_tests/test_syncdetect.py ....                      [  8%]
tests/cupy_tests/core_tests/test_userkernel.py ....sss.............      [  8%]
tests/cupy_tests/core_tests/fusion_tests/test_array.py ................. [  8%]
...................................................................FFFFF [  8%]
FFFFFFFFFFF.FFFFFFFFFFF.FFFFFFF.....................                     [  8%]
tests/cupy_tests/core_tests/fusion_tests/test_indexing.py .............. [  8%]
.................s                                                       [  8%]
tests/cupy_tests/core_tests/fusion_tests/test_kernel_cache.py ....       [  8%]
tests/cupy_tests/core_tests/fusion_tests/test_misc.py ..FF..FsFF.F..FFFF [  8%]
FFFFFFF.                                                                 [  8%]
tests/cupy_tests/core_tests/fusion_tests/test_optimization.py .......... [  8%]
....                                                                     [  8%]
tests/cupy_tests/core_tests/fusion_tests/test_reduction.py ............. [  8%]
........................................................................ [  8%]
.........................................................s.s.s.s.s.s.s.s [  8%]
.s.ssssssssssssssssss.sss                                                [  8%]
tests/cupy_tests/core_tests/fusion_tests/test_routines.py .............. [  8%]
........................................................................ [  8%]
..............                                                           [  8%]
tests/cupy_tests/core_tests/fusion_tests/test_ufunc.py ................. [  8%]
......................................................                   [  8%]
tests/cupy_tests/creation_tests/test_basic.py .......................... [  8%]
...........................................................s............ [  8%]
....s.                                                                   [  8%]
tests/cupy_tests/creation_tests/test_from_data.py ssssssssssssssssssssss [  8%]
sssssssssssssssssssssssssssssssssssssssssssssssssssssssssss............. [  8%]
...................................................................      [  8%]
tests/cupy_tests/creation_tests/test_matrix.py ......................... [  9%]
.................................                                        [  9%]
tests/cupy_tests/creation_tests/test_ranges.py ......................... [  9%]
..............................................................           [  9%]
tests/cupy_tests/cuda_tests/test_compiler.py sssssss........             [  9%]
tests/cupy_tests/cuda_tests/test_cublas.py .                             [  9%]
tests/cupy_tests/cuda_tests/test_cudnn.py s                              [  9%]
tests/cupy_tests/cuda_tests/test_cufft.py ssssssssssssssss.              [  9%]
tests/cupy_tests/cuda_tests/test_curand.py .....                         [  9%]
tests/cupy_tests/cuda_tests/test_cusolver.py .                           [  9%]
tests/cupy_tests/cuda_tests/test_cusparse.py .                           [  9%]
tests/cupy_tests/cuda_tests/test_cutensor.py s                           [  9%]
tests/cupy_tests/cuda_tests/test_device.py ................              [  9%]
tests/cupy_tests/cuda_tests/test_driver.py ss.                           [  9%]
tests/cupy_tests/cuda_tests/test_memory.py ....ssssssss................. [  9%]
.ssssssssss......s.............................................sssssssss [  9%]
ssssssssssss                                                             [  9%]
tests/cupy_tests/cuda_tests/test_memory_hook.py .                        [  9%]
tests/cupy_tests/cuda_tests/test_nccl.py ........                        [  9%]
tests/cupy_tests/cuda_tests/test_nvrtc.py .                              [  9%]
tests/cupy_tests/cuda_tests/test_nvtx.py ....                            [  9%]
tests/cupy_tests/cuda_tests/test_pinned_memory.py ............           [  9%]
tests/cupy_tests/cuda_tests/test_profile.py ..                           [  9%]
tests/cupy_tests/cuda_tests/test_runtime.py .                            [  9%]
tests/cupy_tests/cuda_tests/test_stream.py ..s..s......ssssssssssss.s    [  9%]
tests/cupy_tests/cuda_tests/memory_hooks_tests/test_debug_print.py .     [  9%]
tests/cupy_tests/cuda_tests/memory_hooks_tests/test_line_profile.py ..   [  9%]
tests/cupy_tests/fft_tests/test_cache.py ..sss.....s..                   [  9%]
tests/cupy_tests/fft_tests/test_callback.py ssssssssssssssssssssssssssss [  9%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  9%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  9%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  9%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  9%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  9%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  9%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  9%]
ssssssssssssssssssssssssssssssssssssssssssssssssssss                     [ 10%]
tests/cupy_tests/fft_tests/test_fft.py ....ssss....ssss........ssss....s [ 10%]
sss........ssss....ssss........ssss....ssss........ssss....ssss........s [ 10%]
sss....ssss........ssss....ssss........ssss....ssss........ssss....ssss. [ 10%]
.......ssss....ssss....................................................s [ 10%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 10%]
sssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss. [ 10%]
.s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s [ 10%]
.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s [ 10%]
..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s.. [ 10%]
s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s. [ 10%]
s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s. [ 10%]
.s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s [ 10%]
.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s [ 10%]
.s.s.sssss.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s [ 11%]
.sssss.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.sss [ 11%]
ss.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s [ 11%]
.sssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss.s.s..s.s. [ 11%]
.s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s [ 11%]
.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s...ss..ss....ss..ss....ss..ss....ss [ 11%]
..ss....ss..ss....ss..ss....ss..ss....ss..ss...s.s.s.s.s.s.s.s.s.s.s.s.s [ 11%]
.s.s.s.s.s.s.s.s.s.s.s.s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s. [ 11%]
.s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s [ 11%]
.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s......s.s..s.s..s.s..s.s..s.s..s.s. [ 11%]
.s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s [ 11%]
.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s [ 11%]
..s.s..s.s..s.s..s.s..s.s..s.s..s.s.sssss.s.s..s.s.sssssssssssssssssssss [ 11%]
ssssssssssssssssssssssssssssssssssssssssssss.s.s..s.s..s.s..s.s..s.s..s. [ 11%]
s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s. [ 12%]
.s.s..s.s..s.s..s.s..s.s..s.s.......ss..ss....ss..ss....ss..ss....ss..ss [ 12%]
....ss..ss....ss..ss....ss..ss....ss..ss........................         [ 12%]
tests/cupy_tests/functional_tests/test_piecewise.py .............        [ 12%]
tests/cupy_tests/functional_tests/test_vectorize.py .................... [ 12%]
.................................F                                       [ 12%]
tests/cupy_tests/indexing_tests/test_generate.py .......F............... [ 12%]
...............                                                          [ 12%]
tests/cupy_tests/indexing_tests/test_indexing.py ....................... [ 12%]
.........................                                                [ 12%]
tests/cupy_tests/indexing_tests/test_insert.py ......................... [ 12%]
........................................................................ [ 12%]
........................................................................ [ 12%]
.........................................................                [ 12%]
tests/cupy_tests/indexing_tests/test_iterate.py ........................ [ 12%]
...............................................                          [ 12%]
tests/cupy_tests/io_tests/test_base_n.py ............................    [ 12%]
tests/cupy_tests/io_tests/test_formatting.py ..                          [ 12%]
tests/cupy_tests/io_tests/test_npz.py .......                            [ 12%]
tests/cupy_tests/lib_tests/test_polynomial.py .......ss.......ssssssssss [ 12%]
sssssss........ssssssssssssssssssssssssssssssssssssxxxxxxxxxxxxxxxxxxxx. [ 12%]
..ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 12%]
ssssssssssssssssssssssssss......xxxxxxxxxxxxxxxxxxxxxxxx................ [ 12%]
........................................................................ [ 13%]
........xxxxxxxx........xxxxxxxx........................................ [ 13%]
...........xxxxxx............................x.......................... [ 13%]
..                                                                       [ 13%]
tests/cupy_tests/lib_tests/test_shape_base.py ......................     [ 13%]
tests/cupy_tests/lib_tests/test_strided_tricks.py ..                     [ 13%]
tests/cupy_tests/linalg_tests/test_decomposition.py .................... [ 13%]
.......................                                                  [ 13%]
tests/cupy_tests/linalg_tests/test_eigenvalue.py xxxxxxxx                [ 13%]
tests/cupy_tests/linalg_tests/test_einsum.py ........................... [ 13%]
........................................................................ [ 13%]
........................................................................ [ 13%]
........................................................................ [ 13%]
........................................................................ [ 13%]
........................................................................ [ 13%]
........................................................................ [ 13%]
........................................................................ [ 13%]
........................................................................ [ 13%]
........................................................................ [ 13%]
........................................................................ [ 14%]
..........                                                               [ 14%]
tests/cupy_tests/linalg_tests/test_norms.py ............................ [ 14%]
........................................................................ [ 14%]
........................................................................ [ 14%]
.................................................................        [ 14%]
tests/cupy_tests/linalg_tests/test_product.py .......................... [ 14%]
........................................................................ [ 14%]
........................................................................ [ 14%]
................................................                         [ 14%]
tests/cupy_tests/linalg_tests/test_solve.py ............................ [ 14%]
....................................                                     [ 14%]
tests/cupy_tests/logic_tests/test_comparison.py ........................ [ 14%]
.....                                                                    [ 14%]
tests/cupy_tests/logic_tests/test_content.py ...                         [ 14%]
tests/cupy_tests/logic_tests/test_ops.py ....                            [ 14%]
tests/cupy_tests/logic_tests/test_truth.py ............................. [ 14%]
........................................................................ [ 14%]
........................................................................ [ 14%]
........................................................................ [ 14%]
........................................................................ [ 14%]
........................................................................ [ 15%]
........................................................................ [ 15%]
........................................................................ [ 15%]
........................................................................ [ 15%]
........................................................................ [ 15%]
...........................................                              [ 15%]
tests/cupy_tests/logic_tests/test_type_test.py ......................... [ 15%]
.......                                                                  [ 15%]
tests/cupy_tests/manipulation_tests/test_add_remove.py ................. [ 15%]
.........................                                                [ 15%]
tests/cupy_tests/manipulation_tests/test_basic.py ...................... [ 15%]
.......................................................                  [ 15%]
tests/cupy_tests/manipulation_tests/test_dims.py .....x.x............... [ 15%]
................................................                         [ 15%]
tests/cupy_tests/manipulation_tests/test_join.py ....................... [ 15%]
...........................                                              [ 15%]
tests/cupy_tests/manipulation_tests/test_kind.py ...........             [ 15%]
tests/cupy_tests/manipulation_tests/test_rearrange.py .................. [ 15%]
.......................................................                  [ 15%]
tests/cupy_tests/manipulation_tests/test_shape.py ...................... [ 15%]
......................................                                   [ 15%]
tests/cupy_tests/manipulation_tests/test_split.py ..................     [ 15%]
tests/cupy_tests/manipulation_tests/test_tiling.py ..................... [ 15%]
...........                                                              [ 15%]
tests/cupy_tests/manipulation_tests/test_transpose.py .................. [ 15%]
..........                                                               [ 15%]
tests/cupy_tests/math_tests/test_arithmetic.py ......................... [ 15%]
........................................................................ [ 15%]
........................................................................ [ 16%]
........................................................................ [ 16%]
........................................................................ [ 16%]
........................................................................ [ 16%]
........................................................................ [ 16%]
........................................................................ [ 16%]
........................................................................ [ 16%]
........................................................................ [ 16%]
........................................................................ [ 16%]
........................................................................ [ 16%]
........................................................................ [ 16%]
........................................................................ [ 16%]
........................................................................ [ 16%]
........................................................................ [ 17%]
........................................................................ [ 17%]
........................................................................ [ 17%]
........................................................................ [ 17%]
........................................................................ [ 17%]
........................................................................ [ 17%]
........................................................................ [ 17%]
........................................................................ [ 17%]
........................................................................ [ 17%]
........................................................................ [ 17%]
........................................................................ [ 17%]
........................................................................ [ 17%]
........................................................................ [ 17%]
........................................................................ [ 18%]
........................................................................ [ 18%]
........................................................................ [ 18%]
........................................................................ [ 18%]
........................................................................ [ 18%]
........................................................................ [ 18%]
........................................................................ [ 18%]
........................................................................ [ 18%]
........................................................................ [ 18%]
........................................................................ [ 18%]
........................................................................ [ 18%]
........................................................................ [ 18%]
........................................................................ [ 18%]
........................................................................ [ 18%]
........................................................................ [ 19%]
........................................................................ [ 19%]
........................................................................ [ 19%]
........................................................................ [ 19%]
........................................................................ [ 19%]
........................................................................ [ 19%]
........................................................................ [ 19%]
........................................................................ [ 19%]
........................................................................ [ 19%]
........................................................................ [ 19%]
........................................................................ [ 19%]
........................................................................ [ 19%]
........................................................................ [ 19%]
........................................................................ [ 20%]
........................................................................ [ 20%]
........................................................................ [ 20%]
........................................................................ [ 20%]
........................................................................ [ 20%]
........................................................................ [ 20%]
........................................................................ [ 20%]
........................................................................ [ 20%]
........................................................................ [ 20%]
........................................................................ [ 20%]
........................................................................ [ 20%]
........................................................................ [ 20%]
........................................................................ [ 20%]
........................................................................ [ 21%]
........................................................................ [ 21%]
........................................................................ [ 21%]
........................................................................ [ 21%]
........................................................................ [ 21%]
........................................................................ [ 21%]
........................................................................ [ 21%]
........................................................................ [ 21%]
........................................................................ [ 21%]
........................................................................ [ 21%]
........................................................................ [ 21%]
........................................................................ [ 21%]
........................................................................ [ 21%]
........................................................................ [ 21%]
........................................................................ [ 22%]
........................................................................ [ 22%]
........................................................................ [ 22%]
........................................................................ [ 22%]
........................................................................ [ 22%]
........................................................................ [ 22%]
........................................................................ [ 22%]
........................................................................ [ 22%]
........................................................................ [ 22%]
........................................................................ [ 22%]
........................................................................ [ 22%]
........................................................................ [ 22%]
........................................................................ [ 22%]
........................................................................ [ 23%]
........................................................................ [ 23%]
........................................................................ [ 23%]
........................................................................ [ 23%]
........................................................................ [ 23%]
........................................................................ [ 23%]
........................................................................ [ 23%]
........................................................................ [ 23%]
........................................................................ [ 23%]
........................................................................ [ 23%]
........................................................................ [ 23%]
........................................................................ [ 23%]
........................................................................ [ 23%]
........................................................................ [ 23%]
........................................................................ [ 24%]
........................................................................ [ 24%]
........................................................................ [ 24%]
........................................................................ [ 24%]
...........................                                              [ 24%]
tests/cupy_tests/math_tests/test_explog.py .........                     [ 24%]
tests/cupy_tests/math_tests/test_floating.py .......                     [ 24%]
tests/cupy_tests/math_tests/test_hyperbolic.py ......                    [ 24%]
tests/cupy_tests/math_tests/test_matmul.py ............................. [ 24%]
........................................................................ [ 24%]
........................................................................ [ 24%]
........................................................................ [ 24%]
................................................                         [ 24%]
tests/cupy_tests/math_tests/test_misc.py ............................... [ 24%]
............................................F..F..F..................... [ 24%]
..............................                                           [ 24%]
tests/cupy_tests/math_tests/test_rational.py ....                        [ 24%]
tests/cupy_tests/math_tests/test_rounding.py ........................... [ 24%]
..........................................                               [ 24%]
tests/cupy_tests/math_tests/test_special.py ...                          [ 24%]
tests/cupy_tests/math_tests/test_sumprod.py ............................ [ 24%]
....................................................ssssssssssssssss.... [ 24%]
........................................................................ [ 25%]
........................................................................ [ 25%]
........................................................................ [ 25%]
........................................................................ [ 25%]
........................................................................ [ 25%]
........................................................................ [ 25%]
........................................................................ [ 25%]
........................................................................ [ 25%]
..............................................................           [ 25%]
tests/cupy_tests/math_tests/test_trigonometric.py ..........sssssssss    [ 25%]
tests/cupy_tests/math_tests/test_window.py ............................. [ 25%]
.....                                                                    [ 25%]
tests/cupy_tests/misc_tests/test_memory_ranges.py ................       [ 25%]
tests/cupy_tests/misc_tests/test_who.py ......                           [ 25%]
tests/cupy_tests/padding_tests/test_pad.py ............................. [ 25%]
..............................................                           [ 25%]
tests/cupy_tests/polynomial_tests/test_polynomial.py ................... [ 25%]
                                                                         [ 25%]
tests/cupy_tests/polynomial_tests/test_polyutils.py .................... [ 25%]
................                                                         [ 25%]
tests/cupy_tests/prof_tests/test_range.py ........                       [ 25%]
tests/cupy_tests/random_tests/test_bit_generator.py ssssssssssss         [ 25%]
tests/cupy_tests/random_tests/test_distributions.py .................... [ 25%]
........................................................................ [ 25%]
................................................x.x.x.x.x.x.x.x.x.x.x.x. [ 26%]
x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x......................... [ 26%]
........................................................................ [ 26%]
........................................................................ [ 26%]
........................................................................ [ 26%]
........................................................................ [ 26%]
........................................................................ [ 26%]
........................................................................ [ 26%]
........................................................................ [ 26%]
........................................................................ [ 26%]
........................................................................ [ 26%]
........................................................................ [ 26%]
......................................................................x. [ 26%]
x.x.x.x.x............................x.x.x.x.x.x........................ [ 27%]
........................................................................ [ 27%]
.........................................F.F.                            [ 27%]
tests/cupy_tests/random_tests/test_generator.py ........................ [ 27%]
.........................................s.............................. [ 27%]
........................................................................ [ 27%]
..............................s.s....................................... [ 27%]
....................................x...............................     [ 27%]
tests/cupy_tests/random_tests/test_generator_api.py ssssssssssssssssssss [ 27%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 27%]
ssssssssss                                                               [ 27%]
tests/cupy_tests/random_tests/test_init.py .                             [ 27%]
tests/cupy_tests/random_tests/test_permutations.py ...x...x............. [ 27%]
........................................................................ [ 27%]
........................................................................ [ 27%]
.............                                                            [ 27%]
tests/cupy_tests/random_tests/test_random.py .                           [ 27%]
tests/cupy_tests/random_tests/test_sample.py ...............x........x.. [ 27%]
............                                                             [ 27%]
tests/cupy_tests/sorting_tests/test_count.py ....                        [ 27%]
tests/cupy_tests/sorting_tests/test_search.py ssssssss........ssssssss.. [ 27%]
........................................................................ [ 27%]
........................................................................ [ 27%]
....................................................................     [ 28%]
tests/cupy_tests/sorting_tests/test_sort.py ............................ [ 28%]
........................................................................ [ 28%]
..........................................................x...........   [ 28%]
tests/cupy_tests/statistics_tests/test_correlation.py .................. [ 28%]
..............................F..F.xF...................                 [ 28%]
tests/cupy_tests/statistics_tests/test_histogram.py .................... [ 28%]
........................................................................ [ 28%]
........................................................................ [ 28%]
........................................................................ [ 28%]
........................................................................ [ 28%]
........................................................                 [ 28%]
tests/cupy_tests/statistics_tests/test_meanvar.py ...................... [ 28%]
........................................................................ [ 28%]
........................................................................ [ 28%]
......                                                                   [ 28%]
tests/cupy_tests/statistics_tests/test_order.py sssss................... [ 28%]
.........................                                                [ 28%]
tests/cupy_tests/testing_tests/test_array.py ........................... [ 28%]
...............................................                          [ 28%]
tests/cupy_tests/testing_tests/test_condition.py ................        [ 28%]
tests/cupy_tests/testing_tests/test_helper.py .......................... [ 29%]
........................................................................ [ 29%]
.....sssss..sssssss..ssxxxxxxxx................x..x.................     [ 29%]
tests/cupy_tests/testing_tests/test_parameterized.py ............s.s.s.s [ 29%]
....ssss......                                                           [ 29%]
tests/cupyx_tests/test_cupyx.py ..                                       [ 29%]
tests/cupyx_tests/test_lapack.py .s.s.s.s.....s.s.s.s.....s.s.s.s.....s. [ 29%]
s.s.s.............sssssssssssss                                          [ 29%]
tests/cupyx_tests/test_optimize.py sssssssss                             [ 29%]
tests/cupyx_tests/test_pinned_array.py ................................. [ 29%]
.......................................                                  [ 29%]
tests/cupyx_tests/test_rsqrt.py .                                        [ 29%]
tests/cupyx_tests/test_runtime.py s.                                     [ 29%]
tests/cupyx_tests/test_scatter.py F..                                    [ 29%]
tests/cupyx_tests/test_time.py .........                                 [ 29%]
tests/cupyx_tests/fallback_mode_tests/test_fallback.py ................. [ 29%]
........................................................................ [ 29%]
.........                                                                [ 29%]
tests/cupyx_tests/fallback_mode_tests/test_notifications.py .........    [ 29%]
tests/cupyx_tests/jit_tests/test_raw.py ................................ [ 29%]
.........                                                                [ 29%]
tests/cupyx_tests/linalg_tests/test_solve.py xxxxxxxxxxxxxxxx....ssss    [ 29%]
tests/cupyx_tests/scipy_tests/test_get_array_module.py ..                [ 29%]
tests/cupyx_tests/scipy_tests/fft_tests/test_fft.py .................... [ 29%]
........................................................................ [ 29%]
........................................................................ [ 29%]
........................................................................ [ 29%]
........................................................................ [ 29%]
........................................................................ [ 29%]
........................................................................ [ 30%]
........................................................................ [ 30%]
........................................................................ [ 30%]
........................................................................ [ 30%]
........................................................................ [ 30%]
........................................................................ [ 30%]
........................................................................ [ 30%]
........................................................................ [ 30%]
........................................................................ [ 30%]
........................................................................ [ 30%]
........................................................................ [ 30%]
........................................................................ [ 30%]
........................................................................ [ 30%]
........................................................................ [ 30%]
........................................................................ [ 31%]
........................................................................ [ 31%]
........................................................................ [ 31%]
........................................................................ [ 31%]
........................................................................ [ 31%]
........................................................................ [ 31%]
........................................................................ [ 31%]
........................................................................ [ 31%]
........................................................................ [ 31%]
........................................................................ [ 31%]
........................................................................ [ 31%]
........................................................................ [ 31%]
........................................................................ [ 31%]
........................................................................ [ 32%]
........................................................................ [ 32%]
........................................................................ [ 32%]
........................................................................ [ 32%]
........................................................................ [ 32%]
........................................................................ [ 32%]
........................................................................ [ 32%]
........................................................................ [ 32%]
........................................................................ [ 32%]
........................................................................ [ 32%]
........................................................................ [ 32%]
........................................................................ [ 32%]
........................................................................ [ 32%]
........................................................................ [ 33%]
........................................................................ [ 33%]
........................................................................ [ 33%]
........................................................................ [ 33%]
........................................................................ [ 33%]
........................................................................ [ 33%]
........................................................................ [ 33%]
........................................................................ [ 33%]
........................................................................ [ 33%]
........................................................................ [ 33%]
........................................................................ [ 33%]
........................................................................ [ 33%]
........................................................................ [ 33%]
........................................................................ [ 33%]
........................................................................ [ 34%]
........................................................................ [ 34%]
........................................................................ [ 34%]
........................................................................ [ 34%]
........................................................................ [ 34%]
........................................................................ [ 34%]
........................................................................ [ 34%]
........................................................................ [ 34%]
........................................................................ [ 34%]
........................................................................ [ 34%]
........................................................................ [ 34%]
........................................................................ [ 34%]
........................................................................ [ 34%]
........................................................................ [ 35%]
........................................................................ [ 35%]
........................................................................ [ 35%]
........................................................................ [ 35%]
........................................................................ [ 35%]
........................................................................ [ 35%]
........................................................................ [ 35%]
........................................................................ [ 35%]
........................................................................ [ 35%]
........................................................................ [ 35%]
........................................................................ [ 35%]
........................................................................ [ 35%]
........................................................................ [ 35%]
........................................................................ [ 36%]
........................................................................ [ 36%]
........................................................................ [ 36%]
........................................................................ [ 36%]
........................................................................ [ 36%]
........................................................................ [ 36%]
........................................................................ [ 36%]
........................................................................ [ 36%]
........................................................................ [ 36%]
........................................................................ [ 36%]
........................................................................ [ 36%]
........................................................................ [ 36%]
........................................................................ [ 36%]
........................................................................ [ 36%]
........................................................................ [ 37%]
........................................................................ [ 37%]
........................................................................ [ 37%]
........................................................................ [ 37%]
.................sss.........sss.........sss.........sss.........sss.... [ 37%]
.....sss.........sss.........sss.........sss.........sss.........sss.... [ 37%]
.....sss.........sss.........sss.........sss.........sss.........sss.... [ 37%]
.....sss.........sss.........sss.........sss.........sss.........sss.... [ 37%]
.....sss.........sss.........sss.........sss.........sss.........sss.... [ 37%]
.....sss.........sss.........sss.........sss.........sss.........sss.... [ 37%]
.....sss.........sss.........sss.........sss.........sss.........sss.... [ 37%]
.....sss.........sss.........sss.........sss.........sss.........sss.... [ 37%]
.....sss.........sss.........sss.........sss.........sss.........sss.... [ 37%]
.....sss.........sss.........sss.........sss.........sss.........sss.... [ 38%]
.....sss.........sss.........sss.........sss.........sss.........sss.... [ 38%]
.....sss.........sss.........sss.........sss.........sss.........sss.... [ 38%]
.....sss.........sss.........sss.........sss.........sss.........sss.... [ 38%]
.....sss.........sss.........sss.........sss.........sss.........sss.... [ 38%]
.....sss.........sss.........sss.........sss.........sss.........sss.... [ 38%]
.....sss.........sss.........sss.........sss.........sss.........sss.... [ 38%]
.....sss.........sss.........sss.........sss.........sss.........sss.... [ 38%]
.....sss.........sss.........sss.........sss.........sss.........sss.... [ 38%]
.....sss.........sss.........sss.........sss.........sss.........sss.... [ 38%]
.....sss.........sss.........sss.........sss.........sss.........sss.... [ 38%]
.....sss.........sss.........sss.........sss.........sss.........sss.... [ 38%]
.....sss.........sss.........sss.........sss.........sss.........sss.... [ 38%]
.....sss.........sss.........sss.........sss.........sss.........sss.... [ 39%]
.....sss.........sss.........sss........................................ [ 39%]
........................................................................ [ 39%]
........................................................................ [ 39%]
........................................................................ [ 39%]
........................................................................ [ 39%]
........................................................................ [ 39%]
........................................................................ [ 39%]
........................................................................ [ 39%]
........................................................................ [ 39%]
........................................................................ [ 39%]
........................................................................ [ 39%]
........................................................................ [ 39%]
........................................................................ [ 39%]
......................................................................   [ 40%]
tests/cupyx_tests/scipy_tests/fft_tests/test_helper.py .                 [ 40%]
tests/cupyx_tests/scipy_tests/fftpack_tests/test_fftpack.py ............ [ 40%]
........................................................................ [ 40%]
........................................................................ [ 40%]
........................................................................ [ 40%]
........................................................................ [ 40%]
........................................................................ [ 40%]
........................................................................ [ 40%]
........................................................................ [ 40%]
........................................................................ [ 40%]
........................................................................ [ 40%]
........................................................................ [ 40%]
........................................................................ [ 40%]
........................................................................ [ 40%]
.........................                                                [ 40%]
tests/cupyx_tests/scipy_tests/linalg_tests/test_decomp_lu.py ........... [ 40%]
..............................................FF.FF                      [ 41%]
tests/cupyx_tests/scipy_tests/linalg_tests/test_solve_triangular.py .... [ 41%]
........................................................................ [ 41%]
........................................................................ [ 41%]
........................................................................ [ 41%]
....................................................................     [ 41%]
tests/cupyx_tests/scipy_tests/linalg_tests/test_special_matrices.py .... [ 41%]
........................................................................ [ 41%]
.................................................                        [ 41%]
tests/cupyx_tests/scipy_tests/ndimage_tests/test_filters.py ...sss...... [ 41%]
sss......sss......sss......sss......sss.........sss......sss......sss... [ 41%]
...sss......sss......sss................................................ [ 41%]
...........................................................sss......sss. [ 41%]
.....sss......sss......sss......sss.........sss......sss......sss......s [ 41%]
ss......sss......sss.................................................... [ 41%]
.......................................................sss......sss..... [ 41%]
.sss......sss......sss......sss.........sss......sss......sss......sss.. [ 42%]
....sss......sss........................................................ [ 42%]
...................................................sss......sss......sss [ 42%]
......sss......sss......sss.........sss......sss......sss......sss...... [ 42%]
sss......sss............................................................ [ 42%]
...............................................sss......sss......sss.... [ 42%]
..sss......sss......sss.........sss......sss......sss......sss......sss. [ 42%]
.....sss................................................................ [ 42%]
...........................................sss......sss......sss......ss [ 42%]
s......sss......sss.........sss......sss......sss......sss......sss..... [ 42%]
.sss.................................................................... [ 42%]
.......................................sss......sss......sss......sss... [ 42%]
...sss......sss.........sss......sss......sss......sss......sss......sss [ 42%]
........................................................................ [ 42%]
...................................sss......sss......sss......sss......s [ 43%]
ss......sss.........sss......sss......sss......sss......sss......sss.... [ 43%]
........................................................................ [ 43%]
...............................sss......sss......sss......sss......sss.. [ 43%]
....sss.........sss......sss......sss......sss......sss......sss........ [ 43%]
........................................................................ [ 43%]
...........................sss......sss......sss......sss......sss...... [ 43%]
sss.........sss......sss......sss......sss......sss......sss............ [ 43%]
........................................................................ [ 43%]
.......................sss......sss......sss......sss......sss......sss. [ 43%]
........sss......sss......sss......sss......sss......sss................ [ 43%]
........................................................................ [ 43%]
...................sss......sss......sss......sss......sss......sss..... [ 43%]
....sss......sss......sss......sss......sss......sss.................... [ 44%]
........................................................................ [ 44%]
...............sss......sss......sss......sss......sss......sss......... [ 44%]
sss......sss......sss......sss......sss......sss........................ [ 44%]
........................................................................ [ 44%]
...........sss......sss......sss......sss......sss......sss.........sss. [ 44%]
.....sss......sss......sss......sss......sss............................ [ 44%]
........................................................................ [ 44%]
xxx....sss......sss......sss......sss......sss......sss....x..x.sss.x..x [ 44%]
.sss.x..x.sss......sss......sss......sss................................ [ 44%]
.....................................................x..x.............x. [ 44%]
......................................x.....x....x.....x......x.....x... [ 44%]
........................................................................ [ 44%]
........................................................................ [ 45%]
........................................................................ [ 45%]
........................................................................ [ 45%]
........................................................................ [ 45%]
........................................................................ [ 45%]
........................................................................ [ 45%]
........................................................................ [ 45%]
........................................................................ [ 45%]
........................................................................ [ 45%]
........................................................................ [ 45%]
........................................................................ [ 45%]
........................................................................ [ 45%]
........................................................................ [ 45%]
........................................................................ [ 45%]
........................................................................ [ 46%]
........................................................................ [ 46%]
........................................................................ [ 46%]
........................................................................ [ 46%]
........................................................................ [ 46%]
........................................................................ [ 46%]
........................................................................ [ 46%]
........................................................................ [ 46%]
........................................................................ [ 46%]
........................................................................ [ 46%]
........................................................................ [ 46%]
........................s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s............. [ 46%]
........................................................................ [ 46%]
.........................s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.ss.s.s.s.s.s. [ 47%]
s.s.s.s.s.s.s.s.s.s.s.s................................................. [ 47%]
.............................................................s.s.s.s.s.s [ 47%]
.s.s.s.s.s.s.s.s.s.s.s.ss.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s............. [ 47%]
........................................................................ [ 47%]
.........................s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.ss.s.s.s.s.s. [ 47%]
s.s.s.s.s.s.s.s.s.s.s.s................................................. [ 47%]
.............................................................s.s.s.s.s.s [ 47%]
.s.s.s.s.s.s.s.s.s.s.s.ss.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s............. [ 47%]
........................................................................ [ 47%]
.........................s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.ss.s.s.s.s.s. [ 47%]
s.s.s.s.s.s.s.s.s.s.s.s................................................. [ 47%]
.............................................................s.s.s.s.s.s [ 47%]
.s.s.s.s.s.s.s.s.s.s.s.ss.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s............. [ 47%]
........................................................................ [ 48%]
.........................s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.ss.s.s.s.s.s. [ 48%]
s.s.s.s.s.s.s.s.s.s.s.s................................................. [ 48%]
.............................................................s.s.s.s.s.s [ 48%]
.s.s.s.s.s.s.s.s.s.s.s.ssss..sss..sss............sss..sss..sss.......... [ 48%]
..sss..sss..sss............sss..sss..sss............sss..sss..sss....... [ 48%]
.....sss..sss..sss............sss..sss..sss............sss..sss..sss.... [ 48%]
........sss..sss..sss............sss..sss..sss............sss..sss..sss. [ 48%]
...........sss..sss..sss................................................ [ 48%]
........................................................................ [ 48%]
....................................                                     [ 48%]
tests/cupyx_tests/scipy_tests/ndimage_tests/test_fourier.py ............ [ 48%]
........................................................................ [ 48%]
........................................................................ [ 48%]
........................................................................ [ 49%]
........................................................................ [ 49%]
........................................................................ [ 49%]
........................................................................ [ 49%]
........................................................................ [ 49%]
........................................                                 [ 49%]
tests/cupyx_tests/scipy_tests/ndimage_tests/test_interpolation.py ...... [ 49%]
........................................................................ [ 49%]
........................................................................ [ 49%]
........................................................................ [ 49%]
........................................................................ [ 49%]
........................................................................ [ 49%]
........................................................................ [ 49%]
........................................................................ [ 49%]
........................................................................ [ 49%]
........................................................................ [ 50%]
........................................................................ [ 50%]
........................................................................ [ 50%]
........................................................................ [ 50%]
........................................................................ [ 50%]
........................................................................ [ 50%]
........................................................................ [ 50%]
........................................................................ [ 50%]
........................................................................ [ 50%]
................FF...................................................... [ 50%]
........................................................................ [ 50%]
........................................................................ [ 50%]
........................................................................ [ 50%]
........................................................................ [ 51%]
........................................................................ [ 51%]
........................................................................ [ 51%]
........................................................................ [ 51%]
........................................................................ [ 51%]
........................................................................ [ 51%]
........................................................................ [ 51%]
........................................................................ [ 51%]
........................................................................ [ 51%]
........................................................................ [ 51%]
........................................................................ [ 51%]
........................................................................ [ 51%]
........................................................................ [ 51%]
........................................................................ [ 51%]
........................................................................ [ 52%]
........................................................................ [ 52%]
........................................................................ [ 52%]
........................................................................ [ 52%]
........................................................................ [ 52%]
........................................................................ [ 52%]
........................................................................ [ 52%]
........................................................................ [ 52%]
........................................................................ [ 52%]
........................................................................ [ 52%]
........................................................................ [ 52%]
........................................................................ [ 52%]
........................................................................ [ 52%]
........................................................................ [ 53%]
........................................................................ [ 53%]
........................................................................ [ 53%]
........................................................................ [ 53%]
........................................................................ [ 53%]
........................................................................ [ 53%]
........................................................................ [ 53%]
........................................................................ [ 53%]
........................................................................ [ 53%]
........................................................................ [ 53%]
........................................................................ [ 53%]
........................................................................ [ 53%]
........................................................................ [ 53%]
........................................................................ [ 54%]
........................................................................ [ 54%]
........................................................................ [ 54%]
........................................................................ [ 54%]
........................................................................ [ 54%]
........................................................................ [ 54%]
........................................................................ [ 54%]
........................................................................ [ 54%]
........................................................................ [ 54%]
........................................................................ [ 54%]
........................................................................ [ 54%]
........................................................................ [ 54%]
........................................................................ [ 54%]
........................................................................ [ 54%]
........................................................................ [ 55%]
........................................................................ [ 55%]
........................................................................ [ 55%]
........................................................................ [ 55%]
........................................................................ [ 55%]
........................................................................ [ 55%]
........................................................................ [ 55%]
........................................................................ [ 55%]
........................................................................ [ 55%]
........................................................................ [ 55%]
........................................................................ [ 55%]
........................................................................ [ 55%]
........................................................................ [ 55%]
........................................................................ [ 56%]
........................................................................ [ 56%]
........................................................................ [ 56%]
........................................................................ [ 56%]
........................................................................ [ 56%]
........................................................................ [ 56%]
........................................................................ [ 56%]
........................................................................ [ 56%]
........................................................................ [ 56%]
........................................................................ [ 56%]
........................................................................ [ 56%]
........................................................................ [ 56%]
........................................................................ [ 56%]
........................................................................ [ 56%]
........................................................................ [ 57%]
........................................................................ [ 57%]
........................................................................ [ 57%]
........................................................................ [ 57%]
........................................................................ [ 57%]
........................................................................ [ 57%]
........................................................................ [ 57%]
........................................................................ [ 57%]
........................................................................ [ 57%]
........................................................................ [ 57%]
........................................................................ [ 57%]
...............................x...x.x...x.x...x.x...x.............x...x [ 57%]
.x...x.x...x.x...x.............x...x.x...x.x...x.x...x.............x...x [ 57%]
.x...x.x...x.x...x.............x...x.x...x.x...x.x...x.............x...x [ 58%]
.x...x.x...x.x...x.............x...x.x...x.x...x.x...x.............x...x [ 58%]
.x...x.x...x.x...x.............x...x.x...x.x...x.x...x.............x...x [ 58%]
.x...x.x...x.x...x.............x...x.x...x.x...x.x...x.............x...x [ 58%]
.x...x.x...x.x...x.............x...x.x...x.x...x.x...x.............x...x [ 58%]
.x...x.x...x.x...x.............x...x.x...x.x...x.x...x.............x...x [ 58%]
.x...x.x...x.x...x.............x...x.x...x.x...x.x...x.............x...x [ 58%]
.x...x.x...x.x...x.............x...x.x...x.x...x.x...x.............x...x [ 58%]
.x...x.x...x.x...x.............x...x.x...x.x...x.x...x.............x...x [ 58%]
.x...x.x...x.x...x.............x...x.x...x.x...x.x...x.............x...x [ 58%]
.x...x.x...x.x...x.............x...x.x...x.x...x.x...x.............x...x [ 58%]
.x...x.x...x.x...x.............x...x.x...x.x...x.x...x.............x...x [ 58%]
.x...x.x...x.x...x.............x...x.x...x.x...x.x...x.............x...x [ 58%]
.x...x.x...x.x...x.............x...x.x...x.x...x.x...x.............x...x [ 59%]
.x...x.x...x.x...x...................................................... [ 59%]
........................................................................ [ 59%]
........................................................................ [ 59%]
........................................................................ [ 59%]
........................................................................ [ 59%]
........................................................................ [ 59%]
........................................................................ [ 59%]
........................................................................ [ 59%]
........................................................................ [ 59%]
........................................................................ [ 59%]
........................................................................ [ 59%]
........................................................................ [ 59%]
........................................................................ [ 59%]
........................................................................ [ 60%]
........................................................................ [ 60%]
........................................................................ [ 60%]
.....................sssssssssssssssssssssssssssssssssssssssssssssssssss [ 60%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 60%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 60%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 60%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 60%]
sssssssssssssssssssssssssssssssssssssssssssssss......................... [ 60%]
........................................................................ [ 60%]
........................................................................ [ 60%]
........................................................................ [ 60%]
..................................................x.....x.....x.....x... [ 60%]
..x.....x.....x.....x.....x.....x.....x.....x.......x........x..x..x.... [ 61%]
....s................................................................... [ 61%]
........................................................................ [ 61%]
........................................................................ [ 61%]
........................................................................ [ 61%]
........................................................................ [ 61%]
........................................................................ [ 61%]
........................................................................ [ 61%]
........................................................................ [ 61%]
........................................................................ [ 61%]
........................................................................ [ 61%]
................................x.....x....................x.....x...... [ 61%]
..............x.....x....................x.....x....................x... [ 61%]
..x....................x.....x....................x.....x............... [ 62%]
.....x.....x............................................................ [ 62%]
........................................................................ [ 62%]
........................................................................ [ 62%]
.................................................................s...... [ 62%]
........................................................................ [ 62%]
........................................................................ [ 62%]
........................................................................ [ 62%]
......................................FF..........FF....FF.............. [ 62%]
........FF....FF..........FF....FF......................FFss............ [ 62%]
........................................................................ [ 62%]
........................................................................ [ 62%]
........................................................................ [ 62%]
........................................................................ [ 62%]
........................................................................ [ 63%]
........................................................................ [ 63%]
........................................................................ [ 63%]
........................................................................ [ 63%]
........................................................................ [ 63%]
........................................................................ [ 63%]
....................................ssssssssssssssssssssssssssssssssssss [ 63%]
ssssssssssss                                                             [ 63%]
tests/cupyx_tests/scipy_tests/ndimage_tests/test_measurements.py ....... [ 63%]
........................................................................ [ 63%]
........................................................................ [ 63%]
........................................................................ [ 63%]
........................................................................ [ 63%]
........................................................................ [ 63%]
........................................................................ [ 63%]
........................................................................ [ 64%]
........................................................................ [ 64%]
........................................................................ [ 64%]
........................................................................ [ 64%]
........................................................................ [ 64%]
........................................................................ [ 64%]
........................................................................ [ 64%]
........................................................................ [ 64%]
........................................................................ [ 64%]
........................................................................ [ 64%]
........................................................................ [ 64%]
........................................................................ [ 64%]
........................................................................ [ 64%]
........................................................................ [ 65%]
........................................................................ [ 65%]
........................................................................ [ 65%]
........................................................................ [ 65%]
........................................................................ [ 65%]
........................................................................ [ 65%]
........................................................................ [ 65%]
........................................................................ [ 65%]
........................................................................ [ 65%]
........................................................................ [ 65%]
........................................................................ [ 65%]
........................................................................ [ 65%]
........................................................................ [ 65%]
........................................................................ [ 65%]
........................................................................ [ 66%]
........................................................................ [ 66%]
........................................................................ [ 66%]
........................................................................ [ 66%]
...................xx..........xx..........xx..........xx..........xx... [ 66%]
...................xx..................................xx............... [ 66%]
...................xx..........xx..........xx..........xx..........xx... [ 66%]
...................xx..................................xx............... [ 66%]
........................................................................ [ 66%]
........................................................................ [ 66%]
.................                                                        [ 66%]
tests/cupyx_tests/scipy_tests/ndimage_tests/test_morphology.py ......... [ 66%]
......................s....s....s..s....s....s.......................... [ 66%]
..........s....s....s..s....s....s....................................s. [ 66%]
...s....s..s....s....s....................................s....s....s..s [ 66%]
....s....s....................................s....s....s..s....s....s.. [ 67%]
..................................s....s....s..s....s....s.............. [ 67%]
......................s....s....s..s....s....s.......................... [ 67%]
..........s....s....s..s....s....s....................................s. [ 67%]
...s....s..s....s....s....................................s....s....s..s [ 67%]
....s....s....................................s....s....s..s....s....s.. [ 67%]
..................................s....s....s..s....s....s.............. [ 67%]
......................s....s....s..s....s....s.......................... [ 67%]
..........s....s....s..s....s....s....................................s. [ 67%]
...s....s..s....s....s....................................s....s....s..s [ 67%]
....s....s....................................s....s....s..s....s....s.. [ 67%]
..................................s....s....s..s....s....s.............. [ 67%]
......................s....s....s..s....s....s.......................... [ 67%]
..........s....s....s..s....s....s....................................s. [ 68%]
...s....s..s....s....s....................................s....s....s..s [ 68%]
....s....s....................................s....s....s..s....s....s.. [ 68%]
..................................s....s....s..s....s....s.............. [ 68%]
........................................................................ [ 68%]
........................................................................ [ 68%]
........................................................................ [ 68%]
........................................................................ [ 68%]
........................................................................ [ 68%]
........................................................................ [ 68%]
........................................................................ [ 68%]
.......................................................................s [ 68%]
.s.s.............s.s.s.............s.s.s.............s.s.s.............s [ 68%]
.s.s.............s.s.s.............s.s.s.............s.s.s.............s [ 69%]
.s.s.............s.s.s.............s.s.s.............s.s.s.............s [ 69%]
.s.s.............s.s.s.............s.s.s.............s.s.s.............s [ 69%]
.s.s.............s.s.s.............s.s.s.............s.s.s.............s [ 69%]
.s.s.............s.s.s.............s.s.s.............s.s.s.............s [ 69%]
.s.s.............s.s.s.............s.s.s.............s.s.s.............s [ 69%]
.s.s.............s.s.s.............s.s.s.............s.s.s.............s [ 69%]
.s.s.............s.s.s.............s.s.s.............s.s.s.............s [ 69%]
.s.s.............s.s.s.............s.s.s.............s.s.s.............s [ 69%]
.s.s.............s.s.s.............s.s.s.............s.s.s.............s [ 69%]
.s.s.............s.s.s.............s.s.s.............s.s.s.............s [ 69%]
.s.s.............s.s.s.............s.s.s.............s.s.s.............s [ 69%]
.s.s.............s.s.s.............s.s.s.............s.s.s.............s [ 69%]
.s.s.............s.s.s.............s.s.s.............s.s.s.............s [ 69%]
.s.s.............s.s.s.............s.s.s.............s.s.s.............s [ 70%]
.s.s.............s.s.s.............s.s.s.............s.s.s.............s [ 70%]
.s.s.............s.s.s.............s.s.s.............s.s.s.............s [ 70%]
.s.s.............s.s.s.............s.s.s.............s.s.s.............s [ 70%]
.s.s.............s.s.s.............s.s.s.............s.s.s.............s [ 70%]
.s.s.............s.s.s.............s.s.s.............s.s.s.............s [ 70%]
.s.s.............s.s.s.............s.s.s.............s.s.s.............s [ 70%]
.s.s.............s.s.s.............s.s.s.............s.s.s.............s [ 70%]
.s.s.............s.s.s.............s.s.s.............s.s.s.............s [ 70%]
.s.s.............s.s.s.............s.s.s.............s.s.s.............s [ 70%]
.s.s.............s.s.s.............s.s.s.............s.s.s.............s [ 70%]
.s.s.............s.s.s.............s.s.s.............s.s.s.............s [ 70%]
.s.s.............s.s.s.............s.s.s.............s.s.s.............s [ 70%]
.s.s.............s.s.s.............s.s.s.............s.s.s.............s [ 71%]
.s.s.............s.s.s.............s.s.s.............s.s.s.............s [ 71%]
.s.s.............s.s.s.............s.s.s.............s.s.s.............s [ 71%]
.s.s.............s.s.s.............s.s.s.............s.s.s.............s [ 71%]
.s.s.............s.s.s.............s.s.s.............s.s.s.............s [ 71%]
.s.s.............s.s.s.............s.s.s.............s.s.s.............s [ 71%]
.s.s.............s.s.s.............s.s.s.............s.s.s.............s [ 71%]
.s.s.............s.s.s.............s.s.s.............s.s.s.............. [ 71%]
........................................................................ [ 71%]
......s....s....s....s....s....s....s....s....s....s....s....s......s... [ 71%]
.s....s....s....s....s....s....s....s....s....s....s.................... [ 71%]
..........................................s....s....s....s....s....s.... [ 71%]
s....s....s....s....s....s......s....s....s....s....s....s....s....s.... [ 71%]
s....s....s....s........................................................ [ 72%]
......s....s....s....s....s....s....s....s....s....s....s....s......s... [ 72%]
.s....s....s....s....s....s....s....s....s....s....s.................... [ 72%]
..........................................s....s....s....s....s....s.... [ 72%]
s....s....s....s....s....s......s....s....s....s....s....s....s....s.... [ 72%]
s....s....s....s........................................................ [ 72%]
......s....s....s....s....s....s....s....s....s....s....s....s......s... [ 72%]
.s....s....s....s....s....s....s....s....s....s....s.................... [ 72%]
..........................................s....s....s....s....s....s.... [ 72%]
s....s....s....s....s....s......s....s....s....s....s....s....s....s.... [ 72%]
s....s....s....s........................................................ [ 72%]
......s....s....s....s....s....s....s....s....s....s....s....s......s... [ 72%]
.s....s....s....s....s....s....s....s....s....s....s.................... [ 72%]
..........................................s....s....s....s....s....s.... [ 72%]
s....s....s....s....s....s......s....s....s....s....s....s....s....s.... [ 73%]
s....s....s....s........................................................ [ 73%]
......s....s....s....s....s....s....s....s....s....s....s....s......s... [ 73%]
.s....s....s....s....s....s....s....s....s....s....s.................... [ 73%]
..........................................s....s....s....s....s....s.... [ 73%]
s....s....s....s....s....s......s....s....s....s....s....s....s....s.... [ 73%]
s....s....s....s........................................................ [ 73%]
......s....s....s....s....s....s....s....s....s....s....s....s......s... [ 73%]
.s....s....s....s....s....s....s....s....s....s....s.................... [ 73%]
..........................................s....s....s....s....s....s.... [ 73%]
s....s....s....s....s....s......s....s....s....s....s....s....s....s.... [ 73%]
s....s....s....s........................................................ [ 73%]
........................................................................ [ 73%]
........................................................................ [ 74%]
........................................................................ [ 74%]
........................................................ssssssss........ [ 74%]
........................................................ssssssss........ [ 74%]
........................................................ssssssss........ [ 74%]
........................................................ssssssss........ [ 74%]
........................................................................ [ 74%]
........................................................................ [ 74%]
........................................................................ [ 74%]
........................................................................ [ 74%]
........................................................................ [ 74%]
........................................................................ [ 74%]
........................................................................ [ 74%]
........................................................................ [ 74%]
........................................................................ [ 75%]
........................................................................ [ 75%]
........................................................................ [ 75%]
........................................................................ [ 75%]
........................................................................ [ 75%]
........................................................................ [ 75%]
                                                                         [ 75%]
tests/cupyx_tests/scipy_tests/signal_tests/test_bsplines.py ............ [ 75%]
                                                                         [ 75%]
tests/cupyx_tests/scipy_tests/signal_tests/test_signaltools.py ......... [ 75%]
........................................................................ [ 75%]
.....................................................Fxxxxxxxxx......... [ 75%]
...........................xxxxxxxxxxxx................................. [ 75%]
...F........xxx..x.x..x.x..x.x..x.x..x.x..x.x..x.x..x.x..x.x..x.x..x.x.. [ 75%]
x.x..................................................................... [ 75%]
........................................................................ [ 75%]
........................................................................ [ 75%]
........................................................................ [ 76%]
........................................................................ [ 76%]
..................ssssssssssssssssss                                     [ 76%]
tests/cupyx_tests/scipy_tests/sparse_tests/test_base.py .......          [ 76%]
tests/cupyx_tests/scipy_tests/sparse_tests/test_construct.py ........... [ 76%]
........................................................................ [ 76%]
................................s.......s.......s.......s.......s....... [ 76%]
s....................................................................... [ 76%]
...........xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx [ 76%]
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx [ 76%]
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx....................................x [ 76%]
xxxxxxxxxxxxxxxxxxxxxxx................................................. [ 76%]
...................................xxxxxxxxxxxx......................... [ 76%]
...........xxxxxxxxxxxxxxxxxxxxxxxx..................................... [ 76%]
...............................................xxxxxxxxxxxx............. [ 76%]
.......................xxxxxxxxxxxxxxxxxxxxxxxx......................... [ 77%]
...........................................................xxxxxxxxxxxxx [ 77%]
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx [ 77%]
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx [ 77%]
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx [ 77%]
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx [ 77%]
xxxxxxxxxxxxxxxxxxxxxxx....................................xxxxxxxxxxxxx [ 77%]
xxxxxxxxxxx............................................................. [ 77%]
.......................xxxxxxxxxxxx....................................x [ 77%]
xxxxxxxxxxxxxxxxxxxxxxx................................................. [ 77%]
...................................xxxxxxxxxxxx......................... [ 77%]
...........xxxxxxxxxxxxxxxxxxxxxxxx..................................... [ 77%]
...............................................xxxxxxxxxxxx............. [ 77%]
.......................xxxxxxxxxxxxxxxxxxxxxxxx......................... [ 77%]
...........................................................xxxxxxxxxxxx. [ 78%]
...................................xxxxxxxxxxxxxxxxxxxxxxxx............. [ 78%]
.......................................................................x [ 78%]
xxxxxxxxxxx....................................xxxxxxxxxxxxxxxxxxxxxxxx. [ 78%]
........................................................................ [ 78%]
...........xxxxxxxxxxxx....................................xxxxxxxxxxxxx [ 78%]
xxxxxxxxxxx............................................................. [ 78%]
.......................xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx [ 78%]
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx............. [ 78%]
.......................................................................x [ 78%]
xxxxxxxxxxx............................................................. [ 78%]
.......................xxxxxxxxxxxx..................................... [ 78%]
...............................................xxxxxxxxxxxx............. [ 78%]
.......................................................................x [ 79%]
xxxxxxxxxxx............................................................. [ 79%]
.......................xxxxxxxxxxxx..................................... [ 79%]
...............................................xxxxxxxxxxxx............. [ 79%]
........................................................................ [ 79%]
..                                                                       [ 79%]
tests/cupyx_tests/scipy_tests/sparse_tests/test_coo.py ................. [ 79%]
........................................................................ [ 79%]
........................................................................ [ 79%]
........................................................................ [ 79%]
........................................................................ [ 79%]
........................................................................ [ 79%]
........................................................................ [ 79%]
........................................................................ [ 79%]
........................................................................ [ 79%]
........................................................................ [ 80%]
........................................................................ [ 80%]
........................................................................ [ 80%]
........................................................................ [ 80%]
........................................................................ [ 80%]
........................................................................ [ 80%]
........................................................................ [ 80%]
........................................................................ [ 80%]
........................................................................ [ 80%]
........................................................................ [ 80%]
........................................................................ [ 80%]
........................................................................ [ 80%]
........................................................................ [ 80%]
........................................................................ [ 81%]
........................................................................ [ 81%]
........................................................................ [ 81%]
........................................................................ [ 81%]
.............................................                            [ 81%]
tests/cupyx_tests/scipy_tests/sparse_tests/test_csc.py .............x... [ 81%]
......................x.........................x....................... [ 81%]
..x..................................................................... [ 81%]
.....................x..xx...............s......x.x..................... [ 81%]
................................x..xx...............s......x.x.......... [ 81%]
.................................xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxsxxxxxxxx [ 81%]
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx..........x..xx............. [ 81%]
..s......x.x...........................................xxxxxxxxxxxxxxxxx [ 81%]
xxxxxxxxxxxxxsxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx...... [ 81%]
....x..xx...............s......x.x...................................... [ 81%]
...............x..xx...............s......x.x........................... [ 82%]
................xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxsxxxxxxxxxxxxxxxxxxxxxxxxx [ 82%]
xxxxxxxxxxxxxxxxxxxxxxxxxxx..........x..xx...............s......x.x..... [ 82%]
......................................xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxsxxx [ 82%]
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx..........x..xx........ [ 82%]
.......s......x.x.....................................................x. [ 82%]
.xx...............s......x.x...........................................x [ 82%]
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxsxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx [ 82%]
xxxxxxxxxx..........x..xx...............s......x.x...................... [ 82%]
.....................xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxsxxxxxxxxxxxxxxxxxxxx [ 82%]
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx..........x..xx...............s......x.x [ 82%]
.....................................................x..xx.............. [ 82%]
.s......x.x...........................................xxxxxxxxxxxxxxxxxx [ 82%]
xxxxxxxxxxxxsxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx....... [ 83%]
...x..xx...............s......x.x....................................... [ 83%]
....xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxsxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx [ 83%]
xxxxxxxxxxxxxxxxxxxxxxxxxxx............xxxxxxxxxxxxxxxxxxxxxxxx......... [ 83%]
...........ss....ss..................................................... [ 83%]
....xxx.........xxx.........xxx.........xxx............................. [ 83%]
........................................................................ [ 83%]
.................................................................        [ 83%]
tests/cupyx_tests/scipy_tests/sparse_tests/test_csr.py .............x... [ 83%]
......................x.........................x....................... [ 83%]
..x..................................................................... [ 83%]
...............................................s........................ [ 83%]
......x................................................................. [ 83%]
....s..............................x.................................xxx [ 83%]
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxsxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx [ 83%]
xxxxxxxxxxxxxxxxxxxxxxxxxx....................................s......... [ 84%]
.....................x.................................xxxxxxxxxxxxxxxxx [ 84%]
xxxxxxxxxxxxxxxxxxxsxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx [ 84%]
xxxxxxxxxxxx....................................s....................... [ 84%]
.......x................................................................ [ 84%]
.....s..............................x.................................xx [ 84%]
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxsxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx [ 84%]
xxxxxxxxxxxxxxxxxxxxxxxxxxx....................................s........ [ 84%]
......................x.................................xxxxxxxxxxxxxxxx [ 84%]
xxxxxxxxxxxxxxxxxxxxsxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx [ 84%]
xxxxxxxxxxxxx....................................s...................... [ 84%]
........x............................................................... [ 84%]
......s..............................x.................................x [ 84%]
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxsxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx [ 85%]
xxxxxxxxxxxxxxxxxxxxxxxxxxxx....................................s....... [ 85%]
.......................x.................................xxxxxxxxxxxxxxx [ 85%]
xxxxxxxxxxxxxxxxxxxxxsxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx [ 85%]
xxxxxxxxxxxxxx....................................s..................... [ 85%]
.........x.............................................................. [ 85%]
.......s..............................x................................. [ 85%]
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxsxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx [ 85%]
xxxxxxxxxxxxxxxxxxxxxxxxxxxxx....................................s...... [ 85%]
........................x.................................xxxxxxxxxxxxxx [ 85%]
xxxxxxxxxxxxxxxxxxxxxxsxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx [ 85%]
xxxxxxxxxxxxxxx........................................................x [ 85%]
xxxxxxxxxxxxxxxxxxxxxxx................................................x [ 85%]
xxxxxxxxxxxxxxxxxxxxxxx........ss....ss................................. [ 86%]
.......................x...x.......x...x.......x...x.......x...x........ [ 86%]
........................................................................ [ 86%]
.......................................................................s [ 86%]
sssssssssss............................................................. [ 86%]
........................................................................ [ 86%]
........................................................................ [ 86%]
........................................................................ [ 86%]
........................................................................ [ 86%]
........................................................................ [ 86%]
........................................................................ [ 86%]
........................................................................ [ 86%]
........................................................................ [ 86%]
........................................................................ [ 86%]
........................................................................ [ 87%]
........................................................................ [ 87%]
........................................................................ [ 87%]
........................................................................ [ 87%]
........................................................................ [ 87%]
........................................................................ [ 87%]
........................................................................ [ 87%]
........................................................................ [ 87%]
........................................................................ [ 87%]
........................................................................ [ 87%]
........................................................................ [ 87%]
........................................................................ [ 87%]
........................................................................ [ 87%]
........................................................................ [ 88%]
........................................................................ [ 88%]
........................................................................ [ 88%]
........................................................................ [ 88%]
........................................................................ [ 88%]
..........s..........s..........s..........s............................ [ 88%]
......................................................................s. [ 88%]
.........s..........s..........s........................................ [ 88%]
..........................................................s..........s.. [ 88%]
........s..........s.................................................... [ 88%]
..............................................s..........s..........s... [ 88%]
.......s................................................................ [ 88%]
..................................s..........s..........s..........s.... [ 88%]
........................................................................ [ 89%]
......................s..........s..........s..........s................ [ 89%]
........................................................................ [ 89%]
..........s..........s..........s..........s............................ [ 89%]
......................................................................s. [ 89%]
.........s..........s..........s........................................ [ 89%]
..........................................................s..........s.. [ 89%]
........s..........s.................................................... [ 89%]
..............................................s..........s..........s... [ 89%]
.......s................................................................ [ 89%]
..................................s..........s..........s..........s.... [ 89%]
........................................................................ [ 89%]
......................s..........s..........s..........s................ [ 89%]
........................................................................ [ 89%]
..........s..........s..........s..........s............................ [ 90%]
......................................................................s. [ 90%]
.........s..........s..........s........................................ [ 90%]
..........................................................s..........s.. [ 90%]
........s..........s.................................................... [ 90%]
..............................................s..........s..........s... [ 90%]
.......s.................                                                [ 90%]
tests/cupyx_tests/scipy_tests/sparse_tests/test_dia.py ................. [ 90%]
........................................................................ [ 90%]
......xxxxxxxxxxxxxxx...............xxxxxxxxxxxxxxx...............xxxxxx [ 90%]
xxxxxxxxx...............xxxxxxxxxxxxxxx............xxxxxxxxxxxx......... [ 90%]
...............xxxxxxxxxxxx..                                            [ 90%]
tests/cupyx_tests/scipy_tests/sparse_tests/test_extract.py ............. [ 90%]
........................................................................ [ 90%]
.......................                                                  [ 90%]
tests/cupyx_tests/scipy_tests/sparse_tests/test_index.py ............... [ 90%]
........................................................................ [ 90%]
........................................................................ [ 91%]
........................................................................ [ 91%]
........................................................................ [ 91%]
........................................................................ [ 91%]
........................................................................ [ 91%]
........................................................................ [ 91%]
........................................................................ [ 91%]
........................................................................ [ 91%]
........................................................................ [ 91%]
........................................................................ [ 91%]
........................................................................ [ 91%]
........................................................................ [ 91%]
........................................................................ [ 91%]
........................................................................ [ 91%]
........................................................................ [ 92%]
........................................................................ [ 92%]
........................................................................ [ 92%]
........................................................................ [ 92%]
........................................................................ [ 92%]
........................................................................ [ 92%]
........................................................................ [ 92%]
........................................................................ [ 92%]
........................................................................ [ 92%]
........................................................................ [ 92%]
........................................................................ [ 92%]
........................................................................ [ 92%]
........................................................................ [ 92%]
........................................................................ [ 93%]
........................................................................ [ 93%]
........................................................................ [ 93%]
........................................................................ [ 93%]
.....................................sss...sss.......................... [ 93%]
........................................................................ [ 93%]
.................................................sss...sss...sss...sss.. [ 93%]
.sss...sss...sss...sss.......................................ssssss..... [ 93%]
.....................................ssssss............................. [ 93%]
.............ssssss..........................................ssssss..... [ 93%]
.....................................ssssss............................. [ 93%]
.............ssssss..........................................ssssss..... [ 93%]
.....................................ssssss............................. [ 93%]
.sssssssss...sssssssss...sssssssss...sssssssss...sssssssss.............. [ 93%]
.........................sss...sss...................................... [ 94%]
........................................................................ [ 94%]
.....................................sss...sss...sss...sss...sss...sss.. [ 94%]
.sss...sss.......................................ssssss................. [ 94%]
.........................ssssss......................................... [ 94%]
.ssssss..........................................ssssss................. [ 94%]
.........................ssssss......................................... [ 94%]
.ssssss..........................................ssssss................. [ 94%]
.........................ssssss..............................sssssssss.. [ 94%]
.sssssssss...sssssssss...sssssssss...sssssssss...................x...... [ 94%]
.....x.......sss...sss.................................................. [ 94%]
....xxx.........xxx.................................xxx.........xxx..... [ 94%]
.........................sss...sss...sss...sss...sss...sss...sss...sss.. [ 94%]
...................xxx.........xxx...ssssss........................xxxxx [ 95%]
x......xxxxxxssssss..........................................ssssss..... [ 95%]
.....................................ssssss............................. [ 95%]
.............ssssss........................xxx.........xxx...ssssss..... [ 95%]
.....................................ssssss............................. [ 95%]
.............ssssss..............................sssssssss...sssssssss.. [ 95%]
.sssssssss...sssssssss...sssssssss...................x...........x...... [ 95%]
.sss...sss......................................................xxx..... [ 95%]
....xxx...xxx...........................xxx.........xxx...xxx........... [ 95%]
.............sss...sss...sss...sss...sss...sss...sss...sss.............. [ 95%]
.......xxx.........xxx...ssssss........................xxx.........xxx.. [ 95%]
.ssssss..........................................ssssss................. [ 95%]
.........................ssssss........................xxx.........xxx.. [ 95%]
.ssssss........................xxx.........xxx...ssssss................. [ 96%]
.......xxx.........xxx...ssssss........................xxx.........xxx.. [ 96%]
.ssssss..............................sssssssss...sssssssss...sssssssss.. [ 96%]
.sssssssss...sssssssss.................................................. [ 96%]
........................................................................ [ 96%]
........................................................................ [ 96%]
.....................                                                    [ 96%]
tests/cupyx_tests/scipy_tests/sparse_tests/test_linalg.py ssssssss.x.x.x [ 96%]
..x..x.x.x..x..x.x.x..x..x.x.x..x..x.x.x..x..x.x.x..x..x.x.x..x..x.x.x.. [ 96%]
x..x.x.x..x..x.x.x..x..x.x.x..x..x.x.x..x.xx..xxxxxxxxxx....xx..xxxxxxxx [ 96%]
xx....xx..xxxxxxxxxx....xx..xxxxxxxxxx.................................. [ 96%]
..........................................xx..xxxxxxxxxx....xx..xxxxxxxx [ 96%]
xx....xx..xxxxxxxxxx....xx..xxxxxxxxxx.................................. [ 96%]
................................................................xxxxxx.. [ 96%]
xxxx.................................................................... [ 96%]
..........xxxxxx..xxxx.................................................. [ 97%]
............................xxxxxx..xxxx................................ [ 97%]
..............................................xxxxxx..xxxx.............. [ 97%]
................................................................xxxxxx.. [ 97%]
xxxx.................................................................... [ 97%]
..........xxxxxx..xxxx.................................................. [ 97%]
............................xxxxxx..xxxx................................ [ 97%]
..............................................xxxxxx..xxxx.............. [ 97%]
................................................................xxxxxx.. [ 97%]
xxxx.................................................................... [ 97%]
..........xxxxxx..xxxx.................................................. [ 97%]
............................xxxxxx..xxxx................................ [ 97%]
..............................................xxxxxx..xxxx.............. [ 97%]
................................................................xxxxxx.. [ 98%]
xxxx.................................................................... [ 98%]
..........xxxxxx..xxxx.................................................. [ 98%]
............................xxxxxx..xxxx................................ [ 98%]
..............................................xxxxxx..xxxx.............. [ 98%]
..........................................ssssssss...................... [ 98%]
........................................................................ [ 98%]
..xxxxxxxxxxxxxxxxxxxxxxxx.............................................. [ 98%]
..xxxxxxxxxxxxxxxxxxxxxxxxss..ss..ss..ss..ss..ss..xxxxxxxxxxxxxxxxxxxxxx [ 98%]
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx...................... [ 98%]
..................................................xxxxxxxxxxxxxxxxxxxxxx [ 98%]
xxxxxxxxxxxxxxs.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s....................... [ 98%]
..........................................xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx [ 98%]
xx...................................................................... [ 98%]
...........................sss.sssssssssssssssssssssssssss.............. [ 99%]
........................................................................ [ 99%]
..........................................xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx [ 99%]
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx...................................... [ 99%]
........................................................................ [ 99%]
........................................................................ [ 99%]
...........sssssss.sssssssssssssssssssssssssssssssssssssssssssssssssssss [ 99%]
ss...................................................................... [ 99%]
..ssssssss.sssssssssssssssxxxxxxxxxxxxxxx                                [ 99%]
tests/cupyx_tests/scipy_tests/sparse_tests/csgraph_tests/test_traversal.py s [ 99%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 99%]
sssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss  [ 99%]
tests/cupyx_tests/scipy_tests/special_tests/test_bessel.py ............  [ 99%]
tests/cupyx_tests/scipy_tests/special_tests/test_convex_analysis.py .... [ 99%]
.                                                                        [ 99%]
tests/cupyx_tests/scipy_tests/special_tests/test_digamma.py .....        [ 99%]
tests/cupyx_tests/scipy_tests/special_tests/test_erf.py ............     [ 99%]
tests/cupyx_tests/scipy_tests/special_tests/test_gamma.py ....           [ 99%]
tests/cupyx_tests/scipy_tests/special_tests/test_gammaln.py ....         [ 99%]
tests/cupyx_tests/scipy_tests/special_tests/test_polygamma.py ....       [ 99%]
tests/cupyx_tests/scipy_tests/special_tests/test_statistics.py ..        [ 99%]
tests/cupyx_tests/scipy_tests/special_tests/test_zeta.py ....            [ 99%]
tests/cupyx_tests/scipy_tests/stats_tests/test_distributions.py ........ [ 99%]
........................................................................ [ 99%]
........................................................................ [ 99%]
                                                                         [ 99%]
tests/cupyx_tests/tools_tests/test_install_library.py ......             [ 99%]
tests/example_tests/test_custom_struct.py FFF                            [ 99%]
tests/example_tests/test_finance.py ...                                  [ 99%]
tests/example_tests/test_gemm.py .                                       [ 99%]
tests/example_tests/test_gmm.py ss                                       [ 99%]
tests/example_tests/test_kmeans.py sss                                   [ 99%]
tests/install_tests/test_build.py sx.                                    [ 99%]
tests/install_tests/test_utils.py ..                                     [100%]

=================================== FAILURES ===================================
______________ TestNdarrayCopy.test_copy_multi_device_with_stream ______________

self = <cupy_tests.core_tests.test_ndarray.TestNdarrayCopy testMethod=test_copy_multi_device_with_stream>

    @testing.multi_gpu(2)
    def test_copy_multi_device_with_stream(self):
        # Kernel that takes long enough then finally writes values.
        kern = cupy.RawKernel(
            _test_copy_multi_device_with_stream_src, 'wait_and_write')
    
        # Allocates a memory and launches the kernel on a device with its
        # stream.
        with cuda.Device(0):
            # Keep this stream alive over the D2D copy below for HIP
            with cuda.Stream() as s1:  # NOQA
                a = cupy.zeros((2,), dtype=numpy.uint64)
                kern((1,), (1,), a)
    
        # D2D copy to another device with another stream should get the
        # original values of the memory before the kernel on the first device
        # finally makes the write.
        with cuda.Device(1):
            with cuda.Stream():
                b = a.copy()
>               testing.assert_array_equal(
                    b, numpy.array([0, 0], dtype=numpy.uint64))

tests/cupy_tests/core_tests/test_ndarray.py:218: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([13744632839234567870, 13744632839234567870], dtype=uint64)
y = array([0, 0], dtype=uint64), err_msg = '', verbose = True
strides_check = False

    def assert_array_equal(x, y, err_msg='', verbose=True, strides_check=False):
        """Raises an AssertionError if two array_like objects are not equal.
    
        Args:
             x(numpy.ndarray or cupy.ndarray): The actual object to check.
             y(numpy.ndarray or cupy.ndarray): The desired, expected object.
             strides_check(bool): If ``True``, consistency of strides is also
                 checked.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting values
                 are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_array_equal`
        """
>       numpy.testing.assert_array_equal(
            cupy.asnumpy(x), cupy.asnumpy(y), err_msg=err_msg,
            verbose=verbose)
E       AssertionError: 
E       Arrays are not equal
E       
E       Mismatched elements: 2 / 2 (100%)
E       Max absolute difference: 13744632839234567870
E       Max relative difference: inf
E        x: array([13744632839234567870, 13744632839234567870], dtype=uint64)
E        y: array([0, 0], dtype=uint64)

cupy/testing/_array.py:91: AssertionError
____________________ TestArrayBoolOp.test_bool_one_element _____________________
[XPASS(strict)] ROCm/HIP may have a bug
_ TestFusionArrayBitwiseOperator_param_24_{func=<lambda>, left_value='primitive', name='xor', right_value='array'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayBitwiseOperator_param_24_{func=<lambda>, left_value='pr...ter: {'name': 'xor', 'func': <function <lambda> at 0x7f54b72fa1f0>, 'left_value': 'primitive', 'right_value': 'array'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.int32'>, 'dtype2': <class 'numpy.uint16'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayBi...er: {'name': 'xor', 'func': <function <lambda> at 0x7f54b72fa1f0>, 'left_value': 'primitive', 'right_value': 'array'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (3, array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=uint16))
kwargs_np = {}
args_cp = (3, array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=uint16))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:2084: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:430: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:841: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f5a6948e5b0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.int32'>, 'dtype2': <class 'numpy.uint16'>}
_ TestFusionArrayBitwiseOperator_param_25_{func=<lambda>, left_value='array', name='invert', right_value='array'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayBitwiseOperator_param_25_{func=<lambda>, left_value='ar...eter: {'name': 'invert', 'func': <function <lambda> at 0x7f54b72fa0d0>, 'left_value': 'array', 'right_value': 'array'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.int64'>, 'dtype2': <class 'numpy.int64'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayBi...ter: {'name': 'invert', 'func': <function <lambda> at 0x7f54b72fa0d0>, 'left_value': 'array', 'right_value': 'array'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[2, 3, 3, 2],
       [2, 3, 2, 4],
       [4, 1, 3, 2]]), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]]))
kwargs_np = {}
args_cp = (array([[2, 3, 3, 2],
       [2, 3, 2, 4],
       [4, 1, 3, 2]]), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]]))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:2084: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:430: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:841: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f5a690df070>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.int64'>, 'dtype2': <class 'numpy.int64'>}
_ TestFusionArrayBitwiseOperator_param_26_{func=<lambda>, left_value='array', name='invert', right_value='scalar'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayBitwiseOperator_param_26_{func=<lambda>, left_value='ar...ter: {'name': 'invert', 'func': <function <lambda> at 0x7f54b72fa0d0>, 'left_value': 'array', 'right_value': 'scalar'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.int64'>, 'dtype2': <class 'numpy.int64'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayBi...er: {'name': 'invert', 'func': <function <lambda> at 0x7f54b72fa0d0>, 'left_value': 'array', 'right_value': 'scalar'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[2, 3, 3, 2],
       [2, 3, 2, 4],
       [4, 1, 3, 2]]), 3)
kwargs_np = {}
args_cp = (array([[2, 3, 3, 2],
       [2, 3, 2, 4],
       [4, 1, 3, 2]]), 3)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:2084: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:430: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:841: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f5a690b31f0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.int64'>, 'dtype2': <class 'numpy.int64'>}
_ TestFusionArrayBitwiseOperator_param_27_{func=<lambda>, left_value='array', name='invert', right_value='primitive'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayBitwiseOperator_param_27_{func=<lambda>, left_value='ar...: {'name': 'invert', 'func': <function <lambda> at 0x7f54b72fa0d0>, 'left_value': 'array', 'right_value': 'primitive'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.int64'>, 'dtype2': <class 'numpy.int64'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayBi... {'name': 'invert', 'func': <function <lambda> at 0x7f54b72fa0d0>, 'left_value': 'array', 'right_value': 'primitive'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[2, 3, 3, 2],
       [2, 3, 2, 4],
       [4, 1, 3, 2]]), 3)
kwargs_np = {}
args_cp = (array([[2, 3, 3, 2],
       [2, 3, 2, 4],
       [4, 1, 3, 2]]), 3)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:2084: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:430: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:841: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f5a68ddc0a0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.int64'>, 'dtype2': <class 'numpy.int64'>}
_ TestFusionArrayBitwiseOperator_param_28_{func=<lambda>, left_value='scalar', name='invert', right_value='array'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayBitwiseOperator_param_28_{func=<lambda>, left_value='sc...ter: {'name': 'invert', 'func': <function <lambda> at 0x7f54b72fa0d0>, 'left_value': 'scalar', 'right_value': 'array'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.int64'>, 'dtype2': <class 'numpy.int64'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayBi...er: {'name': 'invert', 'func': <function <lambda> at 0x7f54b72fa0d0>, 'left_value': 'scalar', 'right_value': 'array'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (3, array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]]))
kwargs_np = {}
args_cp = (3, array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]]))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:2084: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:430: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:841: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f5a690d4160>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.int64'>, 'dtype2': <class 'numpy.int64'>}
_ TestFusionArrayBitwiseOperator_param_29_{func=<lambda>, left_value='primitive', name='invert', right_value='array'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayBitwiseOperator_param_29_{func=<lambda>, left_value='pr...: {'name': 'invert', 'func': <function <lambda> at 0x7f54b72fa0d0>, 'left_value': 'primitive', 'right_value': 'array'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.int64'>, 'dtype2': <class 'numpy.int64'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayBi... {'name': 'invert', 'func': <function <lambda> at 0x7f54b72fa0d0>, 'left_value': 'primitive', 'right_value': 'array'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (3, array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]]))
kwargs_np = {}
args_cp = (3, array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]]))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:2084: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:430: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:841: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f5a694a9820>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.int64'>, 'dtype2': <class 'numpy.int64'>}
_ TestFusionArrayFloorDivide_param_0_{left_value='array', right_value='array'}.test_floor_divide _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayFloorDivide_param_0_{left_value='array', right_value='array'} testMethod=test_floor_divide>  parameter: {'left_value': 'array', 'right_value': 'array'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.int64'>, 'dtype2': <class 'numpy.int64'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayFl...rray', right_value='array'} testMethod=test_floor_divide>  parameter: {'left_value': 'array', 'right_value': 'array'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[2, 3, 3, 2],
       [2, 3, 2, 4],
       [4, 1, 3, 2]]), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]]))
kwargs_np = {}
args_cp = (array([[2, 3, 3, 2],
       [2, 3, 2, 4],
       [4, 1, 3, 2]]), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]]))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:2084: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:430: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:841: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f5a690ea520>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.int64'>, 'dtype2': <class 'numpy.int64'>}
_ TestFusionArrayFloorDivide_param_1_{left_value='array', right_value='scalar'}.test_floor_divide _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayFloorDivide_param_1_{left_value='array', right_value='scalar'} testMethod=test_floor_divide>  parameter: {'left_value': 'array', 'right_value': 'scalar'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.int64'>, 'dtype2': <class 'numpy.int64'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayFl...ay', right_value='scalar'} testMethod=test_floor_divide>  parameter: {'left_value': 'array', 'right_value': 'scalar'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[2, 3, 3, 2],
       [2, 3, 2, 4],
       [4, 1, 3, 2]]), 3)
kwargs_np = {}
args_cp = (array([[2, 3, 3, 2],
       [2, 3, 2, 4],
       [4, 1, 3, 2]]), 3)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:2084: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:430: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:841: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f5a694b2310>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.int64'>, 'dtype2': <class 'numpy.int64'>}
_ TestFusionArrayFloorDivide_param_2_{left_value='array', right_value='primitive'}.test_floor_divide _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayFloorDivide_param_2_{left_value='array', right_value='primitive'} testMethod=test_floor_divide>  parameter: {'left_value': 'array', 'right_value': 'primitive'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.int64'>, 'dtype2': <class 'numpy.int64'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayFl...ight_value='primitive'} testMethod=test_floor_divide>  parameter: {'left_value': 'array', 'right_value': 'primitive'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[2, 3, 3, 2],
       [2, 3, 2, 4],
       [4, 1, 3, 2]]), 3)
kwargs_np = {}
args_cp = (array([[2, 3, 3, 2],
       [2, 3, 2, 4],
       [4, 1, 3, 2]]), 3)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:2084: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:430: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:841: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f5a690803d0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.int64'>, 'dtype2': <class 'numpy.int64'>}
_ TestFusionArrayFloorDivide_param_3_{left_value='scalar', right_value='array'}.test_floor_divide _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayFloorDivide_param_3_{left_value='scalar', right_value='array'} testMethod=test_floor_divide>  parameter: {'left_value': 'scalar', 'right_value': 'array'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.int64'>, 'dtype2': <class 'numpy.int64'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayFl...lar', right_value='array'} testMethod=test_floor_divide>  parameter: {'left_value': 'scalar', 'right_value': 'array'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (3, array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]]))
kwargs_np = {}
args_cp = (3, array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]]))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:2084: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:430: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:841: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f5a69145ca0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.int64'>, 'dtype2': <class 'numpy.int64'>}
_ TestFusionArrayFloorDivide_param_4_{left_value='primitive', right_value='array'}.test_floor_divide _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayFloorDivide_param_4_{left_value='primitive', right_value='array'} testMethod=test_floor_divide>  parameter: {'left_value': 'primitive', 'right_value': 'array'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.int64'>, 'dtype2': <class 'numpy.int64'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayFl...', right_value='array'} testMethod=test_floor_divide>  parameter: {'left_value': 'primitive', 'right_value': 'array'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (3, array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]]))
kwargs_np = {}
args_cp = (3, array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]]))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:2084: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:430: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:841: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f5a68d888e0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.int64'>, 'dtype2': <class 'numpy.int64'>}
_ TestFusionArrayInplaceOperator_param_0_{left_value='array', right_value='array'}.test_iadd _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayInplaceOperator_param_0_{left_value='array', right_value='array'} testMethod=test_iadd>  parameter: {'left_value': 'array', 'right_value': 'array'}>
generate_inputs_kwargs = {'dtype': <class 'numpy.float64'>}
generate_inputs = <bound method TestFusionArrayInplaceOperator.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFu...value='array', right_value='array'} testMethod=test_iadd>  parameter: {'left_value': 'array', 'right_value': 'array'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[4.82917754, 7.1775693 , 3.01438875, 4.23607878],
       [2.85205345, 3.69116354, 3.11923711, 6.18666864],
   ...692974e-01, 9.31301057e-01, 1.72780364e+00],
       [1.98383737e+00, 2.69408367e+00, 2.09597257e+00, 3.42609750e+00]]))
kwargs_np = {}
args_cp = (array([[4.82917754, 7.1775693 , 3.01438875, 4.23607878],
       [2.85205345, 3.69116354, 3.11923711, 6.18666864],
   ...692974e-01, 9.31301057e-01, 1.72780364e+00],
       [1.98383737e+00, 2.69408367e+00, 2.09597257e+00, 3.42609750e+00]]))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:2084: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:430: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:841: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f5a68dc7ac0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestFusionArrayInplaceOperator_param_0_{left_value='array', right_value='array'}.test_iand _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayInplaceOperator_param_0_{left_value='array', right_value='array'} testMethod=test_iand>  parameter: {'left_value': 'array', 'right_value': 'array'}>
generate_inputs_kwargs = {'dtype': <class 'numpy.int8'>}
generate_inputs = <bound method TestFusionArrayInplaceOperator.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFu...value='array', right_value='array'} testMethod=test_iand>  parameter: {'left_value': 'array', 'right_value': 'array'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[2, 3, 1, 0],
       [0, 1, 0, 0],
       [0, 0, 2, 2]], dtype=int8), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int8))
kwargs_np = {}
args_cp = (array([[2, 3, 1, 0],
       [0, 1, 0, 0],
       [0, 0, 2, 2]], dtype=int8), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int8))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:2084: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:430: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:841: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f5a68db1790>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.int8'>
_ TestFusionArrayInplaceOperator_param_0_{left_value='array', right_value='array'}.test_ilshift _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayInplaceOperator_param_0_{left_value='array', right_value='array'} testMethod=test_ilshift>  parameter: {'left_value': 'array', 'right_value': 'array'}>
generate_inputs_kwargs = {'dtype': <class 'numpy.int8'>}
generate_inputs = <bound method TestFusionArrayInplaceOperator.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFu...ue='array', right_value='array'} testMethod=test_ilshift>  parameter: {'left_value': 'array', 'right_value': 'array'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[ 8, 24,  6,  4],
       [ 4,  6,  4,  8],
       [ 8,  4, 12, 16]], dtype=int8), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int8))
kwargs_np = {}
args_cp = (array([[ 8, 24,  6,  4],
       [ 4,  6,  4,  8],
       [ 8,  4, 12, 16]], dtype=int8), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int8))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:2084: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:430: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:841: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f5a690ea910>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.int8'>
_ TestFusionArrayInplaceOperator_param_0_{left_value='array', right_value='array'}.test_imod _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayInplaceOperator_param_0_{left_value='array', right_value='array'} testMethod=test_imod>  parameter: {'left_value': 'array', 'right_value': 'array'}>
generate_inputs_kwargs = {'dtype': <class 'numpy.int8'>}
generate_inputs = <bound method TestFusionArrayInplaceOperator.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFu...value='array', right_value='array'} testMethod=test_imod>  parameter: {'left_value': 'array', 'right_value': 'array'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[0, 0, 0, 0],
       [0, 0, 0, 0],
       [0, 1, 1, 2]], dtype=int8), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int8))
kwargs_np = {}
args_cp = (array([[0, 0, 0, 0],
       [0, 0, 0, 0],
       [0, 1, 1, 2]], dtype=int8), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int8))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:2084: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:430: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:841: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f5a69155940>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.int8'>
_ TestFusionArrayInplaceOperator_param_0_{left_value='array', right_value='array'}.test_imul _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayInplaceOperator_param_0_{left_value='array', right_value='array'} testMethod=test_imul>  parameter: {'left_value': 'array', 'right_value': 'array'}>
generate_inputs_kwargs = {'dtype': <class 'numpy.float64'>}
generate_inputs = <bound method TestFusionArrayInplaceOperator.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFu...value='array', right_value='array'} testMethod=test_imul>  parameter: {'left_value': 'array', 'right_value': 'array'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[5.72168269e+00, 1.28792105e+01, 1.72352378e-03, 4.11839836e+00],
       [1.55434594e+00, 1.49102387e+00, 2.03...692974e-01, 9.31301057e-01, 1.72780364e+00],
       [1.98383737e+00, 2.69408367e+00, 2.09597257e+00, 3.42609750e+00]]))
kwargs_np = {}
args_cp = (array([[5.72168269e+00, 1.28792105e+01, 1.72352378e-03, 4.11839836e+00],
       [1.55434594e+00, 1.49102387e+00, 2.03...692974e-01, 9.31301057e-01, 1.72780364e+00],
       [1.98383737e+00, 2.69408367e+00, 2.09597257e+00, 3.42609750e+00]]))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:2084: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:430: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:841: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f5a69144730>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestFusionArrayInplaceOperator_param_0_{left_value='array', right_value='array'}.test_ior _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayInplaceOperator_param_0_{left_value='array', right_value='array'} testMethod=test_ior>  parameter: {'left_value': 'array', 'right_value': 'array'}>
generate_inputs_kwargs = {'dtype': <class 'numpy.int8'>}
generate_inputs = <bound method TestFusionArrayInplaceOperator.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFu..._value='array', right_value='array'} testMethod=test_ior>  parameter: {'left_value': 'array', 'right_value': 'array'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[2, 3, 3, 3],
       [3, 3, 3, 5],
       [5, 3, 3, 3]], dtype=int8), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int8))
kwargs_np = {}
args_cp = (array([[2, 3, 3, 3],
       [3, 3, 3, 5],
       [5, 3, 3, 3]], dtype=int8), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int8))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:2084: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:430: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:841: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f5a690b3520>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.int8'>
_ TestFusionArrayInplaceOperator_param_0_{left_value='array', right_value='array'}.test_ipow _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayInplaceOperator_param_0_{left_value='array', right_value='array'} testMethod=test_ipow>  parameter: {'left_value': 'array', 'right_value': 'array'}>
generate_inputs_kwargs = {'dtype': <class 'numpy.float64'>}
generate_inputs = <bound method TestFusionArrayInplaceOperator.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFu...value='array', right_value='array'} testMethod=test_ipow>  parameter: {'left_value': 'array', 'right_value': 'array'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[ 8.20543062, 98.42505123,  1.00063109,  4.54974071],
       [ 1.73459861,  1.71815507,  2.07335948, 13.235249...692974e-01, 9.31301057e-01, 1.72780364e+00],
       [1.98383737e+00, 2.69408367e+00, 2.09597257e+00, 3.42609750e+00]]))
kwargs_np = {}
args_cp = (array([[ 8.20543062, 98.42505123,  1.00063109,  4.54974071],
       [ 1.73459861,  1.71815507,  2.07335948, 13.235249...692974e-01, 9.31301057e-01, 1.72780364e+00],
       [1.98383737e+00, 2.69408367e+00, 2.09597257e+00, 3.42609750e+00]]))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:2084: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:430: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:841: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f5a6902a5e0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestFusionArrayInplaceOperator_param_0_{left_value='array', right_value='array'}.test_irshift _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayInplaceOperator_param_0_{left_value='array', right_value='array'} testMethod=test_irshift>  parameter: {'left_value': 'array', 'right_value': 'array'}>
generate_inputs_kwargs = {'dtype': <class 'numpy.int8'>}
generate_inputs = <bound method TestFusionArrayInplaceOperator.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFu...ue='array', right_value='array'} testMethod=test_irshift>  parameter: {'left_value': 'array', 'right_value': 'array'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[0, 0, 1, 1],
       [1, 1, 1, 2],
       [2, 0, 0, 0]], dtype=int8), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int8))
kwargs_np = {}
args_cp = (array([[0, 0, 1, 1],
       [1, 1, 1, 2],
       [2, 0, 0, 0]], dtype=int8), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int8))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:2084: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:430: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:841: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f5a6912fa90>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.int8'>
_ TestFusionArrayInplaceOperator_param_0_{left_value='array', right_value='array'}.test_isub _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayInplaceOperator_param_0_{left_value='array', right_value='array'} testMethod=test_isub>  parameter: {'left_value': 'array', 'right_value': 'array'}>
generate_inputs_kwargs = {'dtype': <class 'numpy.float64'>}
generate_inputs = <bound method TestFusionArrayInplaceOperator.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFu...value='array', right_value='array'} testMethod=test_isub>  parameter: {'left_value': 'array', 'right_value': 'array'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[ 0.6589575 , -0.02567564,  3.01324501,  1.21275305],
       [ 1.38449454,  2.76777759,  1.256635  ,  2.731061...692974e-01, 9.31301057e-01, 1.72780364e+00],
       [1.98383737e+00, 2.69408367e+00, 2.09597257e+00, 3.42609750e+00]]))
kwargs_np = {}
args_cp = (array([[ 0.6589575 , -0.02567564,  3.01324501,  1.21275305],
       [ 1.38449454,  2.76777759,  1.256635  ,  2.731061...692974e-01, 9.31301057e-01, 1.72780364e+00],
       [1.98383737e+00, 2.69408367e+00, 2.09597257e+00, 3.42609750e+00]]))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:2084: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:430: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:841: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f5a6905e0d0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestFusionArrayInplaceOperator_param_0_{left_value='array', right_value='array'}.test_itruediv_py3 _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayInplaceOperator_param_0_{left_value='array', right_value='array'} testMethod=test_itruediv_py3>  parameter: {'left_value': 'array', 'right_value': 'array'}>
generate_inputs_kwargs = {'dtype': <class 'numpy.float64'>}
generate_inputs = <bound method TestFusionArrayInplaceOperator.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFu...rray', right_value='array'} testMethod=test_itruediv_py3>  parameter: {'left_value': 'array', 'right_value': 'array'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[1.31603008e+00, 9.92871092e-01, 5.27007072e+03, 1.80226424e+00],
       [2.88679928e+00, 6.99484451e+00, 2.34...692974e-01, 9.31301057e-01, 1.72780364e+00],
       [1.98383737e+00, 2.69408367e+00, 2.09597257e+00, 3.42609750e+00]]))
kwargs_np = {}
args_cp = (array([[1.31603008e+00, 9.92871092e-01, 5.27007072e+03, 1.80226424e+00],
       [2.88679928e+00, 6.99484451e+00, 2.34...692974e-01, 9.31301057e-01, 1.72780364e+00],
       [1.98383737e+00, 2.69408367e+00, 2.09597257e+00, 3.42609750e+00]]))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:2084: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:430: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:841: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f5a69036880>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestFusionArrayInplaceOperator_param_0_{left_value='array', right_value='array'}.test_ixor _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayInplaceOperator_param_0_{left_value='array', right_value='array'} testMethod=test_ixor>  parameter: {'left_value': 'array', 'right_value': 'array'}>
generate_inputs_kwargs = {'dtype': <class 'numpy.int8'>}
generate_inputs = <bound method TestFusionArrayInplaceOperator.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFu...value='array', right_value='array'} testMethod=test_ixor>  parameter: {'left_value': 'array', 'right_value': 'array'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[0, 0, 2, 3],
       [3, 2, 3, 5],
       [5, 3, 1, 1]], dtype=int8), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int8))
kwargs_np = {}
args_cp = (array([[0, 0, 2, 3],
       [3, 2, 3, 5],
       [5, 3, 1, 1]], dtype=int8), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int8))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:2084: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:430: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:841: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f5a69098700>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.int8'>
_ TestFusionArrayInplaceOperator_param_1_{left_value='array', right_value='scalar'}.test_iadd _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayInplaceOperator_param_1_{left_value='array', right_value='scalar'} testMethod=test_iadd>  parameter: {'left_value': 'array', 'right_value': 'scalar'}>
generate_inputs_kwargs = {'dtype': <class 'numpy.float64'>}
generate_inputs = <bound method TestFusionArrayInplaceOperator.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFu...lue='array', right_value='scalar'} testMethod=test_iadd>  parameter: {'left_value': 'array', 'right_value': 'scalar'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[5.74406752, 6.57594683, 6.01381688, 5.72441591],
       [5.118274  , 6.22947057, 5.18793606, 7.458865  ],
       [7.8183138 , 4.91720759, 6.95862519, 5.6444746 ]]), 3.0)
kwargs_np = {}
args_cp = (array([[5.74406752, 6.57594683, 6.01381688, 5.72441591],
       [5.118274  , 6.22947057, 5.18793606, 7.458865  ],
       [7.8183138 , 4.91720759, 6.95862519, 5.6444746 ]]), 3.0)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:2084: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:430: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:841: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f5a68dae820>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestFusionArrayInplaceOperator_param_1_{left_value='array', right_value='scalar'}.test_iand _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayInplaceOperator_param_1_{left_value='array', right_value='scalar'} testMethod=test_iand>  parameter: {'left_value': 'array', 'right_value': 'scalar'}>
generate_inputs_kwargs = {'dtype': <class 'numpy.int8'>}
generate_inputs = <bound method TestFusionArrayInplaceOperator.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFu...lue='array', right_value='scalar'} testMethod=test_iand>  parameter: {'left_value': 'array', 'right_value': 'scalar'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[2, 3, 3, 2],
       [2, 3, 2, 0],
       [0, 1, 3, 2]], dtype=int8), 3)
kwargs_np = {}
args_cp = (array([[2, 3, 3, 2],
       [2, 3, 2, 0],
       [0, 1, 3, 2]], dtype=int8), 3)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:2084: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:430: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:841: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f5a68d09790>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.int8'>
_ TestFusionArrayInplaceOperator_param_1_{left_value='array', right_value='scalar'}.test_ilshift _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayInplaceOperator_param_1_{left_value='array', right_value='scalar'} testMethod=test_ilshift>  parameter: {'left_value': 'array', 'right_value': 'scalar'}>
generate_inputs_kwargs = {'dtype': <class 'numpy.int8'>}
generate_inputs = <bound method TestFusionArrayInplaceOperator.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFu...='array', right_value='scalar'} testMethod=test_ilshift>  parameter: {'left_value': 'array', 'right_value': 'scalar'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[16, 24, 24, 16],
       [16, 24, 16, 32],
       [32,  8, 24, 16]], dtype=int8), 3)
kwargs_np = {}
args_cp = (array([[16, 24, 24, 16],
       [16, 24, 16, 32],
       [32,  8, 24, 16]], dtype=int8), 3)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:2084: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:430: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:841: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f5a690f8af0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.int8'>
_ TestFusionArrayInplaceOperator_param_1_{left_value='array', right_value='scalar'}.test_imod _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayInplaceOperator_param_1_{left_value='array', right_value='scalar'} testMethod=test_imod>  parameter: {'left_value': 'array', 'right_value': 'scalar'}>
generate_inputs_kwargs = {'dtype': <class 'numpy.int8'>}
generate_inputs = <bound method TestFusionArrayInplaceOperator.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFu...lue='array', right_value='scalar'} testMethod=test_imod>  parameter: {'left_value': 'array', 'right_value': 'scalar'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[2, 0, 0, 2],
       [2, 0, 2, 1],
       [1, 1, 0, 2]], dtype=int8), 3)
kwargs_np = {}
args_cp = (array([[2, 0, 0, 2],
       [2, 0, 2, 1],
       [1, 1, 0, 2]], dtype=int8), 3)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:2084: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:430: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:841: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f5a6901d160>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.int8'>
_ TestFusionArrayInplaceOperator_param_1_{left_value='array', right_value='scalar'}.test_imul _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayInplaceOperator_param_1_{left_value='array', right_value='scalar'} testMethod=test_imul>  parameter: {'left_value': 'array', 'right_value': 'scalar'}>
generate_inputs_kwargs = {'dtype': <class 'numpy.float64'>}
generate_inputs = <bound method TestFusionArrayInplaceOperator.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFu...lue='array', right_value='scalar'} testMethod=test_imul>  parameter: {'left_value': 'array', 'right_value': 'scalar'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[ 8.23220256, 10.7278405 ,  9.04145064,  8.17324774],
       [ 6.35482199,  9.6884117 ,  6.56380817, 13.37659501],
       [14.45494141,  5.75162278, 11.87587557,  7.9334238 ]]), 3.0)
kwargs_np = {}
args_cp = (array([[ 8.23220256, 10.7278405 ,  9.04145064,  8.17324774],
       [ 6.35482199,  9.6884117 ,  6.56380817, 13.37659501],
       [14.45494141,  5.75162278, 11.87587557,  7.9334238 ]]), 3.0)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:2084: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:430: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:841: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f5a68dc7910>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestFusionArrayInplaceOperator_param_1_{left_value='array', right_value='scalar'}.test_ior _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayInplaceOperator_param_1_{left_value='array', right_value='scalar'} testMethod=test_ior>  parameter: {'left_value': 'array', 'right_value': 'scalar'}>
generate_inputs_kwargs = {'dtype': <class 'numpy.int8'>}
generate_inputs = <bound method TestFusionArrayInplaceOperator.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFu...alue='array', right_value='scalar'} testMethod=test_ior>  parameter: {'left_value': 'array', 'right_value': 'scalar'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[3, 3, 3, 3],
       [3, 3, 3, 7],
       [7, 3, 3, 3]], dtype=int8), 3)
kwargs_np = {}
args_cp = (array([[3, 3, 3, 3],
       [3, 3, 3, 7],
       [7, 3, 3, 3]], dtype=int8), 3)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:2084: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:430: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:841: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f5a690d49a0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.int8'>
_ TestFusionArrayInplaceOperator_param_1_{left_value='array', right_value='scalar'}.test_ipow _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayInplaceOperator_param_1_{left_value='array', right_value='scalar'} testMethod=test_ipow>  parameter: {'left_value': 'array', 'right_value': 'scalar'}>
generate_inputs_kwargs = {'dtype': <class 'numpy.float64'>}
generate_inputs = <bound method TestFusionArrayInplaceOperator.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFu...lue='array', right_value='scalar'} testMethod=test_ipow>  parameter: {'left_value': 'array', 'right_value': 'scalar'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[ 20.662572  ,  45.7270473 ,  27.37477656,  20.22181932],
       [  9.50487489,  33.6816991 ,  10.47379034,  88.64882257],
       [111.86268586,   7.04705112,  62.03448081,  18.49346115]]), 3.0)
kwargs_np = {}
args_cp = (array([[ 20.662572  ,  45.7270473 ,  27.37477656,  20.22181932],
       [  9.50487489,  33.6816991 ,  10.47379034,  88.64882257],
       [111.86268586,   7.04705112,  62.03448081,  18.49346115]]), 3.0)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:2084: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:430: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:841: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f5a690459d0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestFusionArrayInplaceOperator_param_1_{left_value='array', right_value='scalar'}.test_irshift _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayInplaceOperator_param_1_{left_value='array', right_value='scalar'} testMethod=test_irshift>  parameter: {'left_value': 'array', 'right_value': 'scalar'}>
generate_inputs_kwargs = {'dtype': <class 'numpy.int8'>}
generate_inputs = <bound method TestFusionArrayInplaceOperator.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFu...='array', right_value='scalar'} testMethod=test_irshift>  parameter: {'left_value': 'array', 'right_value': 'scalar'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[0, 0, 0, 0],
       [0, 0, 0, 0],
       [0, 0, 0, 0]], dtype=int8), 3)
kwargs_np = {}
args_cp = (array([[0, 0, 0, 0],
       [0, 0, 0, 0],
       [0, 0, 0, 0]], dtype=int8), 3)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:2084: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:430: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:841: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f5a690eeb20>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.int8'>
_ TestFusionArrayInplaceOperator_param_1_{left_value='array', right_value='scalar'}.test_isub _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayInplaceOperator_param_1_{left_value='array', right_value='scalar'} testMethod=test_isub>  parameter: {'left_value': 'array', 'right_value': 'scalar'}>
generate_inputs_kwargs = {'dtype': <class 'numpy.float64'>}
generate_inputs = <bound method TestFusionArrayInplaceOperator.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFu...lue='array', right_value='scalar'} testMethod=test_isub>  parameter: {'left_value': 'array', 'right_value': 'scalar'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[-0.25593248,  0.57594683,  0.01381688, -0.27558409],
       [-0.881726  ,  0.22947057, -0.81206394,  1.458865  ],
       [ 1.8183138 , -1.08279241,  0.95862519, -0.3555254 ]]), 3.0)
kwargs_np = {}
args_cp = (array([[-0.25593248,  0.57594683,  0.01381688, -0.27558409],
       [-0.881726  ,  0.22947057, -0.81206394,  1.458865  ],
       [ 1.8183138 , -1.08279241,  0.95862519, -0.3555254 ]]), 3.0)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:2084: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:430: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:841: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f5a68cda910>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestFusionArrayInplaceOperator_param_1_{left_value='array', right_value='scalar'}.test_itruediv_py3 _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayInplaceOperator_param_1_{left_value='array', right_value='scalar'} testMethod=test_itruediv_py3>  parameter: {'left_value': 'array', 'right_value': 'scalar'}>
generate_inputs_kwargs = {'dtype': <class 'numpy.float64'>}
generate_inputs = <bound method TestFusionArrayInplaceOperator.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFu...ay', right_value='scalar'} testMethod=test_itruediv_py3>  parameter: {'left_value': 'array', 'right_value': 'scalar'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[0.91468917, 1.19198228, 1.00460563, 0.90813864],
       [0.70609133, 1.07649019, 0.72931202, 1.48628833],
       [1.6061046 , 0.6390692 , 1.31954173, 0.88149153]]), 3.0)
kwargs_np = {}
args_cp = (array([[0.91468917, 1.19198228, 1.00460563, 0.90813864],
       [0.70609133, 1.07649019, 0.72931202, 1.48628833],
       [1.6061046 , 0.6390692 , 1.31954173, 0.88149153]]), 3.0)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:2084: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:430: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:841: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f5a68db1550>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestFusionArrayInplaceOperator_param_1_{left_value='array', right_value='scalar'}.test_ixor _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayInplaceOperator_param_1_{left_value='array', right_value='scalar'} testMethod=test_ixor>  parameter: {'left_value': 'array', 'right_value': 'scalar'}>
generate_inputs_kwargs = {'dtype': <class 'numpy.int8'>}
generate_inputs = <bound method TestFusionArrayInplaceOperator.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFu...lue='array', right_value='scalar'} testMethod=test_ixor>  parameter: {'left_value': 'array', 'right_value': 'scalar'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[1, 0, 0, 1],
       [1, 0, 1, 7],
       [7, 2, 0, 1]], dtype=int8), 3)
kwargs_np = {}
args_cp = (array([[1, 0, 0, 1],
       [1, 0, 1, 7],
       [7, 2, 0, 1]], dtype=int8), 3)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:2084: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:430: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:841: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f5a68daecd0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.int8'>
_ TestFusionArrayInplaceOperator_param_2_{left_value='array', right_value='primitive'}.test_iadd _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayInplaceOperator_param_2_{left_value='array', right_value='primitive'} testMethod=test_iadd>  parameter: {'left_value': 'array', 'right_value': 'primitive'}>
generate_inputs_kwargs = {'dtype': <class 'numpy.float64'>}
generate_inputs = <bound method TestFusionArrayInplaceOperator.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFu...rray', right_value='primitive'} testMethod=test_iadd>  parameter: {'left_value': 'array', 'right_value': 'primitive'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[5.74406752, 6.57594683, 6.01381688, 5.72441591],
       [5.118274  , 6.22947057, 5.18793606, 7.458865  ],
       [7.8183138 , 4.91720759, 6.95862519, 5.6444746 ]]), 3.0)
kwargs_np = {}
args_cp = (array([[5.74406752, 6.57594683, 6.01381688, 5.72441591],
       [5.118274  , 6.22947057, 5.18793606, 7.458865  ],
       [7.8183138 , 4.91720759, 6.95862519, 5.6444746 ]]), 3.0)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:2084: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:430: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:841: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f5a68c85a60>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
________ TestFusionTuple.test_multiple_outputdifferent_type_same_ufunc _________

self = <cupy_tests.core_tests.fusion_tests.test_misc.TestFusionTuple testMethod=test_multiple_outputdifferent_type_same_ufunc>
generate_inputs_kwargs = {'dtype': <class 'numpy.uint16'>}
generate_inputs = <bound method FusionTestBase.generate_inputs of <cupy_tests.core_tests.fusion_tests.test_misc.TestFusionTuple testMethod=test_multiple_outputdifferent_type_same_ufunc>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = [array([[5, 7, 6, 5],
       [4, 6, 4, 8],
       [9, 3, 7, 5]], dtype=uint16), array([[4, 7, 0, 3],
       [1, 0, 1, 3],
       [3, 5, 4, 6]], dtype=uint16), array([[4, 0, 5, 4],
       [4, 3, 2, 6],
       [2, 2, 6, 5]], dtype=uint16)]
kwargs_np = {}
args_cp = [array([[5, 7, 6, 5],
       [4, 6, 4, 8],
       [9, 3, 7, 5]], dtype=uint16), array([[4, 7, 0, 3],
       [1, 0, 1, 3],
       [3, 5, 4, 6]], dtype=uint16), array([[4, 0, 5, 4],
       [4, 3, 2, 6],
       [2, 2, 6, 5]], dtype=uint16)]
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
>       result_cp = call(impl_cp, args_cp, kwargs_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:121: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
tests/cupy_tests/core_tests/fusion_tests/test_misc.py:77: in func
    return x + y, y + z, z + x
cupy/_core/core.pyx:1149: in cupy._core.core.ndarray.__add__
    return _math._add(x, y)
cupy/_core/_kernel.pyx:1104: in cupy._core._kernel.ufunc.__call__
    kern = self._get_ufunc_kernel(dev_id, op, arginfos)
cupy/_core/_kernel.pyx:1127: in cupy._core._kernel.ufunc._get_ufunc_kernel
    kern = _get_ufunc_kernel(
cupy/_core/_kernel.pyx:901: in cupy._core._kernel._get_ufunc_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:2084: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:430: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:841: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f5a68dfd760>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.uint16'>
___________________ TestFusionTuple.test_return_empty_tuple ____________________

self = <cupy_tests.core_tests.fusion_tests.test_misc.TestFusionTuple testMethod=test_return_empty_tuple>
generate_inputs_kwargs = {'dtype': <class 'numpy.float64'>}
generate_inputs = <bound method FusionTestBase.generate_inputs of <cupy_tests.core_tests.fusion_tests.test_misc.TestFusionTuple testMethod=test_return_empty_tuple>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = [array([[5.48813504, 7.15189366, 6.02763376, 5.44883183],
       [4.23654799, 6.45894113, 4.37587211, 8.91773001],
       [9.63662761, 3.83441519, 7.91725038, 5.2889492 ]])]
kwargs_np = {}
args_cp = [array([[5.48813504, 7.15189366, 6.02763376, 5.44883183],
       [4.23654799, 6.45894113, 4.37587211, 8.91773001],
       [9.63662761, 3.83441519, 7.91725038, 5.2889492 ]])]
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:2084: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:430: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:841: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f5a5cfc4ee0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
__________________________ TestFusionTuple.test_tuple __________________________

self = <cupy_tests.core_tests.fusion_tests.test_misc.TestFusionTuple testMethod=test_tuple>
generate_inputs_kwargs = {'dtype': <class 'numpy.float64'>}
generate_inputs = <bound method FusionTestBase.generate_inputs of <cupy_tests.core_tests.fusion_tests.test_misc.TestFusionTuple testMethod=test_tuple>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = [array([[5.48813504, 7.15189366, 6.02763376, 5.44883183],
       [4.23654799, 6.45894113, 4.37587211, 8.91773001],
   ...3],
       [4.20367802, 3.30334821, 2.04648634, 6.19270966],
       [2.99654674, 2.66827275, 6.21133833, 5.29142094]])]
kwargs_np = {}
args_cp = [array([[5.48813504, 7.15189366, 6.02763376, 5.44883183],
       [4.23654799, 6.45894113, 4.37587211, 8.91773001],
   ...3],
       [4.20367802, 3.30334821, 2.04648634, 6.19270966],
       [2.99654674, 2.66827275, 6.21133833, 5.29142094]])]
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:2084: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:430: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:841: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f5a68cc6790>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
________________________ TestReturnNone.test_iadd_once _________________________

self = <cupy_tests.core_tests.fusion_tests.test_misc.TestReturnNone testMethod=test_iadd_once>
generate_inputs_kwargs = {'dtype': <class 'numpy.float64'>}
generate_inputs = <bound method FusionTestBase.generate_inputs of <cupy_tests.core_tests.fusion_tests.test_misc.TestReturnNone testMethod=test_iadd_once>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = [array([[ 7.48813504,  9.15189366,  8.02763376,  7.44883183],
       [ 6.23654799,  8.45894113,  6.37587211, 10.91773001],
       [11.63662761,  5.83441519,  9.91725038,  7.2889492 ]])]
kwargs_np = {}
args_cp = [array([[ 7.48813504,  9.15189366,  8.02763376,  7.44883183],
       [ 6.23654799,  8.45894113,  6.37587211, 10.91773001],
       [11.63662761,  5.83441519,  9.91725038,  7.2889492 ]])]
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:2084: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:430: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:841: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f5a69026700>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
________________________ TestReturnNone.test_iadd_twice ________________________

self = <cupy_tests.core_tests.fusion_tests.test_misc.TestReturnNone testMethod=test_iadd_twice>
generate_inputs_kwargs = {'dtype': <class 'numpy.float64'>}
generate_inputs = <bound method FusionTestBase.generate_inputs of <cupy_tests.core_tests.fusion_tests.test_misc.TestReturnNone testMethod=test_iadd_twice>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = [array([[21.95254016, 28.60757465, 24.11053504, 21.79532732],
       [16.94619197, 25.83576452, 17.50348845, 35.67092003],
       [38.54651042, 15.33766075, 31.66900152, 21.15579679]])]
kwargs_np = {}
args_cp = [array([[21.95254016, 28.60757465, 24.11053504, 21.79532732],
       [16.94619197, 25.83576452, 17.50348845, 35.67092003],
       [38.54651042, 15.33766075, 31.66900152, 21.15579679]])]
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:2084: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:430: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:841: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f5a6906d9a0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_______________ TestFusionNoneParams.test_python_none_parameter ________________

self = <cupy_tests.core_tests.fusion_tests.test_misc.TestFusionNoneParams testMethod=test_python_none_parameter>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float64'>

    @testing.for_all_dtypes()
    @testing.numpy_cupy_array_equal()
    def test_python_none_parameter(self, xp, dtype):
        @cupy.fuse()
        def f(x, y, z):
            if y is None:
                return x * z
            return x + y + z
    
        x = testing.shaped_arange((10,), xp, dtype)
        y = testing.shaped_arange((10,), xp, dtype)
        z = testing.shaped_arange((10,), xp, dtype)
>       return f(x, None, z) + f(x, y, z)

tests/cupy_tests/core_tests/fusion_tests/test_misc.py:153: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:2084: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:430: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:841: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f5a68dfc490>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/tests/cupy_tests/core_tests/fusion_tests/test_misc.py", line 153, in test_python_none_parameter
E           return f(x, None, z) + f(x, y, z)
E         File "cupy/_core/fusion.pyx", line 915, in cupy._core.fusion.Fusion.__call__
E           return kernel(
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 2084, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/cupy/cuda/compiler.py", line 430, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/cupy/cuda/compiler.py", line 841, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
____________________ TestFusionKernelName.test_elementwise _____________________

self = <cupy_tests.core_tests.fusion_tests.test_misc.TestFusionKernelName testMethod=test_elementwise>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/cupy/__init__.py'>

    @testing.numpy_cupy_allclose(atol=1e-5)
    def test_elementwise(self, xp):
        def func(a, b, c):
            @cupy.fuse()
            def func_a1(x, y, z):
                return (x + y) * z
    
            return func_a1(a, b, c)
    
>       return self.check(xp, func, 'func_a1', True)

tests/cupy_tests/core_tests/fusion_tests/test_misc.py:209: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/test_misc.py:192: in check
    func(a, b, c)
tests/cupy_tests/core_tests/fusion_tests/test_misc.py:207: in func
    return func_a1(a, b, c)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:2084: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:430: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:841: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f5a68c4d100>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/tests/cupy_tests/core_tests/fusion_tests/test_misc.py", line 209, in test_elementwise
E           return self.check(xp, func, 'func_a1', True)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/tests/cupy_tests/core_tests/fusion_tests/test_misc.py", line 192, in check
E           func(a, b, c)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/tests/cupy_tests/core_tests/fusion_tests/test_misc.py", line 207, in func
E           return func_a1(a, b, c)
E         File "cupy/_core/fusion.pyx", line 915, in cupy._core.fusion.Fusion.__call__
E           return kernel(
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 2084, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/cupy/cuda/compiler.py", line 430, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/cupy/cuda/compiler.py", line 841, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
_______________ TestFusionKernelName.test_elementwise_with_name ________________

self = <cupy_tests.core_tests.fusion_tests.test_misc.TestFusionKernelName testMethod=test_elementwise_with_name>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/cupy/__init__.py'>

    @testing.numpy_cupy_allclose(atol=1e-5)
    def test_elementwise_with_name(self, xp):
        def func(a, b, c):
            @cupy.fuse(kernel_name='abc')
            def func_a1(x, y, z):
                return (x + y) * z
    
            return func_a1(a, b, c)
    
>       return self.check(xp, func, 'abc', True)

tests/cupy_tests/core_tests/fusion_tests/test_misc.py:220: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/test_misc.py:192: in check
    func(a, b, c)
tests/cupy_tests/core_tests/fusion_tests/test_misc.py:218: in func
    return func_a1(a, b, c)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:2084: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:430: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:841: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f5a5cfd2610>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/tests/cupy_tests/core_tests/fusion_tests/test_misc.py", line 220, in test_elementwise_with_name
E           return self.check(xp, func, 'abc', True)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/tests/cupy_tests/core_tests/fusion_tests/test_misc.py", line 192, in check
E           func(a, b, c)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/tests/cupy_tests/core_tests/fusion_tests/test_misc.py", line 218, in func
E           return func_a1(a, b, c)
E         File "cupy/_core/fusion.pyx", line 915, in cupy._core.fusion.Fusion.__call__
E           return kernel(
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 2084, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/cupy/cuda/compiler.py", line 430, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/cupy/cuda/compiler.py", line 841, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
____________________ TestFusionKernelName.test_reduction_01 ____________________
cupy/testing/_helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/_helper.py:495: in check_func
    _array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([7.74860419e-304, 7.74860419e-304, 7.74860419e-304])
desired = array([  8800.22357671,  39273.84288556, 111762.34757287])
rtol = 1e-07, atol = 1e-05, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=1e-05
E       
E       Mismatched elements: 3 / 3 (100%)
E       Max absolute difference: 111762.34757287
E       Max relative difference: 1.
E        x: array([7.748604e-304, 7.748604e-304, 7.748604e-304])
E        y: array([  8800.223577,  39273.842886, 111762.347573])

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 776, in cupy._core._reduction.ReductionKernel._get_function
    return _ReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 804, in cupy._core._reduction._ReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 2084, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/cupy/cuda/compiler.py", line 430, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/cupy/cuda/compiler.py", line 841, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 776, in cupy._core._reduction.ReductionKernel._get_function
    return _ReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 804, in cupy._core._reduction._ReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 2084, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/cupy/cuda/compiler.py", line 430, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/cupy/cuda/compiler.py", line 841, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
_________________ TestFusionKernelName.test_reduction_postmap __________________
cupy/testing/_helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/_helper.py:495: in check_func
    _array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array(7.74860419e-304), desired = 8.717797887081348, rtol = 1e-07
atol = 1e-05, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=1e-05
E       
E       Mismatched elements: 1 / 1 (100%)
E       Max absolute difference: 8.71779789
E       Max relative difference: 1.
E        x: array(7.748604e-304)
E        y: array(8.717798)

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 776, in cupy._core._reduction.ReductionKernel._get_function
    return _ReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 804, in cupy._core._reduction._ReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 2084, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/cupy/cuda/compiler.py", line 430, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/cupy/cuda/compiler.py", line 841, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 776, in cupy._core._reduction.ReductionKernel._get_function
    return _ReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 804, in cupy._core._reduction._ReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 2084, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/cupy/cuda/compiler.py", line 430, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/cupy/cuda/compiler.py", line 841, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
__________________ TestFusionKernelName.test_reduction_premap __________________
cupy/testing/_helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/_helper.py:495: in check_func
    _array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array(7.74860419e-304), desired = 3838.0, rtol = 1e-07, atol = 1e-05
err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=1e-05
E       
E       Mismatched elements: 1 / 1 (100%)
E       Max absolute difference: 3838.
E       Max relative difference: 1.
E        x: array(7.748604e-304)
E        y: array(3838.)

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 776, in cupy._core._reduction.ReductionKernel._get_function
    return _ReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 804, in cupy._core._reduction._ReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 2084, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/cupy/cuda/compiler.py", line 430, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/cupy/cuda/compiler.py", line 841, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 776, in cupy._core._reduction.ReductionKernel._get_function
    return _ReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 804, in cupy._core._reduction._ReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 2084, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/cupy/cuda/compiler.py", line 430, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/cupy/cuda/compiler.py", line 841, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
________________ TestFusionKernelName.test_reduction_with_name _________________
cupy/testing/_helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/_helper.py:495: in check_func
    _array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array(7.74860419e-304), desired = 3838.0, rtol = 1e-07, atol = 1e-05
err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=1e-05
E       
E       Mismatched elements: 1 / 1 (100%)
E       Max absolute difference: 3838.
E       Max relative difference: 1.
E        x: array(7.748604e-304)
E        y: array(3838.)

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 776, in cupy._core._reduction.ReductionKernel._get_function
    return _ReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 804, in cupy._core._reduction._ReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 2084, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/cupy/cuda/compiler.py", line 430, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/cupy/cuda/compiler.py", line 841, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 776, in cupy._core._reduction.ReductionKernel._get_function
    return _ReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 804, in cupy._core._reduction._ReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 2084, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/cupy/cuda/compiler.py", line 430, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/cupy/cuda/compiler.py", line 841, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
____________________ TestFusionComposition.test_composition ____________________

self = <cupy_tests.core_tests.fusion_tests.test_misc.TestFusionComposition testMethod=test_composition>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float64'>

    @testing.for_all_dtypes(no_bool=True)
    @testing.numpy_cupy_array_equal()
    def test_composition(self, xp, dtype):
        @cupy.fuse()
        def f(x, y):
            return x - y * 2, x + y
    
        @cupy.fuse()
        def g(x, y, z):
            a, b = f(x + z, z - x * 3)
            c, d = f(x - y, y - z)
            return a + b * c - d
    
        @cupy.fuse()
        def h(x, y):
            a, b = f(x + y * 2, y * 3)
            return a - b * g(x - 2, x - 3, -y)
    
        x = testing.shaped_arange((3, 3), xp, dtype)
        y = testing.shaped_arange((3, 3), xp, dtype)
>       return h(x, y)

tests/cupy_tests/core_tests/fusion_tests/test_misc.py:289: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:2084: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:430: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:841: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f5a68db8430>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/tests/cupy_tests/core_tests/fusion_tests/test_misc.py", line 289, in test_composition
E           return h(x, y)
E         File "cupy/_core/fusion.pyx", line 915, in cupy._core.fusion.Fusion.__call__
E           return kernel(
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 2084, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/cupy/cuda/compiler.py", line 430, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/cupy/cuda/compiler.py", line 841, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
______________________ TestFusionCompile.test_clear_cache ______________________

self = <cupy_tests.core_tests.fusion_tests.test_misc.TestFusionCompile testMethod=test_clear_cache>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float64'>

    @testing.for_all_dtypes(no_bool=True)
    @testing.numpy_cupy_array_equal()
    def test_clear_cache(self, xp, dtype):
        @cupy.fuse()
        def f(x, y):
            return x - y * 2
    
        x = testing.shaped_arange((3, 3), xp, dtype)
        y = testing.shaped_arange((3, 3), xp, dtype)
        f.clear_cache()
>       return f(x, y)

tests/cupy_tests/core_tests/fusion_tests/test_misc.py:304: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:2084: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:430: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:841: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f5a5b3a1ee0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/tests/cupy_tests/core_tests/fusion_tests/test_misc.py", line 304, in test_clear_cache
E           return f(x, y)
E         File "cupy/_core/fusion.pyx", line 915, in cupy._core.fusion.Fusion.__call__
E           return kernel(
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 2084, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/cupy/cuda/compiler.py", line 430, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/cupy/cuda/compiler.py", line 841, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
________________ TestFusionGetArrayModule.test_get_array_module ________________

self = <cupy_tests.core_tests.fusion_tests.test_misc.TestFusionGetArrayModule testMethod=test_get_array_module>
generate_inputs_kwargs = {'dtype': <class 'numpy.complex64'>}
generate_inputs = <bound method FusionTestBase.generate_inputs of <cupy_tests.core_tests.fusion_tests.test_misc.TestFusionGetArrayModule testMethod=test_get_array_module>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = [array([[5.488135 +5.6804457j , 7.1518936+9.255966j  ,
        6.0276337+0.7103606j , 5.448832 +0.871293j  ],
       [...9.636627 +9.786183j  , 3.8344152+7.9915857j ,
        7.91725  +4.614794j  , 5.288949 +7.8052917j ]], dtype=complex64)]
kwargs_np = {}
args_cp = [array([[5.488135 +5.6804457j , 7.1518936+9.255966j  ,
        6.0276337+0.7103606j , 5.448832 +0.871293j  ],
       [...9.636627 +9.786183j  , 3.8344152+7.9915857j ,
        7.91725  +4.614794j  , 5.288949 +7.8052917j ]], dtype=complex64)]
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:2084: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:430: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:841: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f5a5b76ad90>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.complex64'>
_________________________ TestFusionThread.test_thread _________________________

self = <cupy_tests.core_tests.fusion_tests.test_misc.TestFusionThread testMethod=test_thread>

    def test_thread(self):
        x = testing.shaped_arange((3, 3), cupy, cupy.int64)
        y = testing.shaped_arange((3, 3), cupy, cupy.int64)
        out = [None]
    
        @cupy.fuse()
        def f(x, y):
            return x + y * 2
    
        def _target(x, y):
            cupy.cuda.Device(0).use()
            out[0] = f(x, y)
    
        t = threading.Thread(target=_target, args=(x, y))
        t.daemon = True
        t.start()
        t.join()
>       assert (out[0] == f(x, y)).all()

tests/cupy_tests/core_tests/fusion_tests/test_misc.py:339: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:2084: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:430: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:841: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f5a6901c970>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
_________________ TestFusionThread.test_thread_multiple_dtypes _________________

self = <cupy_tests.core_tests.fusion_tests.test_misc.TestFusionThread testMethod=test_thread_multiple_dtypes>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/cupy/__init__.py'>

    @testing.numpy_cupy_array_equal()
    def test_thread_multiple_dtypes(self, xp):
        x1 = testing.shaped_arange((3, 3), xp, xp.int64)
        y1 = testing.shaped_arange((3, 3), xp, xp.int64)
        x2 = x1.astype(xp.float64)
        y2 = y1.astype(xp.float64)
        threads = [None] * 100
        out = [None] * 100
    
        @cupy.fuse()
        def f(x, y):
            return x + y * 2
    
        def _target(tid, x, y):
            if xp is cupy:
                xp.cuda.Device(0).use()
            out[tid] = f(x, y).astype(xp.int64)
    
        def run_thread(tid):
            x, y = (x1, y1) if tid % 2 == 0 else (x2, y2)
            t = threading.Thread(target=_target, args=(tid, x, y))
            threads[tid] = t
            t.daemon = True
            t.start()
    
        for tid in range(0, 50):
            run_thread(tid)
    
        for tid in range(0, 50):
            threads[tid].join()
    
        for tid in range(50, 100):
            run_thread(tid)
    
        for tid in range(50, 100):
            threads[tid].join()
    
>       return xp.concatenate(out)

tests/cupy_tests/core_tests/fusion_tests/test_misc.py:378: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_manipulation/join.py:55: in concatenate
    return _core.concatenate_method(tup, axis, out)
cupy/_core/_routines_manipulation.pyx:533: in cupy._core._routines_manipulation.concatenate_method
    cpdef ndarray concatenate_method(tup, int axis, ndarray out=None):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise TypeError('Only cupy arrays can be concatenated')
E   AssertionError: Only cupy raises error
E   
E   Traceback (most recent call last):
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/cupy/testing/_helper.py", line 47, in _call_func
E       result = impl(self, *args, **kw)
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/tests/cupy_tests/core_tests/fusion_tests/test_misc.py", line 378, in test_thread_multiple_dtypes
E       return xp.concatenate(out)
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/cupy/_manipulation/join.py", line 55, in concatenate
E       return _core.concatenate_method(tup, axis, out)
E     File "cupy/_core/_routines_manipulation.pyx", line 533, in cupy._core._routines_manipulation.concatenate_method
E       cpdef ndarray concatenate_method(tup, int axis, ndarray out=None):
E     File "cupy/_core/_routines_manipulation.pyx", line 546, in cupy._core._routines_manipulation.concatenate_method
E       raise TypeError('Only cupy arrays can be concatenated')
E   TypeError: Only cupy arrays can be concatenated

cupy/_core/_routines_manipulation.pyx:546: AssertionError
_________________ TestVectorize.test_vectorize_arithmetic_ops __________________
cupy/testing/_helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/_helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/_helper.py:495: in check_func
    _array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[1.7425e+02, 3.3875e+02, 8.4141e+00, 6.7062e+01, 3.7906e+01,
        2.3109e+01, 6.8164e+00, 3.0906e+01, 6.3047...+02, 2.8734e+01, 4.3031e+01,
        3.3750e+00, 3.6906e+01, 1.7362e+02, 1.3227e+01, 3.0547e+00]],
      dtype=float16)
desired = array([[1.7425e+02, 3.3875e+02, 8.4141e+00, 6.7062e+01, 3.7906e+01,
        2.3109e+01, 6.8164e+00, 3.0906e+01, 6.3047...+02, 2.8734e+01, 4.3031e+01,
        3.3750e+00, 3.6906e+01, 1.7362e+02, 1.3227e+01, 3.0547e+00]],
      dtype=float16)
rtol = 1e-05, atol = 0, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-05, atol=0
E       
E       Mismatched elements: 1 / 600 (0.167%)
E       Max absolute difference: 0.5
E       Max relative difference: 0.000664
E        x: array([[1.7425e+02, 3.3875e+02, 8.4141e+00, 6.7062e+01, 3.7906e+01,
E               2.3109e+01, 6.8164e+00, 3.0906e+01, 6.3047e+00, 1.6650e+02,
E               5.6094e+00, 9.8900e+02, 2.4281e+01, 4.8500e+02, 1.0359e+01,...
E        y: array([[1.7425e+02, 3.3875e+02, 8.4141e+00, 6.7062e+01, 3.7906e+01,
E               2.3109e+01, 6.8164e+00, 3.0906e+01, 6.3047e+00, 1.6650e+02,
E               5.6094e+00, 9.8900e+02, 2.4281e+01, 4.8500e+02, 1.0359e+01,...

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float16'>
___________________________ TestIX_.test_ix_ndarray ____________________________
[XPASS(strict)] HIP may have a bug
_________ TestConvolve_param_0_{mode='valid'}.test_convolve_diff_types _________
[XPASS(strict)] HIP/ROCm may have a bug with larger `b`
_________ TestConvolve_param_1_{mode='same'}.test_convolve_diff_types __________
[XPASS(strict)] HIP/ROCm may have a bug with larger `b`
_________ TestConvolve_param_2_{mode='full'}.test_convolve_diff_types __________
[XPASS(strict)] HIP/ROCm may have a bug with larger `b`
___________ TestDistributionsPoissonInvalid.test_none_lam_generator ____________

self = <cupy_tests.random_tests.test_distributions.TestDistributionsPoissonInvalid testMethod=test_none_lam_generator>

    def test_none_lam_generator(self):
        with self.assertRaises(TypeError):
>           cupy.random.default_rng(0).poisson(None)

tests/cupy_tests/random_tests/test_distributions.py:565: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def default_rng(seed=None):  # NOQA  avoid redefinition of seed
        """Construct a new Generator with the default BitGenerator (XORWOW).
    
        Args:
            seed (None, int, array_like[ints], numpy.random.SeedSequence, cupy.random.BitGenerator, cupy.random.Generator, optional):
                A seed to initialize the :class:`cupy.random.BitGenerator`. If an
                ``int`` or ``array_like[ints]`` or None is passed, then it will be
                passed to :class:`numpy.random.SeedSequence` to detive the initial
                :class:`BitGenerator` state. One may also pass in a `SeedSequence
                instance. Adiditionally, when passed :class:`BitGenerator`, it will
                be wrapped by :class:`Generator`. If passed a :class:`Generator`,
                it will be returned unaltered.
    
        Returns:
            Generator: The initialized generator object.
        """  # NOQA, list of types need to be in one line for sphinx
        if runtime.is_hip:
>           raise RuntimeError('Generator API not supported in HIP,'
                               ' please use the legacy one.')
E           RuntimeError: Generator API not supported in HIP, please use the legacy one.

cupy/random/__init__.py:36: RuntimeError
_______ TestDistributionsStandardGammaInvalid.test_none_shape_generator ________

self = <cupy_tests.random_tests.test_distributions.TestDistributionsStandardGammaInvalid testMethod=test_none_shape_generator>

    def test_none_shape_generator(self):
        with self.assertRaises(TypeError):
>           cupy.random.default_rng(0).standard_gamma(None)

tests/cupy_tests/random_tests/test_distributions.py:682: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def default_rng(seed=None):  # NOQA  avoid redefinition of seed
        """Construct a new Generator with the default BitGenerator (XORWOW).
    
        Args:
            seed (None, int, array_like[ints], numpy.random.SeedSequence, cupy.random.BitGenerator, cupy.random.Generator, optional):
                A seed to initialize the :class:`cupy.random.BitGenerator`. If an
                ``int`` or ``array_like[ints]`` or None is passed, then it will be
                passed to :class:`numpy.random.SeedSequence` to detive the initial
                :class:`BitGenerator` state. One may also pass in a `SeedSequence
                instance. Adiditionally, when passed :class:`BitGenerator`, it will
                be wrapped by :class:`Generator`. If passed a :class:`Generator`,
                it will be returned unaltered.
    
        Returns:
            Generator: The initialized generator object.
        """  # NOQA, list of types need to be in one line for sphinx
        if runtime.is_hip:
>           raise RuntimeError('Generator API not supported in HIP,'
                               ' please use the legacy one.')
E           RuntimeError: Generator API not supported in HIP, please use the legacy one.

cupy/random/__init__.py:36: RuntimeError
________ TestCorrelate_param_0_{mode='valid'}.test_correlate_diff_types ________
[XPASS(strict)] ROCm/HIP may have a bug
________ TestCorrelate_param_1_{mode='full'}.test_correlate_diff_types _________
[XPASS(strict)] ROCm/HIP may have a bug
________ TestCorrelate_param_2_{mode='same'}.test_correlate_diff_types _________
[XPASS(strict)] ROCm/HIP may have a bug
_________________________ TestScatter.test_scatter_add _________________________

self = <cupyx_tests.test_scatter.TestScatter testMethod=test_scatter_add>
dtype = <class 'numpy.float16'>

    @testing.for_dtypes('iILQefd')
    def test_scatter_add(self, dtype):
        a = cupy.zeros((3,), dtype=dtype)
        i = cupy.array([1, 1], numpy.int32)
        v = cupy.array([2., 1.], dtype=dtype)
        cupyx.scatter_add(a, i, v)
>       testing.assert_array_equal(a, cupy.array([0, 3, 0], dtype=dtype))

tests/cupyx_tests/test_scatter.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([0.e+00, 2.e-07, 0.e+00], dtype=float16)
y = array([0., 3., 0.], dtype=float16), err_msg = '', verbose = True
strides_check = False

    def assert_array_equal(x, y, err_msg='', verbose=True, strides_check=False):
        """Raises an AssertionError if two array_like objects are not equal.
    
        Args:
             x(numpy.ndarray or cupy.ndarray): The actual object to check.
             y(numpy.ndarray or cupy.ndarray): The desired, expected object.
             strides_check(bool): If ``True``, consistency of strides is also
                 checked.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting values
                 are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_array_equal`
        """
>       numpy.testing.assert_array_equal(
            cupy.asnumpy(x), cupy.asnumpy(y), err_msg=err_msg,
            verbose=verbose)
E       AssertionError: 
E       Arrays are not equal
E       
E       Mismatched elements: 1 / 3 (33.3%)
E       Max absolute difference: 3.
E       Max relative difference: 1.
E        x: array([0.e+00, 2.e-07, 0.e+00], dtype=float16)
E        y: array([0., 3., 0.], dtype=float16)

cupy/testing/_array.py:91: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is e
______ TestLUSolve_param_1_{shapes=((4, 4), (4,)), trans=1}.test_lu_solve ______

self = <<cupyx_tests.scipy_tests.linalg_tests.test_decomp_lu.TestLUSolve_param_1_{shapes=((4, 4), (4,)), trans=1} testMethod=test_lu_solve>  parameter: {'shapes': ((4, 4), (4,)), 'trans': 1}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/cupy/__init__.py'>
scp = <module 'cupyx.scipy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/cupyx/scipy/__init__.py'>
dtype = <class 'numpy.complex128'>

    @testing.for_dtypes('fdFD')
    @testing.numpy_cupy_allclose(atol=1e-5, scipy_name='scp')
    def test_lu_solve(self, xp, scp, dtype):
        a_shape, b_shape = self.shapes
        A = testing.shaped_random(a_shape, xp, dtype=dtype)
        b = testing.shaped_random(b_shape, xp, dtype=dtype)
        lu = scp.linalg.lu_factor(A)
>       return scp.linalg.lu_solve(lu, b, trans=self.trans)

tests/cupyx_tests/scipy_tests/linalg_tests/test_decomp_lu.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

lu_and_piv = (array([[  4.23654799 +9.78618342j,   6.45894113 +7.99158564j,
          4.37587211 +4.61479362j,   8.91773001 +7.8052...214985 -0.27429572j,
          0.24577831 +0.45542352j, -10.51566175 +8.30910642j]]), array([1, 2, 2, 3], dtype=int32))
b = array([0.29021002-0.20248983j, 0.24618289+0.09046149j,
       0.25340517+0.10383107j, 0.23645517-0.00660227j])
trans = 1, overwrite_b = False, check_finite = True

    def lu_solve(lu_and_piv, b, trans=0, overwrite_b=False, check_finite=True):
        """Solve an equation system, ``a * x = b``, given the LU factorization of ``a``
    
        Args:
            lu_and_piv (tuple): LU factorization of matrix ``a`` (``(M, M)``)
                together with pivot indices.
            b (cupy.ndarray): The matrix with dimension ``(M,)`` or
                ``(M, N)``.
            trans ({0, 1, 2}): Type of system to solve:
    
                ========  =========
                trans     system
                ========  =========
                0         a x  = b
                1         a^T x = b
                2         a^H x = b
                ========  =========
            overwrite_b (bool): Allow overwriting data in b (may enhance
                performance)
            check_finite (bool): Whether to check that the input matrices contain
                only finite numbers. Disabling may give a performance gain, but may
                result in problems (crashes, non-termination) if the inputs do
                contain infinities or NaNs.
    
        Returns:
            cupy.ndarray:
                The matrix with dimension ``(M,)`` or ``(M, N)``.
    
        .. seealso:: :func:`scipy.linalg.lu_solve`
        """
    
        (lu, ipiv) = lu_and_piv
    
        _util._assert_cupy_array(lu)
        _util._assert_rank2(lu)
        _util._assert_nd_squareness(lu)
    
        m = lu.shape[0]
        if m != b.shape[0]:
            raise ValueError('incompatible dimensions.')
    
        dtype = lu.dtype
        if dtype.char == 'f':
            getrs = cusolver.sgetrs
        elif dtype.char == 'd':
            getrs = cusolver.dgetrs
        elif dtype.char == 'F':
            getrs = cusolver.cgetrs
        elif dtype.char == 'D':
            getrs = cusolver.zgetrs
        else:
            msg = 'Only float32, float64, complex64 and complex128 are supported.'
            raise NotImplementedError(msg)
    
        if trans == 0:
            trans = cublas.CUBLAS_OP_N
        elif trans == 1:
            trans = cublas.CUBLAS_OP_T
        elif trans == 2:
            trans = cublas.CUBLAS_OP_C
        else:
            raise ValueError('unknown trans')
    
        lu = lu.astype(dtype, order='F', copy=False)
        ipiv = ipiv.astype(ipiv.dtype, order='F', copy=True)
        # cuSolver uses 1-origin while SciPy uses 0-origin
        ipiv += 1
        b = b.astype(dtype, order='F', copy=(not overwrite_b))
    
        if check_finite:
            if lu.dtype.kind == 'f' and not cupy.isfinite(lu).all():
                raise ValueError(
                    'array must not contain infs or NaNs.\n'
                    'Note that when a singular matrix is given, unlike '
                    'scipy.linalg.lu_factor, cupyx.scipy.linalg.lu_factor '
                    'returns an array containing NaN.')
            if b.dtype.kind == 'f' and not cupy.isfinite(b).all():
                raise ValueError(
                    'array must not contain infs or NaNs')
    
        n = 1 if b.ndim == 1 else b.shape[1]
        cusolver_handle = device.get_cusolver_handle()
        dev_info = cupy.empty(1, dtype=numpy.int32)
    
        # solve for the inverse
        getrs(cusolver_handle,
              trans,
              m, n, lu.data.ptr, m, ipiv.data.ptr, b.data.ptr,
              m, dev_info.data.ptr)
    
        if dev_info[0] < 0:
>           raise ValueError('illegal value in %d-th argument of '
                             'internal getrs (lu_solve)' % -dev_info[0])
E           AssertionError: Only cupy raises error
E           
E           Traceback (most recent call last):
E             File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/cupy/testing/_helper.py", line 47, in _call_func
E               result = impl(self, *args, **kw)
E             File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/tests/cupyx_tests/scipy_tests/linalg_tests/test_decomp_lu.py", line 133, in test_lu_solve
E               return scp.linalg.lu_solve(lu, b, trans=self.trans)
E             File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/cupyx/scipy/linalg/decomp_lu.py", line 344, in lu_solve
E               raise ValueError('illegal value in %d-th argument of '
E           ValueError: illegal value in 1558304512-th argument of internal getrs (lu_solve)

cupyx/scipy/linalg/decomp_lu.py:344: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is D
______ TestLUSolve_param_2_{shapes=((4, 4), (4,)), trans=2}.test_lu_solve ______

self = <<cupyx_tests.scipy_tests.linalg_tests.test_decomp_lu.TestLUSolve_param_2_{shapes=((4, 4), (4,)), trans=2} testMethod=test_lu_solve>  parameter: {'shapes': ((4, 4), (4,)), 'trans': 2}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/cupy/__init__.py'>
scp = <module 'cupyx.scipy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/cupyx/scipy/__init__.py'>
dtype = <class 'numpy.float32'>

    @testing.for_dtypes('fdFD')
    @testing.numpy_cupy_allclose(atol=1e-5, scipy_name='scp')
    def test_lu_solve(self, xp, scp, dtype):
        a_shape, b_shape = self.shapes
        A = testing.shaped_random(a_shape, xp, dtype=dtype)
        b = testing.shaped_random(b_shape, xp, dtype=dtype)
        lu = scp.linalg.lu_factor(A)
>       return scp.linalg.lu_solve(lu, b, trans=self.trans)

tests/cupyx_tests/scipy_tests/linalg_tests/test_decomp_lu.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

lu_and_piv = (array([[ 9.636627  ,  3.8344152 ,  7.91725   ,  5.288949  ],
       [ 0.58946407,  6.995716  , -3.956574  , -2.246352...,
       [ 0.43962973,  0.6823059 ,  0.83048815,  4.776696  ]],
      dtype=float32), array([2, 3, 2, 3], dtype=int32))
b = array([ 1.0000000e+00,  0.0000000e+00, -3.5134796e-08,  5.9604645e-08],
      dtype=float32)
trans = 2, overwrite_b = False, check_finite = True

    def lu_solve(lu_and_piv, b, trans=0, overwrite_b=False, check_finite=True):
        """Solve an equation system, ``a * x = b``, given the LU factorization of ``a``
    
        Args:
            lu_and_piv (tuple): LU factorization of matrix ``a`` (``(M, M)``)
                together with pivot indices.
            b (cupy.ndarray): The matrix with dimension ``(M,)`` or
                ``(M, N)``.
            trans ({0, 1, 2}): Type of system to solve:
    
                ========  =========
                trans     system
                ========  =========
                0         a x  = b
                1         a^T x = b
                2         a^H x = b
                ========  =========
            overwrite_b (bool): Allow overwriting data in b (may enhance
                performance)
            check_finite (bool): Whether to check that the input matrices contain
                only finite numbers. Disabling may give a performance gain, but may
                result in problems (crashes, non-termination) if the inputs do
                contain infinities or NaNs.
    
        Returns:
            cupy.ndarray:
                The matrix with dimension ``(M,)`` or ``(M, N)``.
    
        .. seealso:: :func:`scipy.linalg.lu_solve`
        """
    
        (lu, ipiv) = lu_and_piv
    
        _util._assert_cupy_array(lu)
        _util._assert_rank2(lu)
        _util._assert_nd_squareness(lu)
    
        m = lu.shape[0]
        if m != b.shape[0]:
            raise ValueError('incompatible dimensions.')
    
        dtype = lu.dtype
        if dtype.char == 'f':
            getrs = cusolver.sgetrs
        elif dtype.char == 'd':
            getrs = cusolver.dgetrs
        elif dtype.char == 'F':
            getrs = cusolver.cgetrs
        elif dtype.char == 'D':
            getrs = cusolver.zgetrs
        else:
            msg = 'Only float32, float64, complex64 and complex128 are supported.'
            raise NotImplementedError(msg)
    
        if trans == 0:
            trans = cublas.CUBLAS_OP_N
        elif trans == 1:
            trans = cublas.CUBLAS_OP_T
        elif trans == 2:
            trans = cublas.CUBLAS_OP_C
        else:
            raise ValueError('unknown trans')
    
        lu = lu.astype(dtype, order='F', copy=False)
        ipiv = ipiv.astype(ipiv.dtype, order='F', copy=True)
        # cuSolver uses 1-origin while SciPy uses 0-origin
        ipiv += 1
        b = b.astype(dtype, order='F', copy=(not overwrite_b))
    
        if check_finite:
            if lu.dtype.kind == 'f' and not cupy.isfinite(lu).all():
                raise ValueError(
                    'array must not contain infs or NaNs.\n'
                    'Note that when a singular matrix is given, unlike '
                    'scipy.linalg.lu_factor, cupyx.scipy.linalg.lu_factor '
                    'returns an array containing NaN.')
            if b.dtype.kind == 'f' and not cupy.isfinite(b).all():
                raise ValueError(
                    'array must not contain infs or NaNs')
    
        n = 1 if b.ndim == 1 else b.shape[1]
        cusolver_handle = device.get_cusolver_handle()
        dev_info = cupy.empty(1, dtype=numpy.int32)
    
        # solve for the inverse
        getrs(cusolver_handle,
              trans,
              m, n, lu.data.ptr, m, ipiv.data.ptr, b.data.ptr,
              m, dev_info.data.ptr)
    
        if dev_info[0] < 0:
>           raise ValueError('illegal value in %d-th argument of '
                             'internal getrs (lu_solve)' % -dev_info[0])
E           AssertionError: Only cupy raises error
E           
E           Traceback (most recent call last):
E             File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/cupy/testing/_helper.py", line 47, in _call_func
E               result = impl(self, *args, **kw)
E             File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/tests/cupyx_tests/scipy_tests/linalg_tests/test_decomp_lu.py", line 133, in test_lu_solve
E               return scp.linalg.lu_solve(lu, b, trans=self.trans)
E             File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/cupyx/scipy/linalg/decomp_lu.py", line 344, in lu_solve
E               raise ValueError('illegal value in %d-th argument of '
E           ValueError: illegal value in 1558304511-th argument of internal getrs (lu_solve)

cupyx/scipy/linalg/decomp_lu.py:344: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is f
_____ TestLUSolve_param_4_{shapes=((5, 5), (5, 2)), trans=1}.test_lu_solve _____

self = <<cupyx_tests.scipy_tests.linalg_tests.test_decomp_lu.TestLUSolve_param_4_{shapes=((5, 5), (5, 2)), trans=1} testMethod=test_lu_solve>  parameter: {'shapes': ((5, 5), (5, 2)), 'trans': 1}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/cupy/__init__.py'>
scp = <module 'cupyx.scipy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/cupyx/scipy/__init__.py'>
dtype = <class 'numpy.complex64'>

    @testing.for_dtypes('fdFD')
    @testing.numpy_cupy_allclose(atol=1e-5, scipy_name='scp')
    def test_lu_solve(self, xp, scp, dtype):
        a_shape, b_shape = self.shapes
        A = testing.shaped_random(a_shape, xp, dtype=dtype)
        b = testing.shaped_random(b_shape, xp, dtype=dtype)
        lu = scp.linalg.lu_factor(A)
>       return scp.linalg.lu_solve(lu, b, trans=self.trans)

tests/cupyx_tests/scipy_tests/linalg_tests/test_decomp_lu.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

lu_and_piv = (array([[ 9.786183   +6.7063785j ,  7.9915857  +2.1038256j ,
         4.614794   +1.289263j  ,  7.8052917  +3.1542835j... , -0.1953073  +0.38294038j,
         1.4816577  +3.005199j  ]], dtype=complex64), array([4, 1, 4, 3, 4], dtype=int32))
b = array([[-0.12906706+0.83930093j, -0.4556416 +0.47542247j],
       [-1.6380517 +0.28560114j, -1.3639436 -0.01759141j],
...5160456j ,  0.17068669-1.2632399j ],
       [-0.42293376-0.24016505j, -1.34513   -0.06091501j]],
      dtype=complex64)
trans = 1, overwrite_b = False, check_finite = True

    def lu_solve(lu_and_piv, b, trans=0, overwrite_b=False, check_finite=True):
        """Solve an equation system, ``a * x = b``, given the LU factorization of ``a``
    
        Args:
            lu_and_piv (tuple): LU factorization of matrix ``a`` (``(M, M)``)
                together with pivot indices.
            b (cupy.ndarray): The matrix with dimension ``(M,)`` or
                ``(M, N)``.
            trans ({0, 1, 2}): Type of system to solve:
    
                ========  =========
                trans     system
                ========  =========
                0         a x  = b
                1         a^T x = b
                2         a^H x = b
                ========  =========
            overwrite_b (bool): Allow overwriting data in b (may enhance
                performance)
            check_finite (bool): Whether to check that the input matrices contain
                only finite numbers. Disabling may give a performance gain, but may
                result in problems (crashes, non-termination) if the inputs do
                contain infinities or NaNs.
    
        Returns:
            cupy.ndarray:
                The matrix with dimension ``(M,)`` or ``(M, N)``.
    
        .. seealso:: :func:`scipy.linalg.lu_solve`
        """
    
        (lu, ipiv) = lu_and_piv
    
        _util._assert_cupy_array(lu)
        _util._assert_rank2(lu)
        _util._assert_nd_squareness(lu)
    
        m = lu.shape[0]
        if m != b.shape[0]:
            raise ValueError('incompatible dimensions.')
    
        dtype = lu.dtype
        if dtype.char == 'f':
            getrs = cusolver.sgetrs
        elif dtype.char == 'd':
            getrs = cusolver.dgetrs
        elif dtype.char == 'F':
            getrs = cusolver.cgetrs
        elif dtype.char == 'D':
            getrs = cusolver.zgetrs
        else:
            msg = 'Only float32, float64, complex64 and complex128 are supported.'
            raise NotImplementedError(msg)
    
        if trans == 0:
            trans = cublas.CUBLAS_OP_N
        elif trans == 1:
            trans = cublas.CUBLAS_OP_T
        elif trans == 2:
            trans = cublas.CUBLAS_OP_C
        else:
            raise ValueError('unknown trans')
    
        lu = lu.astype(dtype, order='F', copy=False)
        ipiv = ipiv.astype(ipiv.dtype, order='F', copy=True)
        # cuSolver uses 1-origin while SciPy uses 0-origin
        ipiv += 1
        b = b.astype(dtype, order='F', copy=(not overwrite_b))
    
        if check_finite:
            if lu.dtype.kind == 'f' and not cupy.isfinite(lu).all():
                raise ValueError(
                    'array must not contain infs or NaNs.\n'
                    'Note that when a singular matrix is given, unlike '
                    'scipy.linalg.lu_factor, cupyx.scipy.linalg.lu_factor '
                    'returns an array containing NaN.')
            if b.dtype.kind == 'f' and not cupy.isfinite(b).all():
                raise ValueError(
                    'array must not contain infs or NaNs')
    
        n = 1 if b.ndim == 1 else b.shape[1]
        cusolver_handle = device.get_cusolver_handle()
        dev_info = cupy.empty(1, dtype=numpy.int32)
    
        # solve for the inverse
        getrs(cusolver_handle,
              trans,
              m, n, lu.data.ptr, m, ipiv.data.ptr, b.data.ptr,
              m, dev_info.data.ptr)
    
        if dev_info[0] < 0:
>           raise ValueError('illegal value in %d-th argument of '
                             'internal getrs (lu_solve)' % -dev_info[0])
E           AssertionError: Only cupy raises error
E           
E           Traceback (most recent call last):
E             File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/cupy/testing/_helper.py", line 47, in _call_func
E               result = impl(self, *args, **kw)
E             File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/tests/cupyx_tests/scipy_tests/linalg_tests/test_decomp_lu.py", line 133, in test_lu_solve
E               return scp.linalg.lu_solve(lu, b, trans=self.trans)
E             File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/cupyx/scipy/linalg/decomp_lu.py", line 344, in lu_solve
E               raise ValueError('illegal value in %d-th argument of '
E           ValueError: illegal value in 1857101312-th argument of internal getrs (lu_solve)

cupyx/scipy/linalg/decomp_lu.py:344: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is F
_____ TestLUSolve_param_5_{shapes=((5, 5), (5, 2)), trans=2}.test_lu_solve _____

self = <<cupyx_tests.scipy_tests.linalg_tests.test_decomp_lu.TestLUSolve_param_5_{shapes=((5, 5), (5, 2)), trans=2} testMethod=test_lu_solve>  parameter: {'shapes': ((5, 5), (5, 2)), 'trans': 2}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/cupy/__init__.py'>
scp = <module 'cupyx.scipy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/cupyx/scipy/__init__.py'>
dtype = <class 'numpy.complex64'>

    @testing.for_dtypes('fdFD')
    @testing.numpy_cupy_allclose(atol=1e-5, scipy_name='scp')
    def test_lu_solve(self, xp, scp, dtype):
        a_shape, b_shape = self.shapes
        A = testing.shaped_random(a_shape, xp, dtype=dtype)
        b = testing.shaped_random(b_shape, xp, dtype=dtype)
        lu = scp.linalg.lu_factor(A)
>       return scp.linalg.lu_solve(lu, b, trans=self.trans)

tests/cupyx_tests/scipy_tests/linalg_tests/test_decomp_lu.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

lu_and_piv = (array([[ 9.786183   +6.7063785j ,  7.9915857  +2.1038256j ,
         4.614794   +1.289263j  ,  7.8052917  +3.1542835j... , -0.1953073  +0.38294038j,
         1.4816577  +3.005199j  ]], dtype=complex64), array([4, 1, 4, 3, 4], dtype=int32))
b = array([[ 1.3340689 +0.14706904j,  0.63873684+0.9301306j ],
       [-0.01678619-1.9822356j ,  2.2719011 -0.60252565j],
...59350985j, -0.64952475-1.666017j  ],
       [-1.6877671 -1.427124j  ,  2.19591   -0.78355455j]],
      dtype=complex64)
trans = 2, overwrite_b = False, check_finite = True

    def lu_solve(lu_and_piv, b, trans=0, overwrite_b=False, check_finite=True):
        """Solve an equation system, ``a * x = b``, given the LU factorization of ``a``
    
        Args:
            lu_and_piv (tuple): LU factorization of matrix ``a`` (``(M, M)``)
                together with pivot indices.
            b (cupy.ndarray): The matrix with dimension ``(M,)`` or
                ``(M, N)``.
            trans ({0, 1, 2}): Type of system to solve:
    
                ========  =========
                trans     system
                ========  =========
                0         a x  = b
                1         a^T x = b
                2         a^H x = b
                ========  =========
            overwrite_b (bool): Allow overwriting data in b (may enhance
                performance)
            check_finite (bool): Whether to check that the input matrices contain
                only finite numbers. Disabling may give a performance gain, but may
                result in problems (crashes, non-termination) if the inputs do
                contain infinities or NaNs.
    
        Returns:
            cupy.ndarray:
                The matrix with dimension ``(M,)`` or ``(M, N)``.
    
        .. seealso:: :func:`scipy.linalg.lu_solve`
        """
    
        (lu, ipiv) = lu_and_piv
    
        _util._assert_cupy_array(lu)
        _util._assert_rank2(lu)
        _util._assert_nd_squareness(lu)
    
        m = lu.shape[0]
        if m != b.shape[0]:
            raise ValueError('incompatible dimensions.')
    
        dtype = lu.dtype
        if dtype.char == 'f':
            getrs = cusolver.sgetrs
        elif dtype.char == 'd':
            getrs = cusolver.dgetrs
        elif dtype.char == 'F':
            getrs = cusolver.cgetrs
        elif dtype.char == 'D':
            getrs = cusolver.zgetrs
        else:
            msg = 'Only float32, float64, complex64 and complex128 are supported.'
            raise NotImplementedError(msg)
    
        if trans == 0:
            trans = cublas.CUBLAS_OP_N
        elif trans == 1:
            trans = cublas.CUBLAS_OP_T
        elif trans == 2:
            trans = cublas.CUBLAS_OP_C
        else:
            raise ValueError('unknown trans')
    
        lu = lu.astype(dtype, order='F', copy=False)
        ipiv = ipiv.astype(ipiv.dtype, order='F', copy=True)
        # cuSolver uses 1-origin while SciPy uses 0-origin
        ipiv += 1
        b = b.astype(dtype, order='F', copy=(not overwrite_b))
    
        if check_finite:
            if lu.dtype.kind == 'f' and not cupy.isfinite(lu).all():
                raise ValueError(
                    'array must not contain infs or NaNs.\n'
                    'Note that when a singular matrix is given, unlike '
                    'scipy.linalg.lu_factor, cupyx.scipy.linalg.lu_factor '
                    'returns an array containing NaN.')
            if b.dtype.kind == 'f' and not cupy.isfinite(b).all():
                raise ValueError(
                    'array must not contain infs or NaNs')
    
        n = 1 if b.ndim == 1 else b.shape[1]
        cusolver_handle = device.get_cusolver_handle()
        dev_info = cupy.empty(1, dtype=numpy.int32)
    
        # solve for the inverse
        getrs(cusolver_handle,
              trans,
              m, n, lu.data.ptr, m, ipiv.data.ptr, b.data.ptr,
              m, dev_info.data.ptr)
    
        if dev_info[0] < 0:
>           raise ValueError('illegal value in %d-th argument of '
                             'internal getrs (lu_solve)' % -dev_info[0])
E           AssertionError: Only cupy raises error
E           
E           Traceback (most recent call last):
E             File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/cupy/testing/_helper.py", line 47, in _call_func
E               result = impl(self, *args, **kw)
E             File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/tests/cupyx_tests/scipy_tests/linalg_tests/test_decomp_lu.py", line 133, in test_lu_solve
E               return scp.linalg.lu_solve(lu, b, trans=self.trans)
E             File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/cupyx/scipy/linalg/decomp_lu.py", line 344, in lu_solve
E               raise ValueError('illegal value in %d-th argument of '
E           ValueError: illegal value in 1857101312-th argument of internal getrs (lu_solve)

cupyx/scipy/linalg/decomp_lu.py:344: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is F
_ TestMapCoordinatesHalfInteger.test_map_coordinates_float[_param_46_{mode='grid-constant', order=4}] _

self = <<cupyx_tests.scipy_tests.ndimage_tests.test_interpolation.TestMapCoordinatesHalfInteger object at 0x7f525f70e730>  parameter: {'mode': 'grid-constant', 'order': 4}>
args = (), kw = {'dtype': <class 'numpy.float64'>}
dtype = <class 'numpy.float64'>

    @_wraps_partial(impl, name)
    def test_func(self, *args, **kw):
        for dtype in dtypes:
            try:
                kw[name] = numpy.dtype(dtype).type
>               impl(self, *args, **kw)

cupy/testing/_helper.py:825: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/testing/_helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/_helper.py:495: in check_func
    _array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([229.76997843, 598.96953239])
desired = array([3.06993892, 8.        ]), rtol = 1e-07, atol = 0.0001
err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=0.0001
E       
E       Mismatched elements: 2 / 2 (100%)
E       Max absolute difference: 590.96953239
E       Max relative difference: 73.87119155
E        x: array([229.769978, 598.969532])
E        y: array([3.069939, 8.      ])

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestMapCoordinatesHalfInteger.test_map_coordinates_float[_param_47_{mode='grid-constant', order=5}] _

self = <<cupyx_tests.scipy_tests.ndimage_tests.test_interpolation.TestMapCoordinatesHalfInteger object at 0x7f525f718520>  parameter: {'mode': 'grid-constant', 'order': 5}>
args = (), kw = {'dtype': <class 'numpy.float64'>}
dtype = <class 'numpy.float64'>

    @_wraps_partial(impl, name)
    def test_func(self, *args, **kw):
        for dtype in dtypes:
            try:
                kw[name] = numpy.dtype(dtype).type
>               impl(self, *args, **kw)

cupy/testing/_helper.py:825: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/testing/_helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/_helper.py:495: in check_func
    _array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([ 78.42728447, 201.97560613])
desired = array([3.12122783, 8.        ]), rtol = 1e-07, atol = 0.0001
err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=0.0001
E       
E       Mismatched elements: 2 / 2 (100%)
E       Max absolute difference: 193.97560613
E       Max relative difference: 24.24695077
E        x: array([ 78.427284, 201.975606])
E        y: array([3.121228, 8.      ])

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestZoomOutputSize1.test_zoom_output_size1[_param_4_{grid_mode=False, mode='constant', order=4, shape=(5, 5, 2), zoom=(2, 2, 0.5)}] _

self = <<cupyx_tests.scipy_tests.ndimage_tests.test_interpolation.TestZoomOutputSize1 object at 0x7f52568b2190>  parameter: {'grid_mode': False, 'mode': 'constant', 'order': 4, 'shape': (5, 5, 2), 'zoom': (2, 2, 0.5)}>
args = (), kw = {'dtype': <class 'numpy.float32'>}
dtype = <class 'numpy.float32'>

    @_wraps_partial(impl, name)
    def test_func(self, *args, **kw):
        for dtype in dtypes:
            try:
                kw[name] = numpy.dtype(dtype).type
>               impl(self, *args, **kw)

cupy/testing/_helper.py:825: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/testing/_helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/_helper.py:495: in check_func
    _array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[[-9.26215027e-04],
        [-7.12910551e-05],
        [-1.04548770e-03],
        [ 6.02170185e-04],
        [ ...   [-1.58413204e-05],
        [-2.26292832e-05],
        [-1.52809316e-05],
        [-2.62873400e-05]]], dtype=float32)
desired = array([[[-1.91677706e-16],
        [ 6.02007280e-16],
        [ 7.39644969e-18],
        [ 9.42839520e-17],
        [-...   [ 2.49078413e-18],
        [-6.86374620e-18],
        [-2.01807717e-17],
        [-1.36889723e-17]]], dtype=float32)
rtol = 1e-07, atol = 1e-05, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=1e-05
E       
E       Mismatched elements: 95 / 100 (95%)
E       Max absolute difference: 0.00124037
E       Max relative difference: 1.6367563e+14
E        x: array([[[-9.262150e-04],
E               [-7.129106e-05],
E               [-1.045488e-03],...
E        y: array([[[-1.916777e-16],
E               [ 6.020073e-16],
E               [ 7.396450e-18],...

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
_ TestZoomOutputSize1.test_zoom_output_size1[_param_5_{grid_mode=False, mode='constant', order=5, shape=(5, 5, 2), zoom=(2, 2, 0.5)}] _

self = <<cupyx_tests.scipy_tests.ndimage_tests.test_interpolation.TestZoomOutputSize1 object at 0x7f52568d2280>  parameter: {'grid_mode': False, 'mode': 'constant', 'order': 5, 'shape': (5, 5, 2), 'zoom': (2, 2, 0.5)}>
args = (), kw = {'dtype': <class 'numpy.float32'>}
dtype = <class 'numpy.float32'>

    @_wraps_partial(impl, name)
    def test_func(self, *args, **kw):
        for dtype in dtypes:
            try:
                kw[name] = numpy.dtype(dtype).type
>               impl(self, *args, **kw)

cupy/testing/_helper.py:825: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/testing/_helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/_helper.py:495: in check_func
    _array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[[-6.23873319e-04],
        [-6.52701594e-04],
        [-5.34185849e-04],
        [-7.05319864e-04],
        [-...   [-2.50156190e-05],
        [ 9.55036171e-07],
        [-1.27298597e-06],
        [-4.17136789e-06]]], dtype=float32)
desired = array([[[ 2.1000416e-16],
        [-7.7505151e-16],
        [-6.6172874e-17],
        [-6.5140899e-16],
        [ 7.95...       [-1.5922411e-17],
        [ 3.1236140e-17],
        [-5.3157008e-17],
        [-1.3124647e-17]]], dtype=float32)
rtol = 1e-07, atol = 1e-05, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=1e-05
E       
E       Mismatched elements: 85 / 100 (85%)
E       Max absolute difference: 0.00084527
E       Max relative difference: 1.881553e+13
E        x: array([[[-6.238733e-04],
E               [-6.527016e-04],
E               [-5.341858e-04],...
E        y: array([[[ 2.100042e-16],
E               [-7.750515e-16],
E               [-6.617287e-17],...

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
_ TestZoomOutputSize1.test_zoom_output_size1[_param_16_{grid_mode=False, mode='mirror', order=4, shape=(5, 5, 2), zoom=(2, 2, 0.5)}] _

self = <<cupyx_tests.scipy_tests.ndimage_tests.test_interpolation.TestZoomOutputSize1 object at 0x7f52568be670>  parameter: {'grid_mode': False, 'mode': 'mirror', 'order': 4, 'shape': (5, 5, 2), 'zoom': (2, 2, 0.5)}>
args = (), kw = {'dtype': <class 'numpy.float32'>}
dtype = <class 'numpy.float32'>

    @_wraps_partial(impl, name)
    def test_func(self, *args, **kw):
        for dtype in dtypes:
            try:
                kw[name] = numpy.dtype(dtype).type
>               impl(self, *args, **kw)

cupy/testing/_helper.py:825: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/testing/_helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/_helper.py:495: in check_func
    _array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[[-9.26215027e-04],
        [-7.12910551e-05],
        [-1.04548770e-03],
        [ 6.02170185e-04],
        [ ...   [-1.58413204e-05],
        [-2.26292832e-05],
        [-1.52809316e-05],
        [-2.62873400e-05]]], dtype=float32)
desired = array([[[-1.91677706e-16],
        [ 6.02007280e-16],
        [ 7.39644969e-18],
        [ 9.42839520e-17],
        [-...   [ 2.49078413e-18],
        [-6.86374620e-18],
        [-2.01807717e-17],
        [-1.36889723e-17]]], dtype=float32)
rtol = 1e-07, atol = 1e-05, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=1e-05
E       
E       Mismatched elements: 95 / 100 (95%)
E       Max absolute difference: 0.00124037
E       Max relative difference: 1.6367563e+14
E        x: array([[[-9.262150e-04],
E               [-7.129106e-05],
E               [-1.045488e-03],...
E        y: array([[[-1.916777e-16],
E               [ 6.020073e-16],
E               [ 7.396450e-18],...

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
_ TestZoomOutputSize1.test_zoom_output_size1[_param_17_{grid_mode=False, mode='mirror', order=5, shape=(5, 5, 2), zoom=(2, 2, 0.5)}] _

self = <<cupyx_tests.scipy_tests.ndimage_tests.test_interpolation.TestZoomOutputSize1 object at 0x7f52566a9a60>  parameter: {'grid_mode': False, 'mode': 'mirror', 'order': 5, 'shape': (5, 5, 2), 'zoom': (2, 2, 0.5)}>
args = (), kw = {'dtype': <class 'numpy.float32'>}
dtype = <class 'numpy.float32'>

    @_wraps_partial(impl, name)
    def test_func(self, *args, **kw):
        for dtype in dtypes:
            try:
                kw[name] = numpy.dtype(dtype).type
>               impl(self, *args, **kw)

cupy/testing/_helper.py:825: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/testing/_helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/_helper.py:495: in check_func
    _array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[[-6.23873319e-04],
        [-6.52701594e-04],
        [-5.34185849e-04],
        [-7.05319864e-04],
        [-...   [-2.50156190e-05],
        [ 9.55036171e-07],
        [-1.27298597e-06],
        [-4.17136789e-06]]], dtype=float32)
desired = array([[[ 2.1000416e-16],
        [-7.7505151e-16],
        [-6.6172874e-17],
        [-6.5140899e-16],
        [ 7.95...       [-1.5922411e-17],
        [ 3.1236140e-17],
        [-5.3157008e-17],
        [-1.3124647e-17]]], dtype=float32)
rtol = 1e-07, atol = 1e-05, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=1e-05
E       
E       Mismatched elements: 85 / 100 (85%)
E       Max absolute difference: 0.00084527
E       Max relative difference: 1.881553e+13
E        x: array([[[-6.238733e-04],
E               [-6.527016e-04],
E               [-5.341858e-04],...
E        y: array([[[ 2.100042e-16],
E               [-7.750515e-16],
E               [-6.617287e-17],...

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
_ TestZoomOutputSize1.test_zoom_output_size1[_param_22_{grid_mode=False, mode='wrap', order=4, shape=(5, 5, 2), zoom=(2, 2, 0.5)}] _

self = <<cupyx_tests.scipy_tests.ndimage_tests.test_interpolation.TestZoomOutputSize1 object at 0x7f52568d9310>  parameter: {'grid_mode': False, 'mode': 'wrap', 'order': 4, 'shape': (5, 5, 2), 'zoom': (2, 2, 0.5)}>
args = (), kw = {'dtype': <class 'numpy.float32'>}
dtype = <class 'numpy.float32'>

    @_wraps_partial(impl, name)
    def test_func(self, *args, **kw):
        for dtype in dtypes:
            try:
                kw[name] = numpy.dtype(dtype).type
>               impl(self, *args, **kw)

cupy/testing/_helper.py:825: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/testing/_helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/_helper.py:495: in check_func
    _array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[[-9.26215027e-04],
        [-7.12910551e-05],
        [-1.04548770e-03],
        [ 6.02170185e-04],
        [ ...   [-1.58413204e-05],
        [-2.26292832e-05],
        [-1.52809316e-05],
        [-2.62873400e-05]]], dtype=float32)
desired = array([[[-1.91677706e-16],
        [ 6.02007280e-16],
        [ 7.39644969e-18],
        [ 9.42839520e-17],
        [-...   [ 2.49078413e-18],
        [-6.86374620e-18],
        [-2.01807717e-17],
        [-1.36889723e-17]]], dtype=float32)
rtol = 1e-07, atol = 1e-05, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=1e-05
E       
E       Mismatched elements: 95 / 100 (95%)
E       Max absolute difference: 0.00124037
E       Max relative difference: 1.6367563e+14
E        x: array([[[-9.262150e-04],
E               [-7.129106e-05],
E               [-1.045488e-03],...
E        y: array([[[-1.916777e-16],
E               [ 6.020073e-16],
E               [ 7.396450e-18],...

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
_ TestZoomOutputSize1.test_zoom_output_size1[_param_23_{grid_mode=False, mode='wrap', order=5, shape=(5, 5, 2), zoom=(2, 2, 0.5)}] _

self = <<cupyx_tests.scipy_tests.ndimage_tests.test_interpolation.TestZoomOutputSize1 object at 0x7f52568e7250>  parameter: {'grid_mode': False, 'mode': 'wrap', 'order': 5, 'shape': (5, 5, 2), 'zoom': (2, 2, 0.5)}>
args = (), kw = {'dtype': <class 'numpy.float32'>}
dtype = <class 'numpy.float32'>

    @_wraps_partial(impl, name)
    def test_func(self, *args, **kw):
        for dtype in dtypes:
            try:
                kw[name] = numpy.dtype(dtype).type
>               impl(self, *args, **kw)

cupy/testing/_helper.py:825: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/testing/_helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/_helper.py:495: in check_func
    _array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[[-6.23873319e-04],
        [-6.52701594e-04],
        [-5.34185849e-04],
        [-7.05319864e-04],
        [-...   [-2.50156190e-05],
        [ 9.55036171e-07],
        [-1.27298597e-06],
        [-4.17136789e-06]]], dtype=float32)
desired = array([[[ 2.1000416e-16],
        [-7.7505151e-16],
        [-6.6172874e-17],
        [-6.5140899e-16],
        [ 7.95...       [-1.5922411e-17],
        [ 3.1236140e-17],
        [-5.3157008e-17],
        [-1.3124647e-17]]], dtype=float32)
rtol = 1e-07, atol = 1e-05, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=1e-05
E       
E       Mismatched elements: 85 / 100 (85%)
E       Max absolute difference: 0.00084527
E       Max relative difference: 1.881553e+13
E        x: array([[[-6.238733e-04],
E               [-6.527016e-04],
E               [-5.341858e-04],...
E        y: array([[[ 2.100042e-16],
E               [-7.750515e-16],
E               [-6.617287e-17],...

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
_ TestZoomOutputSize1.test_zoom_output_size1[_param_46_{grid_mode=False, mode='grid-constant', order=4, shape=(5, 5, 2), zoom=(2, 2, 0.5)}] _

self = <<cupyx_tests.scipy_tests.ndimage_tests.test_interpolation.TestZoomOutputSize1 object at 0x7f52563cc8b0>  parameter: {'grid_mode': False, 'mode': 'grid-constant', 'order': 4, 'shape': (5, 5, 2), 'zoom': (2, 2, 0.5)}>
args = (), kw = {'dtype': <class 'numpy.float32'>}
dtype = <class 'numpy.float32'>

    @_wraps_partial(impl, name)
    def test_func(self, *args, **kw):
        for dtype in dtypes:
            try:
                kw[name] = numpy.dtype(dtype).type
>               impl(self, *args, **kw)

cupy/testing/_helper.py:825: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/testing/_helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/_helper.py:495: in check_func
    _array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[[-1.6466675e-04],
        [-3.1765160e-06],
        [-2.8256103e-04],
        [ 1.0465207e-04],
        [-5.02...       [-1.4928388e-06],
        [-5.8970027e-06],
        [-2.4932410e-06],
        [-3.5395026e-06]]], dtype=float32)
desired = array([[[-8.12850668e-17],
        [-9.62678620e-17],
        [-7.64445911e-17],
        [ 6.90388762e-17],
        [-...   [-1.31306278e-18],
        [-2.34584224e-18],
        [-1.16198641e-18],
        [-3.16820747e-19]]], dtype=float32)
rtol = 1e-07, atol = 1e-05, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=1e-05
E       
E       Mismatched elements: 75 / 100 (75%)
E       Max absolute difference: 0.00034115
E       Max relative difference: 2.5044335e+14
E        x: array([[[-1.646668e-04],
E               [-3.176516e-06],
E               [-2.825610e-04],...
E        y: array([[[-8.128507e-17],
E               [-9.626786e-17],
E               [-7.644459e-17],...

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
_ TestZoomOutputSize1.test_zoom_output_size1[_param_47_{grid_mode=False, mode='grid-constant', order=5, shape=(5, 5, 2), zoom=(2, 2, 0.5)}] _

self = <<cupyx_tests.scipy_tests.ndimage_tests.test_interpolation.TestZoomOutputSize1 object at 0x7f52563e2b80>  parameter: {'grid_mode': False, 'mode': 'grid-constant', 'order': 5, 'shape': (5, 5, 2), 'zoom': (2, 2, 0.5)}>
args = (), kw = {'dtype': <class 'numpy.float32'>}
dtype = <class 'numpy.float32'>

    @_wraps_partial(impl, name)
    def test_func(self, *args, **kw):
        for dtype in dtypes:
            try:
                kw[name] = numpy.dtype(dtype).type
>               impl(self, *args, **kw)

cupy/testing/_helper.py:825: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/testing/_helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/_helper.py:495: in check_func
    _array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[[ 1.46576144e-06],
        [-1.07652804e-05],
        [ 1.48250510e-05],
        [-2.88788979e-05],
        [-...   [ 3.59045725e-06],
        [ 3.90473633e-06],
        [ 2.02454498e-06],
        [ 1.08106917e-06]]], dtype=float32)
desired = array([[[-5.28892732e-17],
        [-4.68497761e-17],
        [-1.70810335e-16],
        [-1.91986781e-16],
        [-...   [-3.94138989e-18],
        [-8.65396191e-18],
        [ 1.07858407e-18],
        [-2.29544853e-18]]], dtype=float32)
rtol = 1e-07, atol = 1e-05, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=1e-05
E       
E       Mismatched elements: 40 / 100 (40%)
E       Max absolute difference: 0.00011814
E       Max relative difference: 9.6834375e+13
E        x: array([[[ 1.465761e-06],
E               [-1.076528e-05],
E               [ 1.482505e-05],...
E        y: array([[[-5.288927e-17],
E               [-4.684978e-17],
E               [-1.708103e-16],...

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
_ TestZoomOutputSize1.test_zoom_output_size1[_param_52_{grid_mode=True, mode='constant', order=4, shape=(5, 5, 2), zoom=(2, 2, 0.5)}] _

self = <<cupyx_tests.scipy_tests.ndimage_tests.test_interpolation.TestZoomOutputSize1 object at 0x7f52566a9f40>  parameter: {'grid_mode': True, 'mode': 'constant', 'order': 4, 'shape': (5, 5, 2), 'zoom': (2, 2, 0.5)}>
args = (), kw = {'dtype': <class 'numpy.float64'>}
dtype = <class 'numpy.float64'>

    @_wraps_partial(impl, name)
    def test_func(self, *args, **kw):
        for dtype in dtypes:
            try:
                kw[name] = numpy.dtype(dtype).type
>               impl(self, *args, **kw)

cupy/testing/_helper.py:825: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/testing/_helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/_helper.py:495: in check_func
    _array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[[   0.        ],
        [   0.        ],
        [   0.        ],
        [   0.        ],
        [   0.    ... [   0.        ],
        [   0.        ],
        [   0.        ],
        [   0.        ],
        [   0.        ]]])
desired = array([[[ 0.00000000e+00],
        [ 0.00000000e+00],
        [ 0.00000000e+00],
        [ 0.00000000e+00],
        [ ...000e+00],
        [ 0.00000000e+00],
        [ 0.00000000e+00],
        [ 0.00000000e+00],
        [ 0.00000000e+00]]])
rtol = 1e-07, atol = 1e-05, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=1e-05
E       
E       Mismatched elements: 64 / 100 (64%)
E       Max absolute difference: 2336.52632552
E       Max relative difference: 629887.8879561
E        x: array([[[   0.      ],
E               [   0.      ],
E               [   0.      ],...
E        y: array([[[ 0.000000e+00],
E               [ 0.000000e+00],
E               [ 0.000000e+00],...

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestZoomOutputSize1.test_zoom_output_size1[_param_53_{grid_mode=True, mode='constant', order=5, shape=(5, 5, 2), zoom=(2, 2, 0.5)}] _

self = <<cupyx_tests.scipy_tests.ndimage_tests.test_interpolation.TestZoomOutputSize1 object at 0x7f525668c730>  parameter: {'grid_mode': True, 'mode': 'constant', 'order': 5, 'shape': (5, 5, 2), 'zoom': (2, 2, 0.5)}>
args = (), kw = {'dtype': <class 'numpy.float64'>}
dtype = <class 'numpy.float64'>

    @_wraps_partial(impl, name)
    def test_func(self, *args, **kw):
        for dtype in dtypes:
            try:
                kw[name] = numpy.dtype(dtype).type
>               impl(self, *args, **kw)

cupy/testing/_helper.py:825: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/testing/_helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/_helper.py:495: in check_func
    _array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[[ 0.00000000e+00],
        [ 0.00000000e+00],
        [ 0.00000000e+00],
        [ 0.00000000e+00],
        [ ...000e+00],
        [ 0.00000000e+00],
        [ 0.00000000e+00],
        [ 0.00000000e+00],
        [ 0.00000000e+00]]])
desired = array([[[ 0.00000000e+00],
        [ 0.00000000e+00],
        [ 0.00000000e+00],
        [ 0.00000000e+00],
        [ ...000e+00],
        [ 0.00000000e+00],
        [ 0.00000000e+00],
        [ 0.00000000e+00],
        [ 0.00000000e+00]]])
rtol = 1e-07, atol = 1e-05, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=1e-05
E       
E       Mismatched elements: 64 / 100 (64%)
E       Max absolute difference: 233.83963068
E       Max relative difference: 148867.79248851
E        x: array([[[ 0.000000e+00],
E               [ 0.000000e+00],
E               [ 0.000000e+00],...
E        y: array([[[ 0.000000e+00],
E               [ 0.000000e+00],
E               [ 0.000000e+00],...

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestZoomOutputSize1.test_zoom_output_size1[_param_64_{grid_mode=True, mode='mirror', order=4, shape=(5, 5, 2), zoom=(2, 2, 0.5)}] _

self = <<cupyx_tests.scipy_tests.ndimage_tests.test_interpolation.TestZoomOutputSize1 object at 0x7f52562983d0>  parameter: {'grid_mode': True, 'mode': 'mirror', 'order': 4, 'shape': (5, 5, 2), 'zoom': (2, 2, 0.5)}>
args = (), kw = {'dtype': <class 'numpy.float64'>}
dtype = <class 'numpy.float64'>

    @_wraps_partial(impl, name)
    def test_func(self, *args, **kw):
        for dtype in dtypes:
            try:
                kw[name] = numpy.dtype(dtype).type
>               impl(self, *args, **kw)

cupy/testing/_helper.py:825: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/testing/_helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/_helper.py:495: in check_func
    _array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[[  48.82195577],
        [  48.82195577],
        [ 290.39318135],
        [ 337.78017528],
        [ 112.1240... [ -53.24969236],
        [ -21.88859247],
        [  44.15090669],
        [  53.29762289],
        [  53.29762289]]])
desired = array([[[ 8.54663183e-03],
        [ 8.54663183e-03],
        [ 5.30645857e-02],
        [ 6.15797757e-02],
        [ ...126e-03],
        [-5.57818230e-04],
        [ 2.89445841e-04],
        [ 8.46143247e-05],
        [ 8.46143247e-05]]])
rtol = 1e-07, atol = 1e-05, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=1e-05
E       
E       Mismatched elements: 100 / 100 (100%)
E       Max absolute difference: 2336.52632552
E       Max relative difference: 629887.88795612
E        x: array([[[  48.821956],
E               [  48.821956],
E               [ 290.393181],...
E        y: array([[[ 8.546632e-03],
E               [ 8.546632e-03],
E               [ 5.306459e-02],...

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestZoomOutputSize1.test_zoom_output_size1[_param_65_{grid_mode=True, mode='mirror', order=5, shape=(5, 5, 2), zoom=(2, 2, 0.5)}] _

self = <<cupyx_tests.scipy_tests.ndimage_tests.test_interpolation.TestZoomOutputSize1 object at 0x7f52562bdc40>  parameter: {'grid_mode': True, 'mode': 'mirror', 'order': 5, 'shape': (5, 5, 2), 'zoom': (2, 2, 0.5)}>
args = (), kw = {'dtype': <class 'numpy.float64'>}
dtype = <class 'numpy.float64'>

    @_wraps_partial(impl, name)
    def test_func(self, *args, **kw):
        for dtype in dtypes:
            try:
                kw[name] = numpy.dtype(dtype).type
>               impl(self, *args, **kw)

cupy/testing/_helper.py:825: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/testing/_helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/_helper.py:495: in check_func
    _array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[[ 4.71685805e+00],
        [ 4.71685805e+00],
        [ 2.76221015e+01],
        [ 3.32433453e+01],
        [ ...958e+00],
        [-1.62349834e+00],
        [ 1.50933488e+01],
        [ 1.97919669e+01],
        [ 1.97919669e+01]]])
desired = array([[[ 8.60075856e-03],
        [ 8.60075856e-03],
        [ 5.25533883e-02],
        [ 6.23449044e-02],
        [ ...600e-03],
        [-8.00397905e-04],
        [ 4.16976616e-04],
        [ 1.32949066e-04],
        [ 1.32949066e-04]]])
rtol = 1e-07, atol = 1e-05, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=1e-05
E       
E       Mismatched elements: 100 / 100 (100%)
E       Max absolute difference: 233.83963068
E       Max relative difference: 148867.79248854
E        x: array([[[ 4.716858e+00],
E               [ 4.716858e+00],
E               [ 2.762210e+01],...
E        y: array([[[ 8.600759e-03],
E               [ 8.600759e-03],
E               [ 5.255339e-02],...

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestZoomOutputSize1.test_zoom_output_size1[_param_70_{grid_mode=True, mode='wrap', order=4, shape=(5, 5, 2), zoom=(2, 2, 0.5)}] _

self = <<cupyx_tests.scipy_tests.ndimage_tests.test_interpolation.TestZoomOutputSize1 object at 0x7f5256294a00>  parameter: {'grid_mode': True, 'mode': 'wrap', 'order': 4, 'shape': (5, 5, 2), 'zoom': (2, 2, 0.5)}>
args = (), kw = {'dtype': <class 'numpy.float64'>}
dtype = <class 'numpy.float64'>

    @_wraps_partial(impl, name)
    def test_func(self, *args, **kw):
        for dtype in dtypes:
            try:
                kw[name] = numpy.dtype(dtype).type
>               impl(self, *args, **kw)

cupy/testing/_helper.py:825: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/testing/_helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/_helper.py:495: in check_func
    _array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[[  53.29762289],
        [  51.0107262 ],
        [ 303.41199632],
        [ 352.92342892],
        [ 117.1507... [ -50.96485228],
        [ -20.9493958 ],
        [  42.25647769],
        [  51.0107262 ],
        [  48.82195577]]])
desired = array([[[ 8.46143247e-05],
        [ 8.50392545e-04],
        [ 5.27994291e-03],
        [ 6.12720698e-03],
        [ ...636e-02],
        [-5.60619571e-03],
        [ 2.90899427e-03],
        [ 8.50392545e-04],
        [ 8.54663183e-03]]])
rtol = 1e-07, atol = 1e-05, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=1e-05
E       
E       Mismatched elements: 100 / 100 (100%)
E       Max absolute difference: 2336.52632552
E       Max relative difference: 629887.8879561
E        x: array([[[  53.297623],
E               [  51.010726],
E               [ 303.411996],...
E        y: array([[[ 8.461432e-05],
E               [ 8.503925e-04],
E               [ 5.279943e-03],...

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestZoomOutputSize1.test_zoom_output_size1[_param_71_{grid_mode=True, mode='wrap', order=5, shape=(5, 5, 2), zoom=(2, 2, 0.5)}] _

self = <<cupyx_tests.scipy_tests.ndimage_tests.test_interpolation.TestZoomOutputSize1 object at 0x7f5256179400>  parameter: {'grid_mode': True, 'mode': 'wrap', 'order': 5, 'shape': (5, 5, 2), 'zoom': (2, 2, 0.5)}>
args = (), kw = {'dtype': <class 'numpy.float64'>}
dtype = <class 'numpy.float64'>

    @_wraps_partial(impl, name)
    def test_func(self, *args, **kw):
        for dtype in dtypes:
            try:
                kw[name] = numpy.dtype(dtype).type
>               impl(self, *args, **kw)

cupy/testing/_helper.py:825: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/testing/_helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/_helper.py:495: in check_func
    _array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[[ 1.97919669e+01],
        [ 9.66208561e+00],
        [ 5.65815436e+01],
        [ 6.80961870e+01],
        [ ...577e+00],
        [-7.92562963e-01],
        [ 7.36830399e+00],
        [ 9.66208561e+00],
        [ 4.71685805e+00]]])
desired = array([[[ 1.32949066e-04],
        [ 1.06932821e-03],
        [ 6.53393769e-03],
        [ 7.75131221e-03],
        [ ...718e-02],
        [-6.43771396e-03],
        [ 3.35380211e-03],
        [ 1.06932821e-03],
        [ 8.60075856e-03]]])
rtol = 1e-07, atol = 1e-05, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=1e-05
E       
E       Mismatched elements: 100 / 100 (100%)
E       Max absolute difference: 233.83963068
E       Max relative difference: 148867.79248851
E        x: array([[[ 1.979197e+01],
E               [ 9.662086e+00],
E               [ 5.658154e+01],...
E        y: array([[[ 1.329491e-04],
E               [ 1.069328e-03],
E               [ 6.533938e-03],...

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestZoomOutputSize1.test_zoom_output_size1[_param_94_{grid_mode=True, mode='grid-constant', order=4, shape=(5, 5, 2), zoom=(2, 2, 0.5)}] _

self = <<cupyx_tests.scipy_tests.ndimage_tests.test_interpolation.TestZoomOutputSize1 object at 0x7f525628c700>  parameter: {'grid_mode': True, 'mode': 'grid-constant', 'order': 4, 'shape': (5, 5, 2), 'zoom': (2, 2, 0.5)}>
args = (), kw = {'dtype': <class 'numpy.float64'>}
dtype = <class 'numpy.float64'>

    @_wraps_partial(impl, name)
    def test_func(self, *args, **kw):
        for dtype in dtypes:
            try:
                kw[name] = numpy.dtype(dtype).type
>               impl(self, *args, **kw)

cupy/testing/_helper.py:825: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/testing/_helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/_helper.py:495: in check_func
    _array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[[ 5.63055219e+01],
        [-1.22528405e+02],
        [-3.83476709e+02],
        [-3.83476709e+02],
        [-...021e+00],
        [ 4.40535983e+00],
        [-2.69124172e+00],
        [-1.59183812e+00],
        [ 9.72456581e-01]]])
desired = array([[[ 1.27949283e-02],
        [-2.43606830e-02],
        [-7.91692940e-02],
        [-7.91692940e-02],
        [-...333e-03],
        [ 9.13158865e-04],
        [-5.54269262e-04],
        [-3.27391850e-04],
        [ 1.99955080e-04]]])
rtol = 1e-07, atol = 1e-05, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=1e-05
E       
E       Mismatched elements: 100 / 100 (100%)
E       Max absolute difference: 2611.23242921
E       Max relative difference: 5747.85704324
E        x: array([[[ 5.630552e+01],
E               [-1.225284e+02],
E               [-3.834767e+02],...
E        y: array([[[ 1.279493e-02],
E               [-2.436068e-02],
E               [-7.916929e-02],...

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestZoomOutputSize1.test_zoom_output_size1[_param_95_{grid_mode=True, mode='grid-constant', order=5, shape=(5, 5, 2), zoom=(2, 2, 0.5)}] _

self = <<cupyx_tests.scipy_tests.ndimage_tests.test_interpolation.TestZoomOutputSize1 object at 0x7f5256290340>  parameter: {'grid_mode': True, 'mode': 'grid-constant', 'order': 5, 'shape': (5, 5, 2), 'zoom': (2, 2, 0.5)}>
args = (), kw = {'dtype': <class 'numpy.float64'>}
dtype = <class 'numpy.float64'>

    @_wraps_partial(impl, name)
    def test_func(self, *args, **kw):
        for dtype in dtypes:
            try:
                kw[name] = numpy.dtype(dtype).type
>               impl(self, *args, **kw)

cupy/testing/_helper.py:825: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/testing/_helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/_helper.py:495: in check_func
    _array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[[ 4.16965077e+00],
        [-1.18699209e+01],
        [-3.36177788e+01],
        [-3.36177788e+01],
        [-...671e-01],
        [ 6.07624141e-01],
        [-3.96545295e-01],
        [-2.61764771e-01],
        [ 1.70742628e-01]]])
desired = array([[[ 1.44354197e-02],
        [-2.67893098e-02],
        [-8.45564959e-02],
        [-8.45564959e-02],
        [-...699e-03],
        [ 1.49724992e-03],
        [-9.55056276e-04],
        [-6.25982935e-04],
        [ 4.07383783e-04]]])
rtol = 1e-07, atol = 1e-05, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=1e-05
E       
E       Mismatched elements: 100 / 100 (100%)
E       Max absolute difference: 270.54779997
E       Max relative difference: 678.67662434
E        x: array([[[ 4.169651e+00],
E               [-1.186992e+01],
E               [-3.361778e+01],...
E        y: array([[[ 1.443542e-02],
E               [-2.678931e-02],
E               [-8.455650e-02],...

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestFFTConvolve_param_12_{mode='full', size1=(3, 4, 10), size2=3}.test_fftconvolve _
cupy/testing/_helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/_helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/_helper.py:495: in check_func
    _array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[[ 7.95231857e+01,  7.18280716e+01, -1.08831396e+01,
         -2.99680119e+01, -3.25485992e+01,  1.26672630e+01..., -5.21641541e+02, -8.12674072e+02,
         -6.47990906e+02, -5.10732574e+02, -3.22703217e+02]]],
      dtype=float32)
desired = array([[[ 30.11964 ,  78.50114 , 117.31052 , 116.12192 ,  98.5526  ,
          98.59048 ,  95.745415, 119.16964 , 143....          61.03017 ,  47.46052 ,  68.94269 ,  60.25647 ,  72.94773 ,
          56.956516,   9.927667]]], dtype=float32)
rtol = 0.001, atol = 0.001, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=0.001, atol=0.001
E       
E       Mismatched elements: 360 / 360 (100%)
E       Max absolute difference: 2190.1472
E       Max relative difference: 51.280254
E        x: array([[[ 7.952319e+01,  7.182807e+01, -1.088314e+01, -2.996801e+01,
E                -3.254860e+01,  1.266726e+01, -1.785283e+01,  3.703740e+01,
E                 4.268585e+01, -9.254364e+01, -1.219189e+02, -3.967020e+01],...
E        y: array([[[ 30.11964 ,  78.50114 , 117.31052 , 116.12192 ,  98.5526  ,
E                 98.59048 ,  95.745415, 119.16964 , 143.04192 , 143.71674 ,
E                 85.50938 ,  23.112478],...

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
_ TestFFTConvolve_param_44_{mode='valid', size1=(3, 4, 10), size2=3}.test_convolve_fft _
cupy/testing/_helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/_helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/_helper.py:495: in check_func
    _array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[[ -80,   19,   40,    3,   14,   73,  110,   57],
        [ -51,  -82,  105,  102,  -81, -105,  -34, -103]]], dtype=int8)
desired = array([[[-120,  -49,   32,   -7,  -73,   64,   74, -107],
        [ -58,  -13, -125,   43,  -48,   69,  -99,  -58]]], dtype=int8)
rtol = 1e-08, atol = 1e-08, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-08, atol=1e-08
E       
E       Mismatched elements: 16 / 16 (100%)
E       Max absolute difference: 92
E       Max relative difference: 5.30769231
E        x: array([[[ -80,   19,   40,    3,   14,   73,  110,   57],
E               [ -51,  -82,  105,  102,  -81, -105,  -34, -103]]], dtype=int8)
E        y: array([[[-120,  -49,   32,   -7,  -73,   64,   74, -107],
E               [ -58,  -13, -125,   43,  -48,   69,  -99,  -58]]], dtype=int8)

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.int8'>
____________________ TestCustomStruct.test_builtin_vectors _____________________

self = <example_tests.test_custom_struct.TestCustomStruct testMethod=test_builtin_vectors>

    def test_builtin_vectors(self):
>       output = example_test.run_example('custom_struct/builtin_vectors.py')

tests/example_tests/test_custom_struct.py:10: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/example_tests/example_test.py:12: in run_example
    return subprocess.check_output(
/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/subprocess.py:411: in check_output
    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input = None, capture_output = False, timeout = None, check = True
popenargs = (('/home/kmaeh/.pyenv/versions/rocm-ci/bin/python', '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/tests/example_tests/../../examples/custom_struct/builtin_vectors.py'),)
kwargs = {'stderr': -2, 'stdout': -1}
process = <subprocess.Popen object at 0x7f523bdfdd00>
stdout = b'Traceback (most recent call last):\n  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/te...e. Here we allow only arrays of size one so that users do not\nTypeError: Unsupported type <class \'numpy.ndarray\'>\n'
stderr = None, retcode = 1

    def run(*popenargs,
            input=None, capture_output=False, timeout=None, check=False, **kwargs):
        """Run command with arguments and return a CompletedProcess instance.
    
        The returned instance will have attributes args, returncode, stdout and
        stderr. By default, stdout and stderr are not captured, and those attributes
        will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.
    
        If check is True and the exit code was non-zero, it raises a
        CalledProcessError. The CalledProcessError object will have the return code
        in the returncode attribute, and output & stderr attributes if those streams
        were captured.
    
        If timeout is given, and the process takes too long, a TimeoutExpired
        exception will be raised.
    
        There is an optional argument "input", allowing you to
        pass bytes or a string to the subprocess's stdin.  If you use this argument
        you may not also use the Popen constructor's "stdin" argument, as
        it will be used internally.
    
        By default, all communication is in bytes, and therefore any "input" should
        be bytes, and the stdout and stderr will be bytes. If in text mode, any
        "input" should be a string, and stdout and stderr will be strings decoded
        according to locale encoding, or by "encoding" if set. Text mode is
        triggered by setting any of text, encoding, errors or universal_newlines.
    
        The other arguments are the same as for the Popen constructor.
        """
        if input is not None:
            if kwargs.get('stdin') is not None:
                raise ValueError('stdin and input arguments may not both be used.')
            kwargs['stdin'] = PIPE
    
        if capture_output:
            if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:
                raise ValueError('stdout and stderr arguments may not be used '
                                 'with capture_output.')
            kwargs['stdout'] = PIPE
            kwargs['stderr'] = PIPE
    
        with Popen(*popenargs, **kwargs) as process:
            try:
                stdout, stderr = process.communicate(input, timeout=timeout)
            except TimeoutExpired as exc:
                process.kill()
                if _mswindows:
                    # Windows accumulates the output in a single blocking
                    # read() call run on child threads, with the timeout
                    # being done in a join() on those threads.  communicate()
                    # _after_ kill() is required to collect that and add it
                    # to the exception.
                    exc.stdout, exc.stderr = process.communicate()
                else:
                    # POSIX _communicate already populated the output so
                    # far into the TimeoutExpired exception.
                    process.wait()
                raise
            except:  # Including KeyboardInterrupt, communicate handled that.
                process.kill()
                # We don't call process.wait() as .__exit__ does that for us.
                raise
            retcode = process.poll()
            if check and retcode:
>               raise CalledProcessError(retcode, process.args,
                                         output=stdout, stderr=stderr)
E               subprocess.CalledProcessError: Command '('/home/kmaeh/.pyenv/versions/rocm-ci/bin/python', '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/tests/example_tests/../../examples/custom_struct/builtin_vectors.py')' returned non-zero exit status 1.

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/subprocess.py:512: CalledProcessError
----------------------------- Captured stdout call -----------------------------
Original error message:
Traceback (most recent call last):
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/tests/example_tests/../../examples/custom_struct/builtin_vectors.py", line 48, in <module>
    sys.exit(main())
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/tests/example_tests/../../examples/custom_struct/builtin_vectors.py", line 40, in main
    kernel((1,), (N,), args)
  File "cupy/_core/raw.pyx", line 89, in cupy._core.raw.RawKernel.__call__
    self.kernel(
  File "cupy/cuda/function.pyx", line 201, in cupy.cuda.function.Function.__call__
    format(grid0, grid1, grid2, max_grid_size))
  File "cupy/cuda/function.pyx", line 155, in cupy.cuda.function._launch
    if itemsize == 8:
  File "cupy/cuda/function.pyx", line 123, in cupy.cuda.function._pointer
    # value. Here we allow only arrays of size one so that users do not
TypeError: Unsupported type <class 'numpy.ndarray'>

_____________________ TestCustomStruct.test_complex_struct _____________________

self = <example_tests.test_custom_struct.TestCustomStruct testMethod=test_complex_struct>

    def test_complex_struct(self):
>       output = example_test.run_example('custom_struct/complex_struct.py')

tests/example_tests/test_custom_struct.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/example_tests/example_test.py:12: in run_example
    return subprocess.check_output(
/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/subprocess.py:411: in check_output
    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input = None, capture_output = False, timeout = None, check = True
popenargs = (('/home/kmaeh/.pyenv/versions/rocm-ci/bin/python', '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/tests/example_tests/../../examples/custom_struct/complex_struct.py'),)
kwargs = {'stderr': -2, 'stdout': -1}
process = <subprocess.Popen object at 0x7f523c47aaf0>
stdout = b'Overall structure itemsize: 80 bytes\nStructure members itemsize: [16  1 16  2 24]\nStructure members offsets: [ 0 1...e. Here we allow only arrays of size one so that users do not\nTypeError: Unsupported type <class \'numpy.ndarray\'>\n'
stderr = None, retcode = 1

    def run(*popenargs,
            input=None, capture_output=False, timeout=None, check=False, **kwargs):
        """Run command with arguments and return a CompletedProcess instance.
    
        The returned instance will have attributes args, returncode, stdout and
        stderr. By default, stdout and stderr are not captured, and those attributes
        will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.
    
        If check is True and the exit code was non-zero, it raises a
        CalledProcessError. The CalledProcessError object will have the return code
        in the returncode attribute, and output & stderr attributes if those streams
        were captured.
    
        If timeout is given, and the process takes too long, a TimeoutExpired
        exception will be raised.
    
        There is an optional argument "input", allowing you to
        pass bytes or a string to the subprocess's stdin.  If you use this argument
        you may not also use the Popen constructor's "stdin" argument, as
        it will be used internally.
    
        By default, all communication is in bytes, and therefore any "input" should
        be bytes, and the stdout and stderr will be bytes. If in text mode, any
        "input" should be a string, and stdout and stderr will be strings decoded
        according to locale encoding, or by "encoding" if set. Text mode is
        triggered by setting any of text, encoding, errors or universal_newlines.
    
        The other arguments are the same as for the Popen constructor.
        """
        if input is not None:
            if kwargs.get('stdin') is not None:
                raise ValueError('stdin and input arguments may not both be used.')
            kwargs['stdin'] = PIPE
    
        if capture_output:
            if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:
                raise ValueError('stdout and stderr arguments may not be used '
                                 'with capture_output.')
            kwargs['stdout'] = PIPE
            kwargs['stderr'] = PIPE
    
        with Popen(*popenargs, **kwargs) as process:
            try:
                stdout, stderr = process.communicate(input, timeout=timeout)
            except TimeoutExpired as exc:
                process.kill()
                if _mswindows:
                    # Windows accumulates the output in a single blocking
                    # read() call run on child threads, with the timeout
                    # being done in a join() on those threads.  communicate()
                    # _after_ kill() is required to collect that and add it
                    # to the exception.
                    exc.stdout, exc.stderr = process.communicate()
                else:
                    # POSIX _communicate already populated the output so
                    # far into the TimeoutExpired exception.
                    process.wait()
                raise
            except:  # Including KeyboardInterrupt, communicate handled that.
                process.kill()
                # We don't call process.wait() as .__exit__ does that for us.
                raise
            retcode = process.poll()
            if check and retcode:
>               raise CalledProcessError(retcode, process.args,
                                         output=stdout, stderr=stderr)
E               subprocess.CalledProcessError: Command '('/home/kmaeh/.pyenv/versions/rocm-ci/bin/python', '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/tests/example_tests/../../examples/custom_struct/complex_struct.py')' returned non-zero exit status 1.

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/subprocess.py:512: CalledProcessError
----------------------------- Captured stdout call -----------------------------
Original error message:
Overall structure itemsize: 80 bytes
Structure members itemsize: [16  1 16  2 24]
Structure members offsets: [ 0 16 24 40 48]
Complex structure value:
  [((0, 1, 2, 3), (4,), (5., 6.), (7,), (8, 9, 10))]
Traceback (most recent call last):
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/tests/example_tests/../../examples/custom_struct/complex_struct.py", line 132, in <module>
    sys.exit(main())
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/tests/example_tests/../../examples/custom_struct/complex_struct.py", line 122, in main
    kernel((1,), (N,), (s, out))
  File "cupy/_core/raw.pyx", line 89, in cupy._core.raw.RawKernel.__call__
    self.kernel(
  File "cupy/cuda/function.pyx", line 201, in cupy.cuda.function.Function.__call__
    format(grid0, grid1, grid2, max_grid_size))
  File "cupy/cuda/function.pyx", line 155, in cupy.cuda.function._launch
    if itemsize == 8:
  File "cupy/cuda/function.pyx", line 123, in cupy.cuda.function._pointer
    # value. Here we allow only arrays of size one so that users do not
TypeError: Unsupported type <class 'numpy.ndarray'>

_____________________ TestCustomStruct.test_packed_matrix ______________________

self = <example_tests.test_custom_struct.TestCustomStruct testMethod=test_packed_matrix>

    def test_packed_matrix(self):
>       output = example_test.run_example('custom_struct/packed_matrix.py')

tests/example_tests/test_custom_struct.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/example_tests/example_test.py:12: in run_example
    return subprocess.check_output(
/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/subprocess.py:411: in check_output
    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input = None, capture_output = False, timeout = None, check = True
popenargs = (('/home/kmaeh/.pyenv/versions/rocm-ci/bin/python', '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/tests/example_tests/../../examples/custom_struct/packed_matrix.py'),)
kwargs = {'stderr': -2, 'stdout': -1}
process = <subprocess.Popen object at 0x7f523b6958e0>
stdout = b'Traceback (most recent call last):\n  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/te...e. Here we allow only arrays of size one so that users do not\nTypeError: Unsupported type <class \'numpy.ndarray\'>\n'
stderr = None, retcode = 1

    def run(*popenargs,
            input=None, capture_output=False, timeout=None, check=False, **kwargs):
        """Run command with arguments and return a CompletedProcess instance.
    
        The returned instance will have attributes args, returncode, stdout and
        stderr. By default, stdout and stderr are not captured, and those attributes
        will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.
    
        If check is True and the exit code was non-zero, it raises a
        CalledProcessError. The CalledProcessError object will have the return code
        in the returncode attribute, and output & stderr attributes if those streams
        were captured.
    
        If timeout is given, and the process takes too long, a TimeoutExpired
        exception will be raised.
    
        There is an optional argument "input", allowing you to
        pass bytes or a string to the subprocess's stdin.  If you use this argument
        you may not also use the Popen constructor's "stdin" argument, as
        it will be used internally.
    
        By default, all communication is in bytes, and therefore any "input" should
        be bytes, and the stdout and stderr will be bytes. If in text mode, any
        "input" should be a string, and stdout and stderr will be strings decoded
        according to locale encoding, or by "encoding" if set. Text mode is
        triggered by setting any of text, encoding, errors or universal_newlines.
    
        The other arguments are the same as for the Popen constructor.
        """
        if input is not None:
            if kwargs.get('stdin') is not None:
                raise ValueError('stdin and input arguments may not both be used.')
            kwargs['stdin'] = PIPE
    
        if capture_output:
            if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:
                raise ValueError('stdout and stderr arguments may not be used '
                                 'with capture_output.')
            kwargs['stdout'] = PIPE
            kwargs['stderr'] = PIPE
    
        with Popen(*popenargs, **kwargs) as process:
            try:
                stdout, stderr = process.communicate(input, timeout=timeout)
            except TimeoutExpired as exc:
                process.kill()
                if _mswindows:
                    # Windows accumulates the output in a single blocking
                    # read() call run on child threads, with the timeout
                    # being done in a join() on those threads.  communicate()
                    # _after_ kill() is required to collect that and add it
                    # to the exception.
                    exc.stdout, exc.stderr = process.communicate()
                else:
                    # POSIX _communicate already populated the output so
                    # far into the TimeoutExpired exception.
                    process.wait()
                raise
            except:  # Including KeyboardInterrupt, communicate handled that.
                process.kill()
                # We don't call process.wait() as .__exit__ does that for us.
                raise
            retcode = process.poll()
            if check and retcode:
>               raise CalledProcessError(retcode, process.args,
                                         output=stdout, stderr=stderr)
E               subprocess.CalledProcessError: Command '('/home/kmaeh/.pyenv/versions/rocm-ci/bin/python', '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/tests/example_tests/../../examples/custom_struct/packed_matrix.py')' returned non-zero exit status 1.

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/subprocess.py:512: CalledProcessError
----------------------------- Captured stdout call -----------------------------
Original error message:
Traceback (most recent call last):
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/tests/example_tests/../../examples/custom_struct/packed_matrix.py", line 91, in <module>
    sys.exit(main())
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/tests/example_tests/../../examples/custom_struct/packed_matrix.py", line 81, in main
    kernel((1,), (N,), args)
  File "cupy/_core/raw.pyx", line 89, in cupy._core.raw.RawKernel.__call__
    self.kernel(
  File "cupy/cuda/function.pyx", line 201, in cupy.cuda.function.Function.__call__
    format(grid0, grid1, grid2, max_grid_size))
  File "cupy/cuda/function.pyx", line 155, in cupy.cuda.function._launch
    if itemsize == 8:
  File "cupy/cuda/function.pyx", line 123, in cupy.cuda.function._pointer
    # value. Here we allow only arrays of size one so that users do not
TypeError: Unsupported type <class 'numpy.ndarray'>

=============================== warnings summary ===============================
tests/cupy_tests/core_tests/fusion_tests/test_array.py: 1 warning
tests/cupy_tests/math_tests/test_sumprod.py: 19 warnings
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/core/_methods.py:51: RuntimeWarning: overflow encountered in reduce
    return umr_prod(a, axis, dtype, out, keepdims, initial, where)

tests/cupy_tests/core_tests/fusion_tests/test_routines.py::TestFusionNumericalReduction_param_1_{func='prod'}::test_reduction
tests/cupy_tests/math_tests/test_sumprod.py::TestNansumNanprodLong_param_11_{axis=0, func='nanprod', keepdims=True, shape=(20, 30, 40), transpose_axes=False}::test_nansum_all
tests/cupy_tests/math_tests/test_sumprod.py::TestNansumNanprodLong_param_11_{axis=0, func='nanprod', keepdims=True, shape=(20, 30, 40), transpose_axes=False}::test_nansum_axis_transposed
tests/cupy_tests/math_tests/test_sumprod.py::TestNansumNanprodLong_param_15_{axis=0, func='nanprod', keepdims=False, shape=(20, 30, 40), transpose_axes=False}::test_nansum_all
tests/cupy_tests/math_tests/test_sumprod.py::TestNansumNanprodLong_param_15_{axis=0, func='nanprod', keepdims=False, shape=(20, 30, 40), transpose_axes=False}::test_nansum_axis_transposed
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/core/fromnumeric.py:87: RuntimeWarning: overflow encountered in reduce
    return ufunc.reduce(obj, axis, dtype, out, **passkwargs)

tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyval_param_0_{type_l='poly1d', type_r='ndarray'}::test_polyval
tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyval_param_3_{type_l='ndarray', type_r='ndarray'}::test_polyval
tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyvalDtypesCombination::test_polyval_diff_types_array_array
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/lib/polynomial.py:734: RuntimeWarning: overflow encountered in multiply
    y = y * x + p[i]

tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyval_param_1_{type_l='poly1d', type_r='numpy_scalar'}::test_polyval
tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyval_param_4_{type_l='ndarray', type_r='numpy_scalar'}::test_polyval
tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyvalDtypesCombination::test_polyval_diff_types_array_scalar
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/lib/polynomial.py:734: RuntimeWarning: overflow encountered in half_scalars
    y = y * x + p[i]

tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyval_param_1_{type_l='poly1d', type_r='numpy_scalar'}::test_polyval
tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyval_param_4_{type_l='ndarray', type_r='numpy_scalar'}::test_polyval
tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyvalDtypesCombination::test_polyval_diff_types_array_scalar
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/lib/polynomial.py:734: RuntimeWarning: overflow encountered in byte_scalars
    y = y * x + p[i]

tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyval_param_1_{type_l='poly1d', type_r='numpy_scalar'}::test_polyval
tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyval_param_4_{type_l='ndarray', type_r='numpy_scalar'}::test_polyval
tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyvalDtypesCombination::test_polyval_diff_types_array_scalar
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/lib/polynomial.py:734: RuntimeWarning: overflow encountered in short_scalars
    y = y * x + p[i]

tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyval_param_1_{type_l='poly1d', type_r='numpy_scalar'}::test_polyval
tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyval_param_4_{type_l='ndarray', type_r='numpy_scalar'}::test_polyval
tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyvalDtypesCombination::test_polyval_diff_types_array_scalar
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/lib/polynomial.py:734: RuntimeWarning: overflow encountered in ubyte_scalars
    y = y * x + p[i]

tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyval_param_1_{type_l='poly1d', type_r='numpy_scalar'}::test_polyval
tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyval_param_4_{type_l='ndarray', type_r='numpy_scalar'}::test_polyval
tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyvalDtypesCombination::test_polyval_diff_types_array_scalar
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/lib/polynomial.py:734: RuntimeWarning: overflow encountered in ushort_scalars
    y = y * x + p[i]

tests/cupy_tests/linalg_tests/test_norms.py: 14 warnings
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/linalg/linalg.py:2568: RuntimeWarning: divide by zero encountered in power
    absx **= ord

tests/cupy_tests/linalg_tests/test_norms.py: 14 warnings
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/linalg/linalg.py:2568: RuntimeWarning: divide by zero encountered in reciprocal
    absx **= ord

tests/cupy_tests/math_tests/test_misc.py::TestMisc::test_nan_to_num_inf
tests/cupy_tests/math_tests/test_misc.py::TestMisc::test_nan_to_num_inf_nan
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/core/numeric.py:2276: RuntimeWarning: overflow encountered in absolute
    return less_equal(abs(x-y), atol + rtol * abs(y))

tests/cupy_tests/math_tests/test_sumprod.py: 15 warnings
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/core/_methods.py:51: RuntimeWarning: invalid value encountered in reduce
    return umr_prod(a, axis, dtype, out, keepdims, initial, where)

tests/cupy_tests/math_tests/test_sumprod.py::TestNansumNanprodLong_param_11_{axis=0, func='nanprod', keepdims=True, shape=(20, 30, 40), transpose_axes=False}::test_nansum_all
tests/cupy_tests/math_tests/test_sumprod.py::TestNansumNanprodLong_param_11_{axis=0, func='nanprod', keepdims=True, shape=(20, 30, 40), transpose_axes=False}::test_nansum_axis_transposed
tests/cupy_tests/math_tests/test_sumprod.py::TestNansumNanprodLong_param_15_{axis=0, func='nanprod', keepdims=False, shape=(20, 30, 40), transpose_axes=False}::test_nansum_all
tests/cupy_tests/math_tests/test_sumprod.py::TestNansumNanprodLong_param_15_{axis=0, func='nanprod', keepdims=False, shape=(20, 30, 40), transpose_axes=False}::test_nansum_axis_transposed
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/core/fromnumeric.py:87: RuntimeWarning: invalid value encountered in reduce
    return ufunc.reduce(obj, axis, dtype, out, **passkwargs)

tests/cupy_tests/math_tests/test_sumprod.py: 32 warnings
  /home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/tests/cupy_tests/math_tests/test_sumprod.py:800: RuntimeWarning: invalid value encountered in true_divide
    a = a / a

tests/cupy_tests/math_tests/test_sumprod.py::TestSumprod::test_sum_all2
tests/cupy_tests/math_tests/test_sumprod.py::TestSumprod::test_sum_all_transposed2
tests/cupy_tests/math_tests/test_sumprod.py::TestSumprod::test_sum_axes2
tests/cupy_tests/math_tests/test_sumprod.py::TestSumprod::test_sum_axes4
tests/cupy_tests/math_tests/test_sumprod.py::TestSumprod::test_sum_axis_transposed2
tests/cupyx_tests/scipy_tests/ndimage_tests/test_measurements.py::TestStats::test_only_input[_param_2_{op='variance'}]
tests/cupyx_tests/scipy_tests/ndimage_tests/test_measurements.py::TestStats::test_only_input[_param_3_{op='standard_deviation'}]
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/core/_methods.py:47: RuntimeWarning: overflow encountered in reduce
    return umr_sum(a, axis, dtype, out, keepdims, initial, where)

tests/cupy_tests/statistics_tests/test_meanvar.py: 32 warnings
  /home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/tests/cupy_tests/statistics_tests/test_meanvar.py:114: RuntimeWarning: invalid value encountered in true_divide
    a = a / a

tests/cupy_tests/statistics_tests/test_meanvar.py::TestNanMedian_param_4_{axis=0, keepdims=True, overwrite_input=True, shape=(3, 4, 5)}::test_nanmedian
tests/cupy_tests/statistics_tests/test_meanvar.py::TestNanMedian_param_5_{axis=0, keepdims=True, overwrite_input=False, shape=(3, 4, 5)}::test_nanmedian
tests/cupy_tests/statistics_tests/test_meanvar.py::TestNanMedian_param_6_{axis=0, keepdims=False, overwrite_input=True, shape=(3, 4, 5)}::test_nanmedian
tests/cupy_tests/statistics_tests/test_meanvar.py::TestNanMedian_param_7_{axis=0, keepdims=False, overwrite_input=False, shape=(3, 4, 5)}::test_nanmedian
tests/cupy_tests/statistics_tests/test_meanvar.py::TestNanMedian_param_8_{axis=1, keepdims=True, overwrite_input=True, shape=(3, 4, 5)}::test_nanmedian
tests/cupy_tests/statistics_tests/test_meanvar.py::TestNanMedian_param_9_{axis=1, keepdims=True, overwrite_input=False, shape=(3, 4, 5)}::test_nanmedian
tests/cupy_tests/statistics_tests/test_meanvar.py::TestNanMedian_param_10_{axis=1, keepdims=False, overwrite_input=True, shape=(3, 4, 5)}::test_nanmedian
tests/cupy_tests/statistics_tests/test_meanvar.py::TestNanMedian_param_11_{axis=1, keepdims=False, overwrite_input=False, shape=(3, 4, 5)}::test_nanmedian
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/lib/nanfunctions.py:1113: RuntimeWarning: All-NaN slice encountered
    r, k = function_base._ureduce(a, func=_nanmedian, axis=axis, out=out,

tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_1_{func='mean', params=((0,), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_2_{func='mean', params=((0, 0), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_3_{func='mean', params=((0, 0), 1)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_4_{func='mean', params=((0, 0, 0), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_5_{func='mean', params=((0, 0, 0), (0, 2))}::test_external_mean_zero_len
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/core/fromnumeric.py:3372: RuntimeWarning: Mean of empty slice.
    return _methods._mean(a, axis=axis, dtype=dtype,

tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_1_{func='mean', params=((0,), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_2_{func='mean', params=((0, 0), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_4_{func='mean', params=((0, 0, 0), None)}::test_external_mean_zero_len
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/core/_methods.py:170: RuntimeWarning: invalid value encountered in double_scalars
    ret = ret.dtype.type(ret / rcount)

tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_1_{func='mean', params=((0,), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_2_{func='mean', params=((0, 0), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_4_{func='mean', params=((0, 0, 0), None)}::test_external_mean_zero_len
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/core/_methods.py:170: RuntimeWarning: invalid value encountered in true_divide
    ret = ret.dtype.type(ret / rcount)

tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_1_{func='mean', params=((0,), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_2_{func='mean', params=((0, 0), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_4_{func='mean', params=((0, 0, 0), None)}::test_external_mean_zero_len
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/core/_methods.py:168: RuntimeWarning: invalid value encountered in true_divide
    ret = arr.dtype.type(ret / rcount)

tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_7_{func='std', params=((0,), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_8_{func='std', params=((0, 0), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_9_{func='std', params=((0, 0), 1)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_10_{func='std', params=((0, 0, 0), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_11_{func='std', params=((0, 0, 0), (0, 2))}::test_external_mean_zero_len
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/core/_methods.py:233: RuntimeWarning: Degrees of freedom <= 0 for slice
    ret = _var(a, axis=axis, dtype=dtype, out=out, ddof=ddof,

tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_7_{func='std', params=((0,), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_8_{func='std', params=((0, 0), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_10_{func='std', params=((0, 0, 0), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_13_{func='var', params=((0,), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_14_{func='var', params=((0, 0), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_16_{func='var', params=((0, 0, 0), None)}::test_external_mean_zero_len
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/core/_methods.py:194: RuntimeWarning: invalid value encountered in true_divide
    arrmean = um.true_divide(

tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_7_{func='std', params=((0,), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_8_{func='std', params=((0, 0), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_10_{func='std', params=((0, 0, 0), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_13_{func='var', params=((0,), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_14_{func='var', params=((0, 0), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_16_{func='var', params=((0, 0, 0), None)}::test_external_mean_zero_len
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/core/_methods.py:226: RuntimeWarning: invalid value encountered in double_scalars
    ret = ret.dtype.type(ret / rcount)

tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_7_{func='std', params=((0,), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_8_{func='std', params=((0, 0), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_10_{func='std', params=((0, 0, 0), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_13_{func='var', params=((0,), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_14_{func='var', params=((0, 0), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_16_{func='var', params=((0, 0, 0), None)}::test_external_mean_zero_len
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/core/_methods.py:226: RuntimeWarning: invalid value encountered in true_divide
    ret = ret.dtype.type(ret / rcount)

tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_13_{func='var', params=((0,), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_14_{func='var', params=((0, 0), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_15_{func='var', params=((0, 0), 1)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_16_{func='var', params=((0, 0, 0), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_17_{func='var', params=((0, 0, 0), (0, 2))}::test_external_mean_zero_len
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/core/fromnumeric.py:3621: RuntimeWarning: Degrees of freedom <= 0 for slice
    return _methods._var(a, axis=axis, dtype=dtype, out=out, ddof=ddof,

tests/cupyx_tests/jit_tests/test_raw.py: 21 warnings
  /home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/cupyx/jit/_builtin_funcs.py:334: RuntimeWarning: mask 4294967295 is ignored on HIP
    warnings.warn(f'mask {mask} is ignored on HIP', RuntimeWarning)

tests/cupyx_tests/jit_tests/test_raw.py::TestRaw::test_syncwarp_mask
  /home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/cupyx/jit/_builtin_funcs.py:131: RuntimeWarning: mask <Data code = "m", type = int> is ignored on HIP
    warnings.warn(f'mask {mask} is ignored on HIP', RuntimeWarning)

tests/cupyx_tests/scipy_tests/ndimage_tests/test_interpolation.py::TestShift::test_shift_int[_param_217_{cval=nan, mode='constant', order=0, output=float64, prefilter=True, shift=0.1}]
tests/cupyx_tests/scipy_tests/ndimage_tests/test_interpolation.py::TestShift::test_shift_int[_param_220_{cval=nan, mode='constant', order=1, output=float64, prefilter=True, shift=0.1}]
tests/cupyx_tests/scipy_tests/ndimage_tests/test_interpolation.py::TestShift::test_shift_int[_param_223_{cval=nan, mode='constant', order=3, output=float64, prefilter=True, shift=0.1}]
tests/cupyx_tests/scipy_tests/ndimage_tests/test_interpolation.py::TestShift::test_shift_int[_param_226_{cval=inf, mode='constant', order=0, output=float64, prefilter=True, shift=0.1}]
tests/cupyx_tests/scipy_tests/ndimage_tests/test_interpolation.py::TestShift::test_shift_int[_param_229_{cval=inf, mode='constant', order=1, output=float64, prefilter=True, shift=0.1}]
tests/cupyx_tests/scipy_tests/ndimage_tests/test_interpolation.py::TestShift::test_shift_int[_param_232_{cval=inf, mode='constant', order=3, output=float64, prefilter=True, shift=0.1}]
tests/cupyx_tests/scipy_tests/ndimage_tests/test_interpolation.py::TestShift::test_shift_int[_param_235_{cval=-inf, mode='constant', order=0, output=float64, prefilter=True, shift=0.1}]
tests/cupyx_tests/scipy_tests/ndimage_tests/test_interpolation.py::TestShift::test_shift_int[_param_238_{cval=-inf, mode='constant', order=1, output=float64, prefilter=True, shift=0.1}]
tests/cupyx_tests/scipy_tests/ndimage_tests/test_interpolation.py::TestShift::test_shift_int[_param_241_{cval=-inf, mode='constant', order=3, output=float64, prefilter=True, shift=0.1}]
  /home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/tests/cupyx_tests/scipy_tests/ndimage_tests/test_interpolation.py:670: RuntimeWarning: invalid value encountered in remainder
    float_out = self._shift(xp, scp, a.astype(xp.float64)) % 1

tests/cupyx_tests/scipy_tests/ndimage_tests/test_measurements.py: 14 warnings
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/scipy/ndimage/measurements.py:684: RuntimeWarning: invalid value encountered in true_divide
    return sum / numpy.asanyarray(count).astype(numpy.float64)

tests/cupyx_tests/scipy_tests/ndimage_tests/test_measurements.py: 28 warnings
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/scipy/ndimage/measurements.py:736: RuntimeWarning: invalid value encountered in true_divide
    return sum_c_sq / np.asanyarray(count).astype(float)

tests/cupyx_tests/scipy_tests/signal_tests/test_signaltools.py::TestWiener_param_0_{im=(10,), mysize=3, noise=False}::test_wiener
tests/cupyx_tests/scipy_tests/signal_tests/test_signaltools.py::TestWiener_param_1_{im=(10,), mysize=3, noise=True}::test_wiener
tests/cupyx_tests/scipy_tests/signal_tests/test_signaltools.py::TestWiener_param_2_{im=(10,), mysize=4, noise=False}::test_wiener
tests/cupyx_tests/scipy_tests/signal_tests/test_signaltools.py::TestWiener_param_3_{im=(10,), mysize=4, noise=True}::test_wiener
tests/cupyx_tests/scipy_tests/signal_tests/test_signaltools.py::TestWiener_param_4_{im=(10,), mysize=(3, 4, 5), noise=False}::test_wiener
tests/cupyx_tests/scipy_tests/signal_tests/test_signaltools.py::TestWiener_param_5_{im=(10,), mysize=(3, 4, 5), noise=True}::test_wiener
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/scipy/signal/signaltools.py:1598: RuntimeWarning: divide by zero encountered in true_divide
    res *= (1 - noise / lVar)

tests/cupyx_tests/scipy_tests/signal_tests/test_signaltools.py::TestWiener_param_0_{im=(10,), mysize=3, noise=False}::test_wiener
tests/cupyx_tests/scipy_tests/signal_tests/test_signaltools.py::TestWiener_param_1_{im=(10,), mysize=3, noise=True}::test_wiener
tests/cupyx_tests/scipy_tests/signal_tests/test_signaltools.py::TestWiener_param_2_{im=(10,), mysize=4, noise=False}::test_wiener
tests/cupyx_tests/scipy_tests/signal_tests/test_signaltools.py::TestWiener_param_3_{im=(10,), mysize=4, noise=True}::test_wiener
tests/cupyx_tests/scipy_tests/signal_tests/test_signaltools.py::TestWiener_param_4_{im=(10,), mysize=(3, 4, 5), noise=False}::test_wiener
tests/cupyx_tests/scipy_tests/signal_tests/test_signaltools.py::TestWiener_param_5_{im=(10,), mysize=(3, 4, 5), noise=True}::test_wiener
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/scipy/signal/signaltools.py:1598: RuntimeWarning: invalid value encountered in multiply
    res *= (1 - noise / lVar)

tests/cupyx_tests/scipy_tests/sparse_tests/test_csr.py: 28 warnings
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/scipy/sparse/base.py:595: RuntimeWarning: divide by zero encountered in true_divide
    return np.true_divide(self.todense(), other)

tests/cupyx_tests/scipy_tests/sparse_tests/test_csr.py: 32 warnings
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/scipy/sparse/base.py:595: RuntimeWarning: invalid value encountered in true_divide
    return np.true_divide(self.todense(), other)

tests/cupyx_tests/scipy_tests/sparse_tests/test_csr.py: 96 warnings
  /home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/tests/cupyx_tests/scipy_tests/sparse_tests/test_csr.py:1882: SparseEfficiencyWarning: Taking maximum (minimum) with > 0 (< 0) number results to a dense matrix.
    return getattr(a, self.opt)(0.5)

tests/cupyx_tests/scipy_tests/sparse_tests/test_csr.py: 96 warnings
  /home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/tests/cupyx_tests/scipy_tests/sparse_tests/test_csr.py:1887: SparseEfficiencyWarning: Taking maximum (minimum) with > 0 (< 0) number results to a dense matrix.
    return getattr(a, self.opt)(-0.5)

tests/cupyx_tests/scipy_tests/sparse_tests/test_csr.py: 16 warnings
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/scipy/sparse/compressed.py:211: RuntimeWarning: invalid value encountered in less
    res = self._with_data(op(self.data, other), copy=True)

tests/cupyx_tests/scipy_tests/sparse_tests/test_csr.py: 16 warnings
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/scipy/sparse/compressed.py:211: RuntimeWarning: invalid value encountered in greater
    res = self._with_data(op(self.data, other), copy=True)

tests/cupyx_tests/scipy_tests/sparse_tests/test_csr.py: 16 warnings
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/scipy/sparse/compressed.py:211: RuntimeWarning: invalid value encountered in less_equal
    res = self._with_data(op(self.data, other), copy=True)

tests/cupyx_tests/scipy_tests/sparse_tests/test_csr.py: 16 warnings
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/scipy/sparse/compressed.py:211: RuntimeWarning: invalid value encountered in greater_equal
    res = self._with_data(op(self.data, other), copy=True)

tests/cupyx_tests/scipy_tests/sparse_tests/test_csr.py: 6 warnings
tests/cupyx_tests/scipy_tests/sparse_tests/test_index.py: 368 warnings
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/scipy/sparse/_index.py:125: SparseEfficiencyWarning: Changing the sparsity structure of a csr_matrix is expensive. lil_matrix is more efficient.
    self._set_arrayXarray(i, j, x)

tests/cupyx_tests/scipy_tests/sparse_tests/test_index.py: 16 warnings
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/scipy/sparse/_index.py:116: SparseEfficiencyWarning: Changing the sparsity structure of a csr_matrix is expensive. lil_matrix is more efficient.
    self._set_arrayXarray_sparse(i, j, x)

tests/cupyx_tests/scipy_tests/sparse_tests/test_index.py: 12 warnings
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/scipy/sparse/_index.py:82: SparseEfficiencyWarning: Changing the sparsity structure of a csr_matrix is expensive. lil_matrix is more efficient.
    self._set_intXint(row, col, x.flat[0])

tests/cupyx_tests/scipy_tests/sparse_tests/test_index.py: 368 warnings
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/scipy/sparse/_index.py:125: SparseEfficiencyWarning: Changing the sparsity structure of a csc_matrix is expensive. lil_matrix is more efficient.
    self._set_arrayXarray(i, j, x)

tests/cupyx_tests/scipy_tests/sparse_tests/test_index.py: 16 warnings
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/scipy/sparse/_index.py:116: SparseEfficiencyWarning: Changing the sparsity structure of a csc_matrix is expensive. lil_matrix is more efficient.
    self._set_arrayXarray_sparse(i, j, x)

tests/cupyx_tests/scipy_tests/sparse_tests/test_index.py: 12 warnings
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/scipy/sparse/_index.py:82: SparseEfficiencyWarning: Changing the sparsity structure of a csc_matrix is expensive. lil_matrix is more efficient.
    self._set_intXint(row, col, x.flat[0])

tests/cupyx_tests/scipy_tests/sparse_tests/test_linalg.py: 24 warnings
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/scipy/sparse/linalg/dsolve/linsolve.py:318: SparseEfficiencyWarning: splu requires CSC matrix format
    warn('splu requires CSC matrix format', SparseEfficiencyWarning)

tests/cupyx_tests/scipy_tests/sparse_tests/test_linalg.py: 24 warnings
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/scipy/sparse/linalg/dsolve/linsolve.py:407: SparseEfficiencyWarning: splu requires CSC matrix format
    warn('splu requires CSC matrix format', SparseEfficiencyWarning)

tests/cupyx_tests/scipy_tests/sparse_tests/test_linalg.py: 48 warnings
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/scipy/sparse/linalg/dsolve/linsolve.py:553: SparseEfficiencyWarning: CSR matrix format is required. Converting to CSR matrix.
    warn('CSR matrix format is required. Converting to CSR matrix.',

tests/cupyx_tests/scipy_tests/sparse_tests/test_linalg.py: 24 warnings
  /home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/cupyx/scipy/sparse/linalg/_solve.py:126: SparseEfficiencyWarning: CSR or CSC format is required. Converting to CSR format.
    warnings.warn('CSR or CSC format is required. Converting to CSR '

-- Docs: https://docs.pytest.org/en/stable/warnings.html
- generated html file: file:///home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.ZBnWCKbu7h/cupy/_output/report.html -
=========================== short test summary info ============================
FAILED tests/cupy_tests/core_tests/test_ndarray.py::TestNdarrayCopy::test_copy_multi_device_with_stream
FAILED tests/cupy_tests/core_tests/test_ndarray_unary_op.py::TestArrayBoolOp::test_bool_one_element
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayBitwiseOperator_param_24_{func=<lambda>, left_value='primitive', name='xor', right_value='array'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayBitwiseOperator_param_25_{func=<lambda>, left_value='array', name='invert', right_value='array'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayBitwiseOperator_param_26_{func=<lambda>, left_value='array', name='invert', right_value='scalar'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayBitwiseOperator_param_27_{func=<lambda>, left_value='array', name='invert', right_value='primitive'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayBitwiseOperator_param_28_{func=<lambda>, left_value='scalar', name='invert', right_value='array'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayBitwiseOperator_param_29_{func=<lambda>, left_value='primitive', name='invert', right_value='array'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayFloorDivide_param_0_{left_value='array', right_value='array'}::test_floor_divide
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayFloorDivide_param_1_{left_value='array', right_value='scalar'}::test_floor_divide
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayFloorDivide_param_2_{left_value='array', right_value='primitive'}::test_floor_divide
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayFloorDivide_param_3_{left_value='scalar', right_value='array'}::test_floor_divide
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayFloorDivide_param_4_{left_value='primitive', right_value='array'}::test_floor_divide
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayInplaceOperator_param_0_{left_value='array', right_value='array'}::test_iadd
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayInplaceOperator_param_0_{left_value='array', right_value='array'}::test_iand
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayInplaceOperator_param_0_{left_value='array', right_value='array'}::test_ilshift
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayInplaceOperator_param_0_{left_value='array', right_value='array'}::test_imod
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayInplaceOperator_param_0_{left_value='array', right_value='array'}::test_imul
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayInplaceOperator_param_0_{left_value='array', right_value='array'}::test_ior
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayInplaceOperator_param_0_{left_value='array', right_value='array'}::test_ipow
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayInplaceOperator_param_0_{left_value='array', right_value='array'}::test_irshift
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayInplaceOperator_param_0_{left_value='array', right_value='array'}::test_isub
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayInplaceOperator_param_0_{left_value='array', right_value='array'}::test_itruediv_py3
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayInplaceOperator_param_0_{left_value='array', right_value='array'}::test_ixor
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayInplaceOperator_param_1_{left_value='array', right_value='scalar'}::test_iadd
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayInplaceOperator_param_1_{left_value='array', right_value='scalar'}::test_iand
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayInplaceOperator_param_1_{left_value='array', right_value='scalar'}::test_ilshift
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayInplaceOperator_param_1_{left_value='array', right_value='scalar'}::test_imod
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayInplaceOperator_param_1_{left_value='array', right_value='scalar'}::test_imul
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayInplaceOperator_param_1_{left_value='array', right_value='scalar'}::test_ior
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayInplaceOperator_param_1_{left_value='array', right_value='scalar'}::test_ipow
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayInplaceOperator_param_1_{left_value='array', right_value='scalar'}::test_irshift
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayInplaceOperator_param_1_{left_value='array', right_value='scalar'}::test_isub
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayInplaceOperator_param_1_{left_value='array', right_value='scalar'}::test_itruediv_py3
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayInplaceOperator_param_1_{left_value='array', right_value='scalar'}::test_ixor
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayInplaceOperator_param_2_{left_value='array', right_value='primitive'}::test_iadd
FAILED tests/cupy_tests/core_tests/fusion_tests/test_misc.py::TestFusionTuple::test_multiple_outputdifferent_type_same_ufunc
FAILED tests/cupy_tests/core_tests/fusion_tests/test_misc.py::TestFusionTuple::test_return_empty_tuple
FAILED tests/cupy_tests/core_tests/fusion_tests/test_misc.py::TestFusionTuple::test_tuple
FAILED tests/cupy_tests/core_tests/fusion_tests/test_misc.py::TestReturnNone::test_iadd_once
FAILED tests/cupy_tests/core_tests/fusion_tests/test_misc.py::TestReturnNone::test_iadd_twice
FAILED tests/cupy_tests/core_tests/fusion_tests/test_misc.py::TestFusionNoneParams::test_python_none_parameter
FAILED tests/cupy_tests/core_tests/fusion_tests/test_misc.py::TestFusionKernelName::test_elementwise
FAILED tests/cupy_tests/core_tests/fusion_tests/test_misc.py::TestFusionKernelName::test_elementwise_with_name
FAILED tests/cupy_tests/core_tests/fusion_tests/test_misc.py::TestFusionKernelName::test_reduction_01
FAILED tests/cupy_tests/core_tests/fusion_tests/test_misc.py::TestFusionKernelName::test_reduction_postmap
FAILED tests/cupy_tests/core_tests/fusion_tests/test_misc.py::TestFusionKernelName::test_reduction_premap
FAILED tests/cupy_tests/core_tests/fusion_tests/test_misc.py::TestFusionKernelName::test_reduction_with_name
FAILED tests/cupy_tests/core_tests/fusion_tests/test_misc.py::TestFusionComposition::test_composition
FAILED tests/cupy_tests/core_tests/fusion_tests/test_misc.py::TestFusionCompile::test_clear_cache
FAILED tests/cupy_tests/core_tests/fusion_tests/test_misc.py::TestFusionGetArrayModule::test_get_array_module
FAILED tests/cupy_tests/core_tests/fusion_tests/test_misc.py::TestFusionThread::test_thread
FAILED tests/cupy_tests/core_tests/fusion_tests/test_misc.py::TestFusionThread::test_thread_multiple_dtypes
FAILED tests/cupy_tests/functional_tests/test_vectorize.py::TestVectorize::test_vectorize_arithmetic_ops
FAILED tests/cupy_tests/indexing_tests/test_generate.py::TestIX_::test_ix_ndarray
FAILED tests/cupy_tests/math_tests/test_misc.py::TestConvolve_param_0_{mode='valid'}::test_convolve_diff_types
FAILED tests/cupy_tests/math_tests/test_misc.py::TestConvolve_param_1_{mode='same'}::test_convolve_diff_types
FAILED tests/cupy_tests/math_tests/test_misc.py::TestConvolve_param_2_{mode='full'}::test_convolve_diff_types
FAILED tests/cupy_tests/random_tests/test_distributions.py::TestDistributionsPoissonInvalid::test_none_lam_generator
FAILED tests/cupy_tests/random_tests/test_distributions.py::TestDistributionsStandardGammaInvalid::test_none_shape_generator
FAILED tests/cupy_tests/statistics_tests/test_correlation.py::TestCorrelate_param_0_{mode='valid'}::test_correlate_diff_types
FAILED tests/cupy_tests/statistics_tests/test_correlation.py::TestCorrelate_param_1_{mode='full'}::test_correlate_diff_types
FAILED tests/cupy_tests/statistics_tests/test_correlation.py::TestCorrelate_param_2_{mode='same'}::test_correlate_diff_types
FAILED tests/cupyx_tests/test_scatter.py::TestScatter::test_scatter_add - Ass...
FAILED tests/cupyx_tests/scipy_tests/linalg_tests/test_decomp_lu.py::TestLUSolve_param_1_{shapes=((4, 4), (4,)), trans=1}::test_lu_solve
FAILED tests/cupyx_tests/scipy_tests/linalg_tests/test_decomp_lu.py::TestLUSolve_param_2_{shapes=((4, 4), (4,)), trans=2}::test_lu_solve
FAILED tests/cupyx_tests/scipy_tests/linalg_tests/test_decomp_lu.py::TestLUSolve_param_4_{shapes=((5, 5), (5, 2)), trans=1}::test_lu_solve
FAILED tests/cupyx_tests/scipy_tests/linalg_tests/test_decomp_lu.py::TestLUSolve_param_5_{shapes=((5, 5), (5, 2)), trans=2}::test_lu_solve
FAILED tests/cupyx_tests/scipy_tests/ndimage_tests/test_interpolation.py::TestMapCoordinatesHalfInteger::test_map_coordinates_float[_param_46_{mode='grid-constant', order=4}]
FAILED tests/cupyx_tests/scipy_tests/ndimage_tests/test_interpolation.py::TestMapCoordinatesHalfInteger::test_map_coordinates_float[_param_47_{mode='grid-constant', order=5}]
FAILED tests/cupyx_tests/scipy_tests/ndimage_tests/test_interpolation.py::TestZoomOutputSize1::test_zoom_output_size1[_param_4_{grid_mode=False, mode='constant', order=4, shape=(5, 5, 2), zoom=(2, 2, 0.5)}]
FAILED tests/cupyx_tests/scipy_tests/ndimage_tests/test_interpolation.py::TestZoomOutputSize1::test_zoom_output_size1[_param_5_{grid_mode=False, mode='constant', order=5, shape=(5, 5, 2), zoom=(2, 2, 0.5)}]
FAILED tests/cupyx_tests/scipy_tests/ndimage_tests/test_interpolation.py::TestZoomOutputSize1::test_zoom_output_size1[_param_16_{grid_mode=False, mode='mirror', order=4, shape=(5, 5, 2), zoom=(2, 2, 0.5)}]
FAILED tests/cupyx_tests/scipy_tests/ndimage_tests/test_interpolation.py::TestZoomOutputSize1::test_zoom_output_size1[_param_17_{grid_mode=False, mode='mirror', order=5, shape=(5, 5, 2), zoom=(2, 2, 0.5)}]
FAILED tests/cupyx_tests/scipy_tests/ndimage_tests/test_interpolation.py::TestZoomOutputSize1::test_zoom_output_size1[_param_22_{grid_mode=False, mode='wrap', order=4, shape=(5, 5, 2), zoom=(2, 2, 0.5)}]
FAILED tests/cupyx_tests/scipy_tests/ndimage_tests/test_interpolation.py::TestZoomOutputSize1::test_zoom_output_size1[_param_23_{grid_mode=False, mode='wrap', order=5, shape=(5, 5, 2), zoom=(2, 2, 0.5)}]
FAILED tests/cupyx_tests/scipy_tests/ndimage_tests/test_interpolation.py::TestZoomOutputSize1::test_zoom_output_size1[_param_46_{grid_mode=False, mode='grid-constant', order=4, shape=(5, 5, 2), zoom=(2, 2, 0.5)}]
FAILED tests/cupyx_tests/scipy_tests/ndimage_tests/test_interpolation.py::TestZoomOutputSize1::test_zoom_output_size1[_param_47_{grid_mode=False, mode='grid-constant', order=5, shape=(5, 5, 2), zoom=(2, 2, 0.5)}]
FAILED tests/cupyx_tests/scipy_tests/ndimage_tests/test_interpolation.py::TestZoomOutputSize1::test_zoom_output_size1[_param_52_{grid_mode=True, mode='constant', order=4, shape=(5, 5, 2), zoom=(2, 2, 0.5)}]
FAILED tests/cupyx_tests/scipy_tests/ndimage_tests/test_interpolation.py::TestZoomOutputSize1::test_zoom_output_size1[_param_53_{grid_mode=True, mode='constant', order=5, shape=(5, 5, 2), zoom=(2, 2, 0.5)}]
FAILED tests/cupyx_tests/scipy_tests/ndimage_tests/test_interpolation.py::TestZoomOutputSize1::test_zoom_output_size1[_param_64_{grid_mode=True, mode='mirror', order=4, shape=(5, 5, 2), zoom=(2, 2, 0.5)}]
FAILED tests/cupyx_tests/scipy_tests/ndimage_tests/test_interpolation.py::TestZoomOutputSize1::test_zoom_output_size1[_param_65_{grid_mode=True, mode='mirror', order=5, shape=(5, 5, 2), zoom=(2, 2, 0.5)}]
FAILED tests/cupyx_tests/scipy_tests/ndimage_tests/test_interpolation.py::TestZoomOutputSize1::test_zoom_output_size1[_param_70_{grid_mode=True, mode='wrap', order=4, shape=(5, 5, 2), zoom=(2, 2, 0.5)}]
FAILED tests/cupyx_tests/scipy_tests/ndimage_tests/test_interpolation.py::TestZoomOutputSize1::test_zoom_output_size1[_param_71_{grid_mode=True, mode='wrap', order=5, shape=(5, 5, 2), zoom=(2, 2, 0.5)}]
FAILED tests/cupyx_tests/scipy_tests/ndimage_tests/test_interpolation.py::TestZoomOutputSize1::test_zoom_output_size1[_param_94_{grid_mode=True, mode='grid-constant', order=4, shape=(5, 5, 2), zoom=(2, 2, 0.5)}]
FAILED tests/cupyx_tests/scipy_tests/ndimage_tests/test_interpolation.py::TestZoomOutputSize1::test_zoom_output_size1[_param_95_{grid_mode=True, mode='grid-constant', order=5, shape=(5, 5, 2), zoom=(2, 2, 0.5)}]
FAILED tests/cupyx_tests/scipy_tests/signal_tests/test_signaltools.py::TestFFTConvolve_param_12_{mode='full', size1=(3, 4, 10), size2=3}::test_fftconvolve
FAILED tests/cupyx_tests/scipy_tests/signal_tests/test_signaltools.py::TestFFTConvolve_param_44_{mode='valid', size1=(3, 4, 10), size2=3}::test_convolve_fft
FAILED tests/example_tests/test_custom_struct.py::TestCustomStruct::test_builtin_vectors
FAILED tests/example_tests/test_custom_struct.py::TestCustomStruct::test_complex_struct
FAILED tests/example_tests/test_custom_struct.py::TestCustomStruct::test_packed_matrix
= 91 failed, 83212 passed, 8623 skipped, 647 deselected, 4325 xfailed, 1532 warnings in 26551.37s (7:22:31) =
