============================= test session starts ==============================
platform linux -- Python 3.8.7, pytest-6.2.2, py-1.10.0, pluggy-0.13.1
rootdir: /home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy, configfile: setup.cfg
plugins: html-3.1.1, metadata-1.11.0
collected 63757 items / 56 deselected / 12 skipped / 63689 selected

tests/cupy_tests/test_cublas.py ........................................ [  0%]
........................................................................ [  0%]
........................................................................ [  0%]
........................................................................ [  0%]
........................................................................ [  0%]
........................................................................ [  0%]
........................................................................ [  0%]
........................................................................ [  0%]
........................................................................ [  0%]
........................................................................ [  1%]
........................................................................ [  1%]
........................................................................ [  1%]
........................................................................ [  1%]
........................................................................ [  1%]
........................................................................ [  1%]
........................................................................ [  1%]
........................................................................ [  1%]
........................................................................ [  1%]
........................................................................ [  2%]
........................................................................ [  2%]
........................................................................ [  2%]
........................................................................ [  2%]
........................................................................ [  2%]
........................................................................ [  2%]
........................................................................ [  2%]
........................................................................ [  2%]
........................................................................ [  3%]
........................................................................ [  3%]
........................................................................ [  3%]
........................................................................ [  3%]
........................................................................ [  3%]
........................................................................ [  3%]
........................................................................ [  3%]
...........................x...........x.............................x.. [  3%]
.........x..........                                                     [  3%]
tests/cupy_tests/test_cudnn.py sssssssssssssssssssssssssssssssssssssssss [  3%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  4%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  4%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  4%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  4%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  4%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  4%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  4%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  4%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  4%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  5%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  5%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  5%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  5%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  5%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  5%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  5%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  5%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  5%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  6%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  6%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  6%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  6%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  6%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  6%]
sssssssssssssssssssssssssssssssssssssssssssssssssssssss                  [  6%]
tests/cupy_tests/test_cusolver.py ssssssssssssssssssssssssssssssssssssss [  6%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  6%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  6%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  7%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  7%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  7%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  7%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  7%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  7%]
ssssssssssssssssssssssssss                                               [  7%]
tests/cupy_tests/test_cutensor.py ssssssssssssssssssssssssssssssssssssss [  7%]
sssssssssssssssssssssssssssssssssssss                                    [  7%]
tests/cupy_tests/test_init.py ..s.......                                 [  7%]
tests/cupy_tests/test_ndim.py ............                               [  7%]
tests/cupy_tests/test_numpy_interop.py ..x....                           [  7%]
tests/cupy_tests/test_type_routines.py ................................. [  7%]
.                                                                        [  7%]
tests/cupy_tests/binary_tests/test_elementwise.py ......                 [  7%]
tests/cupy_tests/binary_tests/test_packing.py ...                        [  7%]
tests/cupy_tests/core_tests/test_array_function.py .....                 [  7%]
tests/cupy_tests/core_tests/test_carray.py .....                         [  7%]
tests/cupy_tests/core_tests/test_core.py ....                            [  7%]
tests/cupy_tests/core_tests/test_cub_reduction.py ...................... [  7%]
...                                                                      [  7%]
tests/cupy_tests/core_tests/test_dlpack.py ..............                [  8%]
tests/cupy_tests/core_tests/test_elementwise.py ...............          [  8%]
tests/cupy_tests/core_tests/test_flags.py .............................  [  8%]
tests/cupy_tests/core_tests/test_function.py ..                          [  8%]
tests/cupy_tests/core_tests/test_internal.py ........................... [  8%]
...............................................................          [  8%]
tests/cupy_tests/core_tests/test_iter.py ............                    [  8%]
tests/cupy_tests/core_tests/test_ndarray.py ..........................ss [  8%]
ssss.................................................................... [  8%]
.........................sss...............                              [  8%]
tests/cupy_tests/core_tests/test_ndarray_adv_indexing.py ............... [  8%]
........................................................................ [  8%]
........................................................................ [  8%]
........................................................................ [  8%]
.............................................                            [  8%]
tests/cupy_tests/core_tests/test_ndarray_complex_ops.py ................ [  8%]
.....                                                                    [  8%]
tests/cupy_tests/core_tests/test_ndarray_contiguity.py .                 [  8%]
tests/cupy_tests/core_tests/test_ndarray_conversion.py .......FF..       [  8%]
tests/cupy_tests/core_tests/test_ndarray_copy_and_view.py ss........s... [  8%]
....ssss.......                                                          [  8%]
tests/cupy_tests/core_tests/test_ndarray_cuda_array_interface.py sssssss [  9%]
sssssssssssssssssssssssssssssssssssssssssssssssss                        [  9%]
tests/cupy_tests/core_tests/test_ndarray_elementwise_op.py ............. [  9%]
........................................................................ [  9%]
.................................................................        [  9%]
tests/cupy_tests/core_tests/test_ndarray_get.py ............             [  9%]
tests/cupy_tests/core_tests/test_ndarray_indexing.py FFFF..........F.... [  9%]
........F..........F.............................                        [  9%]
tests/cupy_tests/core_tests/test_ndarray_math.py ......................s [  9%]
sssssssssss                                                              [  9%]
tests/cupy_tests/core_tests/test_ndarray_owndata.py ...                  [  9%]
tests/cupy_tests/core_tests/test_ndarray_reduction.py .................. [  9%]
........................................................................ [  9%]
........................................................................ [  9%]
................................                                         [  9%]
tests/cupy_tests/core_tests/test_ndarray_scatter.py .................... [  9%]
........................................................................ [  9%]
...............................................................          [ 10%]
tests/cupy_tests/core_tests/test_ndarray_ufunc.py .......                [ 10%]
tests/cupy_tests/core_tests/test_ndarray_unary_op.py .......F..........s [ 10%]
...                                                                      [ 10%]
tests/cupy_tests/core_tests/test_raw.py .ss.........sss..s.s.s........ss [ 10%]
.........sss..s.s.s........ss.........sss..s.s.s......ssssssssssssssssss [ 10%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss.s [ 10%]
s.......sssss....s.s......sssssssssssssssssssssssssssss                  [ 10%]
tests/cupy_tests/core_tests/test_reduction.py .....................      [ 10%]
tests/cupy_tests/core_tests/test_scan.py ....                            [ 10%]
tests/cupy_tests/core_tests/test_syncdetect.py ....                      [ 10%]
tests/cupy_tests/core_tests/test_userkernel.py ....sss.............      [ 10%]
tests/cupy_tests/core_tests/fusion_tests/test_array.py ................. [ 10%]
........................................................................ [ 10%]
....................................................                     [ 10%]
tests/cupy_tests/core_tests/fusion_tests/test_indexing.py .............. [ 10%]
.................s                                                       [ 10%]
tests/cupy_tests/core_tests/fusion_tests/test_kernel_cache.py ....       [ 10%]
tests/cupy_tests/core_tests/fusion_tests/test_misc.py .......s.......... [ 10%]
........                                                                 [ 10%]
tests/cupy_tests/core_tests/fusion_tests/test_optimization.py .......... [ 10%]
....                                                                     [ 10%]
tests/cupy_tests/core_tests/fusion_tests/test_reduction.py ............. [ 10%]
........................................................................ [ 11%]
.........................................................s.s.s.s.s.s.s.s [ 11%]
.s.ssssssssssssssssss.sss                                                [ 11%]
tests/cupy_tests/core_tests/fusion_tests/test_routines.py .............. [ 11%]
........................................................................ [ 11%]
..............                                                           [ 11%]
tests/cupy_tests/core_tests/fusion_tests/test_ufunc.py ................. [ 11%]
......................................................                   [ 11%]
tests/cupy_tests/creation_tests/test_basic.py .......................... [ 11%]
...........................................................s............ [ 11%]
....s.                                                                   [ 11%]
tests/cupy_tests/creation_tests/test_from_data.py ssssssssssssssssssssss [ 11%]
sssssssssssssssssssssssssssssssssssssssssssssssssssssssssss............. [ 11%]
....................................F..............................      [ 11%]
tests/cupy_tests/creation_tests/test_matrix.py ......................... [ 11%]
.................................                                        [ 11%]
tests/cupy_tests/creation_tests/test_ranges.py ......................... [ 11%]
..............................................................           [ 12%]
tests/cupy_tests/cuda_tests/test_compiler.py sssssss........             [ 12%]
tests/cupy_tests/cuda_tests/test_cublas.py .                             [ 12%]
tests/cupy_tests/cuda_tests/test_cudnn.py s                              [ 12%]
tests/cupy_tests/cuda_tests/test_cufft.py ssssssssssssssss.              [ 12%]
tests/cupy_tests/cuda_tests/test_curand.py .....                         [ 12%]
tests/cupy_tests/cuda_tests/test_cusolver.py .                           [ 12%]
tests/cupy_tests/cuda_tests/test_cusparse.py .                           [ 12%]
tests/cupy_tests/cuda_tests/test_cutensor.py s                           [ 12%]
tests/cupy_tests/cuda_tests/test_device.py .............F.               [ 12%]
tests/cupy_tests/cuda_tests/test_driver.py ss.                           [ 12%]
tests/cupy_tests/cuda_tests/test_memory.py ....ssssssss..........sssssss [ 12%]
sss.................................................ssssss               [ 12%]
tests/cupy_tests/cuda_tests/test_memory_hook.py .                        [ 12%]
tests/cupy_tests/cuda_tests/test_nccl.py ........                        [ 12%]
tests/cupy_tests/cuda_tests/test_nvrtc.py .                              [ 12%]
tests/cupy_tests/cuda_tests/test_nvtx.py ....                            [ 12%]
tests/cupy_tests/cuda_tests/test_pinned_memory.py ............           [ 12%]
tests/cupy_tests/cuda_tests/test_profile.py ..                           [ 12%]
tests/cupy_tests/cuda_tests/test_runtime.py .                            [ 12%]
tests/cupy_tests/cuda_tests/test_stream.py ..s..s..ssssssss.s            [ 12%]
tests/cupy_tests/cuda_tests/memory_hooks_tests/test_debug_print.py .     [ 12%]
tests/cupy_tests/cuda_tests/memory_hooks_tests/test_line_profile.py ..   [ 12%]
tests/cupy_tests/fft_tests/test_cache.py ..sss.....s..                   [ 12%]
tests/cupy_tests/fft_tests/test_callback.py ssssssssssssssssssssssssssss [ 12%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 12%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 12%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 12%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 12%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 13%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 13%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 13%]
ssssssssssssssssssssssssssssssssssssssssssssssssssss                     [ 13%]
tests/cupy_tests/fft_tests/test_fft.py ................................. [ 13%]
........................................................................ [ 13%]
...............................................................sssssssss [ 13%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 13%]
sssssssssssssss......................................................... [ 13%]
................................................s................s...... [ 13%]
..........s..............................ssssssssssssssssssssssss....... [ 14%]
........................................................................ [ 14%]
........................................................................ [ 14%]
.......s..sssssssssssss................................................. [ 14%]
...................................                                      [ 14%]
tests/cupy_tests/functional_tests/test_piecewise.py .............        [ 14%]
tests/cupy_tests/functional_tests/test_vectorize.py .................... [ 14%]
......................                                                   [ 14%]
tests/cupy_tests/indexing_tests/test_generate.py .......x............... [ 14%]
...............                                                          [ 14%]
tests/cupy_tests/indexing_tests/test_indexing.py ....................... [ 14%]
..........................                                               [ 14%]
tests/cupy_tests/indexing_tests/test_insert.py ......................... [ 14%]
........................................................................ [ 14%]
........................................................................ [ 14%]
.........................................................                [ 15%]
tests/cupy_tests/indexing_tests/test_iterate.py ........................ [ 15%]
...............................................                          [ 15%]
tests/cupy_tests/io_tests/test_base_n.py ............................    [ 15%]
tests/cupy_tests/io_tests/test_formatting.py ..                          [ 15%]
tests/cupy_tests/io_tests/test_npz.py .......                            [ 15%]
tests/cupy_tests/lib_tests/test_polynomial.py .......ss.......ssssssssss [ 15%]
sssssss........ssssssssssssssssssssssssssssssssssssxxxxxxxxxxxxxxxxxxxx. [ 15%]
..ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 15%]
ssssssssssssssssssssssssss....FFFFFFFFFFFFFFFFFFFFFFFFFF................ [ 15%]
........................................................................ [ 15%]
........FFFFFFFF........FFFFFFFF........................................ [ 15%]
...........FFFFFF............................F.......................... [ 15%]
..                                                                       [ 15%]
tests/cupy_tests/lib_tests/test_shape_base.py ......................     [ 15%]
tests/cupy_tests/lib_tests/test_strided_tricks.py ..                     [ 15%]
tests/cupy_tests/linalg_tests/test_decomposition.py .................... [ 15%]
.......................                                                  [ 16%]
tests/cupy_tests/linalg_tests/test_eigenvalue.py xxxxxxxx                [ 16%]
tests/cupy_tests/linalg_tests/test_einsum.py ........................... [ 16%]
................................................................F..F.... [ 16%]
........................................................................ [ 16%]
........................................................................ [ 16%]
........................................................................ [ 16%]
........................................................................ [ 16%]
........................................................................ [ 16%]
........................................................................ [ 16%]
........................................................................ [ 16%]
........................................................................ [ 17%]
........................................................................ [ 17%]
..........                                                               [ 17%]
tests/cupy_tests/linalg_tests/test_norms.py ............................ [ 17%]
........................................................................ [ 17%]
........................................................................ [ 17%]
.................................................................        [ 17%]
tests/cupy_tests/linalg_tests/test_product.py .......................... [ 17%]
........................................................................ [ 17%]
........................................................................ [ 17%]
..........................................                               [ 17%]
tests/cupy_tests/linalg_tests/test_solve.py ............................ [ 17%]
..                                                                       [ 17%]
tests/cupy_tests/logic_tests/test_comparison.py ........................ [ 18%]
.....                                                                    [ 18%]
tests/cupy_tests/logic_tests/test_content.py ...                         [ 18%]
tests/cupy_tests/logic_tests/test_ops.py ....                            [ 18%]
tests/cupy_tests/logic_tests/test_truth.py ............................. [ 18%]
........................................................................ [ 18%]
........................................................................ [ 18%]
........................................................................ [ 18%]
........................................................................ [ 18%]
........................................................................ [ 18%]
........................................................................ [ 18%]
........................................................................ [ 18%]
........................................................................ [ 18%]
........................................................................ [ 19%]
...........................................                              [ 19%]
tests/cupy_tests/logic_tests/test_type_test.py ......................... [ 19%]
.......                                                                  [ 19%]
tests/cupy_tests/manipulation_tests/test_add_remove.py ................. [ 19%]
.........................                                                [ 19%]
tests/cupy_tests/manipulation_tests/test_basic.py ...................... [ 19%]
.......................................................                  [ 19%]
tests/cupy_tests/manipulation_tests/test_dims.py .....F.F............... [ 19%]
................................................                         [ 19%]
tests/cupy_tests/manipulation_tests/test_join.py ....................... [ 19%]
...........................                                              [ 19%]
tests/cupy_tests/manipulation_tests/test_kind.py ...........             [ 19%]
tests/cupy_tests/manipulation_tests/test_rearrange.py .................. [ 19%]
.................................                                        [ 19%]
tests/cupy_tests/manipulation_tests/test_shape.py ...................... [ 19%]
....................................                                     [ 19%]
tests/cupy_tests/manipulation_tests/test_split.py ..................     [ 19%]
tests/cupy_tests/manipulation_tests/test_tiling.py ..................... [ 19%]
...........                                                              [ 19%]
tests/cupy_tests/manipulation_tests/test_transpose.py .................. [ 19%]
..........                                                               [ 19%]
tests/cupy_tests/math_tests/test_arithmetic.py ......................... [ 19%]
........................................................................ [ 20%]
........................................................................ [ 20%]
........................................................................ [ 20%]
........................................................................ [ 20%]
........................................................................ [ 20%]
........................................................................ [ 20%]
........................................................................ [ 20%]
........................................................................ [ 20%]
........................................................................ [ 20%]
........................................................................ [ 21%]
........................................................................ [ 21%]
........................................................................ [ 21%]
........................................................................ [ 21%]
........................................................................ [ 21%]
........................................................................ [ 21%]
........................................................................ [ 21%]
........................................................................ [ 21%]
........................................................................ [ 21%]
........................................................................ [ 22%]
........................................................................ [ 22%]
........................................................................ [ 22%]
........................................................................ [ 22%]
........................................................................ [ 22%]
........................................................................ [ 22%]
........................................................................ [ 22%]
........................................................................ [ 22%]
........................................................................ [ 22%]
........................................................................ [ 23%]
........................................................................ [ 23%]
........................................................................ [ 23%]
........................................................................ [ 23%]
........................................................................ [ 23%]
........................................................................ [ 23%]
........................................................................ [ 23%]
........................................................................ [ 23%]
........................................................................ [ 24%]
........................................................................ [ 24%]
........................................................................ [ 24%]
........................................................................ [ 24%]
........................................................................ [ 24%]
........................................................................ [ 24%]
........................................................................ [ 24%]
........................................................................ [ 24%]
........................................................................ [ 24%]
........................................................................ [ 25%]
........................................................................ [ 25%]
........................................................................ [ 25%]
........................................................................ [ 25%]
........................................................................ [ 25%]
........................................................................ [ 25%]
........................................................................ [ 25%]
........................................................................ [ 25%]
........................................................................ [ 25%]
........................................................................ [ 26%]
........................................................................ [ 26%]
........................................................................ [ 26%]
........................................................................ [ 26%]
........................................................................ [ 26%]
........................................................................ [ 26%]
........................................................................ [ 26%]
........................................................................ [ 26%]
........................................................................ [ 26%]
........................................................................ [ 27%]
........................................................................ [ 27%]
........................................................................ [ 27%]
........................................................................ [ 27%]
........................................................................ [ 27%]
........................................................................ [ 27%]
........................................................................ [ 27%]
........................................................................ [ 27%]
........................................................................ [ 27%]
........................................................................ [ 28%]
........................................................................ [ 28%]
........................................................................ [ 28%]
........................................................................ [ 28%]
........................................................................ [ 28%]
........................................................................ [ 28%]
........................................................................ [ 28%]
........................................................................ [ 28%]
........................................................................ [ 28%]
........................................................................ [ 29%]
........................................................................ [ 29%]
........................................................................ [ 29%]
........................................................................ [ 29%]
........................................................................ [ 29%]
........................................................................ [ 29%]
........................................................................ [ 29%]
........................................................................ [ 29%]
........................................................................ [ 29%]
........................................................................ [ 30%]
........................................................................ [ 30%]
........................................................................ [ 30%]
........................................................................ [ 30%]
........................................................................ [ 30%]
........................................................................ [ 30%]
........................................................................ [ 30%]
........................................................................ [ 30%]
........................................................................ [ 31%]
........................................................................ [ 31%]
........................................................................ [ 31%]
........................................................................ [ 31%]
........................................................................ [ 31%]
........................................................................ [ 31%]
........................................................................ [ 31%]
........................................................................ [ 31%]
........................................................................ [ 31%]
........................................................................ [ 32%]
........................................................................ [ 32%]
........................................................................ [ 32%]
........................................................................ [ 32%]
........................................................................ [ 32%]
........................................................................ [ 32%]
...........................                                              [ 32%]
tests/cupy_tests/math_tests/test_explog.py .........                     [ 32%]
tests/cupy_tests/math_tests/test_floating.py .......                     [ 32%]
tests/cupy_tests/math_tests/test_hyperbolic.py ......                    [ 32%]
tests/cupy_tests/math_tests/test_matmul.py ............................. [ 32%]
........................................................................ [ 32%]
........................................................................ [ 32%]
........................................................................ [ 33%]
......................................                                   [ 33%]
tests/cupy_tests/math_tests/test_misc.py ............................... [ 33%]
............................................x..x..x..................... [ 33%]
............................                                             [ 33%]
tests/cupy_tests/math_tests/test_rational.py ....                        [ 33%]
tests/cupy_tests/math_tests/test_rounding.py ........................... [ 33%]
..........................................                               [ 33%]
tests/cupy_tests/math_tests/test_special.py ...                          [ 33%]
tests/cupy_tests/math_tests/test_sumprod.py ............................ [ 33%]
....................................................ssssssssssssssss.... [ 33%]
........................................................................ [ 33%]
........................................................................ [ 33%]
........................................................................ [ 33%]
........................................................................ [ 34%]
........................................................................ [ 34%]
........................................................................ [ 34%]
........................................................................ [ 34%]
........................................................................ [ 34%]
..............................................................           [ 34%]
tests/cupy_tests/math_tests/test_trigonometric.py ...............        [ 34%]
tests/cupy_tests/math_tests/test_window.py ............................. [ 34%]
.....                                                                    [ 34%]
tests/cupy_tests/misc_tests/test_memory_ranges.py ................       [ 34%]
tests/cupy_tests/misc_tests/test_who.py ......                           [ 34%]
tests/cupy_tests/padding_tests/test_pad.py ............................. [ 34%]
..............................................                           [ 34%]
tests/cupy_tests/polynomial_tests/test_polynomial.py ................... [ 34%]
                                                                         [ 34%]
tests/cupy_tests/polynomial_tests/test_polyutils.py ............F....... [ 34%]
................                                                         [ 34%]
tests/cupy_tests/prof_tests/test_range.py ........                       [ 34%]
tests/cupy_tests/random_tests/test_bit_generator.py ssssssssssss         [ 34%]
tests/cupy_tests/random_tests/test_distributions.py .................... [ 34%]
........................................................................ [ 35%]
........................................................................ [ 35%]
........................................................................ [ 35%]
........................................................................ [ 35%]
........................................................................ [ 35%]
........................................................................ [ 35%]
........................................................................ [ 35%]
........................................................................ [ 35%]
........................................................................ [ 35%]
........................................................................ [ 36%]
........................................................................ [ 36%]
........................................................................ [ 36%]
........................................................................ [ 36%]
........................................................................ [ 36%]
........................................................................ [ 36%]
.................................................                        [ 36%]
tests/cupy_tests/random_tests/test_generator.py ........................ [ 36%]
........................................................................ [ 36%]
........................................................................ [ 37%]
.................................................................F...... [ 37%]
......................F...............................                   [ 37%]
tests/cupy_tests/random_tests/test_generator_api.py sssssssssssssssss    [ 37%]
tests/cupy_tests/random_tests/test_init.py .                             [ 37%]
tests/cupy_tests/random_tests/test_permutations.py ...x...x............. [ 37%]
........................................................................ [ 37%]
........................................................................ [ 37%]
.............                                                            [ 37%]
tests/cupy_tests/random_tests/test_random.py .                           [ 37%]
tests/cupy_tests/random_tests/test_sample.py ...............F........F.. [ 37%]
............                                                             [ 37%]
tests/cupy_tests/sorting_tests/test_count.py ....                        [ 37%]
tests/cupy_tests/sorting_tests/test_search.py ssssssss........ssssssss.. [ 37%]
........................................................................ [ 37%]
........................................................................ [ 37%]
....................................................................     [ 37%]
tests/cupy_tests/sorting_tests/test_sort.py ............................ [ 38%]
........................................................................ [ 38%]
..........................................................x......X....   [ 38%]
tests/cupy_tests/statistics_tests/test_correlation.py .................. [ 38%]
..............................F..F.FF...................                 [ 38%]
tests/cupy_tests/statistics_tests/test_histogram.py .................... [ 38%]
........................................................................ [ 38%]
........................................................................ [ 38%]
........................................................................ [ 38%]
........................................................................ [ 38%]
........................................................                 [ 38%]
tests/cupy_tests/statistics_tests/test_meanvar.py ...................... [ 38%]
........................................................................ [ 39%]
........................................................................ [ 39%]
..                                                                       [ 39%]
tests/cupy_tests/statistics_tests/test_order.py sssss................... [ 39%]
.........................                                                [ 39%]
tests/cupy_tests/testing_tests/test_array.py ........................... [ 39%]
...............................................                          [ 39%]
tests/cupy_tests/testing_tests/test_condition.py ................        [ 39%]
tests/cupy_tests/testing_tests/test_helper.py .......................... [ 39%]
........................................................................ [ 39%]
.....sssss..sssssss..ssxxxxxxxx................x..x.................     [ 39%]
tests/cupy_tests/testing_tests/test_parameterized.py ............s.s.s.s [ 39%]
....ssss......                                                           [ 39%]
tests/cupyx_tests/test_cupyx.py ..                                       [ 39%]
tests/cupyx_tests/test_lapack.py .s.s.s.s.....s.s.s.s.....s.s.s.s.....s. [ 39%]
s.s.s.............sssssssssssss                                          [ 39%]
tests/cupyx_tests/test_optimize.py sssssssss                             [ 39%]
tests/cupyx_tests/test_rsqrt.py .                                        [ 39%]
tests/cupyx_tests/test_runtime.py s.                                     [ 39%]
tests/cupyx_tests/test_scatter.py ...                                    [ 39%]
tests/cupyx_tests/test_time.py .........                                 [ 39%]
tests/cupyx_tests/fallback_mode_tests/test_fallback.py ................. [ 39%]
........................................................................ [ 39%]
.........                                                                [ 40%]
tests/cupyx_tests/fallback_mode_tests/test_notifications.py .........    [ 40%]
tests/cupyx_tests/linalg_tests/test_solve.py FFFFFFFFFFFFFFFF....ssss    [ 40%]
tests/cupyx_tests/scipy_tests/test_get_array_module.py ss                [ 40%]
tests/cupyx_tests/scipy_tests/fft_tests/test_fft.py .ss.....ss.....ss... [ 40%]
..ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss..... [ 40%]
ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss [ 40%]
.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.. [ 40%]
...ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.... [ 40%]
.ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....s [ 40%]
s.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss. [ 40%]
....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss... [ 40%]
..ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss..... [ 41%]
ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss [ 41%]
.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.. [ 41%]
...ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.... [ 41%]
.ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....s [ 41%]
s.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss. [ 41%]
....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss... [ 41%]
..ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss..... [ 41%]
ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss [ 41%]
.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.. [ 42%]
...ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.... [ 42%]
.ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....s [ 42%]
s.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss. [ 42%]
....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss... [ 42%]
..ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss..... [ 42%]
ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss [ 42%]
.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.. [ 42%]
...ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.... [ 42%]
.ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....s [ 43%]
s.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss. [ 43%]
....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss... [ 43%]
..ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss..... [ 43%]
ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss [ 43%]
.....ss.....ss.....ss.....ss.....s.....s.....s.....s.....s.....s.....s.. [ 43%]
...s.....s.....s.....s.....s.....s.....s.....s.....s.....s.....s.....s.. [ 43%]
...s.....s.....s.....s.....s.....s.....s.....s.....s.....s.....s.....s.. [ 43%]
...s.....s.....s.....s.....s.....s.....s.....s.....s.....s.....s.....s.. [ 43%]
...s.....s.....s.....s.....s.....s.....s.....s.....s.....s.....s.....s.. [ 44%]
...s.....s.....s.....s.....s.....s.....s.....s.....s.....s.....s.....s.. [ 44%]
...s.....s.....s.....s.....s.....s.....s.....s.....s.....s.....s.....s.. [ 44%]
...s.....s.....s.....s.....s.....s.....s.....s.....s.....s.....s.....s.. [ 44%]
...s.....s.....s.....s.....s.....s.....s.....s.....s.....s.....s.....s.. [ 44%]
...s.....s.....s.....s.....s.....s.....s.....s.....s.....s.....s.....s.. [ 44%]
...s.....s.....s.....s.....s.....s.....s.....s.....s.....s.....s.....s.. [ 44%]
...s.....s.sss.s.....s.sss.s.....s.sss.s.....s.sss.s.....s.sss.s.....s.s [ 44%]
ss.s.....s.sss.s.....s.sss.s.....s.sss.s.....s.sss.s.....s.sss.s.....s.s [ 44%]
ss.s.....s.sss.s.....s.sss.s.....s.sss.s.....s.sss.s.....s.sss.s.....s.s [ 45%]
ss.s.....s.sss.s.....s.sss.s.....s.sss.s.....s.sss.s.....s.sss.s.....s.s [ 45%]
ss.s.....s.sss.s.....s.sss.s.....s.sss.s.....s.sss.s.....s...s...s...s.. [ 45%]
.s...s...s...s...s...s...s...s...s...s...s...s...s...s...s...s...s...s.. [ 45%]
.s...s...s...s...s...s...s...s...s...s...s...s...s...s...s...s...s...s.. [ 45%]
.s...s...s...s...s...s...s...s...s...s...s...s...s...s...s...s...s...s.. [ 45%]
.s...s...s...s...s...s..........                                         [ 45%]
tests/cupyx_tests/scipy_tests/fft_tests/test_helper.py .                 [ 45%]
tests/cupyx_tests/scipy_tests/fftpack_tests/test_fftpack.py ssssssssssss [ 45%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 45%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 45%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 46%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 46%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 46%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 46%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 46%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 46%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 46%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 46%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 46%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 47%]
sssssssssssssssssss......                                                [ 47%]
tests/cupyx_tests/scipy_tests/linalg_tests/test_decomp_lu.py sssssssssss [ 47%]
sssssssssssssssssssssssssssssssssssssssssssssssssss                      [ 47%]
tests/cupyx_tests/scipy_tests/linalg_tests/test_solve_triangular.py ssss [ 47%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 47%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 47%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 47%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss     [ 47%]
tests/cupyx_tests/scipy_tests/linalg_tests/test_special_matrices.py ssss [ 47%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 47%]
sssssssssssssssssssssssssssssssssssssssssssssssss                        [ 47%]
tests/cupyx_tests/scipy_tests/ndimage_tests/test_filters.py ssssssssssss [ 47%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 47%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 48%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 48%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 48%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 48%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 48%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 48%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 48%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 48%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 48%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 49%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 49%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 49%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 49%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 49%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 49%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 49%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 49%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 50%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 50%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 50%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 50%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 50%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 50%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 50%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 50%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 50%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 51%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 51%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 51%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 51%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 51%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 51%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 51%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 51%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 51%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 52%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 52%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 52%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 52%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 52%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 52%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 52%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 52%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 52%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 53%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 53%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 53%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 53%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 53%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 53%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 53%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 53%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 53%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 54%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 54%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 54%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 54%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 54%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 54%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 54%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 54%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 54%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 55%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 55%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 55%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 55%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 55%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 55%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 55%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 55%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 56%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 56%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 56%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 56%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 56%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 56%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 56%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 56%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 56%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 57%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 57%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 57%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 57%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 57%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 57%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 57%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 57%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 57%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 58%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 58%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 58%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 58%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 58%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 58%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 58%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 58%]
ssssssssssssssssssssssssssssssssssss                                     [ 58%]
tests/cupyx_tests/scipy_tests/ndimage_tests/test_fourier.py ssssssssssss [ 58%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 59%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 59%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 59%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 59%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 59%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 59%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 59%]
ssssssssssssssssssssssssssssssssssssssss                                 [ 59%]
tests/cupyx_tests/scipy_tests/ndimage_tests/test_interpolation.py ssssss [ 59%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 59%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 59%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 60%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 60%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 60%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 60%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 60%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 60%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 60%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 60%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 61%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 61%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 61%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 61%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 61%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 61%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 61%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 61%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 61%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 62%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 62%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 62%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 62%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 62%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 62%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 62%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 62%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 62%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 63%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 63%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 63%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 63%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 63%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 63%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 63%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 63%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 63%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 64%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 64%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 64%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 64%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 64%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 64%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 64%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 64%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 64%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 65%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 65%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 65%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 65%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 65%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 65%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 65%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 65%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 65%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 66%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 66%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 66%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 66%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 66%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 66%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 66%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 66%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 67%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 67%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 67%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 67%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 67%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 67%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 67%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 67%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 67%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 68%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 68%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 68%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 68%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 68%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 68%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 68%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 68%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 68%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 69%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 69%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 69%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 69%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 69%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 69%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 69%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 69%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 69%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 70%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 70%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 70%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 70%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 70%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 70%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 70%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 70%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 70%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 71%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 71%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 71%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 71%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 71%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 71%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 71%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 71%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 71%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 72%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 72%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 72%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 72%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 72%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 72%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 72%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 72%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 72%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 73%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 73%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 73%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 73%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 73%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 73%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 73%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 73%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 74%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 74%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 74%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 74%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 74%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 74%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 74%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 74%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 74%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 75%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 75%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 75%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 75%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 75%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 75%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 75%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 75%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 75%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 76%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 76%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 76%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 76%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 76%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 76%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 76%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 76%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 76%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 77%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 77%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 77%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 77%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 77%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 77%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 77%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 77%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 77%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 78%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 78%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 78%]
ssssssssssssssss........................................................ [ 78%]
........................................................................ [ 78%]
........................................................................ [ 78%]
........................................ssssssssssssssssssssssssssssssss [ 78%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 78%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 78%]
sssssssssssssssssssssssssssssssssssssssss............................... [ 79%]
.........sssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 79%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 79%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 79%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 79%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 79%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 79%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 79%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 80%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 80%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 80%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 80%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 80%]
sssssssssssssssssssssssssssssssssssssssssssssssssssssssssss              [ 80%]
tests/cupyx_tests/scipy_tests/ndimage_tests/test_measurements.py sssssss [ 80%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 80%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 80%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 80%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 81%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 81%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 81%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 81%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 81%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 81%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 81%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 81%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 81%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 82%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 82%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 82%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 82%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 82%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 82%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 82%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 82%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 82%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 83%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 83%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 83%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 83%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 83%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 83%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 83%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 83%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 83%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 84%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 84%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 84%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 84%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 84%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 84%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 84%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 84%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 84%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 85%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 85%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 85%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 85%]
sss                                                                      [ 85%]
tests/cupyx_tests/scipy_tests/ndimage_tests/test_morphology.py sssssssss [ 85%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 85%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 85%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 85%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 85%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 86%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 86%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 86%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 86%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 86%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 86%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 86%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 86%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 86%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 87%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 87%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 87%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 87%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 87%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 87%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 87%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 87%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 87%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 88%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 88%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 88%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 88%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 88%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 88%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 88%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 88%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 88%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 89%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 89%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 89%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 89%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 89%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 89%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 89%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 89%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 89%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 90%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 90%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 90%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 90%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 90%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 90%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 90%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 90%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 90%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 91%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 91%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 91%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 91%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 91%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 91%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 91%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 91%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 91%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 92%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 92%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 92%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 92%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 92%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 92%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 92%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 92%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 93%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 93%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 93%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 93%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 93%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 93%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 93%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 93%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 93%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 94%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 94%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 94%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 94%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 94%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 94%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 94%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 94%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 94%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 95%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 95%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 95%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 95%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 95%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 95%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 95%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 95%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 95%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 96%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 96%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 96%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 96%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 96%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 96%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 96%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 96%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 96%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 97%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 97%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 97%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 97%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 97%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 97%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 97%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 97%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 97%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 98%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 98%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 98%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 98%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 98%]
                                                                         [ 98%]
tests/cupyx_tests/scipy_tests/signal_tests/test_bsplines.py ssssssssssss [ 98%]
                                                                         [ 98%]
tests/cupyx_tests/scipy_tests/signal_tests/test_signaltools.py sssssssss [ 98%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 98%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 98%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 98%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 99%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 99%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 99%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 99%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 99%]
sssssssssssssss...............ssssssssssssssssssssssssssssssssssssssssss [ 99%]
ssssssssssssssssssssssssssssssssssss                                     [ 99%]
tests/cupyx_tests/scipy_tests/special_tests/test_bessel.py ssssssssssss  [ 99%]
tests/cupyx_tests/scipy_tests/special_tests/test_convex_analysis.py ssss [ 99%]
s                                                                        [ 99%]
tests/cupyx_tests/scipy_tests/special_tests/test_digamma.py sssss        [ 99%]
tests/cupyx_tests/scipy_tests/special_tests/test_erf.py ssssssssssss     [ 99%]
tests/cupyx_tests/scipy_tests/special_tests/test_gamma.py ssss           [ 99%]
tests/cupyx_tests/scipy_tests/special_tests/test_gammaln.py ssss         [ 99%]
tests/cupyx_tests/scipy_tests/special_tests/test_polygamma.py ssss       [ 99%]
tests/cupyx_tests/scipy_tests/special_tests/test_statistics.py ss        [ 99%]
tests/cupyx_tests/scipy_tests/special_tests/test_zeta.py ssss            [ 99%]
tests/cupyx_tests/scipy_tests/stats_tests/test_distributions.py ssssssss [ 99%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 99%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss........ [ 99%]
                                                                         [ 99%]
tests/cupyx_tests/tools_tests/test_install_library.py ..                 [ 99%]
tests/example_tests/test_finance.py .FF                                  [ 99%]
tests/example_tests/test_gemm.py .                                       [ 99%]
tests/example_tests/test_gmm.py ss                                       [ 99%]
tests/example_tests/test_kmeans.py sss                                   [ 99%]
tests/install_tests/test_build.py FF                                     [ 99%]
tests/install_tests/test_utils.py ..                                     [100%]

=================================== FAILURES ===================================
______________ TestNdarrayToBytes_param_1_{shape=(1,)}.test_item _______________
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <<cupy_tests.core_tests.test_ndarray_conversion.TestNdarrayToBytes_param_1_{shape=(1,)} testMethod=test_item>  parameter: {'shape': (1,)}>
args = (), kw = {'dtype': <class 'numpy.int8'>}, cupy_result = b'\x00'
cupy_error = None, numpy_result = b'\x01', numpy_error = None
message = "Results are not equal:\ncupy: b'\\x00'\nnumpy: b'\\x01'"

            @_wraps_partial_xp(impl, name, sp_name, scipy_name)
            def test_func(self, *args, **kw):
                # Run cupy and numpy
                (
                    cupy_result, cupy_error,
                    numpy_result, numpy_error) = (
                        _call_func_numpy_cupy(
                            self, impl, args, kw, name, sp_name, scipy_name))
    
                if cupy_error or numpy_error:
                    _check_cupy_numpy_error(
                        cupy_error, numpy_error,
                        accept_error=False)
                    return
    
                if cupy_result != numpy_result:
                    message = '''Results are not equal:
    cupy: %s
    numpy: %s''' % (str(cupy_result), str(numpy_result))
>                   raise AssertionError(message)
E                   AssertionError: Results are not equal:
E                   cupy: b'\x00'
E                   numpy: b'\x01'

cupy/testing/helper.py:758: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.int8'>
_____________ TestNdarrayToBytes_param_2_{shape=(2, 3)}.test_item ______________
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <<cupy_tests.core_tests.test_ndarray_conversion.TestNdarrayToBytes_param_2_{shape=(2, 3)} testMethod=test_item>  parameter: {'shape': (2, 3)}>
args = (), kw = {'dtype': <class 'numpy.float64'>}
cupy_result = b'\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x08@\x00\x00\x00\x00\x00\x00\x10@\x00\x00\x00\x00\x00\x00\x14@\x00\x00\x00\x00\x00\x00\x18@'
cupy_error = None
numpy_result = b'\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x08@\x00\x00\x00\x00\x00\x00\x10@\x00\x00\x00\x00\x00\x00\x14@\x00\x00\x00\x00\x00\x00\x18@'
numpy_error = None
message = "Results are not equal:\ncupy: b'\\x00\\x00\\x80?\\x00\\x00\\x80?\\x00\\x00\\x00\\x00\\x00\\x00\\x00@\\x00\\x00\\x00\\...x00\\x08@\\x00\\x00\\x00\\x00\\x00\\x00\\x10@\\x00\\x00\\x00\\x00\\x00\\x00\\x14@\\x00\\x00\\x00\\x00\\x00\\x00\\x18@'"

            @_wraps_partial_xp(impl, name, sp_name, scipy_name)
            def test_func(self, *args, **kw):
                # Run cupy and numpy
                (
                    cupy_result, cupy_error,
                    numpy_result, numpy_error) = (
                        _call_func_numpy_cupy(
                            self, impl, args, kw, name, sp_name, scipy_name))
    
                if cupy_error or numpy_error:
                    _check_cupy_numpy_error(
                        cupy_error, numpy_error,
                        accept_error=False)
                    return
    
                if cupy_result != numpy_result:
                    message = '''Results are not equal:
    cupy: %s
    numpy: %s''' % (str(cupy_result), str(numpy_result))
>                   raise AssertionError(message)
E                   AssertionError: Results are not equal:
E                   cupy: b'\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x08@\x00\x00\x00\x00\x00\x00\x10@\x00\x00\x00\x00\x00\x00\x14@\x00\x00\x00\x00\x00\x00\x18@'
E                   numpy: b'\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x08@\x00\x00\x00\x00\x00\x00\x10@\x00\x00\x00\x00\x00\x00\x14@\x00\x00\x00\x00\x00\x00\x18@'

cupy/testing/helper.py:758: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestArrayIndexingParameterized_param_0_{indexes=(1, 0, 2), shape=(2, 3, 4), transpose=None}.test_getitem _
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:648: in check_func
    array.assert_array_equal(x, y, err_msg, verbose, strides_check)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array(15., dtype=float16), y = 15.0, err_msg = '', verbose = True
strides_check = False

    def assert_array_equal(x, y, err_msg='', verbose=True, strides_check=False):
        """Raises an AssertionError if two array_like objects are not equal.
    
        Args:
             x(numpy.ndarray or cupy.ndarray): The actual object to check.
             y(numpy.ndarray or cupy.ndarray): The desired, expected object.
             strides_check(bool): If ``True``, consistency of strides is also
                 checked.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting values
                 are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_array_equal`
        """
>       numpy.testing.assert_array_equal(
            cupy.asnumpy(x), cupy.asnumpy(y), err_msg=err_msg,
            verbose=verbose)
E       AssertionError: 
E       Arrays are not equal
E       
E       Mismatched elements: 1 / 1 (100%)
E       Max absolute difference: 15.
E       Max relative difference: 1.
E        x: array(0., dtype=float16)
E        y: array(15., dtype=float16)

cupy/testing/array.py:91: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float16'>
_ TestArrayIndexingParameterized_param_1_{indexes=(-1, 0, -2), shape=(2, 3, 4), transpose=None}.test_getitem _
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:648: in check_func
    array.assert_array_equal(x, y, err_msg, verbose, strides_check)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array(15, dtype=int8), y = 15, err_msg = '', verbose = True
strides_check = False

    def assert_array_equal(x, y, err_msg='', verbose=True, strides_check=False):
        """Raises an AssertionError if two array_like objects are not equal.
    
        Args:
             x(numpy.ndarray or cupy.ndarray): The actual object to check.
             y(numpy.ndarray or cupy.ndarray): The desired, expected object.
             strides_check(bool): If ``True``, consistency of strides is also
                 checked.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting values
                 are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_array_equal`
        """
>       numpy.testing.assert_array_equal(
            cupy.asnumpy(x), cupy.asnumpy(y), err_msg=err_msg,
            verbose=verbose)
E       AssertionError: 
E       Arrays are not equal
E       
E       Mismatched elements: 1 / 1 (100%)
E       Max absolute difference: 15
E       Max relative difference: 1.
E        x: array(0, dtype=int8)
E        y: array(15, dtype=int8)

cupy/testing/array.py:91: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.int8'>
_ TestArrayIndexingParameterized_param_2_{indexes=(1, 0, 2), shape=(2, 3, 4), transpose=(2, 0, 1)}.test_getitem _
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:648: in check_func
    array.assert_array_equal(x, y, err_msg, verbose, strides_check)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array(10., dtype=float16), y = 10.0, err_msg = '', verbose = True
strides_check = False

    def assert_array_equal(x, y, err_msg='', verbose=True, strides_check=False):
        """Raises an AssertionError if two array_like objects are not equal.
    
        Args:
             x(numpy.ndarray or cupy.ndarray): The actual object to check.
             y(numpy.ndarray or cupy.ndarray): The desired, expected object.
             strides_check(bool): If ``True``, consistency of strides is also
                 checked.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting values
                 are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_array_equal`
        """
>       numpy.testing.assert_array_equal(
            cupy.asnumpy(x), cupy.asnumpy(y), err_msg=err_msg,
            verbose=verbose)
E       AssertionError: 
E       Arrays are not equal
E       
E       Mismatched elements: 1 / 1 (100%)
E       Max absolute difference: 7.688
E       Max relative difference: 0.7686
E        x: array(2.312, dtype=float16)
E        y: array(10., dtype=float16)

cupy/testing/array.py:91: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float16'>
_ TestArrayIndexingParameterized_param_3_{indexes=(-1, 0, -2), shape=(2, 3, 4), transpose=(2, 0, 1)}.test_getitem _
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:648: in check_func
    array.assert_array_equal(x, y, err_msg, verbose, strides_check)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array(8., dtype=float32), y = 8.0, err_msg = '', verbose = True
strides_check = False

    def assert_array_equal(x, y, err_msg='', verbose=True, strides_check=False):
        """Raises an AssertionError if two array_like objects are not equal.
    
        Args:
             x(numpy.ndarray or cupy.ndarray): The actual object to check.
             y(numpy.ndarray or cupy.ndarray): The desired, expected object.
             strides_check(bool): If ``True``, consistency of strides is also
                 checked.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting values
                 are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_array_equal`
        """
>       numpy.testing.assert_array_equal(
            cupy.asnumpy(x), cupy.asnumpy(y), err_msg=err_msg,
            verbose=verbose)
E       AssertionError: 
E       Arrays are not equal
E       
E       Mismatched elements: 1 / 1 (100%)
E       Max absolute difference: 5.75
E       Max relative difference: 0.71875
E        x: array(2.25, dtype=float32)
E        y: array(8., dtype=float32)

cupy/testing/array.py:91: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
_ TestArrayIndexingParameterized_param_14_{indexes=(slice(None, None, None), None), shape=(2,), transpose=None}.test_getitem _
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:648: in check_func
    array.assert_array_equal(x, y, err_msg, verbose, strides_check)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([[1],
       [2]], dtype=int8)
y = array([[1],
       [2]], dtype=int8), err_msg = '', verbose = True
strides_check = False

    def assert_array_equal(x, y, err_msg='', verbose=True, strides_check=False):
        """Raises an AssertionError if two array_like objects are not equal.
    
        Args:
             x(numpy.ndarray or cupy.ndarray): The actual object to check.
             y(numpy.ndarray or cupy.ndarray): The desired, expected object.
             strides_check(bool): If ``True``, consistency of strides is also
                 checked.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting values
                 are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_array_equal`
        """
>       numpy.testing.assert_array_equal(
            cupy.asnumpy(x), cupy.asnumpy(y), err_msg=err_msg,
            verbose=verbose)
E       AssertionError: 
E       Arrays are not equal
E       
E       Mismatched elements: 2 / 2 (100%)
E       Max absolute difference: 2
E       Max relative difference: 1.
E        x: array([[0],
E              [0]], dtype=int8)
E        y: array([[1],
E              [2]], dtype=int8)

cupy/testing/array.py:91: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.int8'>
_ TestArrayIndexingParameterized_param_27_{indexes=(slice(-4, -5, -1),), shape=(10,), transpose=None}.test_getitem _
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:648: in check_func
    array.assert_array_equal(x, y, err_msg, verbose, strides_check)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([7.], dtype=float32), y = array([7.], dtype=float32), err_msg = ''
verbose = True, strides_check = False

    def assert_array_equal(x, y, err_msg='', verbose=True, strides_check=False):
        """Raises an AssertionError if two array_like objects are not equal.
    
        Args:
             x(numpy.ndarray or cupy.ndarray): The actual object to check.
             y(numpy.ndarray or cupy.ndarray): The desired, expected object.
             strides_check(bool): If ``True``, consistency of strides is also
                 checked.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting values
                 are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_array_equal`
        """
>       numpy.testing.assert_array_equal(
            cupy.asnumpy(x), cupy.asnumpy(y), err_msg=err_msg,
            verbose=verbose)
E       AssertionError: 
E       Arrays are not equal
E       
E       Mismatched elements: 1 / 1 (100%)
E       Max absolute difference: 7.
E       Max relative difference: 1.
E        x: array([0.], dtype=float32)
E        y: array([7.], dtype=float32)

cupy/testing/array.py:91: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
_ TestArrayIndexingParameterized_param_38_{indexes=(slice(-5, -6, -1),), shape=(10,), transpose=None}.test_getitem _
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:648: in check_func
    array.assert_array_equal(x, y, err_msg, verbose, strides_check)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([6.], dtype=float32), y = array([6.], dtype=float32), err_msg = ''
verbose = True, strides_check = False

    def assert_array_equal(x, y, err_msg='', verbose=True, strides_check=False):
        """Raises an AssertionError if two array_like objects are not equal.
    
        Args:
             x(numpy.ndarray or cupy.ndarray): The actual object to check.
             y(numpy.ndarray or cupy.ndarray): The desired, expected object.
             strides_check(bool): If ``True``, consistency of strides is also
                 checked.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting values
                 are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_array_equal`
        """
>       numpy.testing.assert_array_equal(
            cupy.asnumpy(x), cupy.asnumpy(y), err_msg=err_msg,
            verbose=verbose)
E       AssertionError: 
E       Arrays are not equal
E       
E       Mismatched elements: 1 / 1 (100%)
E       Max absolute difference: 3.875
E       Max relative difference: 0.6458333
E        x: array([2.125], dtype=float32)
E        y: array([6.], dtype=float32)

cupy/testing/array.py:91: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
____________________ TestArrayBoolOp.test_bool_one_element _____________________

self = <cupy_tests.core_tests.test_ndarray_unary_op.TestArrayBoolOp testMethod=test_bool_one_element>
dtype = <class 'numpy.float32'>

    @testing.for_all_dtypes()
    def test_bool_one_element(self, dtype):
>       assert bool(cupy.array([1], dtype=dtype))
E       AssertionError: assert False
E        +  where False = bool(array([1.], dtype=float32))
E        +    where array([1.], dtype=float32) = <function array at 0x7fe75fc521f0>([1], dtype=<class 'numpy.float32'>)
E        +      where <function array at 0x7fe75fc521f0> = cupy.array

tests/cupy_tests/core_tests/test_ndarray_unary_op.py:34: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
______________ TestFromData.test_array_from_list_of_numpy_scalar _______________
cupy/testing/helper.py:1175: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:648: in check_func
    array.assert_array_equal(x, y, err_msg, verbose, strides_check)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([0, 1], dtype=int16), y = array([0, 1], dtype=int16), err_msg = ''
verbose = True, strides_check = True

    def assert_array_equal(x, y, err_msg='', verbose=True, strides_check=False):
        """Raises an AssertionError if two array_like objects are not equal.
    
        Args:
             x(numpy.ndarray or cupy.ndarray): The actual object to check.
             y(numpy.ndarray or cupy.ndarray): The desired, expected object.
             strides_check(bool): If ``True``, consistency of strides is also
                 checked.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting values
                 are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_array_equal`
        """
>       numpy.testing.assert_array_equal(
            cupy.asnumpy(x), cupy.asnumpy(y), err_msg=err_msg,
            verbose=verbose)
E       AssertionError: 
E       Arrays are not equal
E       
E       Mismatched elements: 1 / 2 (50%)
E       Max absolute difference: 1
E       Max relative difference: 1.
E        x: array([0, 0], dtype=int16)
E        y: array([0, 1], dtype=int16)

cupy/testing/array.py:91: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.int16'>
order is C
____________________ TestDeviceHandles.test_cusparse_handle ____________________

self = <cupy_tests.cuda_tests.test_device.TestDeviceHandles testMethod=test_cusparse_handle>

    def test_cusparse_handle(self):
>       self._check_handle(cuda.device.get_cusparse_handle)

tests/cupy_tests/cuda_tests/test_device.py:149: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <cupy_tests.cuda_tests.test_device.TestDeviceHandles testMethod=test_cusparse_handle>
func = <built-in function get_cusparse_handle>

    def _check_handle(self, func):
        handles = [func(), None, None]
    
        def _subthread():
            handles[1] = func()
            handles[2] = func()
    
        t = threading.Thread(target=_subthread)
        t.start()
        t.join()
        assert handles[0] is not None
>       assert handles[0] != handles[1]
E       AssertionError: assert 140632796954624 != 140632796954624

tests/cupy_tests/cuda_tests/test_device.py:136: AssertionError
_ TestPolyArithmeticDiffTypes_param_2_{fname='polymul'}.test_polyroutine_diff_types_array _
cupy/testing/helper.py:1068: in test_func
    impl(self, *args, **kw_copy)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:495: in check_func
    array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([ 1.74386169e-05  +1.999987j, -8.70033273e-06  +8.000005j,
        3.22509732e-05 +20.j      , -1.31668885e-05 +...,  1.34253614e-05+211.99995j ,
        1.82537897e-05+169.99998j ,  7.00168357e-06 +99.99997j ],
      dtype=complex64)
desired = array([0.  +2.j, 0.  +8.j, 0. +20.j, 0. +40.j, 0. +70.j, 0.+100.j,
       0.+130.j, 0.+160.j, 0.+190.j, 0.+220.j, 0.+228.j, 0.+212.j,
       0.+170.j, 0.+100.j], dtype=complex64)
rtol = 1e-05, atol = 0, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-05, atol=0
E       
E       Mismatched elements: 1 / 14 (7.14%)
E       Max absolute difference: 6.121e-05
E       Max relative difference: 1.0873644e-05
E        x: array([ 1.743862e-05  +1.999987j, -8.700333e-06  +8.000005j,
E               3.225097e-05 +20.j      , -1.316689e-05 +40.00001j ,
E               1.074560e-05 +69.999985j,  5.520945e-07 +99.99997j ,...
E        y: array([0.  +2.j, 0.  +8.j, 0. +20.j, 0. +40.j, 0. +70.j, 0.+100.j,
E              0.+130.j, 0.+160.j, 0.+190.j, 0.+220.j, 0.+228.j, 0.+212.j,
E              0.+170.j, 0.+100.j], dtype=complex64)

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.complex64'>}
_ TestPolyArithmeticDiffTypes_param_2_{fname='polymul'}.test_polyroutine_diff_types_poly1d _
cupy/testing/helper.py:1068: in test_func
    impl(self, *args, **kw_copy)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:495: in check_func
    array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([  1.0000218  +1.0000088j,   4.000003   +4.0000057j,
        10.000008  +10.000023j ,  20.00001   +20.000023j ,
....99998j  , 105.99999  +105.99997j  ,
        85.000015  +84.99999j  ,  50.000004  +49.999977j ],
      dtype=complex64)
desired = array([  1.  +1.j,   4.  +4.j,  10. +10.j,  20. +20.j,  35. +35.j,
        50. +50.j,  65. +65.j,  80. +80.j,  95. +95.j, 110.+110.j,
       114.+114.j, 106.+106.j,  85. +85.j,  50. +50.j], dtype=complex64)
rtol = 1e-05, atol = 0, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-05, atol=0
E       
E       Mismatched elements: 1 / 14 (7.14%)
E       Max absolute difference: 3.411969e-05
E       Max relative difference: 1.66392e-05
E        x: array([  1.000022  +1.000009j,   4.000003  +4.000006j,
E               10.000008 +10.000023j,  20.00001  +20.000023j,
E               35.000004 +35.j      ,  49.999996 +49.999985j,...
E        y: array([  1.  +1.j,   4.  +4.j,  10. +10.j,  20. +20.j,  35. +35.j,
E               50. +50.j,  65. +65.j,  80. +80.j,  95. +95.j, 110.+110.j,
E              114.+114.j, 106.+106.j,  85. +85.j,  50. +50.j], dtype=complex64)

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.float32'>}
_ TestPolyfitParametersCombinations_param_0_{deg=0, rcond=None, shape1=(3,), shape2=(3,), weighted=True}.test_polyfit_default _
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:495: in check_func
    array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([-2.57142857]), desired = array([2.57142857]), rtol = 1e-07
atol = 1e-09, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=1e-09
E       
E       Mismatched elements: 1 / 1 (100%)
E       Max absolute difference: 5.14285714
E       Max relative difference: 2.
E        x: array([-2.571429])
E        y: array([2.571429])

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestPolyfitParametersCombinations_param_0_{deg=0, rcond=None, shape1=(3,), shape2=(3,), weighted=True}.test_polyfit_full _

self = <<cupy_tests.lib_tests.test_polynomial.TestPolyfitParametersCombinations_param_0_{deg=0, rcond=None, shape1=(3,), shap... testMethod=test_polyfit_full>  parameter: {'deg': 0, 'rcond': None, 'shape1': (3,), 'shape2': (3,), 'weighted': True}>
dtype = <class 'numpy.float64'>

    @testing.for_all_dtypes(no_float16=True)
    def test_polyfit_full(self, dtype):
        cp_c, cp_resids, cp_rank, cp_s, cp_rcond = self._full_fit(cupy, dtype)
        np_c, np_resids, np_rank, np_s, np_rcond = self._full_fit(numpy, dtype)
    
>       testing.assert_allclose(cp_c, np_c, atol=1e-9)

tests/cupy_tests/lib_tests/test_polynomial.py:497: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([-2.57142857]), desired = array([2.57142857]), rtol = 1e-07
atol = 1e-09, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=1e-09
E       
E       Mismatched elements: 1 / 1 (100%)
E       Max absolute difference: 5.14285714
E       Max relative difference: 2.
E        x: array([-2.571429])
E        y: array([2.571429])

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestPolyfitParametersCombinations_param_1_{deg=0, rcond=None, shape1=(3,), shape2=(3,), weighted=False}.test_polyfit_default _
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:495: in check_func
    array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([-2.]), desired = array([2.]), rtol = 1e-07, atol = 1e-09
err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=1e-09
E       
E       Mismatched elements: 1 / 1 (100%)
E       Max absolute difference: 4.
E       Max relative difference: 2.
E        x: array([-2.])
E        y: array([2.])

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestPolyfitParametersCombinations_param_1_{deg=0, rcond=None, shape1=(3,), shape2=(3,), weighted=False}.test_polyfit_full _

self = <<cupy_tests.lib_tests.test_polynomial.TestPolyfitParametersCombinations_param_1_{deg=0, rcond=None, shape1=(3,), shap...testMethod=test_polyfit_full>  parameter: {'deg': 0, 'rcond': None, 'shape1': (3,), 'shape2': (3,), 'weighted': False}>
dtype = <class 'numpy.float64'>

    @testing.for_all_dtypes(no_float16=True)
    def test_polyfit_full(self, dtype):
        cp_c, cp_resids, cp_rank, cp_s, cp_rcond = self._full_fit(cupy, dtype)
        np_c, np_resids, np_rank, np_s, np_rcond = self._full_fit(numpy, dtype)
    
>       testing.assert_allclose(cp_c, np_c, atol=1e-9)

tests/cupy_tests/lib_tests/test_polynomial.py:497: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([-2.]), desired = array([2.]), rtol = 1e-07, atol = 1e-09
err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=1e-09
E       
E       Mismatched elements: 1 / 1 (100%)
E       Max absolute difference: 4.
E       Max relative difference: 2.
E        x: array([-2.])
E        y: array([2.])

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestPolyfitParametersCombinations_param_2_{deg=0, rcond=None, shape1=(3,), shape2=(3, 2), weighted=True}.test_polyfit_default _
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:495: in check_func
    array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[-4.14285714, -5.14285714]])
desired = array([[4.14285714, 5.14285714]]), rtol = 1e-07, atol = 1e-09
err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=1e-09
E       
E       Mismatched elements: 2 / 2 (100%)
E       Max absolute difference: 10.28571429
E       Max relative difference: 2.
E        x: array([[-4.142857, -5.142857]])
E        y: array([[4.142857, 5.142857]])

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestPolyfitParametersCombinations_param_2_{deg=0, rcond=None, shape1=(3,), shape2=(3, 2), weighted=True}.test_polyfit_full _

self = <<cupy_tests.lib_tests.test_polynomial.TestPolyfitParametersCombinations_param_2_{deg=0, rcond=None, shape1=(3,), shap...estMethod=test_polyfit_full>  parameter: {'deg': 0, 'rcond': None, 'shape1': (3,), 'shape2': (3, 2), 'weighted': True}>
dtype = <class 'numpy.float64'>

    @testing.for_all_dtypes(no_float16=True)
    def test_polyfit_full(self, dtype):
        cp_c, cp_resids, cp_rank, cp_s, cp_rcond = self._full_fit(cupy, dtype)
        np_c, np_resids, np_rank, np_s, np_rcond = self._full_fit(numpy, dtype)
    
>       testing.assert_allclose(cp_c, np_c, atol=1e-9)

tests/cupy_tests/lib_tests/test_polynomial.py:497: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[-4.14285714, -5.14285714]])
desired = array([[4.14285714, 5.14285714]]), rtol = 1e-07, atol = 1e-09
err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=1e-09
E       
E       Mismatched elements: 2 / 2 (100%)
E       Max absolute difference: 10.28571429
E       Max relative difference: 2.
E        x: array([[-4.142857, -5.142857]])
E        y: array([[4.142857, 5.142857]])

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestPolyfitParametersCombinations_param_3_{deg=0, rcond=None, shape1=(3,), shape2=(3, 2), weighted=False}.test_polyfit_default _
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:495: in check_func
    array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[-3., -4.]]), desired = array([[3., 4.]]), rtol = 1e-07
atol = 1e-09, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=1e-09
E       
E       Mismatched elements: 2 / 2 (100%)
E       Max absolute difference: 8.
E       Max relative difference: 2.
E        x: array([[-3., -4.]])
E        y: array([[3., 4.]])

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestPolyfitParametersCombinations_param_3_{deg=0, rcond=None, shape1=(3,), shape2=(3, 2), weighted=False}.test_polyfit_full _

self = <<cupy_tests.lib_tests.test_polynomial.TestPolyfitParametersCombinations_param_3_{deg=0, rcond=None, shape1=(3,), shap...stMethod=test_polyfit_full>  parameter: {'deg': 0, 'rcond': None, 'shape1': (3,), 'shape2': (3, 2), 'weighted': False}>
dtype = <class 'numpy.float64'>

    @testing.for_all_dtypes(no_float16=True)
    def test_polyfit_full(self, dtype):
        cp_c, cp_resids, cp_rank, cp_s, cp_rcond = self._full_fit(cupy, dtype)
        np_c, np_resids, np_rank, np_s, np_rcond = self._full_fit(numpy, dtype)
    
>       testing.assert_allclose(cp_c, np_c, atol=1e-9)

tests/cupy_tests/lib_tests/test_polynomial.py:497: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[-3., -4.]]), desired = array([[3., 4.]]), rtol = 1e-07
atol = 1e-09, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=1e-09
E       
E       Mismatched elements: 2 / 2 (100%)
E       Max absolute difference: 8.
E       Max relative difference: 2.
E        x: array([[-3., -4.]])
E        y: array([[3., 4.]])

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestPolyfitParametersCombinations_param_4_{deg=0, rcond=0.5, shape1=(3,), shape2=(3,), weighted=True}.test_polyfit_default _
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:495: in check_func
    array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([-2.57142857]), desired = array([2.57142857]), rtol = 1e-07
atol = 1e-09, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=1e-09
E       
E       Mismatched elements: 1 / 1 (100%)
E       Max absolute difference: 5.14285714
E       Max relative difference: 2.
E        x: array([-2.571429])
E        y: array([2.571429])

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestPolyfitParametersCombinations_param_4_{deg=0, rcond=0.5, shape1=(3,), shape2=(3,), weighted=True}.test_polyfit_full _

self = <<cupy_tests.lib_tests.test_polynomial.TestPolyfitParametersCombinations_param_4_{deg=0, rcond=0.5, shape1=(3,), shape...} testMethod=test_polyfit_full>  parameter: {'deg': 0, 'rcond': 0.5, 'shape1': (3,), 'shape2': (3,), 'weighted': True}>
dtype = <class 'numpy.float64'>

    @testing.for_all_dtypes(no_float16=True)
    def test_polyfit_full(self, dtype):
        cp_c, cp_resids, cp_rank, cp_s, cp_rcond = self._full_fit(cupy, dtype)
        np_c, np_resids, np_rank, np_s, np_rcond = self._full_fit(numpy, dtype)
    
>       testing.assert_allclose(cp_c, np_c, atol=1e-9)

tests/cupy_tests/lib_tests/test_polynomial.py:497: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([-2.57142857]), desired = array([2.57142857]), rtol = 1e-07
atol = 1e-09, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=1e-09
E       
E       Mismatched elements: 1 / 1 (100%)
E       Max absolute difference: 5.14285714
E       Max relative difference: 2.
E        x: array([-2.571429])
E        y: array([2.571429])

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestPolyfitParametersCombinations_param_5_{deg=0, rcond=0.5, shape1=(3,), shape2=(3,), weighted=False}.test_polyfit_default _
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:495: in check_func
    array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([-2.]), desired = array([2.]), rtol = 1e-07, atol = 1e-09
err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=1e-09
E       
E       Mismatched elements: 1 / 1 (100%)
E       Max absolute difference: 4.
E       Max relative difference: 2.
E        x: array([-2.])
E        y: array([2.])

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestPolyfitParametersCombinations_param_5_{deg=0, rcond=0.5, shape1=(3,), shape2=(3,), weighted=False}.test_polyfit_full _

self = <<cupy_tests.lib_tests.test_polynomial.TestPolyfitParametersCombinations_param_5_{deg=0, rcond=0.5, shape1=(3,), shape... testMethod=test_polyfit_full>  parameter: {'deg': 0, 'rcond': 0.5, 'shape1': (3,), 'shape2': (3,), 'weighted': False}>
dtype = <class 'numpy.float64'>

    @testing.for_all_dtypes(no_float16=True)
    def test_polyfit_full(self, dtype):
        cp_c, cp_resids, cp_rank, cp_s, cp_rcond = self._full_fit(cupy, dtype)
        np_c, np_resids, np_rank, np_s, np_rcond = self._full_fit(numpy, dtype)
    
>       testing.assert_allclose(cp_c, np_c, atol=1e-9)

tests/cupy_tests/lib_tests/test_polynomial.py:497: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([-2.]), desired = array([2.]), rtol = 1e-07, atol = 1e-09
err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=1e-09
E       
E       Mismatched elements: 1 / 1 (100%)
E       Max absolute difference: 4.
E       Max relative difference: 2.
E        x: array([-2.])
E        y: array([2.])

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestPolyfitParametersCombinations_param_6_{deg=0, rcond=0.5, shape1=(3,), shape2=(3, 2), weighted=True}.test_polyfit_default _
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:495: in check_func
    array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[-4.14285714, -5.14285714]])
desired = array([[4.14285714, 5.14285714]]), rtol = 1e-07, atol = 1e-09
err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=1e-09
E       
E       Mismatched elements: 2 / 2 (100%)
E       Max absolute difference: 10.28571429
E       Max relative difference: 2.
E        x: array([[-4.142857, -5.142857]])
E        y: array([[4.142857, 5.142857]])

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestPolyfitParametersCombinations_param_6_{deg=0, rcond=0.5, shape1=(3,), shape2=(3, 2), weighted=True}.test_polyfit_full _

self = <<cupy_tests.lib_tests.test_polynomial.TestPolyfitParametersCombinations_param_6_{deg=0, rcond=0.5, shape1=(3,), shape...testMethod=test_polyfit_full>  parameter: {'deg': 0, 'rcond': 0.5, 'shape1': (3,), 'shape2': (3, 2), 'weighted': True}>
dtype = <class 'numpy.float64'>

    @testing.for_all_dtypes(no_float16=True)
    def test_polyfit_full(self, dtype):
        cp_c, cp_resids, cp_rank, cp_s, cp_rcond = self._full_fit(cupy, dtype)
        np_c, np_resids, np_rank, np_s, np_rcond = self._full_fit(numpy, dtype)
    
>       testing.assert_allclose(cp_c, np_c, atol=1e-9)

tests/cupy_tests/lib_tests/test_polynomial.py:497: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[-4.14285714, -5.14285714]])
desired = array([[4.14285714, 5.14285714]]), rtol = 1e-07, atol = 1e-09
err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=1e-09
E       
E       Mismatched elements: 2 / 2 (100%)
E       Max absolute difference: 10.28571429
E       Max relative difference: 2.
E        x: array([[-4.142857, -5.142857]])
E        y: array([[4.142857, 5.142857]])

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestPolyfitParametersCombinations_param_7_{deg=0, rcond=0.5, shape1=(3,), shape2=(3, 2), weighted=False}.test_polyfit_default _
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:495: in check_func
    array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[-3., -4.]]), desired = array([[3., 4.]]), rtol = 1e-07
atol = 1e-09, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=1e-09
E       
E       Mismatched elements: 2 / 2 (100%)
E       Max absolute difference: 8.
E       Max relative difference: 2.
E        x: array([[-3., -4.]])
E        y: array([[3., 4.]])

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestPolyfitParametersCombinations_param_7_{deg=0, rcond=0.5, shape1=(3,), shape2=(3, 2), weighted=False}.test_polyfit_full _

self = <<cupy_tests.lib_tests.test_polynomial.TestPolyfitParametersCombinations_param_7_{deg=0, rcond=0.5, shape1=(3,), shape...estMethod=test_polyfit_full>  parameter: {'deg': 0, 'rcond': 0.5, 'shape1': (3,), 'shape2': (3, 2), 'weighted': False}>
dtype = <class 'numpy.float64'>

    @testing.for_all_dtypes(no_float16=True)
    def test_polyfit_full(self, dtype):
        cp_c, cp_resids, cp_rank, cp_s, cp_rcond = self._full_fit(cupy, dtype)
        np_c, np_resids, np_rank, np_s, np_rcond = self._full_fit(numpy, dtype)
    
>       testing.assert_allclose(cp_c, np_c, atol=1e-9)

tests/cupy_tests/lib_tests/test_polynomial.py:497: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[-3., -4.]]), desired = array([[3., 4.]]), rtol = 1e-07
atol = 1e-09, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=1e-09
E       
E       Mismatched elements: 2 / 2 (100%)
E       Max absolute difference: 8.
E       Max relative difference: 2.
E        x: array([[-3., -4.]])
E        y: array([[3., 4.]])

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestPolyfitParametersCombinations_param_8_{deg=0, rcond=1e-15, shape1=(3,), shape2=(3,), weighted=True}.test_polyfit_default _
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:495: in check_func
    array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([-2.57142857]), desired = array([2.57142857]), rtol = 1e-07
atol = 1e-09, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=1e-09
E       
E       Mismatched elements: 1 / 1 (100%)
E       Max absolute difference: 5.14285714
E       Max relative difference: 2.
E        x: array([-2.571429])
E        y: array([2.571429])

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestPolyfitParametersCombinations_param_8_{deg=0, rcond=1e-15, shape1=(3,), shape2=(3,), weighted=True}.test_polyfit_full _

self = <<cupy_tests.lib_tests.test_polynomial.TestPolyfitParametersCombinations_param_8_{deg=0, rcond=1e-15, shape1=(3,), sha...testMethod=test_polyfit_full>  parameter: {'deg': 0, 'rcond': 1e-15, 'shape1': (3,), 'shape2': (3,), 'weighted': True}>
dtype = <class 'numpy.float64'>

    @testing.for_all_dtypes(no_float16=True)
    def test_polyfit_full(self, dtype):
        cp_c, cp_resids, cp_rank, cp_s, cp_rcond = self._full_fit(cupy, dtype)
        np_c, np_resids, np_rank, np_s, np_rcond = self._full_fit(numpy, dtype)
    
>       testing.assert_allclose(cp_c, np_c, atol=1e-9)

tests/cupy_tests/lib_tests/test_polynomial.py:497: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([-2.57142857]), desired = array([2.57142857]), rtol = 1e-07
atol = 1e-09, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=1e-09
E       
E       Mismatched elements: 1 / 1 (100%)
E       Max absolute difference: 5.14285714
E       Max relative difference: 2.
E        x: array([-2.571429])
E        y: array([2.571429])

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestPolyfitParametersCombinations_param_9_{deg=0, rcond=1e-15, shape1=(3,), shape2=(3,), weighted=False}.test_polyfit_default _
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:495: in check_func
    array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([-2.]), desired = array([2.]), rtol = 1e-07, atol = 1e-09
err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=1e-09
E       
E       Mismatched elements: 1 / 1 (100%)
E       Max absolute difference: 4.
E       Max relative difference: 2.
E        x: array([-2.])
E        y: array([2.])

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestPolyfitParametersCombinations_param_9_{deg=0, rcond=1e-15, shape1=(3,), shape2=(3,), weighted=False}.test_polyfit_full _

self = <<cupy_tests.lib_tests.test_polynomial.TestPolyfitParametersCombinations_param_9_{deg=0, rcond=1e-15, shape1=(3,), sha...estMethod=test_polyfit_full>  parameter: {'deg': 0, 'rcond': 1e-15, 'shape1': (3,), 'shape2': (3,), 'weighted': False}>
dtype = <class 'numpy.float64'>

    @testing.for_all_dtypes(no_float16=True)
    def test_polyfit_full(self, dtype):
        cp_c, cp_resids, cp_rank, cp_s, cp_rcond = self._full_fit(cupy, dtype)
        np_c, np_resids, np_rank, np_s, np_rcond = self._full_fit(numpy, dtype)
    
>       testing.assert_allclose(cp_c, np_c, atol=1e-9)

tests/cupy_tests/lib_tests/test_polynomial.py:497: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([-2.]), desired = array([2.]), rtol = 1e-07, atol = 1e-09
err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=1e-09
E       
E       Mismatched elements: 1 / 1 (100%)
E       Max absolute difference: 4.
E       Max relative difference: 2.
E        x: array([-2.])
E        y: array([2.])

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestPolyfitParametersCombinations_param_10_{deg=0, rcond=1e-15, shape1=(3,), shape2=(3, 2), weighted=True}.test_polyfit_default _
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:495: in check_func
    array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[-4.14285714, -5.14285714]])
desired = array([[4.14285714, 5.14285714]]), rtol = 1e-07, atol = 1e-09
err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=1e-09
E       
E       Mismatched elements: 2 / 2 (100%)
E       Max absolute difference: 10.28571429
E       Max relative difference: 2.
E        x: array([[-4.142857, -5.142857]])
E        y: array([[4.142857, 5.142857]])

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestPolyfitParametersCombinations_param_10_{deg=0, rcond=1e-15, shape1=(3,), shape2=(3, 2), weighted=True}.test_polyfit_full _

self = <<cupy_tests.lib_tests.test_polynomial.TestPolyfitParametersCombinations_param_10_{deg=0, rcond=1e-15, shape1=(3,), sh...stMethod=test_polyfit_full>  parameter: {'deg': 0, 'rcond': 1e-15, 'shape1': (3,), 'shape2': (3, 2), 'weighted': True}>
dtype = <class 'numpy.float64'>

    @testing.for_all_dtypes(no_float16=True)
    def test_polyfit_full(self, dtype):
        cp_c, cp_resids, cp_rank, cp_s, cp_rcond = self._full_fit(cupy, dtype)
        np_c, np_resids, np_rank, np_s, np_rcond = self._full_fit(numpy, dtype)
    
>       testing.assert_allclose(cp_c, np_c, atol=1e-9)

tests/cupy_tests/lib_tests/test_polynomial.py:497: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[-4.14285714, -5.14285714]])
desired = array([[4.14285714, 5.14285714]]), rtol = 1e-07, atol = 1e-09
err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=1e-09
E       
E       Mismatched elements: 2 / 2 (100%)
E       Max absolute difference: 10.28571429
E       Max relative difference: 2.
E        x: array([[-4.142857, -5.142857]])
E        y: array([[4.142857, 5.142857]])

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestPolyfitParametersCombinations_param_11_{deg=0, rcond=1e-15, shape1=(3,), shape2=(3, 2), weighted=False}.test_polyfit_default _
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:495: in check_func
    array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[-3., -4.]]), desired = array([[3., 4.]]), rtol = 1e-07
atol = 1e-09, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=1e-09
E       
E       Mismatched elements: 2 / 2 (100%)
E       Max absolute difference: 8.
E       Max relative difference: 2.
E        x: array([[-3., -4.]])
E        y: array([[3., 4.]])

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestPolyfitParametersCombinations_param_11_{deg=0, rcond=1e-15, shape1=(3,), shape2=(3, 2), weighted=False}.test_polyfit_full _

self = <<cupy_tests.lib_tests.test_polynomial.TestPolyfitParametersCombinations_param_11_{deg=0, rcond=1e-15, shape1=(3,), sh...tMethod=test_polyfit_full>  parameter: {'deg': 0, 'rcond': 1e-15, 'shape1': (3,), 'shape2': (3, 2), 'weighted': False}>
dtype = <class 'numpy.float64'>

    @testing.for_all_dtypes(no_float16=True)
    def test_polyfit_full(self, dtype):
        cp_c, cp_resids, cp_rank, cp_s, cp_rcond = self._full_fit(cupy, dtype)
        np_c, np_resids, np_rank, np_s, np_rcond = self._full_fit(numpy, dtype)
    
>       testing.assert_allclose(cp_c, np_c, atol=1e-9)

tests/cupy_tests/lib_tests/test_polynomial.py:497: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[-3., -4.]]), desired = array([[3., 4.]]), rtol = 1e-07
atol = 1e-09, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=1e-09
E       
E       Mismatched elements: 2 / 2 (100%)
E       Max absolute difference: 8.
E       Max relative difference: 2.
E        x: array([[-3., -4.]])
E        y: array([[3., 4.]])

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestPolyfitCovMode_param_0_{cov='unscaled', deg=0, rcond=None, shape=(3,), weighted=True}.test_polyfit_cov _

self = <<cupy_tests.lib_tests.test_polynomial.TestPolyfitCovMode_param_0_{cov='unscaled', deg=0, rcond=None, shape=(3,), weig...testMethod=test_polyfit_cov>  parameter: {'cov': 'unscaled', 'deg': 0, 'rcond': None, 'shape': (3,), 'weighted': True}>
dtype = <class 'numpy.float64'>

    @testing.for_float_dtypes(no_float16=True)
    def test_polyfit_cov(self, dtype):
        cp_c, cp_cov = self._cov_fit(cupy, dtype)
        np_c, np_cov = self._cov_fit(numpy, dtype)
>       testing.assert_allclose(cp_c, np_c, rtol=1e-5)

tests/cupy_tests/lib_tests/test_polynomial.py:525: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([-2.41388175]), desired = array([2.41388175]), rtol = 1e-05
atol = 0, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-05, atol=0
E       
E       Mismatched elements: 1 / 1 (100%)
E       Max absolute difference: 4.8277635
E       Max relative difference: 2.
E        x: array([-2.413882])
E        y: array([2.413882])

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestPolyfitCovMode_param_1_{cov='unscaled', deg=0, rcond=None, shape=(3,), weighted=False}.test_polyfit_cov _

self = <<cupy_tests.lib_tests.test_polynomial.TestPolyfitCovMode_param_1_{cov='unscaled', deg=0, rcond=None, shape=(3,), weig...estMethod=test_polyfit_cov>  parameter: {'cov': 'unscaled', 'deg': 0, 'rcond': None, 'shape': (3,), 'weighted': False}>
dtype = <class 'numpy.float64'>

    @testing.for_float_dtypes(no_float16=True)
    def test_polyfit_cov(self, dtype):
        cp_c, cp_cov = self._cov_fit(cupy, dtype)
        np_c, np_cov = self._cov_fit(numpy, dtype)
>       testing.assert_allclose(cp_c, np_c, rtol=1e-5)

tests/cupy_tests/lib_tests/test_polynomial.py:525: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([-2.]), desired = array([2.]), rtol = 1e-05, atol = 0
err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-05, atol=0
E       
E       Mismatched elements: 1 / 1 (100%)
E       Max absolute difference: 4.
E       Max relative difference: 2.
E        x: array([-2.])
E        y: array([2.])

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestPolyfitCovMode_param_2_{cov='unscaled', deg=0, rcond=None, shape=(3, 2), weighted=True}.test_polyfit_cov _

self = <<cupy_tests.lib_tests.test_polynomial.TestPolyfitCovMode_param_2_{cov='unscaled', deg=0, rcond=None, shape=(3, 2), we...stMethod=test_polyfit_cov>  parameter: {'cov': 'unscaled', 'deg': 0, 'rcond': None, 'shape': (3, 2), 'weighted': True}>
dtype = <class 'numpy.float64'>

    @testing.for_float_dtypes(no_float16=True)
    def test_polyfit_cov(self, dtype):
        cp_c, cp_cov = self._cov_fit(cupy, dtype)
        np_c, np_cov = self._cov_fit(numpy, dtype)
>       testing.assert_allclose(cp_c, np_c, rtol=1e-5)

tests/cupy_tests/lib_tests/test_polynomial.py:525: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[-3.8277635, -4.8277635]])
desired = array([[3.8277635, 4.8277635]]), rtol = 1e-05, atol = 0, err_msg = ''
verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-05, atol=0
E       
E       Mismatched elements: 2 / 2 (100%)
E       Max absolute difference: 9.65552699
E       Max relative difference: 2.
E        x: array([[-3.827763, -4.827763]])
E        y: array([[3.827763, 4.827763]])

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestPolyfitCovMode_param_3_{cov='unscaled', deg=0, rcond=None, shape=(3, 2), weighted=False}.test_polyfit_cov _

self = <<cupy_tests.lib_tests.test_polynomial.TestPolyfitCovMode_param_3_{cov='unscaled', deg=0, rcond=None, shape=(3, 2), we...tMethod=test_polyfit_cov>  parameter: {'cov': 'unscaled', 'deg': 0, 'rcond': None, 'shape': (3, 2), 'weighted': False}>
dtype = <class 'numpy.float64'>

    @testing.for_float_dtypes(no_float16=True)
    def test_polyfit_cov(self, dtype):
        cp_c, cp_cov = self._cov_fit(cupy, dtype)
        np_c, np_cov = self._cov_fit(numpy, dtype)
>       testing.assert_allclose(cp_c, np_c, rtol=1e-5)

tests/cupy_tests/lib_tests/test_polynomial.py:525: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[-3., -4.]]), desired = array([[3., 4.]]), rtol = 1e-05
atol = 0, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-05, atol=0
E       
E       Mismatched elements: 2 / 2 (100%)
E       Max absolute difference: 8.
E       Max relative difference: 2.
E        x: array([[-3., -4.]])
E        y: array([[3., 4.]])

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestPolyfitCovMode_param_4_{cov='unscaled', deg=0, rcond=1e-15, shape=(3,), weighted=True}.test_polyfit_cov _

self = <<cupy_tests.lib_tests.test_polynomial.TestPolyfitCovMode_param_4_{cov='unscaled', deg=0, rcond=1e-15, shape=(3,), wei...estMethod=test_polyfit_cov>  parameter: {'cov': 'unscaled', 'deg': 0, 'rcond': 1e-15, 'shape': (3,), 'weighted': True}>
dtype = <class 'numpy.float64'>

    @testing.for_float_dtypes(no_float16=True)
    def test_polyfit_cov(self, dtype):
        cp_c, cp_cov = self._cov_fit(cupy, dtype)
        np_c, np_cov = self._cov_fit(numpy, dtype)
>       testing.assert_allclose(cp_c, np_c, rtol=1e-5)

tests/cupy_tests/lib_tests/test_polynomial.py:525: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([-2.41388175]), desired = array([2.41388175]), rtol = 1e-05
atol = 0, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-05, atol=0
E       
E       Mismatched elements: 1 / 1 (100%)
E       Max absolute difference: 4.8277635
E       Max relative difference: 2.
E        x: array([-2.413882])
E        y: array([2.413882])

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestPolyfitCovMode_param_5_{cov='unscaled', deg=0, rcond=1e-15, shape=(3,), weighted=False}.test_polyfit_cov _

self = <<cupy_tests.lib_tests.test_polynomial.TestPolyfitCovMode_param_5_{cov='unscaled', deg=0, rcond=1e-15, shape=(3,), wei...stMethod=test_polyfit_cov>  parameter: {'cov': 'unscaled', 'deg': 0, 'rcond': 1e-15, 'shape': (3,), 'weighted': False}>
dtype = <class 'numpy.float64'>

    @testing.for_float_dtypes(no_float16=True)
    def test_polyfit_cov(self, dtype):
        cp_c, cp_cov = self._cov_fit(cupy, dtype)
        np_c, np_cov = self._cov_fit(numpy, dtype)
>       testing.assert_allclose(cp_c, np_c, rtol=1e-5)

tests/cupy_tests/lib_tests/test_polynomial.py:525: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([-2.]), desired = array([2.]), rtol = 1e-05, atol = 0
err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-05, atol=0
E       
E       Mismatched elements: 1 / 1 (100%)
E       Max absolute difference: 4.
E       Max relative difference: 2.
E        x: array([-2.])
E        y: array([2.])

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestPolyfitCovMode_param_6_{cov='unscaled', deg=0, rcond=1e-15, shape=(3, 2), weighted=True}.test_polyfit_cov _

self = <<cupy_tests.lib_tests.test_polynomial.TestPolyfitCovMode_param_6_{cov='unscaled', deg=0, rcond=1e-15, shape=(3, 2), w...tMethod=test_polyfit_cov>  parameter: {'cov': 'unscaled', 'deg': 0, 'rcond': 1e-15, 'shape': (3, 2), 'weighted': True}>
dtype = <class 'numpy.float64'>

    @testing.for_float_dtypes(no_float16=True)
    def test_polyfit_cov(self, dtype):
        cp_c, cp_cov = self._cov_fit(cupy, dtype)
        np_c, np_cov = self._cov_fit(numpy, dtype)
>       testing.assert_allclose(cp_c, np_c, rtol=1e-5)

tests/cupy_tests/lib_tests/test_polynomial.py:525: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[-3.8277635, -4.8277635]])
desired = array([[3.8277635, 4.8277635]]), rtol = 1e-05, atol = 0, err_msg = ''
verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-05, atol=0
E       
E       Mismatched elements: 2 / 2 (100%)
E       Max absolute difference: 9.65552699
E       Max relative difference: 2.
E        x: array([[-3.827763, -4.827763]])
E        y: array([[3.827763, 4.827763]])

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestPolyfitCovMode_param_7_{cov='unscaled', deg=0, rcond=1e-15, shape=(3, 2), weighted=False}.test_polyfit_cov _

self = <<cupy_tests.lib_tests.test_polynomial.TestPolyfitCovMode_param_7_{cov='unscaled', deg=0, rcond=1e-15, shape=(3, 2), w...Method=test_polyfit_cov>  parameter: {'cov': 'unscaled', 'deg': 0, 'rcond': 1e-15, 'shape': (3, 2), 'weighted': False}>
dtype = <class 'numpy.float64'>

    @testing.for_float_dtypes(no_float16=True)
    def test_polyfit_cov(self, dtype):
        cp_c, cp_cov = self._cov_fit(cupy, dtype)
        np_c, np_cov = self._cov_fit(numpy, dtype)
>       testing.assert_allclose(cp_c, np_c, rtol=1e-5)

tests/cupy_tests/lib_tests/test_polynomial.py:525: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[-3., -4.]]), desired = array([[3., 4.]]), rtol = 1e-05
atol = 0, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-05, atol=0
E       
E       Mismatched elements: 2 / 2 (100%)
E       Max absolute difference: 8.
E       Max relative difference: 2.
E        x: array([[-3., -4.]])
E        y: array([[3., 4.]])

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestPolyfitCovMode_param_16_{cov=True, deg=0, rcond=None, shape=(3,), weighted=True}.test_polyfit_cov _

self = <<cupy_tests.lib_tests.test_polynomial.TestPolyfitCovMode_param_16_{cov=True, deg=0, rcond=None, shape=(3,), weighted=True} testMethod=test_polyfit_cov>  parameter: {'cov': True, 'deg': 0, 'rcond': None, 'shape': (3,), 'weighted': True}>
dtype = <class 'numpy.float64'>

    @testing.for_float_dtypes(no_float16=True)
    def test_polyfit_cov(self, dtype):
        cp_c, cp_cov = self._cov_fit(cupy, dtype)
        np_c, np_cov = self._cov_fit(numpy, dtype)
>       testing.assert_allclose(cp_c, np_c, rtol=1e-5)

tests/cupy_tests/lib_tests/test_polynomial.py:525: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([-2.41388175]), desired = array([2.41388175]), rtol = 1e-05
atol = 0, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-05, atol=0
E       
E       Mismatched elements: 1 / 1 (100%)
E       Max absolute difference: 4.8277635
E       Max relative difference: 2.
E        x: array([-2.413882])
E        y: array([2.413882])

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestPolyfitCovMode_param_17_{cov=True, deg=0, rcond=None, shape=(3,), weighted=False}.test_polyfit_cov _

self = <<cupy_tests.lib_tests.test_polynomial.TestPolyfitCovMode_param_17_{cov=True, deg=0, rcond=None, shape=(3,), weighted=False} testMethod=test_polyfit_cov>  parameter: {'cov': True, 'deg': 0, 'rcond': None, 'shape': (3,), 'weighted': False}>
dtype = <class 'numpy.float64'>

    @testing.for_float_dtypes(no_float16=True)
    def test_polyfit_cov(self, dtype):
        cp_c, cp_cov = self._cov_fit(cupy, dtype)
        np_c, np_cov = self._cov_fit(numpy, dtype)
>       testing.assert_allclose(cp_c, np_c, rtol=1e-5)

tests/cupy_tests/lib_tests/test_polynomial.py:525: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([-2.]), desired = array([2.]), rtol = 1e-05, atol = 0
err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-05, atol=0
E       
E       Mismatched elements: 1 / 1 (100%)
E       Max absolute difference: 4.
E       Max relative difference: 2.
E        x: array([-2.])
E        y: array([2.])

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestPolyfitCovMode_param_18_{cov=True, deg=0, rcond=None, shape=(3, 2), weighted=True}.test_polyfit_cov _

self = <<cupy_tests.lib_tests.test_polynomial.TestPolyfitCovMode_param_18_{cov=True, deg=0, rcond=None, shape=(3, 2), weighte...ue} testMethod=test_polyfit_cov>  parameter: {'cov': True, 'deg': 0, 'rcond': None, 'shape': (3, 2), 'weighted': True}>
dtype = <class 'numpy.float64'>

    @testing.for_float_dtypes(no_float16=True)
    def test_polyfit_cov(self, dtype):
        cp_c, cp_cov = self._cov_fit(cupy, dtype)
        np_c, np_cov = self._cov_fit(numpy, dtype)
>       testing.assert_allclose(cp_c, np_c, rtol=1e-5)

tests/cupy_tests/lib_tests/test_polynomial.py:525: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[-3.8277635, -4.8277635]])
desired = array([[3.8277635, 4.8277635]]), rtol = 1e-05, atol = 0, err_msg = ''
verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-05, atol=0
E       
E       Mismatched elements: 2 / 2 (100%)
E       Max absolute difference: 9.65552699
E       Max relative difference: 2.
E        x: array([[-3.827763, -4.827763]])
E        y: array([[3.827763, 4.827763]])

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestPolyfitCovMode_param_19_{cov=True, deg=0, rcond=None, shape=(3, 2), weighted=False}.test_polyfit_cov _

self = <<cupy_tests.lib_tests.test_polynomial.TestPolyfitCovMode_param_19_{cov=True, deg=0, rcond=None, shape=(3, 2), weighte...e} testMethod=test_polyfit_cov>  parameter: {'cov': True, 'deg': 0, 'rcond': None, 'shape': (3, 2), 'weighted': False}>
dtype = <class 'numpy.float64'>

    @testing.for_float_dtypes(no_float16=True)
    def test_polyfit_cov(self, dtype):
        cp_c, cp_cov = self._cov_fit(cupy, dtype)
        np_c, np_cov = self._cov_fit(numpy, dtype)
>       testing.assert_allclose(cp_c, np_c, rtol=1e-5)

tests/cupy_tests/lib_tests/test_polynomial.py:525: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[-3., -4.]]), desired = array([[3., 4.]]), rtol = 1e-05
atol = 0, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-05, atol=0
E       
E       Mismatched elements: 2 / 2 (100%)
E       Max absolute difference: 8.
E       Max relative difference: 2.
E        x: array([[-3., -4.]])
E        y: array([[3., 4.]])

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestPolyfitCovMode_param_20_{cov=True, deg=0, rcond=1e-15, shape=(3,), weighted=True}.test_polyfit_cov _

self = <<cupy_tests.lib_tests.test_polynomial.TestPolyfitCovMode_param_20_{cov=True, deg=0, rcond=1e-15, shape=(3,), weighted=True} testMethod=test_polyfit_cov>  parameter: {'cov': True, 'deg': 0, 'rcond': 1e-15, 'shape': (3,), 'weighted': True}>
dtype = <class 'numpy.float64'>

    @testing.for_float_dtypes(no_float16=True)
    def test_polyfit_cov(self, dtype):
        cp_c, cp_cov = self._cov_fit(cupy, dtype)
        np_c, np_cov = self._cov_fit(numpy, dtype)
>       testing.assert_allclose(cp_c, np_c, rtol=1e-5)

tests/cupy_tests/lib_tests/test_polynomial.py:525: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([-2.41388175]), desired = array([2.41388175]), rtol = 1e-05
atol = 0, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-05, atol=0
E       
E       Mismatched elements: 1 / 1 (100%)
E       Max absolute difference: 4.8277635
E       Max relative difference: 2.
E        x: array([-2.413882])
E        y: array([2.413882])

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestPolyfitCovMode_param_21_{cov=True, deg=0, rcond=1e-15, shape=(3,), weighted=False}.test_polyfit_cov _

self = <<cupy_tests.lib_tests.test_polynomial.TestPolyfitCovMode_param_21_{cov=True, deg=0, rcond=1e-15, shape=(3,), weighted...se} testMethod=test_polyfit_cov>  parameter: {'cov': True, 'deg': 0, 'rcond': 1e-15, 'shape': (3,), 'weighted': False}>
dtype = <class 'numpy.float64'>

    @testing.for_float_dtypes(no_float16=True)
    def test_polyfit_cov(self, dtype):
        cp_c, cp_cov = self._cov_fit(cupy, dtype)
        np_c, np_cov = self._cov_fit(numpy, dtype)
>       testing.assert_allclose(cp_c, np_c, rtol=1e-5)

tests/cupy_tests/lib_tests/test_polynomial.py:525: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([-2.]), desired = array([2.]), rtol = 1e-05, atol = 0
err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-05, atol=0
E       
E       Mismatched elements: 1 / 1 (100%)
E       Max absolute difference: 4.
E       Max relative difference: 2.
E        x: array([-2.])
E        y: array([2.])

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestPolyfitCovMode_param_22_{cov=True, deg=0, rcond=1e-15, shape=(3, 2), weighted=True}.test_polyfit_cov _

self = <<cupy_tests.lib_tests.test_polynomial.TestPolyfitCovMode_param_22_{cov=True, deg=0, rcond=1e-15, shape=(3, 2), weight...e} testMethod=test_polyfit_cov>  parameter: {'cov': True, 'deg': 0, 'rcond': 1e-15, 'shape': (3, 2), 'weighted': True}>
dtype = <class 'numpy.float64'>

    @testing.for_float_dtypes(no_float16=True)
    def test_polyfit_cov(self, dtype):
        cp_c, cp_cov = self._cov_fit(cupy, dtype)
        np_c, np_cov = self._cov_fit(numpy, dtype)
>       testing.assert_allclose(cp_c, np_c, rtol=1e-5)

tests/cupy_tests/lib_tests/test_polynomial.py:525: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[-3.8277635, -4.8277635]])
desired = array([[3.8277635, 4.8277635]]), rtol = 1e-05, atol = 0, err_msg = ''
verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-05, atol=0
E       
E       Mismatched elements: 2 / 2 (100%)
E       Max absolute difference: 9.65552699
E       Max relative difference: 2.
E        x: array([[-3.827763, -4.827763]])
E        y: array([[3.827763, 4.827763]])

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestPolyfitCovMode_param_23_{cov=True, deg=0, rcond=1e-15, shape=(3, 2), weighted=False}.test_polyfit_cov _

self = <<cupy_tests.lib_tests.test_polynomial.TestPolyfitCovMode_param_23_{cov=True, deg=0, rcond=1e-15, shape=(3, 2), weight...} testMethod=test_polyfit_cov>  parameter: {'cov': True, 'deg': 0, 'rcond': 1e-15, 'shape': (3, 2), 'weighted': False}>
dtype = <class 'numpy.float64'>

    @testing.for_float_dtypes(no_float16=True)
    def test_polyfit_cov(self, dtype):
        cp_c, cp_cov = self._cov_fit(cupy, dtype)
        np_c, np_cov = self._cov_fit(numpy, dtype)
>       testing.assert_allclose(cp_c, np_c, rtol=1e-5)

tests/cupy_tests/lib_tests/test_polynomial.py:525: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[-3., -4.]]), desired = array([[3., 4.]]), rtol = 1e-05
atol = 0, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-05, atol=0
E       
E       Mismatched elements: 2 / 2 (100%)
E       Max absolute difference: 8.
E       Max relative difference: 2.
E        x: array([[-3., -4.]])
E        y: array([[3., 4.]])

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
__________ TestRootsReal_param_0_{input=[2, -1, -2]}.test_roots_array __________

self = <<cupy_tests.lib_tests.test_polynomial.TestRootsReal_param_0_{input=[2, -1, -2]} testMethod=test_roots_array>  parameter: {'input': [2, -1, -2]}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupy/__init__.py'>
dtype = <class 'numpy.int8'>

    @testing.for_signed_dtypes()
    @testing.numpy_cupy_allclose(rtol=1e-6)
    def test_roots_array(self, xp, dtype):
        a = xp.array(self.input, dtype)
>       out = xp.roots(a)

tests/cupy_tests/lib_tests/test_polynomial.py:767: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/lib/_routines_poly.py:326: in roots
    out = cupy.linalg.eigvalsh(cmatrix)
cupy/linalg/_eigenvalue.py:176: in eigvalsh
    return _syevd(a, UPLO, False)[0]
cupy/linalg/_eigenvalue.py:79: in _syevd
    work_size = buffer_size(
cupy_backends/cuda/libs/cusolver.pyx:3086: in cupy_backends.cuda.libs.cusolver.dsyevd_bufferSize
    cpdef int dsyevd_bufferSize(intptr_t handle, int jobz, int uplo, int n,
cupy_backends/cuda/libs/cusolver.pyx:3095: in cupy_backends.cuda.libs.cusolver.dsyevd_bufferSize
    check_status(status)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise CUSOLVERError(status)
E   AssertionError: Only cupy raises error
E   
E   Traceback (most recent call last):
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupy/testing/helper.py", line 47, in _call_func
E       result = impl(self, *args, **kw)
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/tests/cupy_tests/lib_tests/test_polynomial.py", line 767, in test_roots_array
E       out = xp.roots(a)
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupy/lib/_routines_poly.py", line 326, in roots
E       out = cupy.linalg.eigvalsh(cmatrix)
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupy/linalg/_eigenvalue.py", line 176, in eigvalsh
E       return _syevd(a, UPLO, False)[0]
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupy/linalg/_eigenvalue.py", line 79, in _syevd
E       work_size = buffer_size(
E     File "cupy_backends/cuda/libs/cusolver.pyx", line 3086, in cupy_backends.cuda.libs.cusolver.dsyevd_bufferSize
E       cpdef int dsyevd_bufferSize(intptr_t handle, int jobz, int uplo, int n,
E     File "cupy_backends/cuda/libs/cusolver.pyx", line 3095, in cupy_backends.cuda.libs.cusolver.dsyevd_bufferSize
E       check_status(status)
E     File "cupy_backends/cuda/libs/cusolver.pyx", line 1051, in cupy_backends.cuda.libs.cusolver.check_status
E       raise CUSOLVERError(status)
E   cupy_backends.cuda.libs.cusolver.CUSOLVERError: rocblas_status_not_implemented

cupy_backends/cuda/libs/cusolver.pyx:1051: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.int8'>
_________ TestRootsReal_param_0_{input=[2, -1, -2]}.test_roots_poly1d __________

self = <<cupy_tests.lib_tests.test_polynomial.TestRootsReal_param_0_{input=[2, -1, -2]} testMethod=test_roots_poly1d>  parameter: {'input': [2, -1, -2]}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupy/__init__.py'>
dtype = <class 'numpy.int8'>

    @testing.for_signed_dtypes()
    @testing.numpy_cupy_allclose(rtol=1e-6)
    def test_roots_poly1d(self, xp, dtype):
        a = xp.array(self.input, dtype)
>       out = xp.roots(xp.poly1d(a))

tests/cupy_tests/lib_tests/test_polynomial.py:774: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/lib/_routines_poly.py:326: in roots
    out = cupy.linalg.eigvalsh(cmatrix)
cupy/linalg/_eigenvalue.py:176: in eigvalsh
    return _syevd(a, UPLO, False)[0]
cupy/linalg/_eigenvalue.py:79: in _syevd
    work_size = buffer_size(
cupy_backends/cuda/libs/cusolver.pyx:3086: in cupy_backends.cuda.libs.cusolver.dsyevd_bufferSize
    cpdef int dsyevd_bufferSize(intptr_t handle, int jobz, int uplo, int n,
cupy_backends/cuda/libs/cusolver.pyx:3095: in cupy_backends.cuda.libs.cusolver.dsyevd_bufferSize
    check_status(status)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise CUSOLVERError(status)
E   AssertionError: Only cupy raises error
E   
E   Traceback (most recent call last):
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupy/testing/helper.py", line 47, in _call_func
E       result = impl(self, *args, **kw)
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/tests/cupy_tests/lib_tests/test_polynomial.py", line 774, in test_roots_poly1d
E       out = xp.roots(xp.poly1d(a))
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupy/lib/_routines_poly.py", line 326, in roots
E       out = cupy.linalg.eigvalsh(cmatrix)
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupy/linalg/_eigenvalue.py", line 176, in eigvalsh
E       return _syevd(a, UPLO, False)[0]
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupy/linalg/_eigenvalue.py", line 79, in _syevd
E       work_size = buffer_size(
E     File "cupy_backends/cuda/libs/cusolver.pyx", line 3086, in cupy_backends.cuda.libs.cusolver.dsyevd_bufferSize
E       cpdef int dsyevd_bufferSize(intptr_t handle, int jobz, int uplo, int n,
E     File "cupy_backends/cuda/libs/cusolver.pyx", line 3095, in cupy_backends.cuda.libs.cusolver.dsyevd_bufferSize
E       check_status(status)
E     File "cupy_backends/cuda/libs/cusolver.pyx", line 1051, in cupy_backends.cuda.libs.cusolver.check_status
E       raise CUSOLVERError(status)
E   cupy_backends.cuda.libs.cusolver.CUSOLVERError: rocblas_status_not_implemented

cupy_backends/cuda/libs/cusolver.pyx:1051: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.int8'>
__________ TestRootsReal_param_1_{input=[-4, 10, 4]}.test_roots_array __________

self = <<cupy_tests.lib_tests.test_polynomial.TestRootsReal_param_1_{input=[-4, 10, 4]} testMethod=test_roots_array>  parameter: {'input': [-4, 10, 4]}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupy/__init__.py'>
dtype = <class 'numpy.int8'>

    @testing.for_signed_dtypes()
    @testing.numpy_cupy_allclose(rtol=1e-6)
    def test_roots_array(self, xp, dtype):
        a = xp.array(self.input, dtype)
>       out = xp.roots(a)

tests/cupy_tests/lib_tests/test_polynomial.py:767: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/lib/_routines_poly.py:326: in roots
    out = cupy.linalg.eigvalsh(cmatrix)
cupy/linalg/_eigenvalue.py:176: in eigvalsh
    return _syevd(a, UPLO, False)[0]
cupy/linalg/_eigenvalue.py:79: in _syevd
    work_size = buffer_size(
cupy_backends/cuda/libs/cusolver.pyx:3086: in cupy_backends.cuda.libs.cusolver.dsyevd_bufferSize
    cpdef int dsyevd_bufferSize(intptr_t handle, int jobz, int uplo, int n,
cupy_backends/cuda/libs/cusolver.pyx:3095: in cupy_backends.cuda.libs.cusolver.dsyevd_bufferSize
    check_status(status)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise CUSOLVERError(status)
E   AssertionError: Only cupy raises error
E   
E   Traceback (most recent call last):
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupy/testing/helper.py", line 47, in _call_func
E       result = impl(self, *args, **kw)
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/tests/cupy_tests/lib_tests/test_polynomial.py", line 767, in test_roots_array
E       out = xp.roots(a)
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupy/lib/_routines_poly.py", line 326, in roots
E       out = cupy.linalg.eigvalsh(cmatrix)
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupy/linalg/_eigenvalue.py", line 176, in eigvalsh
E       return _syevd(a, UPLO, False)[0]
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupy/linalg/_eigenvalue.py", line 79, in _syevd
E       work_size = buffer_size(
E     File "cupy_backends/cuda/libs/cusolver.pyx", line 3086, in cupy_backends.cuda.libs.cusolver.dsyevd_bufferSize
E       cpdef int dsyevd_bufferSize(intptr_t handle, int jobz, int uplo, int n,
E     File "cupy_backends/cuda/libs/cusolver.pyx", line 3095, in cupy_backends.cuda.libs.cusolver.dsyevd_bufferSize
E       check_status(status)
E     File "cupy_backends/cuda/libs/cusolver.pyx", line 1051, in cupy_backends.cuda.libs.cusolver.check_status
E       raise CUSOLVERError(status)
E   cupy_backends.cuda.libs.cusolver.CUSOLVERError: rocblas_status_not_implemented

cupy_backends/cuda/libs/cusolver.pyx:1051: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.int8'>
_________ TestRootsReal_param_1_{input=[-4, 10, 4]}.test_roots_poly1d __________

self = <<cupy_tests.lib_tests.test_polynomial.TestRootsReal_param_1_{input=[-4, 10, 4]} testMethod=test_roots_poly1d>  parameter: {'input': [-4, 10, 4]}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupy/__init__.py'>
dtype = <class 'numpy.int8'>

    @testing.for_signed_dtypes()
    @testing.numpy_cupy_allclose(rtol=1e-6)
    def test_roots_poly1d(self, xp, dtype):
        a = xp.array(self.input, dtype)
>       out = xp.roots(xp.poly1d(a))

tests/cupy_tests/lib_tests/test_polynomial.py:774: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/lib/_routines_poly.py:326: in roots
    out = cupy.linalg.eigvalsh(cmatrix)
cupy/linalg/_eigenvalue.py:176: in eigvalsh
    return _syevd(a, UPLO, False)[0]
cupy/linalg/_eigenvalue.py:79: in _syevd
    work_size = buffer_size(
cupy_backends/cuda/libs/cusolver.pyx:3086: in cupy_backends.cuda.libs.cusolver.dsyevd_bufferSize
    cpdef int dsyevd_bufferSize(intptr_t handle, int jobz, int uplo, int n,
cupy_backends/cuda/libs/cusolver.pyx:3095: in cupy_backends.cuda.libs.cusolver.dsyevd_bufferSize
    check_status(status)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise CUSOLVERError(status)
E   AssertionError: Only cupy raises error
E   
E   Traceback (most recent call last):
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupy/testing/helper.py", line 47, in _call_func
E       result = impl(self, *args, **kw)
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/tests/cupy_tests/lib_tests/test_polynomial.py", line 774, in test_roots_poly1d
E       out = xp.roots(xp.poly1d(a))
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupy/lib/_routines_poly.py", line 326, in roots
E       out = cupy.linalg.eigvalsh(cmatrix)
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupy/linalg/_eigenvalue.py", line 176, in eigvalsh
E       return _syevd(a, UPLO, False)[0]
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupy/linalg/_eigenvalue.py", line 79, in _syevd
E       work_size = buffer_size(
E     File "cupy_backends/cuda/libs/cusolver.pyx", line 3086, in cupy_backends.cuda.libs.cusolver.dsyevd_bufferSize
E       cpdef int dsyevd_bufferSize(intptr_t handle, int jobz, int uplo, int n,
E     File "cupy_backends/cuda/libs/cusolver.pyx", line 3095, in cupy_backends.cuda.libs.cusolver.dsyevd_bufferSize
E       check_status(status)
E     File "cupy_backends/cuda/libs/cusolver.pyx", line 1051, in cupy_backends.cuda.libs.cusolver.check_status
E       raise CUSOLVERError(status)
E   cupy_backends.cuda.libs.cusolver.CUSOLVERError: rocblas_status_not_implemented

cupy_backends/cuda/libs/cusolver.pyx:1051: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.int8'>
____ TestRootsComplex_param_0_{input=[3j, 1.5j, (-0-3j)]}.test_roots_array _____

self = <<cupy_tests.lib_tests.test_polynomial.TestRootsComplex_param_0_{input=[3j, 1.5j, (-0-3j)]} testMethod=test_roots_array>  parameter: {'input': [3j, 1.5j, (-0-3j)]}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupy/__init__.py'>
dtype = <class 'numpy.complex64'>

    @testing.for_complex_dtypes()
    @testing.numpy_cupy_allclose(rtol=1e-6)
    def test_roots_array(self, xp, dtype):
        a = xp.array(self.input, dtype)
>       out = xp.roots(a)

tests/cupy_tests/lib_tests/test_polynomial.py:788: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/lib/_routines_poly.py:326: in roots
    out = cupy.linalg.eigvalsh(cmatrix)
cupy/linalg/_eigenvalue.py:176: in eigvalsh
    return _syevd(a, UPLO, False)[0]
cupy/linalg/_eigenvalue.py:79: in _syevd
    work_size = buffer_size(
cupy_backends/cuda/libs/cusolver.pyx:3098: in cupy_backends.cuda.libs.cusolver.cheevd_bufferSize
    cpdef int cheevd_bufferSize(intptr_t handle, int jobz, int uplo, int n,
cupy_backends/cuda/libs/cusolver.pyx:3107: in cupy_backends.cuda.libs.cusolver.cheevd_bufferSize
    check_status(status)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise CUSOLVERError(status)
E   AssertionError: Only cupy raises error
E   
E   Traceback (most recent call last):
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupy/testing/helper.py", line 47, in _call_func
E       result = impl(self, *args, **kw)
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/tests/cupy_tests/lib_tests/test_polynomial.py", line 788, in test_roots_array
E       out = xp.roots(a)
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupy/lib/_routines_poly.py", line 326, in roots
E       out = cupy.linalg.eigvalsh(cmatrix)
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupy/linalg/_eigenvalue.py", line 176, in eigvalsh
E       return _syevd(a, UPLO, False)[0]
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupy/linalg/_eigenvalue.py", line 79, in _syevd
E       work_size = buffer_size(
E     File "cupy_backends/cuda/libs/cusolver.pyx", line 3098, in cupy_backends.cuda.libs.cusolver.cheevd_bufferSize
E       cpdef int cheevd_bufferSize(intptr_t handle, int jobz, int uplo, int n,
E     File "cupy_backends/cuda/libs/cusolver.pyx", line 3107, in cupy_backends.cuda.libs.cusolver.cheevd_bufferSize
E       check_status(status)
E     File "cupy_backends/cuda/libs/cusolver.pyx", line 1051, in cupy_backends.cuda.libs.cusolver.check_status
E       raise CUSOLVERError(status)
E   cupy_backends.cuda.libs.cusolver.CUSOLVERError: rocblas_status_not_implemented

cupy_backends/cuda/libs/cusolver.pyx:1051: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.complex64'>
____ TestRootsComplex_param_0_{input=[3j, 1.5j, (-0-3j)]}.test_roots_poly1d ____

self = <<cupy_tests.lib_tests.test_polynomial.TestRootsComplex_param_0_{input=[3j, 1.5j, (-0-3j)]} testMethod=test_roots_poly1d>  parameter: {'input': [3j, 1.5j, (-0-3j)]}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupy/__init__.py'>
dtype = <class 'numpy.complex64'>

    @testing.for_complex_dtypes()
    @testing.numpy_cupy_allclose(rtol=1e-6)
    def test_roots_poly1d(self, xp, dtype):
        a = xp.array(self.input, dtype)
>       out = xp.roots(xp.poly1d(a))

tests/cupy_tests/lib_tests/test_polynomial.py:795: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/lib/_routines_poly.py:326: in roots
    out = cupy.linalg.eigvalsh(cmatrix)
cupy/linalg/_eigenvalue.py:176: in eigvalsh
    return _syevd(a, UPLO, False)[0]
cupy/linalg/_eigenvalue.py:79: in _syevd
    work_size = buffer_size(
cupy_backends/cuda/libs/cusolver.pyx:3098: in cupy_backends.cuda.libs.cusolver.cheevd_bufferSize
    cpdef int cheevd_bufferSize(intptr_t handle, int jobz, int uplo, int n,
cupy_backends/cuda/libs/cusolver.pyx:3107: in cupy_backends.cuda.libs.cusolver.cheevd_bufferSize
    check_status(status)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise CUSOLVERError(status)
E   AssertionError: Only cupy raises error
E   
E   Traceback (most recent call last):
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupy/testing/helper.py", line 47, in _call_func
E       result = impl(self, *args, **kw)
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/tests/cupy_tests/lib_tests/test_polynomial.py", line 795, in test_roots_poly1d
E       out = xp.roots(xp.poly1d(a))
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupy/lib/_routines_poly.py", line 326, in roots
E       out = cupy.linalg.eigvalsh(cmatrix)
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupy/linalg/_eigenvalue.py", line 176, in eigvalsh
E       return _syevd(a, UPLO, False)[0]
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupy/linalg/_eigenvalue.py", line 79, in _syevd
E       work_size = buffer_size(
E     File "cupy_backends/cuda/libs/cusolver.pyx", line 3098, in cupy_backends.cuda.libs.cusolver.cheevd_bufferSize
E       cpdef int cheevd_bufferSize(intptr_t handle, int jobz, int uplo, int n,
E     File "cupy_backends/cuda/libs/cusolver.pyx", line 3107, in cupy_backends.cuda.libs.cusolver.cheevd_bufferSize
E       check_status(status)
E     File "cupy_backends/cuda/libs/cusolver.pyx", line 1051, in cupy_backends.cuda.libs.cusolver.check_status
E       raise CUSOLVERError(status)
E   cupy_backends.cuda.libs.cusolver.CUSOLVERError: rocblas_status_not_implemented

cupy_backends/cuda/libs/cusolver.pyx:1051: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.complex64'>
_________________________ TestPoly1d.test_poly1d_roots _________________________

self = <cupy_tests.lib_tests.test_polynomial.TestPoly1d testMethod=test_poly1d_roots>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupy/__init__.py'>
dtype = <class 'numpy.int8'>

    @testing.for_signed_dtypes()
    @testing.numpy_cupy_allclose(rtol=1e-6)
    def test_poly1d_roots(self, xp, dtype):
        a = xp.array([-3, -2.5, 3], dtype)
>       out = xp.poly1d(a).roots

tests/cupy_tests/lib_tests/test_polynomial.py:134: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/lib/_polynomial.pyx:63: in cupy.lib._polynomial.poly1d.roots.__get__
    return _routines_poly.roots(self._coeffs)
cupy/lib/_routines_poly.py:326: in roots
    out = cupy.linalg.eigvalsh(cmatrix)
cupy/linalg/_eigenvalue.py:176: in eigvalsh
    return _syevd(a, UPLO, False)[0]
cupy/linalg/_eigenvalue.py:79: in _syevd
    work_size = buffer_size(
cupy_backends/cuda/libs/cusolver.pyx:3086: in cupy_backends.cuda.libs.cusolver.dsyevd_bufferSize
    cpdef int dsyevd_bufferSize(intptr_t handle, int jobz, int uplo, int n,
cupy_backends/cuda/libs/cusolver.pyx:3095: in cupy_backends.cuda.libs.cusolver.dsyevd_bufferSize
    check_status(status)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise CUSOLVERError(status)
E   AssertionError: Only cupy raises error
E   
E   Traceback (most recent call last):
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupy/testing/helper.py", line 47, in _call_func
E       result = impl(self, *args, **kw)
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/tests/cupy_tests/lib_tests/test_polynomial.py", line 134, in test_poly1d_roots
E       out = xp.poly1d(a).roots
E     File "cupy/lib/_polynomial.pyx", line 63, in cupy.lib._polynomial.poly1d.roots.__get__
E       return _routines_poly.roots(self._coeffs)
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupy/lib/_routines_poly.py", line 326, in roots
E       out = cupy.linalg.eigvalsh(cmatrix)
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupy/linalg/_eigenvalue.py", line 176, in eigvalsh
E       return _syevd(a, UPLO, False)[0]
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupy/linalg/_eigenvalue.py", line 79, in _syevd
E       work_size = buffer_size(
E     File "cupy_backends/cuda/libs/cusolver.pyx", line 3086, in cupy_backends.cuda.libs.cusolver.dsyevd_bufferSize
E       cpdef int dsyevd_bufferSize(intptr_t handle, int jobz, int uplo, int n,
E     File "cupy_backends/cuda/libs/cusolver.pyx", line 3095, in cupy_backends.cuda.libs.cusolver.dsyevd_bufferSize
E       check_status(status)
E     File "cupy_backends/cuda/libs/cusolver.pyx", line 1051, in cupy_backends.cuda.libs.cusolver.check_status
E       raise CUSOLVERError(status)
E   cupy_backends.cuda.libs.cusolver.CUSOLVERError: rocblas_status_not_implemented

cupy_backends/cuda/libs/cusolver.pyx:1051: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.int8'>
_ TestEinSumUnaryOperation_param_30_{_raw_params={'orig': {'shape_a': (2, 3), 'subscripts': '...'}, 'dec': 0, 'drop': True}, shape_a=(2, 1), subscripts='...'}.test_einsum_unary_dtype _
cupy/testing/helper.py:1068: in test_func
    impl(self, *args, **kw_copy)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:495: in check_func
    array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[1],
       [2]], dtype=uint8)
desired = array([[1],
       [2]], dtype=uint8), rtol = 1e-07, atol = 0
err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=0
E       
E       Mismatched elements: 2 / 2 (100%)
E       Max absolute difference: 255
E       Max relative difference: 255.
E        x: array([[ 0],
E              [60]], dtype=uint8)
E        y: array([[1],
E              [2]], dtype=uint8)

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
skipped: dtype_a = <class 'numpy.int16'>, dtype_out = <class 'numpy.uint16'> ()
skipped: dtype_a = <class 'numpy.uint64'>, dtype_out = <class 'numpy.bool_'> ()
skipped: dtype_a = <class 'numpy.float32'>, dtype_out = <class 'numpy.uint32'> ()
{'dtype_a': <class 'numpy.uint8'>, 'dtype_out': <class 'numpy.uint8'>}
_ TestEinSumUnaryOperation_param_31_{_raw_params={'orig': {'shape_a': (2, 3), 'subscripts': 'ji'}, 'dec': 0, 'drop': True}, shape_a=(2, 1), subscripts='ji'}.test_einsum_unary_dtype _
cupy/testing/helper.py:1068: in test_func
    impl(self, *args, **kw_copy)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:495: in check_func
    array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[1, 2]], dtype=uint16), desired = array([[1, 2]], dtype=uint16)
rtol = 1e-07, atol = 0, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=0
E       
E       Mismatched elements: 2 / 2 (100%)
E       Max absolute difference: 16382
E       Max relative difference: 15359.
E        x: array([[15360, 16384]], dtype=uint16)
E        y: array([[1, 2]], dtype=uint16)

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
skipped: dtype_a = <class 'numpy.int16'>, dtype_out = <class 'numpy.uint16'> ()
skipped: dtype_a = <class 'numpy.uint64'>, dtype_out = <class 'numpy.bool_'> ()
{'dtype_a': <class 'numpy.uint16'>, 'dtype_out': <class 'numpy.uint16'>}
______ TestBroadcast_param_2_{shapes=[(1,), (1,)]}.test_broadcast_arrays _______
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:648: in check_func
    array.assert_array_equal(x, y, err_msg, verbose, strides_check)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([1.], dtype=float16), y = array([1.], dtype=float16), err_msg = ''
verbose = True, strides_check = False

    def assert_array_equal(x, y, err_msg='', verbose=True, strides_check=False):
        """Raises an AssertionError if two array_like objects are not equal.
    
        Args:
             x(numpy.ndarray or cupy.ndarray): The actual object to check.
             y(numpy.ndarray or cupy.ndarray): The desired, expected object.
             strides_check(bool): If ``True``, consistency of strides is also
                 checked.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting values
                 are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_array_equal`
        """
>       numpy.testing.assert_array_equal(
            cupy.asnumpy(x), cupy.asnumpy(y), err_msg=err_msg,
            verbose=verbose)
E       AssertionError: 
E       Arrays are not equal
E       
E       Mismatched elements: 1 / 1 (100%)
E       Max absolute difference: 1.
E       Max relative difference: 1.
E        x: array([0.], dtype=float16)
E        y: array([1.], dtype=float16)

cupy/testing/array.py:91: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float16'>
______ TestBroadcast_param_3_{shapes=[(2,), (2,)]}.test_broadcast_arrays _______
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:648: in check_func
    array.assert_array_equal(x, y, err_msg, verbose, strides_check)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([1., 2.], dtype=float16), y = array([1., 2.], dtype=float16)
err_msg = '', verbose = True, strides_check = False

    def assert_array_equal(x, y, err_msg='', verbose=True, strides_check=False):
        """Raises an AssertionError if two array_like objects are not equal.
    
        Args:
             x(numpy.ndarray or cupy.ndarray): The actual object to check.
             y(numpy.ndarray or cupy.ndarray): The desired, expected object.
             strides_check(bool): If ``True``, consistency of strides is also
                 checked.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting values
                 are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_array_equal`
        """
>       numpy.testing.assert_array_equal(
            cupy.asnumpy(x), cupy.asnumpy(y), err_msg=err_msg,
            verbose=verbose)
E       AssertionError: 
E       Arrays are not equal
E       
E       Mismatched elements: 2 / 2 (100%)
E       Max absolute difference: 1.
E       Max relative difference: 1.
E        x: array([0.   , 1.875], dtype=float16)
E        y: array([1., 2.], dtype=float16)

cupy/testing/array.py:91: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float16'>
_______ TestAsSeries_param_1_{trim=False}.test_as_series_trailing_zeros ________
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:648: in check_func
    array.assert_array_equal(x, y, err_msg, verbose, strides_check)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([3.+0.j], dtype=complex64), y = array([3.+0.j], dtype=complex64)
err_msg = '', verbose = True, strides_check = False

    def assert_array_equal(x, y, err_msg='', verbose=True, strides_check=False):
        """Raises an AssertionError if two array_like objects are not equal.
    
        Args:
             x(numpy.ndarray or cupy.ndarray): The actual object to check.
             y(numpy.ndarray or cupy.ndarray): The desired, expected object.
             strides_check(bool): If ``True``, consistency of strides is also
                 checked.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting values
                 are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_array_equal`
        """
>       numpy.testing.assert_array_equal(
            cupy.asnumpy(x), cupy.asnumpy(y), err_msg=err_msg,
            verbose=verbose)
E       AssertionError: 
E       Arrays are not equal
E       
E       Mismatched elements: 1 / 1 (100%)
E       Max absolute difference: 3.78783
E       Max relative difference: 1.2626101
E        x: array([0.+2.3125j], dtype=complex64)
E        y: array([3.+0.j], dtype=complex64)

cupy/testing/array.py:91: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.complex64'>
_________________________ TestRandomState.test_methods _________________________

self = <cupy_tests.random_tests.test_generator.TestRandomState testMethod=test_methods>

    def test_methods(self):
        methods = [
            cuda.curand.CURAND_RNG_PSEUDO_DEFAULT,
            cuda.curand.CURAND_RNG_PSEUDO_MRG32K3A,
            cupy.cuda.curand.CURAND_RNG_PSEUDO_MT19937,
            cupy.cuda.curand.CURAND_RNG_PSEUDO_PHILOX4_32_10,
            cupy.cuda.curand.CURAND_RNG_PSEUDO_MTGP32,
            cupy.cuda.curand.CURAND_RNG_PSEUDO_XORWOW
        ]
    
        for method in methods:
>           rs = cupy.random.RandomState(method=method)

tests/cupy_tests/random_tests/test_generator.py:242: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/random/_generator.py:57: in __init__
    self._generator = curand.createGenerator(method)
cupy_backends/cuda/libs/curand.pyx:93: in cupy_backends.cuda.libs.curand.createGenerator
    cpdef size_t createGenerator(int rng_type) except? 0:
cupy_backends/cuda/libs/curand.pyx:97: in cupy_backends.cuda.libs.curand.createGenerator
    check_status(status)
cupy_backends/cuda/libs/curand.pyx:86: in cupy_backends.cuda.libs.curand.check_status
    raise CURANDError(status)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   super(CURANDError, self).__init__(STATUS[status])
E   KeyError: 1000

cupy_backends/cuda/libs/curand.pyx:77: KeyError
_____________________ TestChoiceChi.test_goodness_of_fit_2 _____________________
cupy/testing/condition.py:79: in wrapper
    fail()
cupy/testing/condition.py:50: in fail
    instance.fail(msg)
E   AssertionError: 
E   Fail: 1, Success: 4
E   
E   The first error message:
E   Traceback (most recent call last):
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupy/testing/condition.py", line 59, in <lambda>
E       lambda: f(ins, *args[1:], **kwargs),
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/tests/cupy_tests/random_tests/test_generator.py", line 1080, in test_goodness_of_fit_2
E       assert hypothesis.chi_square_test(counts, expected)
E   AssertionError: assert False
E    +  where False = <function chi_square_test at 0x7fdf17061310>(array([17, 33, 50]), array([30, 30, 40]))
E    +    where <function chi_square_test at 0x7fdf17061310> = hypothesis.chi_square_test
_____________________ TestRandint2.test_goodness_of_fit_2 ______________________
cupy/testing/condition.py:79: in wrapper
    fail()
cupy/testing/condition.py:50: in fail
    instance.fail(msg)
E   AssertionError: 
E   Fail: 1, Success: 3
E   
E   The first error message:
E   Traceback (most recent call last):
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupy/testing/condition.py", line 59, in <lambda>
E       lambda: f(ins, *args[1:], **kwargs),
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/tests/cupy_tests/random_tests/test_sample.py", line 106, in test_goodness_of_fit_2
E       assert hypothesis.chi_square_test(counts, expected)
E   AssertionError: assert False
E    +  where False = <function chi_square_test at 0x7fdf17061310>(array([21, 21, 11, 30, 17]), array([20., 20., 20., 20., 20.]))
E    +    where <function chi_square_test at 0x7fdf17061310> = hypothesis.chi_square_test
__________________ TestRandomIntegers2.test_goodness_of_fit_2 __________________
cupy/testing/condition.py:79: in wrapper
    fail()
cupy/testing/condition.py:50: in fail
    instance.fail(msg)
E   AssertionError: 
E   Fail: 1, Success: 3
E   
E   The first error message:
E   Traceback (most recent call last):
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupy/testing/condition.py", line 59, in <lambda>
E       lambda: f(ins, *args[1:], **kwargs),
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/tests/cupy_tests/random_tests/test_sample.py", line 201, in test_goodness_of_fit_2
E       assert hypothesis.chi_square_test(counts, expected)
E   AssertionError: assert False
E    +  where False = <function chi_square_test at 0x7fdf17061310>(array([21, 21, 11, 30, 17]), array([20., 20., 20., 20., 20.]))
E    +    where <function chi_square_test at 0x7fdf17061310> = hypothesis.chi_square_test
________ TestCorrelate_param_0_{mode='valid'}.test_correlate_diff_types ________
cupy/testing/helper.py:1068: in test_func
    impl(self, *args, **kw_copy)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:495: in check_func
    array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([1191,  651,  779,  562,  751,  745,  693,  862,  864,  936, 1027,
        988,  962,  827,  937,  817,  832,  8...  888,  891,
        942, 1035, 1029, 1037, 1013, 1027,  923, 1029,  944,  889,  908,
        874,  863], dtype=uint16)
desired = array([2592, 1718, 1987, 1649, 1849, 1731, 1795, 1760, 1768, 1660, 1897,
       1677, 1809, 1717, 1837, 1735, 1847, 18... 1964, 1901,
       1937, 2021, 2012, 2070, 2067, 2075, 1921, 2122, 1994, 2076, 2045,
       2048, 1965], dtype=uint16)
rtol = 0.01, atol = 0, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=0.01, atol=0
E       
E       Mismatched elements: 101 / 101 (100%)
E       Max absolute difference: 64847
E       Max relative difference: 42.19661458
E        x: array([1191,  651,  779,  562,  751,  745,  693,  862,  864,  936, 1027,
E               988,  962,  827,  937,  817,  832,  837,  814,  740,  794,  842,
E               771,  822,  895,  956,  943,  996,  946,  983,  890,  912,  824,...
E        y: array([2592, 1718, 1987, 1649, 1849, 1731, 1795, 1760, 1768, 1660, 1897,
E              1677, 1809, 1717, 1837, 1735, 1847, 1829, 1986, 1817, 1897, 1825,
E              1697, 1752, 1698, 1794, 1725, 1754, 1791, 1757, 1813, 1836, 1871,...

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.uint16'>, 'dtype2': <class 'numpy.uint16'>}
________ TestCorrelate_param_1_{mode='full'}.test_correlate_diff_types _________
cupy/testing/helper.py:1068: in test_func
    impl(self, *args, **kw_copy)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:495: in check_func
    array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([   0,   40,   56,   73,   80,   79,  128,  123,  187,  204,  215,
        299,  242,  279,  284,  208,  256,  1...  150,  135,
         76,   44,   46,   12,   36,    0,    0,    0,    0,    0,    0,
          0,    0], dtype=uint16)
desired = array([   0,   40,   56,   73,   80,   79,  128,  123,  187,  204,  215,
        299,  242,  304,  329,  277,  358,  3...  326,  352,
        289,  246,  209,  168,  178,  182,  152,  109,   62,   44,   34,
         28,   20], dtype=uint16)
rtol = 0.01, atol = 0, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=0.01, atol=0
E       
E       Mismatched elements: 286 / 299 (95.7%)
E       Max absolute difference: 65516
E       Max relative difference: 3275.8
E        x: array([   0,   40,   56,   73,   80,   79,  128,  123,  187,  204,  215,
E               299,  242,  279,  284,  208,  256,  198,  294,  247,  241,  281,
E               241,  295,  252,  230,  347,  386,  508,  431,  419,  397,  372,...
E        y: array([   0,   40,   56,   73,   80,   79,  128,  123,  187,  204,  215,
E               299,  242,  304,  329,  277,  358,  300,  413,  372,  388,  436,
E               369,  465,  394,  362,  529,  498,  640,  599,  581,  613,  610,...

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.uint16'>, 'dtype2': <class 'numpy.uint16'>}
______ TestCorrelate_param_1_{mode='full'}.test_correlate_non_contiguous _______
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:495: in check_func
    array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([   81., 16290.,  2210.], dtype=float16)
desired = array([   81., 16290.,  2212.], dtype=float16), rtol = 1e-05, atol = 0
err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-05, atol=0
E       
E       Mismatched elements: 1 / 3 (33.3%)
E       Max absolute difference: 2.
E       Max relative difference: 0.000904
E        x: array([   81., 16290.,  2210.], dtype=float16)
E        y: array([   81., 16290.,  2212.], dtype=float16)

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float16'>
________ TestCorrelate_param_2_{mode='same'}.test_correlate_diff_types _________
cupy/testing/helper.py:1068: in test_func
    impl(self, *args, **kw_copy)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:495: in check_func
    array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([ 433,  490,  366,  409,  436,  493,  492,  480,  470,  565,  534,
        624,  543,  675,  595,  583,  563,  5...  630,  677,
        696,  535,  532,  515,  451,  370,  561,  359,  416,  370,  467,
        401,  460], dtype=uint16)
desired = array([ 830,  945,  881,  917,  878, 1017,  923,  963,  887, 1009,  869,
       1113,  956, 1121, 1006, 1164, 1110, 11... 1371, 1450,
       1441, 1328, 1307, 1264, 1253, 1280, 1404, 1213, 1263, 1154, 1182,
       1070, 1101], dtype=uint16)
rtol = 0.01, atol = 0, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=0.01, atol=0
E       
E       Mismatched elements: 200 / 200 (100%)
E       Max absolute difference: 65201
E       Max relative difference: 78.48072289
E        x: array([ 433,  490,  366,  409,  436,  493,  492,  480,  470,  565,  534,
E               624,  543,  675,  595,  583,  563,  521,  511,  502,  507,  487,
E               611,  663,  662,  740,  800,  852,  778,  827,  800,  709,  739,...
E        y: array([ 830,  945,  881,  917,  878, 1017,  923,  963,  887, 1009,  869,
E              1113,  956, 1121, 1006, 1164, 1110, 1166, 1208, 1237, 1192, 1168,
E              1257, 1258, 1229, 1331, 1295, 1301, 1283, 1427, 1478, 1466, 1603,...

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.uint16'>, 'dtype2': <class 'numpy.uint16'>}
______________ TestInvh_param_0_{dtype=float32, size=5}.test_invh ______________

self = <<cupyx_tests.linalg_tests.test_solve.TestInvh_param_0_{dtype=float32, size=5} testMethod=test_invh>  parameter: {'dtype': <class 'numpy.float32'>, 'size': 5}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupy/__init__.py'>

    @testing.numpy_cupy_allclose(atol=1e-5)
    def test_invh(self, xp):
        a = self._create_symmetric_matrix(xp, self.size, self.dtype)
        if xp == cupy:
>           return cupyx.linalg.invh(a)

tests/cupyx_tests/linalg_tests/test_solve.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupyx/linalg/_solve.py:31: in invh
    return lapack.posv(a, b)
cupyx/lapack.py:335: in posv
    potrs(handle, uplo, n, nrhs, a.data.ptr, lda, b.data.ptr, ldb,
cupy_backends/cuda/libs/cusolver.pyx:1230: in cupy_backends.cuda.libs.cusolver.spotrs
    cpdef spotrs(intptr_t handle, int uplo, int n, int nrhs,
cupy_backends/cuda/libs/cusolver.pyx:1238: in cupy_backends.cuda.libs.cusolver.spotrs
    check_status(status)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise CUSOLVERError(status)
E   AssertionError: Only cupy raises error
E   
E   Traceback (most recent call last):
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupy/testing/helper.py", line 47, in _call_func
E       result = impl(self, *args, **kw)
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/tests/cupyx_tests/linalg_tests/test_solve.py", line 23, in test_invh
E       return cupyx.linalg.invh(a)
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupyx/linalg/_solve.py", line 31, in invh
E       return lapack.posv(a, b)
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupyx/lapack.py", line 335, in posv
E       potrs(handle, uplo, n, nrhs, a.data.ptr, lda, b.data.ptr, ldb,
E     File "cupy_backends/cuda/libs/cusolver.pyx", line 1230, in cupy_backends.cuda.libs.cusolver.spotrs
E       cpdef spotrs(intptr_t handle, int uplo, int n, int nrhs,
E     File "cupy_backends/cuda/libs/cusolver.pyx", line 1238, in cupy_backends.cuda.libs.cusolver.spotrs
E       check_status(status)
E     File "cupy_backends/cuda/libs/cusolver.pyx", line 1051, in cupy_backends.cuda.libs.cusolver.check_status
E       raise CUSOLVERError(status)
E   cupy_backends.cuda.libs.cusolver.CUSOLVERError: rocblas_status_not_implemented

cupy_backends/cuda/libs/cusolver.pyx:1051: AssertionError
______________ TestInvh_param_1_{dtype=float32, size=9}.test_invh ______________

self = <<cupyx_tests.linalg_tests.test_solve.TestInvh_param_1_{dtype=float32, size=9} testMethod=test_invh>  parameter: {'dtype': <class 'numpy.float32'>, 'size': 9}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupy/__init__.py'>

    @testing.numpy_cupy_allclose(atol=1e-5)
    def test_invh(self, xp):
        a = self._create_symmetric_matrix(xp, self.size, self.dtype)
        if xp == cupy:
>           return cupyx.linalg.invh(a)

tests/cupyx_tests/linalg_tests/test_solve.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupyx/linalg/_solve.py:31: in invh
    return lapack.posv(a, b)
cupyx/lapack.py:335: in posv
    potrs(handle, uplo, n, nrhs, a.data.ptr, lda, b.data.ptr, ldb,
cupy_backends/cuda/libs/cusolver.pyx:1230: in cupy_backends.cuda.libs.cusolver.spotrs
    cpdef spotrs(intptr_t handle, int uplo, int n, int nrhs,
cupy_backends/cuda/libs/cusolver.pyx:1238: in cupy_backends.cuda.libs.cusolver.spotrs
    check_status(status)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise CUSOLVERError(status)
E   AssertionError: Only cupy raises error
E   
E   Traceback (most recent call last):
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupy/testing/helper.py", line 47, in _call_func
E       result = impl(self, *args, **kw)
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/tests/cupyx_tests/linalg_tests/test_solve.py", line 23, in test_invh
E       return cupyx.linalg.invh(a)
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupyx/linalg/_solve.py", line 31, in invh
E       return lapack.posv(a, b)
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupyx/lapack.py", line 335, in posv
E       potrs(handle, uplo, n, nrhs, a.data.ptr, lda, b.data.ptr, ldb,
E     File "cupy_backends/cuda/libs/cusolver.pyx", line 1230, in cupy_backends.cuda.libs.cusolver.spotrs
E       cpdef spotrs(intptr_t handle, int uplo, int n, int nrhs,
E     File "cupy_backends/cuda/libs/cusolver.pyx", line 1238, in cupy_backends.cuda.libs.cusolver.spotrs
E       check_status(status)
E     File "cupy_backends/cuda/libs/cusolver.pyx", line 1051, in cupy_backends.cuda.libs.cusolver.check_status
E       raise CUSOLVERError(status)
E   cupy_backends.cuda.libs.cusolver.CUSOLVERError: rocblas_status_not_implemented

cupy_backends/cuda/libs/cusolver.pyx:1051: AssertionError
_____________ TestInvh_param_2_{dtype=float32, size=17}.test_invh ______________

self = <<cupyx_tests.linalg_tests.test_solve.TestInvh_param_2_{dtype=float32, size=17} testMethod=test_invh>  parameter: {'dtype': <class 'numpy.float32'>, 'size': 17}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupy/__init__.py'>

    @testing.numpy_cupy_allclose(atol=1e-5)
    def test_invh(self, xp):
        a = self._create_symmetric_matrix(xp, self.size, self.dtype)
        if xp == cupy:
>           return cupyx.linalg.invh(a)

tests/cupyx_tests/linalg_tests/test_solve.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupyx/linalg/_solve.py:31: in invh
    return lapack.posv(a, b)
cupyx/lapack.py:335: in posv
    potrs(handle, uplo, n, nrhs, a.data.ptr, lda, b.data.ptr, ldb,
cupy_backends/cuda/libs/cusolver.pyx:1230: in cupy_backends.cuda.libs.cusolver.spotrs
    cpdef spotrs(intptr_t handle, int uplo, int n, int nrhs,
cupy_backends/cuda/libs/cusolver.pyx:1238: in cupy_backends.cuda.libs.cusolver.spotrs
    check_status(status)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise CUSOLVERError(status)
E   AssertionError: Only cupy raises error
E   
E   Traceback (most recent call last):
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupy/testing/helper.py", line 47, in _call_func
E       result = impl(self, *args, **kw)
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/tests/cupyx_tests/linalg_tests/test_solve.py", line 23, in test_invh
E       return cupyx.linalg.invh(a)
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupyx/linalg/_solve.py", line 31, in invh
E       return lapack.posv(a, b)
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupyx/lapack.py", line 335, in posv
E       potrs(handle, uplo, n, nrhs, a.data.ptr, lda, b.data.ptr, ldb,
E     File "cupy_backends/cuda/libs/cusolver.pyx", line 1230, in cupy_backends.cuda.libs.cusolver.spotrs
E       cpdef spotrs(intptr_t handle, int uplo, int n, int nrhs,
E     File "cupy_backends/cuda/libs/cusolver.pyx", line 1238, in cupy_backends.cuda.libs.cusolver.spotrs
E       check_status(status)
E     File "cupy_backends/cuda/libs/cusolver.pyx", line 1051, in cupy_backends.cuda.libs.cusolver.check_status
E       raise CUSOLVERError(status)
E   cupy_backends.cuda.libs.cusolver.CUSOLVERError: rocblas_status_not_implemented

cupy_backends/cuda/libs/cusolver.pyx:1051: AssertionError
_____________ TestInvh_param_3_{dtype=float32, size=33}.test_invh ______________

self = <<cupyx_tests.linalg_tests.test_solve.TestInvh_param_3_{dtype=float32, size=33} testMethod=test_invh>  parameter: {'dtype': <class 'numpy.float32'>, 'size': 33}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupy/__init__.py'>

    @testing.numpy_cupy_allclose(atol=1e-5)
    def test_invh(self, xp):
        a = self._create_symmetric_matrix(xp, self.size, self.dtype)
        if xp == cupy:
>           return cupyx.linalg.invh(a)

tests/cupyx_tests/linalg_tests/test_solve.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupyx/linalg/_solve.py:31: in invh
    return lapack.posv(a, b)
cupyx/lapack.py:335: in posv
    potrs(handle, uplo, n, nrhs, a.data.ptr, lda, b.data.ptr, ldb,
cupy_backends/cuda/libs/cusolver.pyx:1230: in cupy_backends.cuda.libs.cusolver.spotrs
    cpdef spotrs(intptr_t handle, int uplo, int n, int nrhs,
cupy_backends/cuda/libs/cusolver.pyx:1238: in cupy_backends.cuda.libs.cusolver.spotrs
    check_status(status)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise CUSOLVERError(status)
E   AssertionError: Only cupy raises error
E   
E   Traceback (most recent call last):
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupy/testing/helper.py", line 47, in _call_func
E       result = impl(self, *args, **kw)
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/tests/cupyx_tests/linalg_tests/test_solve.py", line 23, in test_invh
E       return cupyx.linalg.invh(a)
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupyx/linalg/_solve.py", line 31, in invh
E       return lapack.posv(a, b)
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupyx/lapack.py", line 335, in posv
E       potrs(handle, uplo, n, nrhs, a.data.ptr, lda, b.data.ptr, ldb,
E     File "cupy_backends/cuda/libs/cusolver.pyx", line 1230, in cupy_backends.cuda.libs.cusolver.spotrs
E       cpdef spotrs(intptr_t handle, int uplo, int n, int nrhs,
E     File "cupy_backends/cuda/libs/cusolver.pyx", line 1238, in cupy_backends.cuda.libs.cusolver.spotrs
E       check_status(status)
E     File "cupy_backends/cuda/libs/cusolver.pyx", line 1051, in cupy_backends.cuda.libs.cusolver.check_status
E       raise CUSOLVERError(status)
E   cupy_backends.cuda.libs.cusolver.CUSOLVERError: rocblas_status_not_implemented

cupy_backends/cuda/libs/cusolver.pyx:1051: AssertionError
______________ TestInvh_param_4_{dtype=float64, size=5}.test_invh ______________

self = <<cupyx_tests.linalg_tests.test_solve.TestInvh_param_4_{dtype=float64, size=5} testMethod=test_invh>  parameter: {'dtype': <class 'numpy.float64'>, 'size': 5}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupy/__init__.py'>

    @testing.numpy_cupy_allclose(atol=1e-5)
    def test_invh(self, xp):
        a = self._create_symmetric_matrix(xp, self.size, self.dtype)
        if xp == cupy:
>           return cupyx.linalg.invh(a)

tests/cupyx_tests/linalg_tests/test_solve.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupyx/linalg/_solve.py:31: in invh
    return lapack.posv(a, b)
cupyx/lapack.py:335: in posv
    potrs(handle, uplo, n, nrhs, a.data.ptr, lda, b.data.ptr, ldb,
cupy_backends/cuda/libs/cusolver.pyx:1240: in cupy_backends.cuda.libs.cusolver.dpotrs
    cpdef dpotrs(intptr_t handle, int uplo, int n, int nrhs,
cupy_backends/cuda/libs/cusolver.pyx:1248: in cupy_backends.cuda.libs.cusolver.dpotrs
    check_status(status)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise CUSOLVERError(status)
E   AssertionError: Only cupy raises error
E   
E   Traceback (most recent call last):
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupy/testing/helper.py", line 47, in _call_func
E       result = impl(self, *args, **kw)
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/tests/cupyx_tests/linalg_tests/test_solve.py", line 23, in test_invh
E       return cupyx.linalg.invh(a)
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupyx/linalg/_solve.py", line 31, in invh
E       return lapack.posv(a, b)
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupyx/lapack.py", line 335, in posv
E       potrs(handle, uplo, n, nrhs, a.data.ptr, lda, b.data.ptr, ldb,
E     File "cupy_backends/cuda/libs/cusolver.pyx", line 1240, in cupy_backends.cuda.libs.cusolver.dpotrs
E       cpdef dpotrs(intptr_t handle, int uplo, int n, int nrhs,
E     File "cupy_backends/cuda/libs/cusolver.pyx", line 1248, in cupy_backends.cuda.libs.cusolver.dpotrs
E       check_status(status)
E     File "cupy_backends/cuda/libs/cusolver.pyx", line 1051, in cupy_backends.cuda.libs.cusolver.check_status
E       raise CUSOLVERError(status)
E   cupy_backends.cuda.libs.cusolver.CUSOLVERError: rocblas_status_not_implemented

cupy_backends/cuda/libs/cusolver.pyx:1051: AssertionError
______________ TestInvh_param_5_{dtype=float64, size=9}.test_invh ______________

self = <<cupyx_tests.linalg_tests.test_solve.TestInvh_param_5_{dtype=float64, size=9} testMethod=test_invh>  parameter: {'dtype': <class 'numpy.float64'>, 'size': 9}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupy/__init__.py'>

    @testing.numpy_cupy_allclose(atol=1e-5)
    def test_invh(self, xp):
        a = self._create_symmetric_matrix(xp, self.size, self.dtype)
        if xp == cupy:
>           return cupyx.linalg.invh(a)

tests/cupyx_tests/linalg_tests/test_solve.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupyx/linalg/_solve.py:31: in invh
    return lapack.posv(a, b)
cupyx/lapack.py:335: in posv
    potrs(handle, uplo, n, nrhs, a.data.ptr, lda, b.data.ptr, ldb,
cupy_backends/cuda/libs/cusolver.pyx:1240: in cupy_backends.cuda.libs.cusolver.dpotrs
    cpdef dpotrs(intptr_t handle, int uplo, int n, int nrhs,
cupy_backends/cuda/libs/cusolver.pyx:1248: in cupy_backends.cuda.libs.cusolver.dpotrs
    check_status(status)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise CUSOLVERError(status)
E   AssertionError: Only cupy raises error
E   
E   Traceback (most recent call last):
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupy/testing/helper.py", line 47, in _call_func
E       result = impl(self, *args, **kw)
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/tests/cupyx_tests/linalg_tests/test_solve.py", line 23, in test_invh
E       return cupyx.linalg.invh(a)
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupyx/linalg/_solve.py", line 31, in invh
E       return lapack.posv(a, b)
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupyx/lapack.py", line 335, in posv
E       potrs(handle, uplo, n, nrhs, a.data.ptr, lda, b.data.ptr, ldb,
E     File "cupy_backends/cuda/libs/cusolver.pyx", line 1240, in cupy_backends.cuda.libs.cusolver.dpotrs
E       cpdef dpotrs(intptr_t handle, int uplo, int n, int nrhs,
E     File "cupy_backends/cuda/libs/cusolver.pyx", line 1248, in cupy_backends.cuda.libs.cusolver.dpotrs
E       check_status(status)
E     File "cupy_backends/cuda/libs/cusolver.pyx", line 1051, in cupy_backends.cuda.libs.cusolver.check_status
E       raise CUSOLVERError(status)
E   cupy_backends.cuda.libs.cusolver.CUSOLVERError: rocblas_status_not_implemented

cupy_backends/cuda/libs/cusolver.pyx:1051: AssertionError
_____________ TestInvh_param_6_{dtype=float64, size=17}.test_invh ______________

self = <<cupyx_tests.linalg_tests.test_solve.TestInvh_param_6_{dtype=float64, size=17} testMethod=test_invh>  parameter: {'dtype': <class 'numpy.float64'>, 'size': 17}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupy/__init__.py'>

    @testing.numpy_cupy_allclose(atol=1e-5)
    def test_invh(self, xp):
        a = self._create_symmetric_matrix(xp, self.size, self.dtype)
        if xp == cupy:
>           return cupyx.linalg.invh(a)

tests/cupyx_tests/linalg_tests/test_solve.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupyx/linalg/_solve.py:31: in invh
    return lapack.posv(a, b)
cupyx/lapack.py:335: in posv
    potrs(handle, uplo, n, nrhs, a.data.ptr, lda, b.data.ptr, ldb,
cupy_backends/cuda/libs/cusolver.pyx:1240: in cupy_backends.cuda.libs.cusolver.dpotrs
    cpdef dpotrs(intptr_t handle, int uplo, int n, int nrhs,
cupy_backends/cuda/libs/cusolver.pyx:1248: in cupy_backends.cuda.libs.cusolver.dpotrs
    check_status(status)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise CUSOLVERError(status)
E   AssertionError: Only cupy raises error
E   
E   Traceback (most recent call last):
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupy/testing/helper.py", line 47, in _call_func
E       result = impl(self, *args, **kw)
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/tests/cupyx_tests/linalg_tests/test_solve.py", line 23, in test_invh
E       return cupyx.linalg.invh(a)
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupyx/linalg/_solve.py", line 31, in invh
E       return lapack.posv(a, b)
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupyx/lapack.py", line 335, in posv
E       potrs(handle, uplo, n, nrhs, a.data.ptr, lda, b.data.ptr, ldb,
E     File "cupy_backends/cuda/libs/cusolver.pyx", line 1240, in cupy_backends.cuda.libs.cusolver.dpotrs
E       cpdef dpotrs(intptr_t handle, int uplo, int n, int nrhs,
E     File "cupy_backends/cuda/libs/cusolver.pyx", line 1248, in cupy_backends.cuda.libs.cusolver.dpotrs
E       check_status(status)
E     File "cupy_backends/cuda/libs/cusolver.pyx", line 1051, in cupy_backends.cuda.libs.cusolver.check_status
E       raise CUSOLVERError(status)
E   cupy_backends.cuda.libs.cusolver.CUSOLVERError: rocblas_status_not_implemented

cupy_backends/cuda/libs/cusolver.pyx:1051: AssertionError
_____________ TestInvh_param_7_{dtype=float64, size=33}.test_invh ______________

self = <<cupyx_tests.linalg_tests.test_solve.TestInvh_param_7_{dtype=float64, size=33} testMethod=test_invh>  parameter: {'dtype': <class 'numpy.float64'>, 'size': 33}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupy/__init__.py'>

    @testing.numpy_cupy_allclose(atol=1e-5)
    def test_invh(self, xp):
        a = self._create_symmetric_matrix(xp, self.size, self.dtype)
        if xp == cupy:
>           return cupyx.linalg.invh(a)

tests/cupyx_tests/linalg_tests/test_solve.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupyx/linalg/_solve.py:31: in invh
    return lapack.posv(a, b)
cupyx/lapack.py:335: in posv
    potrs(handle, uplo, n, nrhs, a.data.ptr, lda, b.data.ptr, ldb,
cupy_backends/cuda/libs/cusolver.pyx:1240: in cupy_backends.cuda.libs.cusolver.dpotrs
    cpdef dpotrs(intptr_t handle, int uplo, int n, int nrhs,
cupy_backends/cuda/libs/cusolver.pyx:1248: in cupy_backends.cuda.libs.cusolver.dpotrs
    check_status(status)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise CUSOLVERError(status)
E   AssertionError: Only cupy raises error
E   
E   Traceback (most recent call last):
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupy/testing/helper.py", line 47, in _call_func
E       result = impl(self, *args, **kw)
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/tests/cupyx_tests/linalg_tests/test_solve.py", line 23, in test_invh
E       return cupyx.linalg.invh(a)
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupyx/linalg/_solve.py", line 31, in invh
E       return lapack.posv(a, b)
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupyx/lapack.py", line 335, in posv
E       potrs(handle, uplo, n, nrhs, a.data.ptr, lda, b.data.ptr, ldb,
E     File "cupy_backends/cuda/libs/cusolver.pyx", line 1240, in cupy_backends.cuda.libs.cusolver.dpotrs
E       cpdef dpotrs(intptr_t handle, int uplo, int n, int nrhs,
E     File "cupy_backends/cuda/libs/cusolver.pyx", line 1248, in cupy_backends.cuda.libs.cusolver.dpotrs
E       check_status(status)
E     File "cupy_backends/cuda/libs/cusolver.pyx", line 1051, in cupy_backends.cuda.libs.cusolver.check_status
E       raise CUSOLVERError(status)
E   cupy_backends.cuda.libs.cusolver.CUSOLVERError: rocblas_status_not_implemented

cupy_backends/cuda/libs/cusolver.pyx:1051: AssertionError
_____________ TestInvh_param_8_{dtype=complex64, size=5}.test_invh _____________

self = <<cupyx_tests.linalg_tests.test_solve.TestInvh_param_8_{dtype=complex64, size=5} testMethod=test_invh>  parameter: {'dtype': <class 'numpy.complex64'>, 'size': 5}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupy/__init__.py'>

    @testing.numpy_cupy_allclose(atol=1e-5)
    def test_invh(self, xp):
        a = self._create_symmetric_matrix(xp, self.size, self.dtype)
        if xp == cupy:
>           return cupyx.linalg.invh(a)

tests/cupyx_tests/linalg_tests/test_solve.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupyx/linalg/_solve.py:31: in invh
    return lapack.posv(a, b)
cupyx/lapack.py:335: in posv
    potrs(handle, uplo, n, nrhs, a.data.ptr, lda, b.data.ptr, ldb,
cupy_backends/cuda/libs/cusolver.pyx:1250: in cupy_backends.cuda.libs.cusolver.cpotrs
    cpdef cpotrs(intptr_t handle, int uplo, int n, int nrhs,
cupy_backends/cuda/libs/cusolver.pyx:1258: in cupy_backends.cuda.libs.cusolver.cpotrs
    check_status(status)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise CUSOLVERError(status)
E   AssertionError: Only cupy raises error
E   
E   Traceback (most recent call last):
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupy/testing/helper.py", line 47, in _call_func
E       result = impl(self, *args, **kw)
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/tests/cupyx_tests/linalg_tests/test_solve.py", line 23, in test_invh
E       return cupyx.linalg.invh(a)
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupyx/linalg/_solve.py", line 31, in invh
E       return lapack.posv(a, b)
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupyx/lapack.py", line 335, in posv
E       potrs(handle, uplo, n, nrhs, a.data.ptr, lda, b.data.ptr, ldb,
E     File "cupy_backends/cuda/libs/cusolver.pyx", line 1250, in cupy_backends.cuda.libs.cusolver.cpotrs
E       cpdef cpotrs(intptr_t handle, int uplo, int n, int nrhs,
E     File "cupy_backends/cuda/libs/cusolver.pyx", line 1258, in cupy_backends.cuda.libs.cusolver.cpotrs
E       check_status(status)
E     File "cupy_backends/cuda/libs/cusolver.pyx", line 1051, in cupy_backends.cuda.libs.cusolver.check_status
E       raise CUSOLVERError(status)
E   cupy_backends.cuda.libs.cusolver.CUSOLVERError: rocblas_status_not_implemented

cupy_backends/cuda/libs/cusolver.pyx:1051: AssertionError
_____________ TestInvh_param_9_{dtype=complex64, size=9}.test_invh _____________

self = <<cupyx_tests.linalg_tests.test_solve.TestInvh_param_9_{dtype=complex64, size=9} testMethod=test_invh>  parameter: {'dtype': <class 'numpy.complex64'>, 'size': 9}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupy/__init__.py'>

    @testing.numpy_cupy_allclose(atol=1e-5)
    def test_invh(self, xp):
        a = self._create_symmetric_matrix(xp, self.size, self.dtype)
        if xp == cupy:
>           return cupyx.linalg.invh(a)

tests/cupyx_tests/linalg_tests/test_solve.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupyx/linalg/_solve.py:31: in invh
    return lapack.posv(a, b)
cupyx/lapack.py:335: in posv
    potrs(handle, uplo, n, nrhs, a.data.ptr, lda, b.data.ptr, ldb,
cupy_backends/cuda/libs/cusolver.pyx:1250: in cupy_backends.cuda.libs.cusolver.cpotrs
    cpdef cpotrs(intptr_t handle, int uplo, int n, int nrhs,
cupy_backends/cuda/libs/cusolver.pyx:1258: in cupy_backends.cuda.libs.cusolver.cpotrs
    check_status(status)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise CUSOLVERError(status)
E   AssertionError: Only cupy raises error
E   
E   Traceback (most recent call last):
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupy/testing/helper.py", line 47, in _call_func
E       result = impl(self, *args, **kw)
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/tests/cupyx_tests/linalg_tests/test_solve.py", line 23, in test_invh
E       return cupyx.linalg.invh(a)
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupyx/linalg/_solve.py", line 31, in invh
E       return lapack.posv(a, b)
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupyx/lapack.py", line 335, in posv
E       potrs(handle, uplo, n, nrhs, a.data.ptr, lda, b.data.ptr, ldb,
E     File "cupy_backends/cuda/libs/cusolver.pyx", line 1250, in cupy_backends.cuda.libs.cusolver.cpotrs
E       cpdef cpotrs(intptr_t handle, int uplo, int n, int nrhs,
E     File "cupy_backends/cuda/libs/cusolver.pyx", line 1258, in cupy_backends.cuda.libs.cusolver.cpotrs
E       check_status(status)
E     File "cupy_backends/cuda/libs/cusolver.pyx", line 1051, in cupy_backends.cuda.libs.cusolver.check_status
E       raise CUSOLVERError(status)
E   cupy_backends.cuda.libs.cusolver.CUSOLVERError: rocblas_status_not_implemented

cupy_backends/cuda/libs/cusolver.pyx:1051: AssertionError
____________ TestInvh_param_10_{dtype=complex64, size=17}.test_invh ____________

self = <<cupyx_tests.linalg_tests.test_solve.TestInvh_param_10_{dtype=complex64, size=17} testMethod=test_invh>  parameter: {'dtype': <class 'numpy.complex64'>, 'size': 17}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupy/__init__.py'>

    @testing.numpy_cupy_allclose(atol=1e-5)
    def test_invh(self, xp):
        a = self._create_symmetric_matrix(xp, self.size, self.dtype)
        if xp == cupy:
>           return cupyx.linalg.invh(a)

tests/cupyx_tests/linalg_tests/test_solve.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupyx/linalg/_solve.py:31: in invh
    return lapack.posv(a, b)
cupyx/lapack.py:335: in posv
    potrs(handle, uplo, n, nrhs, a.data.ptr, lda, b.data.ptr, ldb,
cupy_backends/cuda/libs/cusolver.pyx:1250: in cupy_backends.cuda.libs.cusolver.cpotrs
    cpdef cpotrs(intptr_t handle, int uplo, int n, int nrhs,
cupy_backends/cuda/libs/cusolver.pyx:1258: in cupy_backends.cuda.libs.cusolver.cpotrs
    check_status(status)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise CUSOLVERError(status)
E   AssertionError: Only cupy raises error
E   
E   Traceback (most recent call last):
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupy/testing/helper.py", line 47, in _call_func
E       result = impl(self, *args, **kw)
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/tests/cupyx_tests/linalg_tests/test_solve.py", line 23, in test_invh
E       return cupyx.linalg.invh(a)
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupyx/linalg/_solve.py", line 31, in invh
E       return lapack.posv(a, b)
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupyx/lapack.py", line 335, in posv
E       potrs(handle, uplo, n, nrhs, a.data.ptr, lda, b.data.ptr, ldb,
E     File "cupy_backends/cuda/libs/cusolver.pyx", line 1250, in cupy_backends.cuda.libs.cusolver.cpotrs
E       cpdef cpotrs(intptr_t handle, int uplo, int n, int nrhs,
E     File "cupy_backends/cuda/libs/cusolver.pyx", line 1258, in cupy_backends.cuda.libs.cusolver.cpotrs
E       check_status(status)
E     File "cupy_backends/cuda/libs/cusolver.pyx", line 1051, in cupy_backends.cuda.libs.cusolver.check_status
E       raise CUSOLVERError(status)
E   cupy_backends.cuda.libs.cusolver.CUSOLVERError: rocblas_status_not_implemented

cupy_backends/cuda/libs/cusolver.pyx:1051: AssertionError
____________ TestInvh_param_11_{dtype=complex64, size=33}.test_invh ____________

self = <<cupyx_tests.linalg_tests.test_solve.TestInvh_param_11_{dtype=complex64, size=33} testMethod=test_invh>  parameter: {'dtype': <class 'numpy.complex64'>, 'size': 33}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupy/__init__.py'>

    @testing.numpy_cupy_allclose(atol=1e-5)
    def test_invh(self, xp):
        a = self._create_symmetric_matrix(xp, self.size, self.dtype)
        if xp == cupy:
>           return cupyx.linalg.invh(a)

tests/cupyx_tests/linalg_tests/test_solve.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupyx/linalg/_solve.py:31: in invh
    return lapack.posv(a, b)
cupyx/lapack.py:335: in posv
    potrs(handle, uplo, n, nrhs, a.data.ptr, lda, b.data.ptr, ldb,
cupy_backends/cuda/libs/cusolver.pyx:1250: in cupy_backends.cuda.libs.cusolver.cpotrs
    cpdef cpotrs(intptr_t handle, int uplo, int n, int nrhs,
cupy_backends/cuda/libs/cusolver.pyx:1258: in cupy_backends.cuda.libs.cusolver.cpotrs
    check_status(status)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise CUSOLVERError(status)
E   AssertionError: Only cupy raises error
E   
E   Traceback (most recent call last):
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupy/testing/helper.py", line 47, in _call_func
E       result = impl(self, *args, **kw)
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/tests/cupyx_tests/linalg_tests/test_solve.py", line 23, in test_invh
E       return cupyx.linalg.invh(a)
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupyx/linalg/_solve.py", line 31, in invh
E       return lapack.posv(a, b)
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupyx/lapack.py", line 335, in posv
E       potrs(handle, uplo, n, nrhs, a.data.ptr, lda, b.data.ptr, ldb,
E     File "cupy_backends/cuda/libs/cusolver.pyx", line 1250, in cupy_backends.cuda.libs.cusolver.cpotrs
E       cpdef cpotrs(intptr_t handle, int uplo, int n, int nrhs,
E     File "cupy_backends/cuda/libs/cusolver.pyx", line 1258, in cupy_backends.cuda.libs.cusolver.cpotrs
E       check_status(status)
E     File "cupy_backends/cuda/libs/cusolver.pyx", line 1051, in cupy_backends.cuda.libs.cusolver.check_status
E       raise CUSOLVERError(status)
E   cupy_backends.cuda.libs.cusolver.CUSOLVERError: rocblas_status_not_implemented

cupy_backends/cuda/libs/cusolver.pyx:1051: AssertionError
____________ TestInvh_param_12_{dtype=complex128, size=5}.test_invh ____________

self = <<cupyx_tests.linalg_tests.test_solve.TestInvh_param_12_{dtype=complex128, size=5} testMethod=test_invh>  parameter: {'dtype': <class 'numpy.complex128'>, 'size': 5}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupy/__init__.py'>

    @testing.numpy_cupy_allclose(atol=1e-5)
    def test_invh(self, xp):
        a = self._create_symmetric_matrix(xp, self.size, self.dtype)
        if xp == cupy:
>           return cupyx.linalg.invh(a)

tests/cupyx_tests/linalg_tests/test_solve.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupyx/linalg/_solve.py:31: in invh
    return lapack.posv(a, b)
cupyx/lapack.py:335: in posv
    potrs(handle, uplo, n, nrhs, a.data.ptr, lda, b.data.ptr, ldb,
cupy_backends/cuda/libs/cusolver.pyx:1260: in cupy_backends.cuda.libs.cusolver.zpotrs
    cpdef zpotrs(intptr_t handle, int uplo, int n, int nrhs,
cupy_backends/cuda/libs/cusolver.pyx:1268: in cupy_backends.cuda.libs.cusolver.zpotrs
    check_status(status)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise CUSOLVERError(status)
E   AssertionError: Only cupy raises error
E   
E   Traceback (most recent call last):
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupy/testing/helper.py", line 47, in _call_func
E       result = impl(self, *args, **kw)
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/tests/cupyx_tests/linalg_tests/test_solve.py", line 23, in test_invh
E       return cupyx.linalg.invh(a)
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupyx/linalg/_solve.py", line 31, in invh
E       return lapack.posv(a, b)
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupyx/lapack.py", line 335, in posv
E       potrs(handle, uplo, n, nrhs, a.data.ptr, lda, b.data.ptr, ldb,
E     File "cupy_backends/cuda/libs/cusolver.pyx", line 1260, in cupy_backends.cuda.libs.cusolver.zpotrs
E       cpdef zpotrs(intptr_t handle, int uplo, int n, int nrhs,
E     File "cupy_backends/cuda/libs/cusolver.pyx", line 1268, in cupy_backends.cuda.libs.cusolver.zpotrs
E       check_status(status)
E     File "cupy_backends/cuda/libs/cusolver.pyx", line 1051, in cupy_backends.cuda.libs.cusolver.check_status
E       raise CUSOLVERError(status)
E   cupy_backends.cuda.libs.cusolver.CUSOLVERError: rocblas_status_not_implemented

cupy_backends/cuda/libs/cusolver.pyx:1051: AssertionError
____________ TestInvh_param_13_{dtype=complex128, size=9}.test_invh ____________

self = <<cupyx_tests.linalg_tests.test_solve.TestInvh_param_13_{dtype=complex128, size=9} testMethod=test_invh>  parameter: {'dtype': <class 'numpy.complex128'>, 'size': 9}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupy/__init__.py'>

    @testing.numpy_cupy_allclose(atol=1e-5)
    def test_invh(self, xp):
        a = self._create_symmetric_matrix(xp, self.size, self.dtype)
        if xp == cupy:
>           return cupyx.linalg.invh(a)

tests/cupyx_tests/linalg_tests/test_solve.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupyx/linalg/_solve.py:31: in invh
    return lapack.posv(a, b)
cupyx/lapack.py:335: in posv
    potrs(handle, uplo, n, nrhs, a.data.ptr, lda, b.data.ptr, ldb,
cupy_backends/cuda/libs/cusolver.pyx:1260: in cupy_backends.cuda.libs.cusolver.zpotrs
    cpdef zpotrs(intptr_t handle, int uplo, int n, int nrhs,
cupy_backends/cuda/libs/cusolver.pyx:1268: in cupy_backends.cuda.libs.cusolver.zpotrs
    check_status(status)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise CUSOLVERError(status)
E   AssertionError: Only cupy raises error
E   
E   Traceback (most recent call last):
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupy/testing/helper.py", line 47, in _call_func
E       result = impl(self, *args, **kw)
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/tests/cupyx_tests/linalg_tests/test_solve.py", line 23, in test_invh
E       return cupyx.linalg.invh(a)
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupyx/linalg/_solve.py", line 31, in invh
E       return lapack.posv(a, b)
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupyx/lapack.py", line 335, in posv
E       potrs(handle, uplo, n, nrhs, a.data.ptr, lda, b.data.ptr, ldb,
E     File "cupy_backends/cuda/libs/cusolver.pyx", line 1260, in cupy_backends.cuda.libs.cusolver.zpotrs
E       cpdef zpotrs(intptr_t handle, int uplo, int n, int nrhs,
E     File "cupy_backends/cuda/libs/cusolver.pyx", line 1268, in cupy_backends.cuda.libs.cusolver.zpotrs
E       check_status(status)
E     File "cupy_backends/cuda/libs/cusolver.pyx", line 1051, in cupy_backends.cuda.libs.cusolver.check_status
E       raise CUSOLVERError(status)
E   cupy_backends.cuda.libs.cusolver.CUSOLVERError: rocblas_status_not_implemented

cupy_backends/cuda/libs/cusolver.pyx:1051: AssertionError
___________ TestInvh_param_14_{dtype=complex128, size=17}.test_invh ____________

self = <<cupyx_tests.linalg_tests.test_solve.TestInvh_param_14_{dtype=complex128, size=17} testMethod=test_invh>  parameter: {'dtype': <class 'numpy.complex128'>, 'size': 17}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupy/__init__.py'>

    @testing.numpy_cupy_allclose(atol=1e-5)
    def test_invh(self, xp):
        a = self._create_symmetric_matrix(xp, self.size, self.dtype)
        if xp == cupy:
>           return cupyx.linalg.invh(a)

tests/cupyx_tests/linalg_tests/test_solve.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupyx/linalg/_solve.py:31: in invh
    return lapack.posv(a, b)
cupyx/lapack.py:335: in posv
    potrs(handle, uplo, n, nrhs, a.data.ptr, lda, b.data.ptr, ldb,
cupy_backends/cuda/libs/cusolver.pyx:1260: in cupy_backends.cuda.libs.cusolver.zpotrs
    cpdef zpotrs(intptr_t handle, int uplo, int n, int nrhs,
cupy_backends/cuda/libs/cusolver.pyx:1268: in cupy_backends.cuda.libs.cusolver.zpotrs
    check_status(status)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise CUSOLVERError(status)
E   AssertionError: Only cupy raises error
E   
E   Traceback (most recent call last):
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupy/testing/helper.py", line 47, in _call_func
E       result = impl(self, *args, **kw)
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/tests/cupyx_tests/linalg_tests/test_solve.py", line 23, in test_invh
E       return cupyx.linalg.invh(a)
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupyx/linalg/_solve.py", line 31, in invh
E       return lapack.posv(a, b)
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupyx/lapack.py", line 335, in posv
E       potrs(handle, uplo, n, nrhs, a.data.ptr, lda, b.data.ptr, ldb,
E     File "cupy_backends/cuda/libs/cusolver.pyx", line 1260, in cupy_backends.cuda.libs.cusolver.zpotrs
E       cpdef zpotrs(intptr_t handle, int uplo, int n, int nrhs,
E     File "cupy_backends/cuda/libs/cusolver.pyx", line 1268, in cupy_backends.cuda.libs.cusolver.zpotrs
E       check_status(status)
E     File "cupy_backends/cuda/libs/cusolver.pyx", line 1051, in cupy_backends.cuda.libs.cusolver.check_status
E       raise CUSOLVERError(status)
E   cupy_backends.cuda.libs.cusolver.CUSOLVERError: rocblas_status_not_implemented

cupy_backends/cuda/libs/cusolver.pyx:1051: AssertionError
___________ TestInvh_param_15_{dtype=complex128, size=33}.test_invh ____________

self = <<cupyx_tests.linalg_tests.test_solve.TestInvh_param_15_{dtype=complex128, size=33} testMethod=test_invh>  parameter: {'dtype': <class 'numpy.complex128'>, 'size': 33}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupy/__init__.py'>

    @testing.numpy_cupy_allclose(atol=1e-5)
    def test_invh(self, xp):
        a = self._create_symmetric_matrix(xp, self.size, self.dtype)
        if xp == cupy:
>           return cupyx.linalg.invh(a)

tests/cupyx_tests/linalg_tests/test_solve.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupyx/linalg/_solve.py:31: in invh
    return lapack.posv(a, b)
cupyx/lapack.py:335: in posv
    potrs(handle, uplo, n, nrhs, a.data.ptr, lda, b.data.ptr, ldb,
cupy_backends/cuda/libs/cusolver.pyx:1260: in cupy_backends.cuda.libs.cusolver.zpotrs
    cpdef zpotrs(intptr_t handle, int uplo, int n, int nrhs,
cupy_backends/cuda/libs/cusolver.pyx:1268: in cupy_backends.cuda.libs.cusolver.zpotrs
    check_status(status)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise CUSOLVERError(status)
E   AssertionError: Only cupy raises error
E   
E   Traceback (most recent call last):
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupy/testing/helper.py", line 47, in _call_func
E       result = impl(self, *args, **kw)
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/tests/cupyx_tests/linalg_tests/test_solve.py", line 23, in test_invh
E       return cupyx.linalg.invh(a)
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupyx/linalg/_solve.py", line 31, in invh
E       return lapack.posv(a, b)
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupyx/lapack.py", line 335, in posv
E       potrs(handle, uplo, n, nrhs, a.data.ptr, lda, b.data.ptr, ldb,
E     File "cupy_backends/cuda/libs/cusolver.pyx", line 1260, in cupy_backends.cuda.libs.cusolver.zpotrs
E       cpdef zpotrs(intptr_t handle, int uplo, int n, int nrhs,
E     File "cupy_backends/cuda/libs/cusolver.pyx", line 1268, in cupy_backends.cuda.libs.cusolver.zpotrs
E       check_status(status)
E     File "cupy_backends/cuda/libs/cusolver.pyx", line 1051, in cupy_backends.cuda.libs.cusolver.check_status
E       raise CUSOLVERError(status)
E   cupy_backends.cuda.libs.cusolver.CUSOLVERError: rocblas_status_not_implemented

cupy_backends/cuda/libs/cusolver.pyx:1051: AssertionError
_______________________ TestMonteCarlo.test_monte_carlo ________________________

self = <example_tests.test_finance.TestMonteCarlo testMethod=test_monte_carlo>

    def test_monte_carlo(self):
>       output = example_test.run_example(
            'finance/monte_carlo.py', '--n-options', '10',
            '--n-samples-per-thread', '10',
            '--n-threads-per-option', '10')

tests/example_tests/test_finance.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/example_tests/example_test.py:12: in run_example
    return subprocess.check_output(
/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/subprocess.py:411: in check_output
    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input = None, capture_output = False, timeout = None, check = True
popenargs = (('/home/kmaeh/.pyenv/versions/rocm-ci/bin/python', '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/...tests/example_tests/../../examples/finance/monte_carlo.py', '--n-options', '10', '--n-samples-per-thread', '10', ...),)
kwargs = {'stderr': -2, 'stdout': -1}
process = <subprocess.Popen object at 0x7fde2ffca5b0>
stdout = b'initializing...\nstart computation\n    # of options: 10\n    # of samples per option: 100\nTraceback (most recent c...r generated when compiling for gfx906.\nError: Failed to compile opencl source (from CL or HIP source to LLVM IR).\n\n'
stderr = None, retcode = 1

    def run(*popenargs,
            input=None, capture_output=False, timeout=None, check=False, **kwargs):
        """Run command with arguments and return a CompletedProcess instance.
    
        The returned instance will have attributes args, returncode, stdout and
        stderr. By default, stdout and stderr are not captured, and those attributes
        will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.
    
        If check is True and the exit code was non-zero, it raises a
        CalledProcessError. The CalledProcessError object will have the return code
        in the returncode attribute, and output & stderr attributes if those streams
        were captured.
    
        If timeout is given, and the process takes too long, a TimeoutExpired
        exception will be raised.
    
        There is an optional argument "input", allowing you to
        pass bytes or a string to the subprocess's stdin.  If you use this argument
        you may not also use the Popen constructor's "stdin" argument, as
        it will be used internally.
    
        By default, all communication is in bytes, and therefore any "input" should
        be bytes, and the stdout and stderr will be bytes. If in text mode, any
        "input" should be a string, and stdout and stderr will be strings decoded
        according to locale encoding, or by "encoding" if set. Text mode is
        triggered by setting any of text, encoding, errors or universal_newlines.
    
        The other arguments are the same as for the Popen constructor.
        """
        if input is not None:
            if kwargs.get('stdin') is not None:
                raise ValueError('stdin and input arguments may not both be used.')
            kwargs['stdin'] = PIPE
    
        if capture_output:
            if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:
                raise ValueError('stdout and stderr arguments may not be used '
                                 'with capture_output.')
            kwargs['stdout'] = PIPE
            kwargs['stderr'] = PIPE
    
        with Popen(*popenargs, **kwargs) as process:
            try:
                stdout, stderr = process.communicate(input, timeout=timeout)
            except TimeoutExpired as exc:
                process.kill()
                if _mswindows:
                    # Windows accumulates the output in a single blocking
                    # read() call run on child threads, with the timeout
                    # being done in a join() on those threads.  communicate()
                    # _after_ kill() is required to collect that and add it
                    # to the exception.
                    exc.stdout, exc.stderr = process.communicate()
                else:
                    # POSIX _communicate already populated the output so
                    # far into the TimeoutExpired exception.
                    process.wait()
                raise
            except:  # Including KeyboardInterrupt, communicate handled that.
                process.kill()
                # We don't call process.wait() as .__exit__ does that for us.
                raise
            retcode = process.poll()
            if check and retcode:
>               raise CalledProcessError(retcode, process.args,
                                         output=stdout, stderr=stderr)
E               subprocess.CalledProcessError: Command '('/home/kmaeh/.pyenv/versions/rocm-ci/bin/python', '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/tests/example_tests/../../examples/finance/monte_carlo.py', '--n-options', '10', '--n-samples-per-thread', '10', '--n-threads-per-option', '10')' returned non-zero exit status 1.

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/subprocess.py:512: CalledProcessError
----------------------------- Captured stdout call -----------------------------
Original error message:
initializing...
start computation
    # of options: 10
    # of samples per option: 100
Traceback (most recent call last):
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupy/cuda/compiler.py", line 625, in compile
    nvrtc.compileProgram(self.ptr, options)
  File "cupy_backends/cuda/libs/nvrtc.pyx", line 116, in cupy_backends.cuda.libs.nvrtc.compileProgram
    cpdef compileProgram(intptr_t prog, options):
  File "cupy_backends/cuda/libs/nvrtc.pyx", line 128, in cupy_backends.cuda.libs.nvrtc.compileProgram
    check_status(status)
  File "cupy_backends/cuda/libs/nvrtc.pyx", line 62, in cupy_backends.cuda.libs.nvrtc.check_status
    raise NVRTCError(status)
cupy_backends.cuda.libs.nvrtc.NVRTCError: HIPRTC_ERROR_COMPILATION (6)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/tests/example_tests/../../examples/finance/monte_carlo.py", line 159, in <module>
    sys.exit(main())
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/tests/example_tests/../../examples/finance/monte_carlo.py", line 145, in main
    call_mc = compute_option_prices(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/tests/example_tests/../../examples/finance/monte_carlo.py", line 104, in compute_option_prices
    monte_carlo_kernel(
  File "cupy/core/_kernel.pyx", line 840, in cupy.core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
  File "cupy/core/_kernel.pyx", line 865, in cupy.core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/core/_kernel.pyx", line 652, in cupy.core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
  File "cupy/core/_kernel.pyx", line 38, in cupy.core._kernel._get_simple_elementwise_kernel
    cpdef function.Function _get_simple_elementwise_kernel(
  File "cupy/core/_kernel.pyx", line 61, in cupy.core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
  File "cupy/core/core.pyx", line 2019, in cupy.core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupy/cuda/compiler.py", line 430, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupy/cuda/compiler.py", line 814, in _compile_with_cache_hip
    binary, mapping = compile_using_nvrtc(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupy/cuda/compiler.py", line 273, in compile_using_nvrtc
    return _compile(source, options, cu_path,
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupy/cuda/compiler.py", line 257, in _compile
    ptx, mapping = prog.compile(options, log_stream)
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupy/cuda/compiler.py", line 637, in compile
    raise CompileException(log, self.src, self.name, options,
cupy.cuda.compiler.CompileException: /tmp/comgr-b2f694/input/CompileSource:5358:32: error: typedef redefinition with different types ('unsigned long long' vs '__uint64_t' (aka 'unsigned long'))
    typedef unsigned long long uint64_t;
                               ^
/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h:27:20: note: previous definition is here
typedef __uint64_t uint64_t;
                   ^
/tmp/comgr-b2f694/input/CompileSource:5388:25: warning: integer literal is too large to be represented in a signed integer type, interpreting as unsigned [-Wimplicitly-unsigned-literal]
        return T(x) / T(18446744073709551615);
                        ^
1 warning and 1 error generated when compiling for gfx906.
Error: Failed to compile opencl source (from CL or HIP source to LLVM IR).


_____________ TestMonteCarloWithMultiGPU.test_monte_carlo_multigpu _____________

self = <example_tests.test_finance.TestMonteCarloWithMultiGPU testMethod=test_monte_carlo_multigpu>

    @testing.multi_gpu(2)
    def test_monte_carlo_multigpu(self):
>       output = example_test.run_example(
            'finance/monte_carlo_multigpu.py', '--gpus', '0', '1',
            '--n-options', '10',
            '--n-samples-per-thread', '10',
            '--n-threads-per-option', '10')

tests/example_tests/test_finance.py:49: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/example_tests/example_test.py:12: in run_example
    return subprocess.check_output(
/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/subprocess.py:411: in check_output
    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input = None, capture_output = False, timeout = None, check = True
popenargs = (('/home/kmaeh/.pyenv/versions/rocm-ci/bin/python', '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/tests/example_tests/../../examples/finance/monte_carlo_multigpu.py', '--gpus', '0', '1', '--n-options', ...),)
kwargs = {'stderr': -2, 'stdout': -1}
process = <subprocess.Popen object at 0x7fde504c3310>
stdout = b'initializing...\nstart computation\n    # of gpus: 2\n    # of options: 10\n    # of samples per option: 200\nTraceb...r generated when compiling for gfx906.\nError: Failed to compile opencl source (from CL or HIP source to LLVM IR).\n\n'
stderr = None, retcode = 1

    def run(*popenargs,
            input=None, capture_output=False, timeout=None, check=False, **kwargs):
        """Run command with arguments and return a CompletedProcess instance.
    
        The returned instance will have attributes args, returncode, stdout and
        stderr. By default, stdout and stderr are not captured, and those attributes
        will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.
    
        If check is True and the exit code was non-zero, it raises a
        CalledProcessError. The CalledProcessError object will have the return code
        in the returncode attribute, and output & stderr attributes if those streams
        were captured.
    
        If timeout is given, and the process takes too long, a TimeoutExpired
        exception will be raised.
    
        There is an optional argument "input", allowing you to
        pass bytes or a string to the subprocess's stdin.  If you use this argument
        you may not also use the Popen constructor's "stdin" argument, as
        it will be used internally.
    
        By default, all communication is in bytes, and therefore any "input" should
        be bytes, and the stdout and stderr will be bytes. If in text mode, any
        "input" should be a string, and stdout and stderr will be strings decoded
        according to locale encoding, or by "encoding" if set. Text mode is
        triggered by setting any of text, encoding, errors or universal_newlines.
    
        The other arguments are the same as for the Popen constructor.
        """
        if input is not None:
            if kwargs.get('stdin') is not None:
                raise ValueError('stdin and input arguments may not both be used.')
            kwargs['stdin'] = PIPE
    
        if capture_output:
            if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:
                raise ValueError('stdout and stderr arguments may not be used '
                                 'with capture_output.')
            kwargs['stdout'] = PIPE
            kwargs['stderr'] = PIPE
    
        with Popen(*popenargs, **kwargs) as process:
            try:
                stdout, stderr = process.communicate(input, timeout=timeout)
            except TimeoutExpired as exc:
                process.kill()
                if _mswindows:
                    # Windows accumulates the output in a single blocking
                    # read() call run on child threads, with the timeout
                    # being done in a join() on those threads.  communicate()
                    # _after_ kill() is required to collect that and add it
                    # to the exception.
                    exc.stdout, exc.stderr = process.communicate()
                else:
                    # POSIX _communicate already populated the output so
                    # far into the TimeoutExpired exception.
                    process.wait()
                raise
            except:  # Including KeyboardInterrupt, communicate handled that.
                process.kill()
                # We don't call process.wait() as .__exit__ does that for us.
                raise
            retcode = process.poll()
            if check and retcode:
>               raise CalledProcessError(retcode, process.args,
                                         output=stdout, stderr=stderr)
E               subprocess.CalledProcessError: Command '('/home/kmaeh/.pyenv/versions/rocm-ci/bin/python', '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/tests/example_tests/../../examples/finance/monte_carlo_multigpu.py', '--gpus', '0', '1', '--n-options', '10', '--n-samples-per-thread', '10', '--n-threads-per-option', '10')' returned non-zero exit status 1.

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/subprocess.py:512: CalledProcessError
----------------------------- Captured stdout call -----------------------------
Original error message:
initializing...
start computation
    # of gpus: 2
    # of options: 10
    # of samples per option: 200
Traceback (most recent call last):
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupy/cuda/compiler.py", line 625, in compile
    nvrtc.compileProgram(self.ptr, options)
  File "cupy_backends/cuda/libs/nvrtc.pyx", line 116, in cupy_backends.cuda.libs.nvrtc.compileProgram
    cpdef compileProgram(intptr_t prog, options):
  File "cupy_backends/cuda/libs/nvrtc.pyx", line 128, in cupy_backends.cuda.libs.nvrtc.compileProgram
    check_status(status)
  File "cupy_backends/cuda/libs/nvrtc.pyx", line 62, in cupy_backends.cuda.libs.nvrtc.check_status
    raise NVRTCError(status)
cupy_backends.cuda.libs.nvrtc.NVRTCError: HIPRTC_ERROR_COMPILATION (6)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/tests/example_tests/../../examples/finance/monte_carlo_multigpu.py", line 74, in <module>
    monte_carlo_kernel(
  File "cupy/core/_kernel.pyx", line 840, in cupy.core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
  File "cupy/core/_kernel.pyx", line 865, in cupy.core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/core/_kernel.pyx", line 652, in cupy.core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
  File "cupy/core/_kernel.pyx", line 38, in cupy.core._kernel._get_simple_elementwise_kernel
    cpdef function.Function _get_simple_elementwise_kernel(
  File "cupy/core/_kernel.pyx", line 61, in cupy.core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
  File "cupy/core/core.pyx", line 2019, in cupy.core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupy/cuda/compiler.py", line 430, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupy/cuda/compiler.py", line 814, in _compile_with_cache_hip
    binary, mapping = compile_using_nvrtc(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupy/cuda/compiler.py", line 273, in compile_using_nvrtc
    return _compile(source, options, cu_path,
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupy/cuda/compiler.py", line 257, in _compile
    ptx, mapping = prog.compile(options, log_stream)
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/cupy/cuda/compiler.py", line 637, in compile
    raise CompileException(log, self.src, self.name, options,
cupy.cuda.compiler.CompileException: /tmp/comgr-b778f7/input/CompileSource:5358:32: error: typedef redefinition with different types ('unsigned long long' vs '__uint64_t' (aka 'unsigned long'))
    typedef unsigned long long uint64_t;
                               ^
/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h:27:20: note: previous definition is here
typedef __uint64_t uint64_t;
                   ^
/tmp/comgr-b778f7/input/CompileSource:5388:25: warning: integer literal is too large to be represented in a signed integer type, interpreting as unsigned [-Wimplicitly-unsigned-literal]
        return T(x) / T(18446744073709551615);
                        ^
1 warning and 1 error generated when compiling for gfx906.
Error: Failed to compile opencl source (from CL or HIP source to LLVM IR).


___________________ TestCheckVersion.test_check_cuda_version ___________________

self = <install_tests.test_build.TestCheckVersion testMethod=test_check_cuda_version>

    @pytest.mark.gpu
    def test_check_cuda_version(self):
        with self.assertRaises(RuntimeError):
            build.get_cuda_version()
>       assert build.check_cuda_version(
            self.compiler, self.settings)
E       AssertionError: assert False
E        +  where False = <function check_cuda_version at 0x7fdf0cfc7ee0>(<distutils.unixccompiler.UnixCCompiler object at 0x7fde507eb820>, {'define_macros': [], 'extra_compile_args': [], 'include_dirs': ['/home/kmaeh/Development/cupy-rocm-ci-report/tools/tm...kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/install/../cupy/core/include'], 'language': 'c++', ...})
E        +    where <function check_cuda_version at 0x7fdf0cfc7ee0> = build.check_cuda_version
E        +    and   <distutils.unixccompiler.UnixCCompiler object at 0x7fde507eb820> = <install_tests.test_build.TestCheckVersion testMethod=test_check_cuda_version>.compiler
E        +    and   {'define_macros': [], 'extra_compile_args': [], 'include_dirs': ['/home/kmaeh/Development/cupy-rocm-ci-report/tools/tm...kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/install/../cupy/core/include'], 'language': 'c++', ...} = <install_tests.test_build.TestCheckVersion testMethod=test_check_cuda_version>.settings

tests/install_tests/test_build.py:21: AssertionError
----------------------------- Captured stdout call -----------------------------
**************************************************
*** WARNING: Cannot check CUDA version
*** WARNING: command 'gcc' failed with exit status 1
**************************************************
----------------------------- Captured stderr call -----------------------------
/tmp/tmplih8myih/a.cpp:2:18: fatal error: cuda.h: No such file or directory
         #include <cuda.h>
                  ^~~~~~~~
compilation terminated.
__________________ TestCheckVersion.test_check_cudnn_version ___________________

self = <install_tests.test_build.TestCheckVersion testMethod=test_check_cudnn_version>

    @pytest.mark.gpu
    @pytest.mark.cudnn
    def test_check_cudnn_version(self):
        with self.assertRaises(RuntimeError):
            build.get_cudnn_version()
>       assert build.check_cudnn_version(
            self.compiler, self.settings)
E       AssertionError: assert False
E        +  where False = <function check_cudnn_version at 0x7fdf0cfcd3a0>(<distutils.unixccompiler.UnixCCompiler object at 0x7fde2ffcac10>, {'define_macros': [], 'extra_compile_args': [], 'include_dirs': ['/home/kmaeh/Development/cupy-rocm-ci-report/tools/tm...kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/install/../cupy/core/include'], 'language': 'c++', ...})
E        +    where <function check_cudnn_version at 0x7fdf0cfcd3a0> = build.check_cudnn_version
E        +    and   <distutils.unixccompiler.UnixCCompiler object at 0x7fde2ffcac10> = <install_tests.test_build.TestCheckVersion testMethod=test_check_cudnn_version>.compiler
E        +    and   {'define_macros': [], 'extra_compile_args': [], 'include_dirs': ['/home/kmaeh/Development/cupy-rocm-ci-report/tools/tm...kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/install/../cupy/core/include'], 'language': 'c++', ...} = <install_tests.test_build.TestCheckVersion testMethod=test_check_cudnn_version>.settings

tests/install_tests/test_build.py:31: AssertionError
----------------------------- Captured stdout call -----------------------------
**************************************************
*** WARNING: Cannot check cuDNN version
command 'gcc' failed with exit status 1
**************************************************
----------------------------- Captured stderr call -----------------------------
/tmp/tmpcvxvd74w/a.cpp:2:18: fatal error: cudnn.h: No such file or directory
         #include <cudnn.h>
                  ^~~~~~~~~
compilation terminated.
=============================== warnings summary ===============================
tests/cupy_tests/core_tests/fusion_tests/test_array.py: 1 warning
tests/cupy_tests/math_tests/test_sumprod.py: 19 warnings
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/core/_methods.py:51: RuntimeWarning: overflow encountered in reduce
    return umr_prod(a, axis, dtype, out, keepdims, initial, where)

tests/cupy_tests/core_tests/fusion_tests/test_routines.py::TestFusionNumericalReduction_param_1_{func='prod'}::test_reduction
tests/cupy_tests/math_tests/test_sumprod.py::TestNansumNanprodLong_param_11_{axis=0, func='nanprod', keepdims=True, shape=(20, 30, 40), transpose_axes=False}::test_nansum_all
tests/cupy_tests/math_tests/test_sumprod.py::TestNansumNanprodLong_param_11_{axis=0, func='nanprod', keepdims=True, shape=(20, 30, 40), transpose_axes=False}::test_nansum_axis_transposed
tests/cupy_tests/math_tests/test_sumprod.py::TestNansumNanprodLong_param_15_{axis=0, func='nanprod', keepdims=False, shape=(20, 30, 40), transpose_axes=False}::test_nansum_all
tests/cupy_tests/math_tests/test_sumprod.py::TestNansumNanprodLong_param_15_{axis=0, func='nanprod', keepdims=False, shape=(20, 30, 40), transpose_axes=False}::test_nansum_axis_transposed
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/core/fromnumeric.py:87: RuntimeWarning: overflow encountered in reduce
    return ufunc.reduce(obj, axis, dtype, out, **passkwargs)

tests/cupy_tests/functional_tests/test_vectorize.py::TestVectorize::test_vectorize_arithmetic_ops
  /home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/tests/cupy_tests/functional_tests/test_vectorize.py:458: RuntimeWarning: overflow encountered in byte_scalars
    y = x1 + x2 * x3 ** x1

tests/cupy_tests/functional_tests/test_vectorize.py::TestVectorize::test_vectorize_arithmetic_ops
  /home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/tests/cupy_tests/functional_tests/test_vectorize.py:458: RuntimeWarning: overflow encountered in ubyte_scalars
    y = x1 + x2 * x3 ** x1

tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyval_param_0_{type_l='poly1d', type_r='ndarray'}::test_polyval
tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyval_param_3_{type_l='ndarray', type_r='ndarray'}::test_polyval
tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyvalDtypesCombination::test_polyval_diff_types_array_array
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/lib/polynomial.py:734: RuntimeWarning: overflow encountered in multiply
    y = y * x + p[i]

tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyval_param_1_{type_l='poly1d', type_r='numpy_scalar'}::test_polyval
tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyval_param_4_{type_l='ndarray', type_r='numpy_scalar'}::test_polyval
tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyvalDtypesCombination::test_polyval_diff_types_array_scalar
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/lib/polynomial.py:734: RuntimeWarning: overflow encountered in half_scalars
    y = y * x + p[i]

tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyval_param_1_{type_l='poly1d', type_r='numpy_scalar'}::test_polyval
tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyval_param_4_{type_l='ndarray', type_r='numpy_scalar'}::test_polyval
tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyvalDtypesCombination::test_polyval_diff_types_array_scalar
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/lib/polynomial.py:734: RuntimeWarning: overflow encountered in byte_scalars
    y = y * x + p[i]

tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyval_param_1_{type_l='poly1d', type_r='numpy_scalar'}::test_polyval
tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyval_param_4_{type_l='ndarray', type_r='numpy_scalar'}::test_polyval
tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyvalDtypesCombination::test_polyval_diff_types_array_scalar
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/lib/polynomial.py:734: RuntimeWarning: overflow encountered in short_scalars
    y = y * x + p[i]

tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyval_param_1_{type_l='poly1d', type_r='numpy_scalar'}::test_polyval
tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyval_param_4_{type_l='ndarray', type_r='numpy_scalar'}::test_polyval
tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyvalDtypesCombination::test_polyval_diff_types_array_scalar
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/lib/polynomial.py:734: RuntimeWarning: overflow encountered in ubyte_scalars
    y = y * x + p[i]

tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyval_param_1_{type_l='poly1d', type_r='numpy_scalar'}::test_polyval
tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyval_param_4_{type_l='ndarray', type_r='numpy_scalar'}::test_polyval
tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyvalDtypesCombination::test_polyval_diff_types_array_scalar
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/lib/polynomial.py:734: RuntimeWarning: overflow encountered in ushort_scalars
    y = y * x + p[i]

tests/cupy_tests/linalg_tests/test_norms.py: 14 warnings
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/linalg/linalg.py:2568: RuntimeWarning: divide by zero encountered in power
    absx **= ord

tests/cupy_tests/linalg_tests/test_norms.py: 14 warnings
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/linalg/linalg.py:2568: RuntimeWarning: divide by zero encountered in reciprocal
    absx **= ord

tests/cupy_tests/math_tests/test_misc.py::TestMisc::test_nan_to_num_inf
tests/cupy_tests/math_tests/test_misc.py::TestMisc::test_nan_to_num_inf_nan
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/core/numeric.py:2276: RuntimeWarning: overflow encountered in absolute
    return less_equal(abs(x-y), atol + rtol * abs(y))

tests/cupy_tests/math_tests/test_sumprod.py: 15 warnings
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/core/_methods.py:51: RuntimeWarning: invalid value encountered in reduce
    return umr_prod(a, axis, dtype, out, keepdims, initial, where)

tests/cupy_tests/math_tests/test_sumprod.py::TestNansumNanprodLong_param_11_{axis=0, func='nanprod', keepdims=True, shape=(20, 30, 40), transpose_axes=False}::test_nansum_all
tests/cupy_tests/math_tests/test_sumprod.py::TestNansumNanprodLong_param_11_{axis=0, func='nanprod', keepdims=True, shape=(20, 30, 40), transpose_axes=False}::test_nansum_axis_transposed
tests/cupy_tests/math_tests/test_sumprod.py::TestNansumNanprodLong_param_15_{axis=0, func='nanprod', keepdims=False, shape=(20, 30, 40), transpose_axes=False}::test_nansum_all
tests/cupy_tests/math_tests/test_sumprod.py::TestNansumNanprodLong_param_15_{axis=0, func='nanprod', keepdims=False, shape=(20, 30, 40), transpose_axes=False}::test_nansum_axis_transposed
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/core/fromnumeric.py:87: RuntimeWarning: invalid value encountered in reduce
    return ufunc.reduce(obj, axis, dtype, out, **passkwargs)

tests/cupy_tests/math_tests/test_sumprod.py: 32 warnings
  /home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/tests/cupy_tests/math_tests/test_sumprod.py:799: RuntimeWarning: invalid value encountered in true_divide
    a = a / a

tests/cupy_tests/math_tests/test_sumprod.py::TestSumprod::test_sum_all2
tests/cupy_tests/math_tests/test_sumprod.py::TestSumprod::test_sum_all_transposed2
tests/cupy_tests/math_tests/test_sumprod.py::TestSumprod::test_sum_axes2
tests/cupy_tests/math_tests/test_sumprod.py::TestSumprod::test_sum_axes4
tests/cupy_tests/math_tests/test_sumprod.py::TestSumprod::test_sum_axis_transposed2
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/core/_methods.py:47: RuntimeWarning: overflow encountered in reduce
    return umr_sum(a, axis, dtype, out, keepdims, initial, where)

tests/cupy_tests/statistics_tests/test_meanvar.py: 28 warnings
  /home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.VrpLkrmSO2/cupy/tests/cupy_tests/statistics_tests/test_meanvar.py:114: RuntimeWarning: invalid value encountered in true_divide
    a = a / a

tests/cupy_tests/statistics_tests/test_meanvar.py::TestNanMedian_param_4_{axis=0, keepdims=True, overwrite_input=True, shape=(3, 4, 5)}::test_nanmedian
tests/cupy_tests/statistics_tests/test_meanvar.py::TestNanMedian_param_5_{axis=0, keepdims=True, overwrite_input=False, shape=(3, 4, 5)}::test_nanmedian
tests/cupy_tests/statistics_tests/test_meanvar.py::TestNanMedian_param_6_{axis=0, keepdims=False, overwrite_input=True, shape=(3, 4, 5)}::test_nanmedian
tests/cupy_tests/statistics_tests/test_meanvar.py::TestNanMedian_param_7_{axis=0, keepdims=False, overwrite_input=False, shape=(3, 4, 5)}::test_nanmedian
tests/cupy_tests/statistics_tests/test_meanvar.py::TestNanMedian_param_8_{axis=1, keepdims=True, overwrite_input=True, shape=(3, 4, 5)}::test_nanmedian
tests/cupy_tests/statistics_tests/test_meanvar.py::TestNanMedian_param_9_{axis=1, keepdims=True, overwrite_input=False, shape=(3, 4, 5)}::test_nanmedian
tests/cupy_tests/statistics_tests/test_meanvar.py::TestNanMedian_param_10_{axis=1, keepdims=False, overwrite_input=True, shape=(3, 4, 5)}::test_nanmedian
tests/cupy_tests/statistics_tests/test_meanvar.py::TestNanMedian_param_11_{axis=1, keepdims=False, overwrite_input=False, shape=(3, 4, 5)}::test_nanmedian
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/lib/nanfunctions.py:1113: RuntimeWarning: All-NaN slice encountered
    r, k = function_base._ureduce(a, func=_nanmedian, axis=axis, out=out,

tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_1_{func='mean', params=((0,), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_2_{func='mean', params=((0, 0), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_3_{func='mean', params=((0, 0), 1)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_4_{func='mean', params=((0, 0, 0), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_5_{func='mean', params=((0, 0, 0), (0, 2))}::test_external_mean_zero_len
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/core/fromnumeric.py:3372: RuntimeWarning: Mean of empty slice.
    return _methods._mean(a, axis=axis, dtype=dtype,

tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_1_{func='mean', params=((0,), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_2_{func='mean', params=((0, 0), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_4_{func='mean', params=((0, 0, 0), None)}::test_external_mean_zero_len
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/core/_methods.py:170: RuntimeWarning: invalid value encountered in double_scalars
    ret = ret.dtype.type(ret / rcount)

tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_1_{func='mean', params=((0,), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_2_{func='mean', params=((0, 0), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_4_{func='mean', params=((0, 0, 0), None)}::test_external_mean_zero_len
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/core/_methods.py:170: RuntimeWarning: invalid value encountered in true_divide
    ret = ret.dtype.type(ret / rcount)

tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_1_{func='mean', params=((0,), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_2_{func='mean', params=((0, 0), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_4_{func='mean', params=((0, 0, 0), None)}::test_external_mean_zero_len
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/core/_methods.py:168: RuntimeWarning: invalid value encountered in true_divide
    ret = arr.dtype.type(ret / rcount)

tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_7_{func='std', params=((0,), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_8_{func='std', params=((0, 0), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_9_{func='std', params=((0, 0), 1)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_10_{func='std', params=((0, 0, 0), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_11_{func='std', params=((0, 0, 0), (0, 2))}::test_external_mean_zero_len
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/core/_methods.py:233: RuntimeWarning: Degrees of freedom <= 0 for slice
    ret = _var(a, axis=axis, dtype=dtype, out=out, ddof=ddof,

tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_7_{func='std', params=((0,), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_8_{func='std', params=((0, 0), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_10_{func='std', params=((0, 0, 0), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_13_{func='var', params=((0,), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_14_{func='var', params=((0, 0), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_16_{func='var', params=((0, 0, 0), None)}::test_external_mean_zero_len
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/core/_methods.py:194: RuntimeWarning: invalid value encountered in true_divide
    arrmean = um.true_divide(

tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_7_{func='std', params=((0,), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_8_{func='std', params=((0, 0), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_10_{func='std', params=((0, 0, 0), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_13_{func='var', params=((0,), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_14_{func='var', params=((0, 0), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_16_{func='var', params=((0, 0, 0), None)}::test_external_mean_zero_len
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/core/_methods.py:226: RuntimeWarning: invalid value encountered in double_scalars
    ret = ret.dtype.type(ret / rcount)

tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_7_{func='std', params=((0,), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_8_{func='std', params=((0, 0), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_10_{func='std', params=((0, 0, 0), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_13_{func='var', params=((0,), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_14_{func='var', params=((0, 0), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_16_{func='var', params=((0, 0, 0), None)}::test_external_mean_zero_len
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/core/_methods.py:226: RuntimeWarning: invalid value encountered in true_divide
    ret = ret.dtype.type(ret / rcount)

tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_13_{func='var', params=((0,), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_14_{func='var', params=((0, 0), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_15_{func='var', params=((0, 0), 1)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_16_{func='var', params=((0, 0, 0), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_17_{func='var', params=((0, 0, 0), (0, 2))}::test_external_mean_zero_len
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/core/fromnumeric.py:3621: RuntimeWarning: Degrees of freedom <= 0 for slice
    return _methods._var(a, axis=axis, dtype=dtype, out=out, ddof=ddof,

-- Docs: https://docs.pytest.org/en/stable/warnings.html
=========================== short test summary info ============================
FAILED tests/cupy_tests/core_tests/test_ndarray_conversion.py::TestNdarrayToBytes_param_1_{shape=(1,)}::test_item
FAILED tests/cupy_tests/core_tests/test_ndarray_conversion.py::TestNdarrayToBytes_param_2_{shape=(2, 3)}::test_item
FAILED tests/cupy_tests/core_tests/test_ndarray_indexing.py::TestArrayIndexingParameterized_param_0_{indexes=(1, 0, 2), shape=(2, 3, 4), transpose=None}::test_getitem
FAILED tests/cupy_tests/core_tests/test_ndarray_indexing.py::TestArrayIndexingParameterized_param_1_{indexes=(-1, 0, -2), shape=(2, 3, 4), transpose=None}::test_getitem
FAILED tests/cupy_tests/core_tests/test_ndarray_indexing.py::TestArrayIndexingParameterized_param_2_{indexes=(1, 0, 2), shape=(2, 3, 4), transpose=(2, 0, 1)}::test_getitem
FAILED tests/cupy_tests/core_tests/test_ndarray_indexing.py::TestArrayIndexingParameterized_param_3_{indexes=(-1, 0, -2), shape=(2, 3, 4), transpose=(2, 0, 1)}::test_getitem
FAILED tests/cupy_tests/core_tests/test_ndarray_indexing.py::TestArrayIndexingParameterized_param_14_{indexes=(slice(None, None, None), None), shape=(2,), transpose=None}::test_getitem
FAILED tests/cupy_tests/core_tests/test_ndarray_indexing.py::TestArrayIndexingParameterized_param_27_{indexes=(slice(-4, -5, -1),), shape=(10,), transpose=None}::test_getitem
FAILED tests/cupy_tests/core_tests/test_ndarray_indexing.py::TestArrayIndexingParameterized_param_38_{indexes=(slice(-5, -6, -1),), shape=(10,), transpose=None}::test_getitem
FAILED tests/cupy_tests/core_tests/test_ndarray_unary_op.py::TestArrayBoolOp::test_bool_one_element
FAILED tests/cupy_tests/creation_tests/test_from_data.py::TestFromData::test_array_from_list_of_numpy_scalar
FAILED tests/cupy_tests/cuda_tests/test_device.py::TestDeviceHandles::test_cusparse_handle
FAILED tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyArithmeticDiffTypes_param_2_{fname='polymul'}::test_polyroutine_diff_types_array
FAILED tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyArithmeticDiffTypes_param_2_{fname='polymul'}::test_polyroutine_diff_types_poly1d
FAILED tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyfitParametersCombinations_param_0_{deg=0, rcond=None, shape1=(3,), shape2=(3,), weighted=True}::test_polyfit_default
FAILED tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyfitParametersCombinations_param_0_{deg=0, rcond=None, shape1=(3,), shape2=(3,), weighted=True}::test_polyfit_full
FAILED tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyfitParametersCombinations_param_1_{deg=0, rcond=None, shape1=(3,), shape2=(3,), weighted=False}::test_polyfit_default
FAILED tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyfitParametersCombinations_param_1_{deg=0, rcond=None, shape1=(3,), shape2=(3,), weighted=False}::test_polyfit_full
FAILED tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyfitParametersCombinations_param_2_{deg=0, rcond=None, shape1=(3,), shape2=(3, 2), weighted=True}::test_polyfit_default
FAILED tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyfitParametersCombinations_param_2_{deg=0, rcond=None, shape1=(3,), shape2=(3, 2), weighted=True}::test_polyfit_full
FAILED tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyfitParametersCombinations_param_3_{deg=0, rcond=None, shape1=(3,), shape2=(3, 2), weighted=False}::test_polyfit_default
FAILED tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyfitParametersCombinations_param_3_{deg=0, rcond=None, shape1=(3,), shape2=(3, 2), weighted=False}::test_polyfit_full
FAILED tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyfitParametersCombinations_param_4_{deg=0, rcond=0.5, shape1=(3,), shape2=(3,), weighted=True}::test_polyfit_default
FAILED tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyfitParametersCombinations_param_4_{deg=0, rcond=0.5, shape1=(3,), shape2=(3,), weighted=True}::test_polyfit_full
FAILED tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyfitParametersCombinations_param_5_{deg=0, rcond=0.5, shape1=(3,), shape2=(3,), weighted=False}::test_polyfit_default
FAILED tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyfitParametersCombinations_param_5_{deg=0, rcond=0.5, shape1=(3,), shape2=(3,), weighted=False}::test_polyfit_full
FAILED tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyfitParametersCombinations_param_6_{deg=0, rcond=0.5, shape1=(3,), shape2=(3, 2), weighted=True}::test_polyfit_default
FAILED tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyfitParametersCombinations_param_6_{deg=0, rcond=0.5, shape1=(3,), shape2=(3, 2), weighted=True}::test_polyfit_full
FAILED tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyfitParametersCombinations_param_7_{deg=0, rcond=0.5, shape1=(3,), shape2=(3, 2), weighted=False}::test_polyfit_default
FAILED tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyfitParametersCombinations_param_7_{deg=0, rcond=0.5, shape1=(3,), shape2=(3, 2), weighted=False}::test_polyfit_full
FAILED tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyfitParametersCombinations_param_8_{deg=0, rcond=1e-15, shape1=(3,), shape2=(3,), weighted=True}::test_polyfit_default
FAILED tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyfitParametersCombinations_param_8_{deg=0, rcond=1e-15, shape1=(3,), shape2=(3,), weighted=True}::test_polyfit_full
FAILED tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyfitParametersCombinations_param_9_{deg=0, rcond=1e-15, shape1=(3,), shape2=(3,), weighted=False}::test_polyfit_default
FAILED tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyfitParametersCombinations_param_9_{deg=0, rcond=1e-15, shape1=(3,), shape2=(3,), weighted=False}::test_polyfit_full
FAILED tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyfitParametersCombinations_param_10_{deg=0, rcond=1e-15, shape1=(3,), shape2=(3, 2), weighted=True}::test_polyfit_default
FAILED tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyfitParametersCombinations_param_10_{deg=0, rcond=1e-15, shape1=(3,), shape2=(3, 2), weighted=True}::test_polyfit_full
FAILED tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyfitParametersCombinations_param_11_{deg=0, rcond=1e-15, shape1=(3,), shape2=(3, 2), weighted=False}::test_polyfit_default
FAILED tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyfitParametersCombinations_param_11_{deg=0, rcond=1e-15, shape1=(3,), shape2=(3, 2), weighted=False}::test_polyfit_full
FAILED tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyfitCovMode_param_0_{cov='unscaled', deg=0, rcond=None, shape=(3,), weighted=True}::test_polyfit_cov
FAILED tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyfitCovMode_param_1_{cov='unscaled', deg=0, rcond=None, shape=(3,), weighted=False}::test_polyfit_cov
FAILED tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyfitCovMode_param_2_{cov='unscaled', deg=0, rcond=None, shape=(3, 2), weighted=True}::test_polyfit_cov
FAILED tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyfitCovMode_param_3_{cov='unscaled', deg=0, rcond=None, shape=(3, 2), weighted=False}::test_polyfit_cov
FAILED tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyfitCovMode_param_4_{cov='unscaled', deg=0, rcond=1e-15, shape=(3,), weighted=True}::test_polyfit_cov
FAILED tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyfitCovMode_param_5_{cov='unscaled', deg=0, rcond=1e-15, shape=(3,), weighted=False}::test_polyfit_cov
FAILED tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyfitCovMode_param_6_{cov='unscaled', deg=0, rcond=1e-15, shape=(3, 2), weighted=True}::test_polyfit_cov
FAILED tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyfitCovMode_param_7_{cov='unscaled', deg=0, rcond=1e-15, shape=(3, 2), weighted=False}::test_polyfit_cov
FAILED tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyfitCovMode_param_16_{cov=True, deg=0, rcond=None, shape=(3,), weighted=True}::test_polyfit_cov
FAILED tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyfitCovMode_param_17_{cov=True, deg=0, rcond=None, shape=(3,), weighted=False}::test_polyfit_cov
FAILED tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyfitCovMode_param_18_{cov=True, deg=0, rcond=None, shape=(3, 2), weighted=True}::test_polyfit_cov
FAILED tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyfitCovMode_param_19_{cov=True, deg=0, rcond=None, shape=(3, 2), weighted=False}::test_polyfit_cov
FAILED tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyfitCovMode_param_20_{cov=True, deg=0, rcond=1e-15, shape=(3,), weighted=True}::test_polyfit_cov
FAILED tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyfitCovMode_param_21_{cov=True, deg=0, rcond=1e-15, shape=(3,), weighted=False}::test_polyfit_cov
FAILED tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyfitCovMode_param_22_{cov=True, deg=0, rcond=1e-15, shape=(3, 2), weighted=True}::test_polyfit_cov
FAILED tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyfitCovMode_param_23_{cov=True, deg=0, rcond=1e-15, shape=(3, 2), weighted=False}::test_polyfit_cov
FAILED tests/cupy_tests/lib_tests/test_polynomial.py::TestRootsReal_param_0_{input=[2, -1, -2]}::test_roots_array
FAILED tests/cupy_tests/lib_tests/test_polynomial.py::TestRootsReal_param_0_{input=[2, -1, -2]}::test_roots_poly1d
FAILED tests/cupy_tests/lib_tests/test_polynomial.py::TestRootsReal_param_1_{input=[-4, 10, 4]}::test_roots_array
FAILED tests/cupy_tests/lib_tests/test_polynomial.py::TestRootsReal_param_1_{input=[-4, 10, 4]}::test_roots_poly1d
FAILED tests/cupy_tests/lib_tests/test_polynomial.py::TestRootsComplex_param_0_{input=[3j, 1.5j, (-0-3j)]}::test_roots_array
FAILED tests/cupy_tests/lib_tests/test_polynomial.py::TestRootsComplex_param_0_{input=[3j, 1.5j, (-0-3j)]}::test_roots_poly1d
FAILED tests/cupy_tests/lib_tests/test_polynomial.py::TestPoly1d::test_poly1d_roots
FAILED tests/cupy_tests/linalg_tests/test_einsum.py::TestEinSumUnaryOperation_param_30_{_raw_params={'orig': {'shape_a': (2, 3), 'subscripts': '...'}, 'dec': 0, 'drop': True}, shape_a=(2, 1), subscripts='...'}::test_einsum_unary_dtype
FAILED tests/cupy_tests/linalg_tests/test_einsum.py::TestEinSumUnaryOperation_param_31_{_raw_params={'orig': {'shape_a': (2, 3), 'subscripts': 'ji'}, 'dec': 0, 'drop': True}, shape_a=(2, 1), subscripts='ji'}::test_einsum_unary_dtype
FAILED tests/cupy_tests/manipulation_tests/test_dims.py::TestBroadcast_param_2_{shapes=[(1,), (1,)]}::test_broadcast_arrays
FAILED tests/cupy_tests/manipulation_tests/test_dims.py::TestBroadcast_param_3_{shapes=[(2,), (2,)]}::test_broadcast_arrays
FAILED tests/cupy_tests/polynomial_tests/test_polyutils.py::TestAsSeries_param_1_{trim=False}::test_as_series_trailing_zeros
FAILED tests/cupy_tests/random_tests/test_generator.py::TestRandomState::test_methods
FAILED tests/cupy_tests/random_tests/test_generator.py::TestChoiceChi::test_goodness_of_fit_2
FAILED tests/cupy_tests/random_tests/test_sample.py::TestRandint2::test_goodness_of_fit_2
FAILED tests/cupy_tests/random_tests/test_sample.py::TestRandomIntegers2::test_goodness_of_fit_2
FAILED tests/cupy_tests/statistics_tests/test_correlation.py::TestCorrelate_param_0_{mode='valid'}::test_correlate_diff_types
FAILED tests/cupy_tests/statistics_tests/test_correlation.py::TestCorrelate_param_1_{mode='full'}::test_correlate_diff_types
FAILED tests/cupy_tests/statistics_tests/test_correlation.py::TestCorrelate_param_1_{mode='full'}::test_correlate_non_contiguous
FAILED tests/cupy_tests/statistics_tests/test_correlation.py::TestCorrelate_param_2_{mode='same'}::test_correlate_diff_types
FAILED tests/cupyx_tests/linalg_tests/test_solve.py::TestInvh_param_0_{dtype=float32, size=5}::test_invh
FAILED tests/cupyx_tests/linalg_tests/test_solve.py::TestInvh_param_1_{dtype=float32, size=9}::test_invh
FAILED tests/cupyx_tests/linalg_tests/test_solve.py::TestInvh_param_2_{dtype=float32, size=17}::test_invh
FAILED tests/cupyx_tests/linalg_tests/test_solve.py::TestInvh_param_3_{dtype=float32, size=33}::test_invh
FAILED tests/cupyx_tests/linalg_tests/test_solve.py::TestInvh_param_4_{dtype=float64, size=5}::test_invh
FAILED tests/cupyx_tests/linalg_tests/test_solve.py::TestInvh_param_5_{dtype=float64, size=9}::test_invh
FAILED tests/cupyx_tests/linalg_tests/test_solve.py::TestInvh_param_6_{dtype=float64, size=17}::test_invh
FAILED tests/cupyx_tests/linalg_tests/test_solve.py::TestInvh_param_7_{dtype=float64, size=33}::test_invh
FAILED tests/cupyx_tests/linalg_tests/test_solve.py::TestInvh_param_8_{dtype=complex64, size=5}::test_invh
FAILED tests/cupyx_tests/linalg_tests/test_solve.py::TestInvh_param_9_{dtype=complex64, size=9}::test_invh
FAILED tests/cupyx_tests/linalg_tests/test_solve.py::TestInvh_param_10_{dtype=complex64, size=17}::test_invh
FAILED tests/cupyx_tests/linalg_tests/test_solve.py::TestInvh_param_11_{dtype=complex64, size=33}::test_invh
FAILED tests/cupyx_tests/linalg_tests/test_solve.py::TestInvh_param_12_{dtype=complex128, size=5}::test_invh
FAILED tests/cupyx_tests/linalg_tests/test_solve.py::TestInvh_param_13_{dtype=complex128, size=9}::test_invh
FAILED tests/cupyx_tests/linalg_tests/test_solve.py::TestInvh_param_14_{dtype=complex128, size=17}::test_invh
FAILED tests/cupyx_tests/linalg_tests/test_solve.py::TestInvh_param_15_{dtype=complex128, size=33}::test_invh
FAILED tests/example_tests/test_finance.py::TestMonteCarlo::test_monte_carlo
FAILED tests/example_tests/test_finance.py::TestMonteCarloWithMultiGPU::test_monte_carlo_multigpu
FAILED tests/install_tests/test_build.py::TestCheckVersion::test_check_cuda_version
FAILED tests/install_tests/test_build.py::TestCheckVersion::test_check_cudnn_version
XPASS tests/cupy_tests/sorting_tests/test_sort.py::TestMsort::test_msort_zero_dim Explicit error types required
= 94 failed, 24351 passed, 39217 skipped, 56 deselected, 50 xfailed, 1 xpassed, 209 warnings in 13486.18s (3:44:46) =
