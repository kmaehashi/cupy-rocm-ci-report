============================= test session starts ==============================
platform linux -- Python 3.8.7, pytest-6.2.2, py-1.10.0, pluggy-0.13.1
rootdir: /home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.1cAEeXesk6/cupy, configfile: setup.cfg
plugins: html-3.1.1, metadata-1.11.0
collected 63773 items / 56 deselected / 12 skipped / 63705 selected

tests/cupy_tests/test_cublas.py ........................................ [  0%]
........................................................................ [  0%]
........................................................................ [  0%]
........................................................................ [  0%]
........................................................................ [  0%]
........................................................................ [  0%]
........................................................................ [  0%]
........................................................................ [  0%]
........................................................................ [  0%]
........................................................................ [  1%]
........................................................................ [  1%]
........................................................................ [  1%]
........................................................................ [  1%]
........................................................................ [  1%]
........................................................................ [  1%]
........................................................................ [  1%]
........................................................................ [  1%]
........................................................................ [  1%]
........................................................................ [  2%]
........................................................................ [  2%]
........................................................................ [  2%]
........................................................................ [  2%]
........................................................................ [  2%]
........................................................................ [  2%]
........................................................................ [  2%]
........................................................................ [  2%]
........................................................................ [  3%]
........................................................................ [  3%]
........................................................................ [  3%]
........................................................................ [  3%]
........................................................................ [  3%]
........................................................................ [  3%]
........................................................................ [  3%]
...........................x...........x.............................x.. [  3%]
.........x..........                                                     [  3%]
tests/cupy_tests/test_cudnn.py sssssssssssssssssssssssssssssssssssssssss [  3%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  4%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  4%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  4%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  4%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  4%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  4%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  4%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  4%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  4%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  5%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  5%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  5%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  5%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  5%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  5%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  5%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  5%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  5%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  6%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  6%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  6%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  6%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  6%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  6%]
sssssssssssssssssssssssssssssssssssssssssssssssssssssss                  [  6%]
tests/cupy_tests/test_cusolver.py ssssssssssssssssssssssssssssssssssssss [  6%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  6%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  6%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  7%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  7%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  7%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  7%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  7%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  7%]
ssssssssssssssssssssssssss                                               [  7%]
tests/cupy_tests/test_cutensor.py ssssssssssssssssssssssssssssssssssssss [  7%]
sssssssssssssssssssssssssssssssssssss                                    [  7%]
tests/cupy_tests/test_init.py ..s.......                                 [  7%]
tests/cupy_tests/test_ndim.py ............                               [  7%]
tests/cupy_tests/test_numpy_interop.py ..x....                           [  7%]
tests/cupy_tests/test_type_routines.py ................................. [  7%]
.                                                                        [  7%]
tests/cupy_tests/binary_tests/test_elementwise.py ......                 [  7%]
tests/cupy_tests/binary_tests/test_packing.py ...                        [  7%]
tests/cupy_tests/core_tests/test_array_function.py .....                 [  7%]
tests/cupy_tests/core_tests/test_carray.py .....                         [  7%]
tests/cupy_tests/core_tests/test_core.py ....                            [  7%]
tests/cupy_tests/core_tests/test_cub_reduction.py ...................... [  7%]
...                                                                      [  7%]
tests/cupy_tests/core_tests/test_dlpack.py ..............                [  8%]
tests/cupy_tests/core_tests/test_elementwise.py ...............          [  8%]
tests/cupy_tests/core_tests/test_flags.py .............................  [  8%]
tests/cupy_tests/core_tests/test_function.py ..                          [  8%]
tests/cupy_tests/core_tests/test_internal.py ........................... [  8%]
...............................................................          [  8%]
tests/cupy_tests/core_tests/test_iter.py ............                    [  8%]
tests/cupy_tests/core_tests/test_ndarray.py ..........................ss [  8%]
ssss.................................................................... [  8%]
.........................sss...............                              [  8%]
tests/cupy_tests/core_tests/test_ndarray_adv_indexing.py ............... [  8%]
........................................................................ [  8%]
........................................................................ [  8%]
........................................................................ [  8%]
.............................................                            [  8%]
tests/cupy_tests/core_tests/test_ndarray_complex_ops.py ................ [  8%]
.....                                                                    [  8%]
tests/cupy_tests/core_tests/test_ndarray_contiguity.py .                 [  8%]
tests/cupy_tests/core_tests/test_ndarray_conversion.py .......FF..       [  8%]
tests/cupy_tests/core_tests/test_ndarray_copy_and_view.py ss........s... [  8%]
....ssss.......                                                          [  8%]
tests/cupy_tests/core_tests/test_ndarray_cuda_array_interface.py sssssss [  9%]
sssssssssssssssssssssssssssssssssssssssssssssssss                        [  9%]
tests/cupy_tests/core_tests/test_ndarray_elementwise_op.py ............. [  9%]
........................................................................ [  9%]
.................................................................        [  9%]
tests/cupy_tests/core_tests/test_ndarray_get.py ............             [  9%]
tests/cupy_tests/core_tests/test_ndarray_indexing.py FFFF............... [  9%]
........F..........F.............................                        [  9%]
tests/cupy_tests/core_tests/test_ndarray_math.py ......................s [  9%]
sssssssssss                                                              [  9%]
tests/cupy_tests/core_tests/test_ndarray_owndata.py ...                  [  9%]
tests/cupy_tests/core_tests/test_ndarray_reduction.py .................. [  9%]
........................................................................ [  9%]
........................................................................ [  9%]
................................                                         [  9%]
tests/cupy_tests/core_tests/test_ndarray_scatter.py .................... [  9%]
........................................................................ [  9%]
...............................................................          [ 10%]
tests/cupy_tests/core_tests/test_ndarray_ufunc.py .......                [ 10%]
tests/cupy_tests/core_tests/test_ndarray_unary_op.py .......F..........s [ 10%]
...                                                                      [ 10%]
tests/cupy_tests/core_tests/test_raw.py .ss.........sss..s.s.s........ss [ 10%]
.........sss..s.s.s........ss.........sss..s.s.s......ssssssssssssssssss [ 10%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss.s [ 10%]
s.......sssss....s.s......sssssssssssssssssssssssssssss                  [ 10%]
tests/cupy_tests/core_tests/test_reduction.py .....................      [ 10%]
tests/cupy_tests/core_tests/test_scan.py ....                            [ 10%]
tests/cupy_tests/core_tests/test_syncdetect.py ....                      [ 10%]
tests/cupy_tests/core_tests/test_userkernel.py ....sss.............      [ 10%]
tests/cupy_tests/core_tests/fusion_tests/test_array.py ................. [ 10%]
........................................................................ [ 10%]
....................................................                     [ 10%]
tests/cupy_tests/core_tests/fusion_tests/test_indexing.py .............. [ 10%]
.................s                                                       [ 10%]
tests/cupy_tests/core_tests/fusion_tests/test_kernel_cache.py ....       [ 10%]
tests/cupy_tests/core_tests/fusion_tests/test_misc.py .......s.......... [ 10%]
........                                                                 [ 10%]
tests/cupy_tests/core_tests/fusion_tests/test_optimization.py .......... [ 10%]
....                                                                     [ 10%]
tests/cupy_tests/core_tests/fusion_tests/test_reduction.py ............. [ 10%]
........................................................................ [ 11%]
.........................................................s.s.s.s.s.s.s.s [ 11%]
.s.ssssssssssssssssss.sss                                                [ 11%]
tests/cupy_tests/core_tests/fusion_tests/test_routines.py .............. [ 11%]
........................................................................ [ 11%]
..............                                                           [ 11%]
tests/cupy_tests/core_tests/fusion_tests/test_ufunc.py ................. [ 11%]
......................................................                   [ 11%]
tests/cupy_tests/creation_tests/test_basic.py .......................... [ 11%]
...........................................................s............ [ 11%]
....s.                                                                   [ 11%]
tests/cupy_tests/creation_tests/test_from_data.py ssssssssssssssssssssss [ 11%]
sssssssssssssssssssssssssssssssssssssssssssssssssssssssssss............. [ 11%]
....................................F..............................      [ 11%]
tests/cupy_tests/creation_tests/test_matrix.py ......................... [ 11%]
.................................                                        [ 11%]
tests/cupy_tests/creation_tests/test_ranges.py ......................... [ 11%]
..............................................................           [ 12%]
tests/cupy_tests/cuda_tests/test_compiler.py sssssss........             [ 12%]
tests/cupy_tests/cuda_tests/test_cublas.py .                             [ 12%]
tests/cupy_tests/cuda_tests/test_cudnn.py s                              [ 12%]
tests/cupy_tests/cuda_tests/test_cufft.py ssssssssssssssss.              [ 12%]
tests/cupy_tests/cuda_tests/test_curand.py .....                         [ 12%]
tests/cupy_tests/cuda_tests/test_cusolver.py .                           [ 12%]
tests/cupy_tests/cuda_tests/test_cusparse.py .                           [ 12%]
tests/cupy_tests/cuda_tests/test_cutensor.py s                           [ 12%]
tests/cupy_tests/cuda_tests/test_device.py .............F.               [ 12%]
tests/cupy_tests/cuda_tests/test_driver.py ss.                           [ 12%]
tests/cupy_tests/cuda_tests/test_memory.py ....ssssssss..........sssssss [ 12%]
sss.................................................ssssss               [ 12%]
tests/cupy_tests/cuda_tests/test_memory_hook.py .                        [ 12%]
tests/cupy_tests/cuda_tests/test_nccl.py ........                        [ 12%]
tests/cupy_tests/cuda_tests/test_nvrtc.py .                              [ 12%]
tests/cupy_tests/cuda_tests/test_nvtx.py ....                            [ 12%]
tests/cupy_tests/cuda_tests/test_pinned_memory.py ............           [ 12%]
tests/cupy_tests/cuda_tests/test_profile.py ..                           [ 12%]
tests/cupy_tests/cuda_tests/test_runtime.py .                            [ 12%]
tests/cupy_tests/cuda_tests/test_stream.py ..s..s..ssssssss.s            [ 12%]
tests/cupy_tests/cuda_tests/memory_hooks_tests/test_debug_print.py .     [ 12%]
tests/cupy_tests/cuda_tests/memory_hooks_tests/test_line_profile.py ..   [ 12%]
tests/cupy_tests/fft_tests/test_cache.py ..sss.....s..                   [ 12%]
tests/cupy_tests/fft_tests/test_callback.py ssssssssssssssssssssssssssss [ 12%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 12%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 12%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 12%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 12%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 13%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 13%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 13%]
ssssssssssssssssssssssssssssssssssssssssssssssssssss                     [ 13%]
tests/cupy_tests/fft_tests/test_fft.py ................................. [ 13%]
........................................................................ [ 13%]
...............................................................sssssssss [ 13%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 13%]
sssssssssssssss......................................................... [ 13%]
................................................s................s...... [ 13%]
..........s..............................ssssssssssssssssssssssss....... [ 14%]
........................................................................ [ 14%]
........................................................................ [ 14%]
.......s..sssssssssssss................................................. [ 14%]
...................................                                      [ 14%]
tests/cupy_tests/functional_tests/test_piecewise.py .............        [ 14%]
tests/cupy_tests/functional_tests/test_vectorize.py .................... [ 14%]
..............................                                           [ 14%]
tests/cupy_tests/indexing_tests/test_generate.py .......x............... [ 14%]
...............                                                          [ 14%]
tests/cupy_tests/indexing_tests/test_indexing.py ....................... [ 14%]
..........................                                               [ 14%]
tests/cupy_tests/indexing_tests/test_insert.py ......................... [ 14%]
........................................................................ [ 14%]
........................................................................ [ 14%]
.........................................................                [ 15%]
tests/cupy_tests/indexing_tests/test_iterate.py ........................ [ 15%]
...............................................                          [ 15%]
tests/cupy_tests/io_tests/test_base_n.py ............................    [ 15%]
tests/cupy_tests/io_tests/test_formatting.py ..                          [ 15%]
tests/cupy_tests/io_tests/test_npz.py .......                            [ 15%]
tests/cupy_tests/lib_tests/test_polynomial.py .......ss.......ssssssssss [ 15%]
sssssss........ssssssssssssssssssssssssssssssssssssxxxxxxxxxxxxxxxxxxxx. [ 15%]
..ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 15%]
ssssssssssssssssssssssssss....FFFFFFFFFFFFFFFFFFFFFFFFFF................ [ 15%]
........................................................................ [ 15%]
........xxxxxxxx........xxxxxxxx........................................ [ 15%]
...........xxxxxx............................x.......................... [ 15%]
..                                                                       [ 15%]
tests/cupy_tests/lib_tests/test_shape_base.py ......................     [ 15%]
tests/cupy_tests/lib_tests/test_strided_tricks.py ..                     [ 15%]
tests/cupy_tests/linalg_tests/test_decomposition.py .................... [ 15%]
.......................                                                  [ 16%]
tests/cupy_tests/linalg_tests/test_eigenvalue.py xxxxxxxx                [ 16%]
tests/cupy_tests/linalg_tests/test_einsum.py ........................... [ 16%]
........................................................................ [ 16%]
........................................................................ [ 16%]
........................................................................ [ 16%]
........................................................................ [ 16%]
........................................................................ [ 16%]
........................................................................ [ 16%]
........................................................................ [ 16%]
........................................................................ [ 16%]
........................................................................ [ 17%]
........................................................................ [ 17%]
..........                                                               [ 17%]
tests/cupy_tests/linalg_tests/test_norms.py ............................ [ 17%]
........................................................................ [ 17%]
........................................................................ [ 17%]
.................................................................        [ 17%]
tests/cupy_tests/linalg_tests/test_product.py .......................... [ 17%]
........................................................................ [ 17%]
........................................................................ [ 17%]
.................................F........                               [ 17%]
tests/cupy_tests/linalg_tests/test_solve.py ............................ [ 17%]
....                                                                     [ 17%]
tests/cupy_tests/logic_tests/test_comparison.py ........................ [ 18%]
.....                                                                    [ 18%]
tests/cupy_tests/logic_tests/test_content.py ...                         [ 18%]
tests/cupy_tests/logic_tests/test_ops.py ....                            [ 18%]
tests/cupy_tests/logic_tests/test_truth.py ............................. [ 18%]
........................................................................ [ 18%]
........................................................................ [ 18%]
........................................................................ [ 18%]
........................................................................ [ 18%]
........................................................................ [ 18%]
........................................................................ [ 18%]
........................................................................ [ 18%]
........................................................................ [ 18%]
........................................................................ [ 19%]
...........................................                              [ 19%]
tests/cupy_tests/logic_tests/test_type_test.py ......................... [ 19%]
.......                                                                  [ 19%]
tests/cupy_tests/manipulation_tests/test_add_remove.py ................. [ 19%]
.........................                                                [ 19%]
tests/cupy_tests/manipulation_tests/test_basic.py ...................... [ 19%]
.......................................................                  [ 19%]
tests/cupy_tests/manipulation_tests/test_dims.py .....x.x............... [ 19%]
................................................                         [ 19%]
tests/cupy_tests/manipulation_tests/test_join.py ....................... [ 19%]
...........................                                              [ 19%]
tests/cupy_tests/manipulation_tests/test_kind.py ...........             [ 19%]
tests/cupy_tests/manipulation_tests/test_rearrange.py .................. [ 19%]
.................................                                        [ 19%]
tests/cupy_tests/manipulation_tests/test_shape.py ...................... [ 19%]
....................................                                     [ 19%]
tests/cupy_tests/manipulation_tests/test_split.py ..................     [ 19%]
tests/cupy_tests/manipulation_tests/test_tiling.py ..................... [ 19%]
...........                                                              [ 19%]
tests/cupy_tests/manipulation_tests/test_transpose.py .................. [ 19%]
..........                                                               [ 19%]
tests/cupy_tests/math_tests/test_arithmetic.py ......................... [ 19%]
........................................................................ [ 20%]
........................................................................ [ 20%]
........................................................................ [ 20%]
........................................................................ [ 20%]
........................................................................ [ 20%]
........................................................................ [ 20%]
........................................................................ [ 20%]
........................................................................ [ 20%]
........................................................................ [ 20%]
........................................................................ [ 21%]
........................................................................ [ 21%]
........................................................................ [ 21%]
........................................................................ [ 21%]
........................................................................ [ 21%]
........................................................................ [ 21%]
........................................................................ [ 21%]
........................................................................ [ 21%]
........................................................................ [ 21%]
........................................................................ [ 22%]
........................................................................ [ 22%]
........................................................................ [ 22%]
........................................................................ [ 22%]
........................................................................ [ 22%]
........................................................................ [ 22%]
........................................................................ [ 22%]
........................................................................ [ 22%]
........................................................................ [ 22%]
........................................................................ [ 23%]
........................................................................ [ 23%]
........................................................................ [ 23%]
........................................................................ [ 23%]
........................................................................ [ 23%]
........................................................................ [ 23%]
........................................................................ [ 23%]
........................................................................ [ 23%]
........................................................................ [ 24%]
........................................................................ [ 24%]
........................................................................ [ 24%]
........................................................................ [ 24%]
........................................................................ [ 24%]
........................................................................ [ 24%]
........................................................................ [ 24%]
........................................................................ [ 24%]
........................................................................ [ 24%]
........................................................................ [ 25%]
........................................................................ [ 25%]
........................................................................ [ 25%]
........................................................................ [ 25%]
........................................................................ [ 25%]
........................................................................ [ 25%]
........................................................................ [ 25%]
........................................................................ [ 25%]
........................................................................ [ 25%]
........................................................................ [ 26%]
........................................................................ [ 26%]
........................................................................ [ 26%]
........................................................................ [ 26%]
........................................................................ [ 26%]
........................................................................ [ 26%]
........................................................................ [ 26%]
........................................................................ [ 26%]
........................................................................ [ 26%]
........................................................................ [ 27%]
........................................................................ [ 27%]
........................................................................ [ 27%]
........................................................................ [ 27%]
........................................................................ [ 27%]
........................................................................ [ 27%]
........................................................................ [ 27%]
........................................................................ [ 27%]
........................................................................ [ 27%]
........................................................................ [ 28%]
........................................................................ [ 28%]
........................................................................ [ 28%]
........................................................................ [ 28%]
........................................................................ [ 28%]
........................................................................ [ 28%]
........................................................................ [ 28%]
........................................................................ [ 28%]
........................................................................ [ 28%]
........................................................................ [ 29%]
........................................................................ [ 29%]
........................................................................ [ 29%]
........................................................................ [ 29%]
........................................................................ [ 29%]
........................................................................ [ 29%]
........................................................................ [ 29%]
........................................................................ [ 29%]
........................................................................ [ 30%]
........................................................................ [ 30%]
........................................................................ [ 30%]
........................................................................ [ 30%]
........................................................................ [ 30%]
........................................................................ [ 30%]
........................................................................ [ 30%]
........................................................................ [ 30%]
........................................................................ [ 30%]
........................................................................ [ 31%]
........................................................................ [ 31%]
........................................................................ [ 31%]
........................................................................ [ 31%]
........................................................................ [ 31%]
........................................................................ [ 31%]
........................................................................ [ 31%]
........................................................................ [ 31%]
........................................................................ [ 31%]
........................................................................ [ 32%]
........................................................................ [ 32%]
........................................................................ [ 32%]
........................................................................ [ 32%]
........................................................................ [ 32%]
........................................................................ [ 32%]
...........................                                              [ 32%]
tests/cupy_tests/math_tests/test_explog.py .........                     [ 32%]
tests/cupy_tests/math_tests/test_floating.py .......                     [ 32%]
tests/cupy_tests/math_tests/test_hyperbolic.py ......                    [ 32%]
tests/cupy_tests/math_tests/test_matmul.py ............................. [ 32%]
........................................................................ [ 32%]
........................................................................ [ 32%]
........................................................................ [ 33%]
......................................                                   [ 33%]
tests/cupy_tests/math_tests/test_misc.py ............................... [ 33%]
............................................x..x..x..................... [ 33%]
............................                                             [ 33%]
tests/cupy_tests/math_tests/test_rational.py ....                        [ 33%]
tests/cupy_tests/math_tests/test_rounding.py ........................... [ 33%]
..........................................                               [ 33%]
tests/cupy_tests/math_tests/test_special.py ...                          [ 33%]
tests/cupy_tests/math_tests/test_sumprod.py ............................ [ 33%]
....................................................ssssssssssssssss.... [ 33%]
........................................................................ [ 33%]
........................................................................ [ 33%]
........................................................................ [ 33%]
........................................................................ [ 34%]
........................................................................ [ 34%]
........................................................................ [ 34%]
........................................................................ [ 34%]
........................................................................ [ 34%]
..............................................................           [ 34%]
tests/cupy_tests/math_tests/test_trigonometric.py ...............        [ 34%]
tests/cupy_tests/math_tests/test_window.py ............................. [ 34%]
.....                                                                    [ 34%]
tests/cupy_tests/misc_tests/test_memory_ranges.py ................       [ 34%]
tests/cupy_tests/misc_tests/test_who.py ......                           [ 34%]
tests/cupy_tests/padding_tests/test_pad.py ............................. [ 34%]
..............................................                           [ 34%]
tests/cupy_tests/polynomial_tests/test_polynomial.py ................... [ 34%]
                                                                         [ 34%]
tests/cupy_tests/polynomial_tests/test_polyutils.py ............F....... [ 34%]
................                                                         [ 34%]
tests/cupy_tests/prof_tests/test_range.py ........                       [ 34%]
tests/cupy_tests/random_tests/test_bit_generator.py ssssssssssss         [ 34%]
tests/cupy_tests/random_tests/test_distributions.py .................... [ 34%]
........................................................................ [ 35%]
........................................................................ [ 35%]
........................................................................ [ 35%]
........................................................................ [ 35%]
........................................................................ [ 35%]
........................................................................ [ 35%]
........................................................................ [ 35%]
........................................................................ [ 35%]
........................................................................ [ 35%]
........................................................................ [ 36%]
........................................................................ [ 36%]
........................................................................ [ 36%]
........................................................................ [ 36%]
........................................................................ [ 36%]
........................................................................ [ 36%]
.................................................                        [ 36%]
tests/cupy_tests/random_tests/test_generator.py ........................ [ 36%]
........................................................................ [ 36%]
........................................................................ [ 37%]
........................................................................ [ 37%]
........................x...............................                 [ 37%]
tests/cupy_tests/random_tests/test_generator_api.py sssssssssssssssss    [ 37%]
tests/cupy_tests/random_tests/test_init.py .                             [ 37%]
tests/cupy_tests/random_tests/test_permutations.py ..Fx..Fx............. [ 37%]
........................................................................ [ 37%]
........................................................................ [ 37%]
...........F.                                                            [ 37%]
tests/cupy_tests/random_tests/test_random.py .                           [ 37%]
tests/cupy_tests/random_tests/test_sample.py ...............x........x.. [ 37%]
............                                                             [ 37%]
tests/cupy_tests/sorting_tests/test_count.py ....                        [ 37%]
tests/cupy_tests/sorting_tests/test_search.py ssssssss........ssssssss.. [ 37%]
........................................................................ [ 37%]
........................................................................ [ 37%]
....................................................................     [ 37%]
tests/cupy_tests/sorting_tests/test_sort.py F....FF..F.....FFF....FF..F. [ 38%]
....FFF......FF...F.................F......FF...F.................F..... [ 38%]
.FF...F..F......FF...F..F.F....F..F.FFFFFFF.F....F.F.FF...xFFFFFF.....   [ 38%]
tests/cupy_tests/statistics_tests/test_correlation.py .................. [ 38%]
..............................F..F.FF...................                 [ 38%]
tests/cupy_tests/statistics_tests/test_histogram.py .................... [ 38%]
........................................................................ [ 38%]
........................................................................ [ 38%]
........................................................................ [ 38%]
........................................................................ [ 38%]
........................................................                 [ 38%]
tests/cupy_tests/statistics_tests/test_meanvar.py FFFFFFFF....FFFFFFFFFF [ 38%]
FF....FFFFFFFF.......................................................... [ 39%]
................................FF.FFFF................................. [ 39%]
..                                                                       [ 39%]
tests/cupy_tests/statistics_tests/test_order.py sssss..................F [ 39%]
.F...F...........F.F...F.                                                [ 39%]
tests/cupy_tests/testing_tests/test_array.py ........................... [ 39%]
...............................................                          [ 39%]
tests/cupy_tests/testing_tests/test_condition.py ................        [ 39%]
tests/cupy_tests/testing_tests/test_helper.py .......................... [ 39%]
................................F....................................... [ 39%]
.....sssss..sssssss..ssxxxxxxxx................x..x.................     [ 39%]
tests/cupy_tests/testing_tests/test_parameterized.py ............s.s.s.s [ 39%]
....ssss......                                                           [ 39%]
tests/cupyx_tests/test_cupyx.py ..                                       [ 39%]
tests/cupyx_tests/test_lapack.py .s.s.s.s.....s.s.s.s.....s.s.s.s.....s. [ 39%]
s.s.s.............sssssssssssss                                          [ 39%]
tests/cupyx_tests/test_optimize.py sssssssss                             [ 39%]
tests/cupyx_tests/test_rsqrt.py .                                        [ 39%]
tests/cupyx_tests/test_runtime.py s.                                     [ 39%]
tests/cupyx_tests/test_scatter.py ...                                    [ 39%]
tests/cupyx_tests/test_time.py .........                                 [ 39%]
tests/cupyx_tests/fallback_mode_tests/test_fallback.py ................. [ 39%]
........................................................................ [ 40%]
.........                                                                [ 40%]
tests/cupyx_tests/fallback_mode_tests/test_notifications.py .........    [ 40%]
tests/cupyx_tests/jit_tests/test_raw.py ....                             [ 40%]
tests/cupyx_tests/linalg_tests/test_solve.py xxxxxxxxxxxxxxxx....ssss    [ 40%]
tests/cupyx_tests/scipy_tests/test_get_array_module.py ss                [ 40%]
tests/cupyx_tests/scipy_tests/fft_tests/test_fft.py .ss.....ss.....ss... [ 40%]
..ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss..... [ 40%]
ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss [ 40%]
.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.. [ 40%]
...ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.... [ 40%]
.ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....s [ 40%]
s.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss. [ 40%]
....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss... [ 40%]
..ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss..... [ 41%]
ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss [ 41%]
.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.. [ 41%]
...ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.... [ 41%]
.ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....s [ 41%]
s.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss. [ 41%]
....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss... [ 41%]
..ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss..... [ 41%]
ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss [ 41%]
.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.. [ 42%]
...ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.... [ 42%]
.ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....s [ 42%]
s.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss. [ 42%]
....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss... [ 42%]
..ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss..... [ 42%]
ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss [ 42%]
.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.. [ 42%]
...ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.... [ 42%]
.ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....s [ 43%]
s.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss. [ 43%]
....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss... [ 43%]
..ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss..... [ 43%]
ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss.....ss [ 43%]
.....ss.....ss.....ss.....ss.....s.....s.....s.....s.....s.....s.....s.. [ 43%]
...s.....s.....s.....s.....s.....s.....s.....s.....s.....s.....s.....s.. [ 43%]
...s.....s.....s.....s.....s.....s.....s.....s.....s.....s.....s.....s.. [ 43%]
...s.....s.....s.....s.....s.....s.....s.....s.....s.....s.....s.....s.. [ 43%]
...s.....s.....s.....s.....s.....s.....s.....s.....s.....s.....s.....s.. [ 44%]
...s.....s.....s.....s.....s.....s.....s.....s.....s.....s.....s.....s.. [ 44%]
...s.....s.....s.....s.....s.....s.....s.....s.....s.....s.....s.....s.. [ 44%]
...s.....s.....s.....s.....s.....s.....s.....s.....s.....s.....s.....s.. [ 44%]
...s.....s.....s.....s.....s.....s.....s.....s.....s.....s.....s.....s.. [ 44%]
...s.....s.....s.....s.....s.....s.....s.....s.....s.....s.....s.....s.. [ 44%]
...s.....s.....s.....s.....s.....s.....s.....s.....s.....s.....s.....s.. [ 44%]
...s.....s.sss.s.....s.sss.s.....s.sss.s.....s.sss.s.....s.sss.s.....s.s [ 44%]
ss.s.....s.sss.s.....s.sss.s.....s.sss.s.....s.sss.s.....s.sss.s.....s.s [ 44%]
ss.s.....s.sss.s.....s.sss.s.....s.sss.s.....s.sss.s.....s.sss.s.....s.s [ 45%]
ss.s.....s.sss.s.....s.sss.s.....s.sss.s.....s.sss.s.....s.sss.s.....s.s [ 45%]
ss.s.....s.sss.s.....s.sss.s.....s.sss.s.....s.sss.s.....s...s...s...s.. [ 45%]
.s...s...s...s...s...s...s...s...s...s...s...s...s...s...s...s...s...s.. [ 45%]
.s...s...s...s...s...s...s...s...s...s...s...s...s...s...s...s...s...s.. [ 45%]
.s...s...s...s...s...s...s...s...s...s...s...s...s...s...s...s...s...s.. [ 45%]
.s...s...s...s...s...s..........                                         [ 45%]
tests/cupyx_tests/scipy_tests/fft_tests/test_helper.py .                 [ 45%]
tests/cupyx_tests/scipy_tests/fftpack_tests/test_fftpack.py ssssssssssss [ 45%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 45%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 45%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 46%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 46%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 46%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 46%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 46%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 46%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 46%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 46%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 46%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 47%]
sssssssssssssssssss......                                                [ 47%]
tests/cupyx_tests/scipy_tests/linalg_tests/test_decomp_lu.py sssssssssss [ 47%]
sssssssssssssssssssssssssssssssssssssssssssssssssss                      [ 47%]
tests/cupyx_tests/scipy_tests/linalg_tests/test_solve_triangular.py ssss [ 47%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 47%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 47%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 47%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss     [ 47%]
tests/cupyx_tests/scipy_tests/linalg_tests/test_special_matrices.py ssss [ 47%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 47%]
sssssssssssssssssssssssssssssssssssssssssssssssss                        [ 47%]
tests/cupyx_tests/scipy_tests/ndimage_tests/test_filters.py ssssssssssss [ 47%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 47%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 48%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 48%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 48%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 48%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 48%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 48%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 48%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 48%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 49%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 49%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 49%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 49%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 49%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 49%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 49%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 49%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 49%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 50%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 50%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 50%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 50%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 50%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 50%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 50%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 50%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 50%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 51%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 51%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 51%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 51%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 51%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 51%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 51%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 51%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 51%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 52%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 52%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 52%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 52%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 52%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 52%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 52%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 52%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 52%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 53%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 53%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 53%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 53%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 53%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 53%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 53%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 53%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 53%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 54%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 54%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 54%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 54%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 54%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 54%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 54%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 54%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 55%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 55%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 55%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 55%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 55%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 55%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 55%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 55%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 55%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 56%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 56%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 56%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 56%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 56%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 56%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 56%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 56%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 56%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 57%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 57%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 57%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 57%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 57%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 57%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 57%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 57%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 57%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 58%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 58%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 58%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 58%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 58%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 58%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 58%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 58%]
ssssssssssssssssssssssssssssssssssss                                     [ 58%]
tests/cupyx_tests/scipy_tests/ndimage_tests/test_fourier.py ssssssssssss [ 58%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 59%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 59%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 59%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 59%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 59%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 59%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 59%]
ssssssssssssssssssssssssssssssssssssssss                                 [ 59%]
tests/cupyx_tests/scipy_tests/ndimage_tests/test_interpolation.py ssssss [ 59%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 59%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 60%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 60%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 60%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 60%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 60%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 60%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 60%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 60%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 60%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 61%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 61%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 61%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 61%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 61%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 61%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 61%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 61%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 61%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 62%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 62%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 62%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 62%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 62%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 62%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 62%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 62%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 62%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 63%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 63%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 63%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 63%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 63%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 63%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 63%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 63%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 63%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 64%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 64%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 64%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 64%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 64%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 64%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 64%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 64%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 64%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 65%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 65%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 65%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 65%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 65%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 65%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 65%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 65%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 65%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 66%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 66%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 66%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 66%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 66%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 66%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 66%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 66%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 67%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 67%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 67%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 67%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 67%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 67%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 67%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 67%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 67%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 68%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 68%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 68%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 68%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 68%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 68%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 68%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 68%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 68%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 69%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 69%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 69%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 69%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 69%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 69%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 69%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 69%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 69%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 70%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 70%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 70%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 70%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 70%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 70%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 70%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 70%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 70%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 71%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 71%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 71%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 71%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 71%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 71%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 71%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 71%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 71%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 72%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 72%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 72%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 72%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 72%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 72%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 72%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 72%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 73%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 73%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 73%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 73%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 73%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 73%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 73%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 73%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 73%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 74%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 74%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 74%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 74%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 74%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 74%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 74%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 74%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 74%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 75%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 75%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 75%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 75%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 75%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 75%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 75%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 75%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 75%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 76%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 76%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 76%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 76%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 76%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 76%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 76%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 76%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 76%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 77%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 77%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 77%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 77%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 77%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 77%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 77%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 77%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 77%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 78%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 78%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 78%]
ssssssssssssssss........................................................ [ 78%]
........................................................................ [ 78%]
........................................................................ [ 78%]
........................................ssssssssssssssssssssssssssssssss [ 78%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 78%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 78%]
sssssssssssssssssssssssssssssssssssssssss............................... [ 79%]
.........sssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 79%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 79%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 79%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 79%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 79%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 79%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 79%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 80%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 80%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 80%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 80%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 80%]
sssssssssssssssssssssssssssssssssssssssssssssssssssssssssss              [ 80%]
tests/cupyx_tests/scipy_tests/ndimage_tests/test_measurements.py sssssss [ 80%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 80%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 80%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 80%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 81%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 81%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 81%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 81%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 81%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 81%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 81%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 81%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 81%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 82%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 82%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 82%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 82%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 82%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 82%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 82%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 82%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 82%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 83%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 83%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 83%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 83%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 83%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 83%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 83%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 83%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 83%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 84%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 84%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 84%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 84%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 84%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 84%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 84%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 84%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 84%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 85%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 85%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 85%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 85%]
sss                                                                      [ 85%]
tests/cupyx_tests/scipy_tests/ndimage_tests/test_morphology.py sssssssss [ 85%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 85%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 85%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 85%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 85%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 86%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 86%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 86%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 86%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 86%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 86%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 86%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 86%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 86%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 87%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 87%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 87%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 87%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 87%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 87%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 87%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 87%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 87%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 88%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 88%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 88%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 88%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 88%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 88%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 88%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 88%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 88%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 89%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 89%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 89%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 89%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 89%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 89%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 89%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 89%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 89%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 90%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 90%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 90%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 90%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 90%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 90%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 90%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 90%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 90%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 91%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 91%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 91%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 91%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 91%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 91%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 91%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 91%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 91%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 92%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 92%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 92%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 92%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 92%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 92%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 92%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 92%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 93%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 93%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 93%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 93%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 93%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 93%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 93%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 93%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 93%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 94%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 94%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 94%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 94%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 94%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 94%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 94%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 94%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 94%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 95%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 95%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 95%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 95%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 95%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 95%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 95%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 95%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 95%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 96%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 96%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 96%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 96%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 96%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 96%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 96%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 96%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 96%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 97%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 97%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 97%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 97%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 97%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 97%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 97%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 97%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 97%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 98%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 98%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 98%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 98%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 98%]
                                                                         [ 98%]
tests/cupyx_tests/scipy_tests/signal_tests/test_bsplines.py ssssssssssss [ 98%]
                                                                         [ 98%]
tests/cupyx_tests/scipy_tests/signal_tests/test_signaltools.py sssssssss [ 98%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 98%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 98%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 98%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 99%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 99%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 99%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 99%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 99%]
sssssssssssssss...............ssssssssssssssssssssssssssssssssssssssssss [ 99%]
ssssssssssssssssssssssssssssssssssss                                     [ 99%]
tests/cupyx_tests/scipy_tests/special_tests/test_bessel.py ssssssssssss  [ 99%]
tests/cupyx_tests/scipy_tests/special_tests/test_convex_analysis.py ssss [ 99%]
s                                                                        [ 99%]
tests/cupyx_tests/scipy_tests/special_tests/test_digamma.py sssss        [ 99%]
tests/cupyx_tests/scipy_tests/special_tests/test_erf.py ssssssssssss     [ 99%]
tests/cupyx_tests/scipy_tests/special_tests/test_gamma.py ssss           [ 99%]
tests/cupyx_tests/scipy_tests/special_tests/test_gammaln.py ssss         [ 99%]
tests/cupyx_tests/scipy_tests/special_tests/test_polygamma.py ssss       [ 99%]
tests/cupyx_tests/scipy_tests/special_tests/test_statistics.py ss        [ 99%]
tests/cupyx_tests/scipy_tests/special_tests/test_zeta.py ssss            [ 99%]
tests/cupyx_tests/scipy_tests/stats_tests/test_distributions.py ssssssss [ 99%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 99%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss........ [ 99%]
                                                                         [ 99%]
tests/cupyx_tests/tools_tests/test_install_library.py ..                 [ 99%]
tests/example_tests/test_finance.py .FF                                  [ 99%]
tests/example_tests/test_gemm.py .                                       [ 99%]
tests/example_tests/test_gmm.py ss                                       [ 99%]
tests/example_tests/test_kmeans.py sss                                   [ 99%]
tests/install_tests/test_build.py FF                                     [ 99%]
tests/install_tests/test_utils.py ..                                     [100%]

=================================== FAILURES ===================================
______________ TestNdarrayToBytes_param_1_{shape=(1,)}.test_item _______________
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <<cupy_tests.core_tests.test_ndarray_conversion.TestNdarrayToBytes_param_1_{shape=(1,)} testMethod=test_item>  parameter: {'shape': (1,)}>
args = (), kw = {'dtype': <class 'numpy.float16'>}, cupy_result = b'\x00\x00'
cupy_error = None, numpy_result = b'\x00<', numpy_error = None
message = "Results are not equal:\ncupy: b'\\x00\\x00'\nnumpy: b'\\x00<'"

            @_wraps_partial_xp(impl, name, sp_name, scipy_name)
            def test_func(self, *args, **kw):
                # Run cupy and numpy
                (
                    cupy_result, cupy_error,
                    numpy_result, numpy_error) = (
                        _call_func_numpy_cupy(
                            self, impl, args, kw, name, sp_name, scipy_name))
    
                if cupy_error or numpy_error:
                    _check_cupy_numpy_error(
                        cupy_error, numpy_error,
                        accept_error=False)
                    return
    
                if cupy_result != numpy_result:
                    message = '''Results are not equal:
    cupy: %s
    numpy: %s''' % (str(cupy_result), str(numpy_result))
>                   raise AssertionError(message)
E                   AssertionError: Results are not equal:
E                   cupy: b'\x00\x00'
E                   numpy: b'\x00<'

cupy/testing/helper.py:758: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float16'>
_____________ TestNdarrayToBytes_param_2_{shape=(2, 3)}.test_item ______________
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <<cupy_tests.core_tests.test_ndarray_conversion.TestNdarrayToBytes_param_2_{shape=(2, 3)} testMethod=test_item>  parameter: {'shape': (2, 3)}>
args = (), kw = {'dtype': <class 'numpy.float64'>}
cupy_result = b'\x00\x00\x80?\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x08@\x00\x00\x00\x00\x00\x00\x10@\x00\x00\x00\x00\x00\x00\x14@\x00\x00\x00\x00\x00\x00\x18@'
cupy_error = None
numpy_result = b'\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x08@\x00\x00\x00\x00\x00\x00\x10@\x00\x00\x00\x00\x00\x00\x14@\x00\x00\x00\x00\x00\x00\x18@'
numpy_error = None
message = "Results are not equal:\ncupy: b'\\x00\\x00\\x80?\\x00\\x00\\xf0?\\x00\\x00\\x00\\x00\\x00\\x00\\x00@\\x00\\x00\\x00\\...x00\\x08@\\x00\\x00\\x00\\x00\\x00\\x00\\x10@\\x00\\x00\\x00\\x00\\x00\\x00\\x14@\\x00\\x00\\x00\\x00\\x00\\x00\\x18@'"

            @_wraps_partial_xp(impl, name, sp_name, scipy_name)
            def test_func(self, *args, **kw):
                # Run cupy and numpy
                (
                    cupy_result, cupy_error,
                    numpy_result, numpy_error) = (
                        _call_func_numpy_cupy(
                            self, impl, args, kw, name, sp_name, scipy_name))
    
                if cupy_error or numpy_error:
                    _check_cupy_numpy_error(
                        cupy_error, numpy_error,
                        accept_error=False)
                    return
    
                if cupy_result != numpy_result:
                    message = '''Results are not equal:
    cupy: %s
    numpy: %s''' % (str(cupy_result), str(numpy_result))
>                   raise AssertionError(message)
E                   AssertionError: Results are not equal:
E                   cupy: b'\x00\x00\x80?\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x08@\x00\x00\x00\x00\x00\x00\x10@\x00\x00\x00\x00\x00\x00\x14@\x00\x00\x00\x00\x00\x00\x18@'
E                   numpy: b'\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x08@\x00\x00\x00\x00\x00\x00\x10@\x00\x00\x00\x00\x00\x00\x14@\x00\x00\x00\x00\x00\x00\x18@'

cupy/testing/helper.py:758: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestArrayIndexingParameterized_param_0_{indexes=(1, 0, 2), shape=(2, 3, 4), transpose=None}.test_getitem _
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:648: in check_func
    array.assert_array_equal(x, y, err_msg, verbose, strides_check)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array(15., dtype=float16), y = 15.0, err_msg = '', verbose = True
strides_check = False

    def assert_array_equal(x, y, err_msg='', verbose=True, strides_check=False):
        """Raises an AssertionError if two array_like objects are not equal.
    
        Args:
             x(numpy.ndarray or cupy.ndarray): The actual object to check.
             y(numpy.ndarray or cupy.ndarray): The desired, expected object.
             strides_check(bool): If ``True``, consistency of strides is also
                 checked.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting values
                 are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_array_equal`
        """
>       numpy.testing.assert_array_equal(
            cupy.asnumpy(x), cupy.asnumpy(y), err_msg=err_msg,
            verbose=verbose)
E       AssertionError: 
E       Arrays are not equal
E       
E       Mismatched elements: 1 / 1 (100%)
E       Max absolute difference: 15.
E       Max relative difference: 1.
E        x: array(0., dtype=float16)
E        y: array(15., dtype=float16)

cupy/testing/array.py:91: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float16'>
_ TestArrayIndexingParameterized_param_1_{indexes=(-1, 0, -2), shape=(2, 3, 4), transpose=None}.test_getitem _
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:648: in check_func
    array.assert_array_equal(x, y, err_msg, verbose, strides_check)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array(15., dtype=float16), y = 15.0, err_msg = '', verbose = True
strides_check = False

    def assert_array_equal(x, y, err_msg='', verbose=True, strides_check=False):
        """Raises an AssertionError if two array_like objects are not equal.
    
        Args:
             x(numpy.ndarray or cupy.ndarray): The actual object to check.
             y(numpy.ndarray or cupy.ndarray): The desired, expected object.
             strides_check(bool): If ``True``, consistency of strides is also
                 checked.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting values
                 are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_array_equal`
        """
>       numpy.testing.assert_array_equal(
            cupy.asnumpy(x), cupy.asnumpy(y), err_msg=err_msg,
            verbose=verbose)
E       AssertionError: 
E       Arrays are not equal
E       
E       Mismatched elements: 1 / 1 (100%)
E       Max absolute difference: 15.
E       Max relative difference: 1.
E        x: array(0., dtype=float16)
E        y: array(15., dtype=float16)

cupy/testing/array.py:91: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float16'>
_ TestArrayIndexingParameterized_param_2_{indexes=(1, 0, 2), shape=(2, 3, 4), transpose=(2, 0, 1)}.test_getitem _
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:648: in check_func
    array.assert_array_equal(x, y, err_msg, verbose, strides_check)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array(10., dtype=float32), y = 10.0, err_msg = '', verbose = True
strides_check = False

    def assert_array_equal(x, y, err_msg='', verbose=True, strides_check=False):
        """Raises an AssertionError if two array_like objects are not equal.
    
        Args:
             x(numpy.ndarray or cupy.ndarray): The actual object to check.
             y(numpy.ndarray or cupy.ndarray): The desired, expected object.
             strides_check(bool): If ``True``, consistency of strides is also
                 checked.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting values
                 are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_array_equal`
        """
>       numpy.testing.assert_array_equal(
            cupy.asnumpy(x), cupy.asnumpy(y), err_msg=err_msg,
            verbose=verbose)
E       AssertionError: 
E       Arrays are not equal
E       
E       Mismatched elements: 1 / 1 (100%)
E       Max absolute difference: 7.6875
E       Max relative difference: 0.76875
E        x: array(2.3125, dtype=float32)
E        y: array(10., dtype=float32)

cupy/testing/array.py:91: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
_ TestArrayIndexingParameterized_param_3_{indexes=(-1, 0, -2), shape=(2, 3, 4), transpose=(2, 0, 1)}.test_getitem _
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:648: in check_func
    array.assert_array_equal(x, y, err_msg, verbose, strides_check)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array(8, dtype=int16), y = 8, err_msg = '', verbose = True
strides_check = False

    def assert_array_equal(x, y, err_msg='', verbose=True, strides_check=False):
        """Raises an AssertionError if two array_like objects are not equal.
    
        Args:
             x(numpy.ndarray or cupy.ndarray): The actual object to check.
             y(numpy.ndarray or cupy.ndarray): The desired, expected object.
             strides_check(bool): If ``True``, consistency of strides is also
                 checked.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting values
                 are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_array_equal`
        """
>       numpy.testing.assert_array_equal(
            cupy.asnumpy(x), cupy.asnumpy(y), err_msg=err_msg,
            verbose=verbose)
E       AssertionError: 
E       Arrays are not equal
E       
E       Mismatched elements: 1 / 1 (100%)
E       Max absolute difference: 16376
E       Max relative difference: 2047.
E        x: array(16384, dtype=int16)
E        y: array(8, dtype=int16)

cupy/testing/array.py:91: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.int16'>
_ TestArrayIndexingParameterized_param_27_{indexes=(slice(-4, -5, -1),), shape=(10,), transpose=None}.test_getitem _
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:648: in check_func
    array.assert_array_equal(x, y, err_msg, verbose, strides_check)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([7.], dtype=float32), y = array([7.], dtype=float32), err_msg = ''
verbose = True, strides_check = False

    def assert_array_equal(x, y, err_msg='', verbose=True, strides_check=False):
        """Raises an AssertionError if two array_like objects are not equal.
    
        Args:
             x(numpy.ndarray or cupy.ndarray): The actual object to check.
             y(numpy.ndarray or cupy.ndarray): The desired, expected object.
             strides_check(bool): If ``True``, consistency of strides is also
                 checked.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting values
                 are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_array_equal`
        """
>       numpy.testing.assert_array_equal(
            cupy.asnumpy(x), cupy.asnumpy(y), err_msg=err_msg,
            verbose=verbose)
E       AssertionError: 
E       Arrays are not equal
E       
E       Mismatched elements: 1 / 1 (100%)
E       Max absolute difference: 7.
E       Max relative difference: 1.
E        x: array([0.], dtype=float32)
E        y: array([7.], dtype=float32)

cupy/testing/array.py:91: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
_ TestArrayIndexingParameterized_param_38_{indexes=(slice(-5, -6, -1),), shape=(10,), transpose=None}.test_getitem _
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:648: in check_func
    array.assert_array_equal(x, y, err_msg, verbose, strides_check)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([6], dtype=int8), y = array([6], dtype=int8), err_msg = ''
verbose = True, strides_check = False

    def assert_array_equal(x, y, err_msg='', verbose=True, strides_check=False):
        """Raises an AssertionError if two array_like objects are not equal.
    
        Args:
             x(numpy.ndarray or cupy.ndarray): The actual object to check.
             y(numpy.ndarray or cupy.ndarray): The desired, expected object.
             strides_check(bool): If ``True``, consistency of strides is also
                 checked.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting values
                 are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_array_equal`
        """
>       numpy.testing.assert_array_equal(
            cupy.asnumpy(x), cupy.asnumpy(y), err_msg=err_msg,
            verbose=verbose)
E       AssertionError: 
E       Arrays are not equal
E       
E       Mismatched elements: 1 / 1 (100%)
E       Max absolute difference: 6
E       Max relative difference: 1.
E        x: array([0], dtype=int8)
E        y: array([6], dtype=int8)

cupy/testing/array.py:91: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.int8'>
____________________ TestArrayBoolOp.test_bool_one_element _____________________

self = <cupy_tests.core_tests.test_ndarray_unary_op.TestArrayBoolOp testMethod=test_bool_one_element>
dtype = <class 'numpy.float16'>

    @testing.for_all_dtypes()
    def test_bool_one_element(self, dtype):
>       assert bool(cupy.array([1], dtype=dtype))
E       AssertionError: assert False
E        +  where False = bool(array([1.], dtype=float16))
E        +    where array([1.], dtype=float16) = <function array at 0x7f9ec2646160>([1], dtype=<class 'numpy.float16'>)
E        +      where <function array at 0x7f9ec2646160> = cupy.array

tests/cupy_tests/core_tests/test_ndarray_unary_op.py:34: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float16'>
______________ TestFromData.test_array_from_list_of_numpy_scalar _______________
cupy/testing/helper.py:1175: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:648: in check_func
    array.assert_array_equal(x, y, err_msg, verbose, strides_check)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([0, 1], dtype=int8), y = array([0, 1], dtype=int8), err_msg = ''
verbose = True, strides_check = True

    def assert_array_equal(x, y, err_msg='', verbose=True, strides_check=False):
        """Raises an AssertionError if two array_like objects are not equal.
    
        Args:
             x(numpy.ndarray or cupy.ndarray): The actual object to check.
             y(numpy.ndarray or cupy.ndarray): The desired, expected object.
             strides_check(bool): If ``True``, consistency of strides is also
                 checked.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting values
                 are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_array_equal`
        """
>       numpy.testing.assert_array_equal(
            cupy.asnumpy(x), cupy.asnumpy(y), err_msg=err_msg,
            verbose=verbose)
E       AssertionError: 
E       Arrays are not equal
E       
E       Mismatched elements: 1 / 2 (50%)
E       Max absolute difference: 1
E       Max relative difference: 1.
E        x: array([0, 0], dtype=int8)
E        y: array([0, 1], dtype=int8)

cupy/testing/array.py:91: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.int8'>
order is C
____________________ TestDeviceHandles.test_cusparse_handle ____________________

self = <cupy_tests.cuda_tests.test_device.TestDeviceHandles testMethod=test_cusparse_handle>

    def test_cusparse_handle(self):
>       self._check_handle(cuda.device.get_cusparse_handle)

tests/cupy_tests/cuda_tests/test_device.py:149: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <cupy_tests.cuda_tests.test_device.TestDeviceHandles testMethod=test_cusparse_handle>
func = <built-in function get_cusparse_handle>

    def _check_handle(self, func):
        handles = [func(), None, None]
    
        def _subthread():
            handles[1] = func()
            handles[2] = func()
    
        t = threading.Thread(target=_subthread)
        t.start()
        t.join()
        assert handles[0] is not None
>       assert handles[0] != handles[1]
E       AssertionError: assert 140320921000400 != 140320921000400

tests/cupy_tests/cuda_tests/test_device.py:136: AssertionError
_ TestPolyArithmeticDiffTypes_param_2_{fname='polymul'}.test_polyroutine_diff_types_array _
cupy/testing/helper.py:1068: in test_func
    impl(self, *args, **kw_copy)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:495: in check_func
    array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([ 1.74386169e-05  +1.999987j, -8.70033273e-06  +8.000005j,
        3.22509732e-05 +20.j      , -1.31668885e-05 +...,  1.34253614e-05+211.99995j ,
        1.82537897e-05+169.99998j ,  7.00168357e-06 +99.99997j ],
      dtype=complex64)
desired = array([0.  +2.j, 0.  +8.j, 0. +20.j, 0. +40.j, 0. +70.j, 0.+100.j,
       0.+130.j, 0.+160.j, 0.+190.j, 0.+220.j, 0.+228.j, 0.+212.j,
       0.+170.j, 0.+100.j], dtype=complex64)
rtol = 1e-05, atol = 0, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-05, atol=0
E       
E       Mismatched elements: 1 / 14 (7.14%)
E       Max absolute difference: 6.121e-05
E       Max relative difference: 1.0873644e-05
E        x: array([ 1.743862e-05  +1.999987j, -8.700333e-06  +8.000005j,
E               3.225097e-05 +20.j      , -1.316689e-05 +40.00001j ,
E               1.074560e-05 +69.999985j,  5.520945e-07 +99.99997j ,...
E        y: array([0.  +2.j, 0.  +8.j, 0. +20.j, 0. +40.j, 0. +70.j, 0.+100.j,
E              0.+130.j, 0.+160.j, 0.+190.j, 0.+220.j, 0.+228.j, 0.+212.j,
E              0.+170.j, 0.+100.j], dtype=complex64)

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.complex64'>}
_ TestPolyArithmeticDiffTypes_param_2_{fname='polymul'}.test_polyroutine_diff_types_poly1d _
cupy/testing/helper.py:1068: in test_func
    impl(self, *args, **kw_copy)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:495: in check_func
    array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([ 1.74386169e-05  +1.999987j, -8.70033273e-06  +8.000005j,
        3.22509732e-05 +20.j      , -1.31668885e-05 +...,  1.34253614e-05+211.99995j ,
        1.82537897e-05+169.99998j ,  7.00168357e-06 +99.99997j ],
      dtype=complex64)
desired = array([0.  +2.j, 0.  +8.j, 0. +20.j, 0. +40.j, 0. +70.j, 0.+100.j,
       0.+130.j, 0.+160.j, 0.+190.j, 0.+220.j, 0.+228.j, 0.+212.j,
       0.+170.j, 0.+100.j], dtype=complex64)
rtol = 1e-05, atol = 0, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-05, atol=0
E       
E       Mismatched elements: 1 / 14 (7.14%)
E       Max absolute difference: 6.121e-05
E       Max relative difference: 1.0873644e-05
E        x: array([ 1.743862e-05  +1.999987j, -8.700333e-06  +8.000005j,
E               3.225097e-05 +20.j      , -1.316689e-05 +40.00001j ,
E               1.074560e-05 +69.999985j,  5.520945e-07 +99.99997j ,...
E        y: array([0.  +2.j, 0.  +8.j, 0. +20.j, 0. +40.j, 0. +70.j, 0.+100.j,
E              0.+130.j, 0.+160.j, 0.+190.j, 0.+220.j, 0.+228.j, 0.+212.j,
E              0.+170.j, 0.+100.j], dtype=complex64)

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.complex64'>}
_ TestPolyfitParametersCombinations_param_0_{deg=0, rcond=None, shape1=(3,), shape2=(3,), weighted=True}.test_polyfit_default _
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:495: in check_func
    array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([-2.57142857]), desired = array([2.57142857]), rtol = 1e-07
atol = 1e-09, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=1e-09
E       
E       Mismatched elements: 1 / 1 (100%)
E       Max absolute difference: 5.14285714
E       Max relative difference: 2.
E        x: array([-2.571429])
E        y: array([2.571429])

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestPolyfitParametersCombinations_param_0_{deg=0, rcond=None, shape1=(3,), shape2=(3,), weighted=True}.test_polyfit_full _

self = <<cupy_tests.lib_tests.test_polynomial.TestPolyfitParametersCombinations_param_0_{deg=0, rcond=None, shape1=(3,), shap... testMethod=test_polyfit_full>  parameter: {'deg': 0, 'rcond': None, 'shape1': (3,), 'shape2': (3,), 'weighted': True}>
dtype = <class 'numpy.float64'>

    @testing.for_all_dtypes(no_float16=True)
    def test_polyfit_full(self, dtype):
        cp_c, cp_resids, cp_rank, cp_s, cp_rcond = self._full_fit(cupy, dtype)
        np_c, np_resids, np_rank, np_s, np_rcond = self._full_fit(numpy, dtype)
    
>       testing.assert_allclose(cp_c, np_c, atol=1e-9)

tests/cupy_tests/lib_tests/test_polynomial.py:498: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([-2.57142857]), desired = array([2.57142857]), rtol = 1e-07
atol = 1e-09, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=1e-09
E       
E       Mismatched elements: 1 / 1 (100%)
E       Max absolute difference: 5.14285714
E       Max relative difference: 2.
E        x: array([-2.571429])
E        y: array([2.571429])

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestPolyfitParametersCombinations_param_1_{deg=0, rcond=None, shape1=(3,), shape2=(3,), weighted=False}.test_polyfit_default _
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:495: in check_func
    array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([-2.]), desired = array([2.]), rtol = 1e-07, atol = 1e-09
err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=1e-09
E       
E       Mismatched elements: 1 / 1 (100%)
E       Max absolute difference: 4.
E       Max relative difference: 2.
E        x: array([-2.])
E        y: array([2.])

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestPolyfitParametersCombinations_param_1_{deg=0, rcond=None, shape1=(3,), shape2=(3,), weighted=False}.test_polyfit_full _

self = <<cupy_tests.lib_tests.test_polynomial.TestPolyfitParametersCombinations_param_1_{deg=0, rcond=None, shape1=(3,), shap...testMethod=test_polyfit_full>  parameter: {'deg': 0, 'rcond': None, 'shape1': (3,), 'shape2': (3,), 'weighted': False}>
dtype = <class 'numpy.float64'>

    @testing.for_all_dtypes(no_float16=True)
    def test_polyfit_full(self, dtype):
        cp_c, cp_resids, cp_rank, cp_s, cp_rcond = self._full_fit(cupy, dtype)
        np_c, np_resids, np_rank, np_s, np_rcond = self._full_fit(numpy, dtype)
    
>       testing.assert_allclose(cp_c, np_c, atol=1e-9)

tests/cupy_tests/lib_tests/test_polynomial.py:498: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([-2.]), desired = array([2.]), rtol = 1e-07, atol = 1e-09
err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=1e-09
E       
E       Mismatched elements: 1 / 1 (100%)
E       Max absolute difference: 4.
E       Max relative difference: 2.
E        x: array([-2.])
E        y: array([2.])

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestPolyfitParametersCombinations_param_2_{deg=0, rcond=None, shape1=(3,), shape2=(3, 2), weighted=True}.test_polyfit_default _
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:495: in check_func
    array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[-4.14285714, -5.14285714]])
desired = array([[4.14285714, 5.14285714]]), rtol = 1e-07, atol = 1e-09
err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=1e-09
E       
E       Mismatched elements: 2 / 2 (100%)
E       Max absolute difference: 10.28571429
E       Max relative difference: 2.
E        x: array([[-4.142857, -5.142857]])
E        y: array([[4.142857, 5.142857]])

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestPolyfitParametersCombinations_param_2_{deg=0, rcond=None, shape1=(3,), shape2=(3, 2), weighted=True}.test_polyfit_full _

self = <<cupy_tests.lib_tests.test_polynomial.TestPolyfitParametersCombinations_param_2_{deg=0, rcond=None, shape1=(3,), shap...estMethod=test_polyfit_full>  parameter: {'deg': 0, 'rcond': None, 'shape1': (3,), 'shape2': (3, 2), 'weighted': True}>
dtype = <class 'numpy.float64'>

    @testing.for_all_dtypes(no_float16=True)
    def test_polyfit_full(self, dtype):
        cp_c, cp_resids, cp_rank, cp_s, cp_rcond = self._full_fit(cupy, dtype)
        np_c, np_resids, np_rank, np_s, np_rcond = self._full_fit(numpy, dtype)
    
>       testing.assert_allclose(cp_c, np_c, atol=1e-9)

tests/cupy_tests/lib_tests/test_polynomial.py:498: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[-4.14285714, -5.14285714]])
desired = array([[4.14285714, 5.14285714]]), rtol = 1e-07, atol = 1e-09
err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=1e-09
E       
E       Mismatched elements: 2 / 2 (100%)
E       Max absolute difference: 10.28571429
E       Max relative difference: 2.
E        x: array([[-4.142857, -5.142857]])
E        y: array([[4.142857, 5.142857]])

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestPolyfitParametersCombinations_param_3_{deg=0, rcond=None, shape1=(3,), shape2=(3, 2), weighted=False}.test_polyfit_default _
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:495: in check_func
    array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[-3., -4.]]), desired = array([[3., 4.]]), rtol = 1e-07
atol = 1e-09, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=1e-09
E       
E       Mismatched elements: 2 / 2 (100%)
E       Max absolute difference: 8.
E       Max relative difference: 2.
E        x: array([[-3., -4.]])
E        y: array([[3., 4.]])

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestPolyfitParametersCombinations_param_3_{deg=0, rcond=None, shape1=(3,), shape2=(3, 2), weighted=False}.test_polyfit_full _

self = <<cupy_tests.lib_tests.test_polynomial.TestPolyfitParametersCombinations_param_3_{deg=0, rcond=None, shape1=(3,), shap...stMethod=test_polyfit_full>  parameter: {'deg': 0, 'rcond': None, 'shape1': (3,), 'shape2': (3, 2), 'weighted': False}>
dtype = <class 'numpy.float64'>

    @testing.for_all_dtypes(no_float16=True)
    def test_polyfit_full(self, dtype):
        cp_c, cp_resids, cp_rank, cp_s, cp_rcond = self._full_fit(cupy, dtype)
        np_c, np_resids, np_rank, np_s, np_rcond = self._full_fit(numpy, dtype)
    
>       testing.assert_allclose(cp_c, np_c, atol=1e-9)

tests/cupy_tests/lib_tests/test_polynomial.py:498: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[-3., -4.]]), desired = array([[3., 4.]]), rtol = 1e-07
atol = 1e-09, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=1e-09
E       
E       Mismatched elements: 2 / 2 (100%)
E       Max absolute difference: 8.
E       Max relative difference: 2.
E        x: array([[-3., -4.]])
E        y: array([[3., 4.]])

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestPolyfitParametersCombinations_param_4_{deg=0, rcond=0.5, shape1=(3,), shape2=(3,), weighted=True}.test_polyfit_default _
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:495: in check_func
    array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([-2.57142857]), desired = array([2.57142857]), rtol = 1e-07
atol = 1e-09, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=1e-09
E       
E       Mismatched elements: 1 / 1 (100%)
E       Max absolute difference: 5.14285714
E       Max relative difference: 2.
E        x: array([-2.571429])
E        y: array([2.571429])

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestPolyfitParametersCombinations_param_4_{deg=0, rcond=0.5, shape1=(3,), shape2=(3,), weighted=True}.test_polyfit_full _

self = <<cupy_tests.lib_tests.test_polynomial.TestPolyfitParametersCombinations_param_4_{deg=0, rcond=0.5, shape1=(3,), shape...} testMethod=test_polyfit_full>  parameter: {'deg': 0, 'rcond': 0.5, 'shape1': (3,), 'shape2': (3,), 'weighted': True}>
dtype = <class 'numpy.float64'>

    @testing.for_all_dtypes(no_float16=True)
    def test_polyfit_full(self, dtype):
        cp_c, cp_resids, cp_rank, cp_s, cp_rcond = self._full_fit(cupy, dtype)
        np_c, np_resids, np_rank, np_s, np_rcond = self._full_fit(numpy, dtype)
    
>       testing.assert_allclose(cp_c, np_c, atol=1e-9)

tests/cupy_tests/lib_tests/test_polynomial.py:498: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([-2.57142857]), desired = array([2.57142857]), rtol = 1e-07
atol = 1e-09, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=1e-09
E       
E       Mismatched elements: 1 / 1 (100%)
E       Max absolute difference: 5.14285714
E       Max relative difference: 2.
E        x: array([-2.571429])
E        y: array([2.571429])

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestPolyfitParametersCombinations_param_5_{deg=0, rcond=0.5, shape1=(3,), shape2=(3,), weighted=False}.test_polyfit_default _
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:495: in check_func
    array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([-2.]), desired = array([2.]), rtol = 1e-07, atol = 1e-09
err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=1e-09
E       
E       Mismatched elements: 1 / 1 (100%)
E       Max absolute difference: 4.
E       Max relative difference: 2.
E        x: array([-2.])
E        y: array([2.])

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestPolyfitParametersCombinations_param_5_{deg=0, rcond=0.5, shape1=(3,), shape2=(3,), weighted=False}.test_polyfit_full _

self = <<cupy_tests.lib_tests.test_polynomial.TestPolyfitParametersCombinations_param_5_{deg=0, rcond=0.5, shape1=(3,), shape... testMethod=test_polyfit_full>  parameter: {'deg': 0, 'rcond': 0.5, 'shape1': (3,), 'shape2': (3,), 'weighted': False}>
dtype = <class 'numpy.float64'>

    @testing.for_all_dtypes(no_float16=True)
    def test_polyfit_full(self, dtype):
        cp_c, cp_resids, cp_rank, cp_s, cp_rcond = self._full_fit(cupy, dtype)
        np_c, np_resids, np_rank, np_s, np_rcond = self._full_fit(numpy, dtype)
    
>       testing.assert_allclose(cp_c, np_c, atol=1e-9)

tests/cupy_tests/lib_tests/test_polynomial.py:498: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([-2.]), desired = array([2.]), rtol = 1e-07, atol = 1e-09
err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=1e-09
E       
E       Mismatched elements: 1 / 1 (100%)
E       Max absolute difference: 4.
E       Max relative difference: 2.
E        x: array([-2.])
E        y: array([2.])

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestPolyfitParametersCombinations_param_6_{deg=0, rcond=0.5, shape1=(3,), shape2=(3, 2), weighted=True}.test_polyfit_default _
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:495: in check_func
    array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[-4.14285714, -5.14285714]])
desired = array([[4.14285714, 5.14285714]]), rtol = 1e-07, atol = 1e-09
err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=1e-09
E       
E       Mismatched elements: 2 / 2 (100%)
E       Max absolute difference: 10.28571429
E       Max relative difference: 2.
E        x: array([[-4.142857, -5.142857]])
E        y: array([[4.142857, 5.142857]])

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestPolyfitParametersCombinations_param_6_{deg=0, rcond=0.5, shape1=(3,), shape2=(3, 2), weighted=True}.test_polyfit_full _

self = <<cupy_tests.lib_tests.test_polynomial.TestPolyfitParametersCombinations_param_6_{deg=0, rcond=0.5, shape1=(3,), shape...testMethod=test_polyfit_full>  parameter: {'deg': 0, 'rcond': 0.5, 'shape1': (3,), 'shape2': (3, 2), 'weighted': True}>
dtype = <class 'numpy.float64'>

    @testing.for_all_dtypes(no_float16=True)
    def test_polyfit_full(self, dtype):
        cp_c, cp_resids, cp_rank, cp_s, cp_rcond = self._full_fit(cupy, dtype)
        np_c, np_resids, np_rank, np_s, np_rcond = self._full_fit(numpy, dtype)
    
>       testing.assert_allclose(cp_c, np_c, atol=1e-9)

tests/cupy_tests/lib_tests/test_polynomial.py:498: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[-4.14285714, -5.14285714]])
desired = array([[4.14285714, 5.14285714]]), rtol = 1e-07, atol = 1e-09
err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=1e-09
E       
E       Mismatched elements: 2 / 2 (100%)
E       Max absolute difference: 10.28571429
E       Max relative difference: 2.
E        x: array([[-4.142857, -5.142857]])
E        y: array([[4.142857, 5.142857]])

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestPolyfitParametersCombinations_param_7_{deg=0, rcond=0.5, shape1=(3,), shape2=(3, 2), weighted=False}.test_polyfit_default _
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:495: in check_func
    array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[-3., -4.]]), desired = array([[3., 4.]]), rtol = 1e-07
atol = 1e-09, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=1e-09
E       
E       Mismatched elements: 2 / 2 (100%)
E       Max absolute difference: 8.
E       Max relative difference: 2.
E        x: array([[-3., -4.]])
E        y: array([[3., 4.]])

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestPolyfitParametersCombinations_param_7_{deg=0, rcond=0.5, shape1=(3,), shape2=(3, 2), weighted=False}.test_polyfit_full _

self = <<cupy_tests.lib_tests.test_polynomial.TestPolyfitParametersCombinations_param_7_{deg=0, rcond=0.5, shape1=(3,), shape...estMethod=test_polyfit_full>  parameter: {'deg': 0, 'rcond': 0.5, 'shape1': (3,), 'shape2': (3, 2), 'weighted': False}>
dtype = <class 'numpy.float64'>

    @testing.for_all_dtypes(no_float16=True)
    def test_polyfit_full(self, dtype):
        cp_c, cp_resids, cp_rank, cp_s, cp_rcond = self._full_fit(cupy, dtype)
        np_c, np_resids, np_rank, np_s, np_rcond = self._full_fit(numpy, dtype)
    
>       testing.assert_allclose(cp_c, np_c, atol=1e-9)

tests/cupy_tests/lib_tests/test_polynomial.py:498: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[-3., -4.]]), desired = array([[3., 4.]]), rtol = 1e-07
atol = 1e-09, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=1e-09
E       
E       Mismatched elements: 2 / 2 (100%)
E       Max absolute difference: 8.
E       Max relative difference: 2.
E        x: array([[-3., -4.]])
E        y: array([[3., 4.]])

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestPolyfitParametersCombinations_param_8_{deg=0, rcond=1e-15, shape1=(3,), shape2=(3,), weighted=True}.test_polyfit_default _
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:495: in check_func
    array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([-2.57142857]), desired = array([2.57142857]), rtol = 1e-07
atol = 1e-09, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=1e-09
E       
E       Mismatched elements: 1 / 1 (100%)
E       Max absolute difference: 5.14285714
E       Max relative difference: 2.
E        x: array([-2.571429])
E        y: array([2.571429])

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestPolyfitParametersCombinations_param_8_{deg=0, rcond=1e-15, shape1=(3,), shape2=(3,), weighted=True}.test_polyfit_full _

self = <<cupy_tests.lib_tests.test_polynomial.TestPolyfitParametersCombinations_param_8_{deg=0, rcond=1e-15, shape1=(3,), sha...testMethod=test_polyfit_full>  parameter: {'deg': 0, 'rcond': 1e-15, 'shape1': (3,), 'shape2': (3,), 'weighted': True}>
dtype = <class 'numpy.float64'>

    @testing.for_all_dtypes(no_float16=True)
    def test_polyfit_full(self, dtype):
        cp_c, cp_resids, cp_rank, cp_s, cp_rcond = self._full_fit(cupy, dtype)
        np_c, np_resids, np_rank, np_s, np_rcond = self._full_fit(numpy, dtype)
    
>       testing.assert_allclose(cp_c, np_c, atol=1e-9)

tests/cupy_tests/lib_tests/test_polynomial.py:498: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([-2.57142857]), desired = array([2.57142857]), rtol = 1e-07
atol = 1e-09, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=1e-09
E       
E       Mismatched elements: 1 / 1 (100%)
E       Max absolute difference: 5.14285714
E       Max relative difference: 2.
E        x: array([-2.571429])
E        y: array([2.571429])

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestPolyfitParametersCombinations_param_9_{deg=0, rcond=1e-15, shape1=(3,), shape2=(3,), weighted=False}.test_polyfit_default _
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:495: in check_func
    array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([-2.]), desired = array([2.]), rtol = 1e-07, atol = 1e-09
err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=1e-09
E       
E       Mismatched elements: 1 / 1 (100%)
E       Max absolute difference: 4.
E       Max relative difference: 2.
E        x: array([-2.])
E        y: array([2.])

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestPolyfitParametersCombinations_param_9_{deg=0, rcond=1e-15, shape1=(3,), shape2=(3,), weighted=False}.test_polyfit_full _

self = <<cupy_tests.lib_tests.test_polynomial.TestPolyfitParametersCombinations_param_9_{deg=0, rcond=1e-15, shape1=(3,), sha...estMethod=test_polyfit_full>  parameter: {'deg': 0, 'rcond': 1e-15, 'shape1': (3,), 'shape2': (3,), 'weighted': False}>
dtype = <class 'numpy.float64'>

    @testing.for_all_dtypes(no_float16=True)
    def test_polyfit_full(self, dtype):
        cp_c, cp_resids, cp_rank, cp_s, cp_rcond = self._full_fit(cupy, dtype)
        np_c, np_resids, np_rank, np_s, np_rcond = self._full_fit(numpy, dtype)
    
>       testing.assert_allclose(cp_c, np_c, atol=1e-9)

tests/cupy_tests/lib_tests/test_polynomial.py:498: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([-2.]), desired = array([2.]), rtol = 1e-07, atol = 1e-09
err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=1e-09
E       
E       Mismatched elements: 1 / 1 (100%)
E       Max absolute difference: 4.
E       Max relative difference: 2.
E        x: array([-2.])
E        y: array([2.])

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestPolyfitParametersCombinations_param_10_{deg=0, rcond=1e-15, shape1=(3,), shape2=(3, 2), weighted=True}.test_polyfit_default _
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:495: in check_func
    array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[-4.14285714, -5.14285714]])
desired = array([[4.14285714, 5.14285714]]), rtol = 1e-07, atol = 1e-09
err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=1e-09
E       
E       Mismatched elements: 2 / 2 (100%)
E       Max absolute difference: 10.28571429
E       Max relative difference: 2.
E        x: array([[-4.142857, -5.142857]])
E        y: array([[4.142857, 5.142857]])

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestPolyfitParametersCombinations_param_10_{deg=0, rcond=1e-15, shape1=(3,), shape2=(3, 2), weighted=True}.test_polyfit_full _

self = <<cupy_tests.lib_tests.test_polynomial.TestPolyfitParametersCombinations_param_10_{deg=0, rcond=1e-15, shape1=(3,), sh...stMethod=test_polyfit_full>  parameter: {'deg': 0, 'rcond': 1e-15, 'shape1': (3,), 'shape2': (3, 2), 'weighted': True}>
dtype = <class 'numpy.float64'>

    @testing.for_all_dtypes(no_float16=True)
    def test_polyfit_full(self, dtype):
        cp_c, cp_resids, cp_rank, cp_s, cp_rcond = self._full_fit(cupy, dtype)
        np_c, np_resids, np_rank, np_s, np_rcond = self._full_fit(numpy, dtype)
    
>       testing.assert_allclose(cp_c, np_c, atol=1e-9)

tests/cupy_tests/lib_tests/test_polynomial.py:498: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[-4.14285714, -5.14285714]])
desired = array([[4.14285714, 5.14285714]]), rtol = 1e-07, atol = 1e-09
err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=1e-09
E       
E       Mismatched elements: 2 / 2 (100%)
E       Max absolute difference: 10.28571429
E       Max relative difference: 2.
E        x: array([[-4.142857, -5.142857]])
E        y: array([[4.142857, 5.142857]])

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestPolyfitParametersCombinations_param_11_{deg=0, rcond=1e-15, shape1=(3,), shape2=(3, 2), weighted=False}.test_polyfit_default _
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:495: in check_func
    array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[-3., -4.]]), desired = array([[3., 4.]]), rtol = 1e-07
atol = 1e-09, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=1e-09
E       
E       Mismatched elements: 2 / 2 (100%)
E       Max absolute difference: 8.
E       Max relative difference: 2.
E        x: array([[-3., -4.]])
E        y: array([[3., 4.]])

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestPolyfitParametersCombinations_param_11_{deg=0, rcond=1e-15, shape1=(3,), shape2=(3, 2), weighted=False}.test_polyfit_full _

self = <<cupy_tests.lib_tests.test_polynomial.TestPolyfitParametersCombinations_param_11_{deg=0, rcond=1e-15, shape1=(3,), sh...tMethod=test_polyfit_full>  parameter: {'deg': 0, 'rcond': 1e-15, 'shape1': (3,), 'shape2': (3, 2), 'weighted': False}>
dtype = <class 'numpy.float64'>

    @testing.for_all_dtypes(no_float16=True)
    def test_polyfit_full(self, dtype):
        cp_c, cp_resids, cp_rank, cp_s, cp_rcond = self._full_fit(cupy, dtype)
        np_c, np_resids, np_rank, np_s, np_rcond = self._full_fit(numpy, dtype)
    
>       testing.assert_allclose(cp_c, np_c, atol=1e-9)

tests/cupy_tests/lib_tests/test_polynomial.py:498: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[-3., -4.]]), desired = array([[3., 4.]]), rtol = 1e-07
atol = 1e-09, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=1e-09
E       
E       Mismatched elements: 2 / 2 (100%)
E       Max absolute difference: 8.
E       Max relative difference: 2.
E        x: array([[-3., -4.]])
E        y: array([[3., 4.]])

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_____________________ TestMatrixPower.test_matrix_power_1 ______________________
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:495: in check_func
    array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[1, 2, 3],
       [4, 5, 6],
       [7, 8, 9]], dtype=uint8)
desired = array([[1, 2, 3],
       [4, 5, 6],
       [7, 8, 9]], dtype=uint8)
rtol = 1e-07, atol = 0, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=0
E       
E       Mismatched elements: 4 / 9 (44.4%)
E       Max absolute difference: 254
E       Max relative difference: 127.
E        x: array([[1, 0, 0],
E              [0, 2, 6],
E              [7, 8, 9]], dtype=uint8)
E        y: array([[1, 2, 3],
E              [4, 5, 6],
E              [7, 8, 9]], dtype=uint8)

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.uint8'>
_______ TestAsSeries_param_1_{trim=False}.test_as_series_trailing_zeros ________
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:648: in check_func
    array.assert_array_equal(x, y, err_msg, verbose, strides_check)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([3.+0.j], dtype=complex64), y = array([3.+0.j], dtype=complex64)
err_msg = '', verbose = True, strides_check = False

    def assert_array_equal(x, y, err_msg='', verbose=True, strides_check=False):
        """Raises an AssertionError if two array_like objects are not equal.
    
        Args:
             x(numpy.ndarray or cupy.ndarray): The actual object to check.
             y(numpy.ndarray or cupy.ndarray): The desired, expected object.
             strides_check(bool): If ``True``, consistency of strides is also
                 checked.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting values
                 are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_array_equal`
        """
>       numpy.testing.assert_array_equal(
            cupy.asnumpy(x), cupy.asnumpy(y), err_msg=err_msg,
            verbose=verbose)
E       AssertionError: 
E       Arrays are not equal
E       
E       Mismatched elements: 1 / 1 (100%)
E       Max absolute difference: 3.6763604
E       Max relative difference: 1.2254535
E        x: array([0.+2.125j], dtype=complex64)
E        y: array([3.+0.j], dtype=complex64)

cupy/testing/array.py:91: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.complex64'>
_______ TestPermutations_param_0_{seed=None}.test_permutation_sort_ndim ________

self = <<cupy_tests.random_tests.test_permutations.TestPermutations_param_0_{seed=None} testMethod=test_permutation_sort_ndim>  parameter: {'seed': None}>
dtype = <class 'numpy.float64'>

    @testing.for_all_dtypes(no_float16=True, no_bool=True, no_complex=True)
    def test_permutation_sort_ndim(self, dtype):
        cupy_random = self._xp_random(cupy)
        a = cupy.arange(15, dtype=dtype).reshape(5, 3)
        b = cupy.copy(a)
        c = cupy_random.permutation(a)
        testing.assert_allclose(a, b)
>       testing.assert_allclose(b, cupy.sort(c, axis=0))

tests/cupy_tests/random_tests/test_permutations.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[ 0.,  1.,  2.],
       [ 3.,  4.,  5.],
       [ 6.,  7.,  8.],
       [ 9., 10., 11.],
       [12., 13., 14.]])
desired = array([[ 3.,  4.,  5.],
       [ 0.,  1.,  2.],
       [ 6.,  7.,  8.],
       [ 9., 10., 11.],
       [12., 13., 14.]])
rtol = 1e-07, atol = 0, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=0
E       
E       Mismatched elements: 6 / 15 (40%)
E       Max absolute difference: 3.
E       Max relative difference: 3.
E        x: array([[ 0.,  1.,  2.],
E              [ 3.,  4.,  5.],
E              [ 6.,  7.,  8.],...
E        y: array([[ 3.,  4.,  5.],
E              [ 0.,  1.,  2.],
E              [ 6.,  7.,  8.],...

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_________ TestPermutations_param_1_{seed=0}.test_permutation_sort_ndim _________

self = <<cupy_tests.random_tests.test_permutations.TestPermutations_param_1_{seed=0} testMethod=test_permutation_sort_ndim>  parameter: {'seed': 0}>
dtype = <class 'numpy.float64'>

    @testing.for_all_dtypes(no_float16=True, no_bool=True, no_complex=True)
    def test_permutation_sort_ndim(self, dtype):
        cupy_random = self._xp_random(cupy)
        a = cupy.arange(15, dtype=dtype).reshape(5, 3)
        b = cupy.copy(a)
        c = cupy_random.permutation(a)
        testing.assert_allclose(a, b)
>       testing.assert_allclose(b, cupy.sort(c, axis=0))

tests/cupy_tests/random_tests/test_permutations.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[ 0.,  1.,  2.],
       [ 3.,  4.,  5.],
       [ 6.,  7.,  8.],
       [ 9., 10., 11.],
       [12., 13., 14.]])
desired = array([[ 3.,  4.,  5.],
       [12., 13., 14.],
       [ 9., 10., 11.],
       [ 6.,  7.,  8.],
       [ 0.,  1.,  2.]])
rtol = 1e-07, atol = 0, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=0
E       
E       Mismatched elements: 15 / 15 (100%)
E       Max absolute difference: 12.
E       Max relative difference: 12.
E        x: array([[ 0.,  1.,  2.],
E              [ 3.,  4.,  5.],
E              [ 6.,  7.,  8.],...
E        y: array([[ 3.,  4.,  5.],
E              [12., 13., 14.],
E              [ 9., 10., 11.],...

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
______________________ TestShuffle.test_shuffle_sort_ndim ______________________

self = <cupy_tests.random_tests.test_permutations.TestShuffle testMethod=test_shuffle_sort_ndim>
dtype = <class 'numpy.float64'>

    @testing.for_all_dtypes(no_float16=True, no_bool=True, no_complex=True)
    def test_shuffle_sort_ndim(self, dtype):
        a = cupy.arange(15, dtype=dtype).reshape(5, 3)
        b = cupy.copy(a)
        cupy.random.shuffle(a)
>       testing.assert_allclose(cupy.sort(a, axis=0), b)

tests/cupy_tests/random_tests/test_permutations.py:99: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[ 3.,  4.,  5.],
       [ 0.,  1.,  2.],
       [ 6.,  7.,  8.],
       [ 9., 10., 11.],
       [12., 13., 14.]])
desired = array([[ 0.,  1.,  2.],
       [ 3.,  4.,  5.],
       [ 6.,  7.,  8.],
       [ 9., 10., 11.],
       [12., 13., 14.]])
rtol = 1e-07, atol = 0, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=0
E       
E       Mismatched elements: 6 / 15 (40%)
E       Max absolute difference: 3.
E       Max relative difference: 3.
E        x: array([[ 3.,  4.,  5.],
E              [ 0.,  1.,  2.],
E              [ 6.,  7.,  8.],...
E        y: array([[ 0.,  1.,  2.],
E              [ 3.,  4.,  5.],
E              [ 6.,  7.,  8.],...

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
____________ TestArgsort_param_0_{external=False}.test_argsort_axis ____________
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:648: in check_func
    array.assert_array_equal(x, y, err_msg, verbose, strides_check)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([[[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]],

       [[1, 1, 1],
        [1, 1, 1],
        [1, 1, 1]]])
y = array([[[1, 0, 1],
        [0, 0, 1],
        [1, 1, 1]],

       [[0, 1, 0],
        [1, 1, 0],
        [0, 0, 0]]])
err_msg = '', verbose = True, strides_check = False

    def assert_array_equal(x, y, err_msg='', verbose=True, strides_check=False):
        """Raises an AssertionError if two array_like objects are not equal.
    
        Args:
             x(numpy.ndarray or cupy.ndarray): The actual object to check.
             y(numpy.ndarray or cupy.ndarray): The desired, expected object.
             strides_check(bool): If ``True``, consistency of strides is also
                 checked.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting values
                 are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_array_equal`
        """
>       numpy.testing.assert_array_equal(
            cupy.asnumpy(x), cupy.asnumpy(y), err_msg=err_msg,
            verbose=verbose)
E       AssertionError: 
E       Arrays are not equal
E       
E       Mismatched elements: 12 / 18 (66.7%)
E       Max absolute difference: 1
E       Max relative difference: 1.
E        x: array([[[0, 0, 0],
E               [0, 0, 0],
E               [0, 0, 0]],...
E        y: array([[[1, 0, 1],
E               [0, 0, 1],
E               [1, 1, 1]],...

cupy/testing/array.py:91: AssertionError
_________ TestArgsort_param_0_{external=False}.test_argsort_multi_dim __________
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:648: in check_func
    array.assert_array_equal(x, y, err_msg, verbose, strides_check)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([[[0, 1, 2],
        [0, 1, 2],
        [0, 1, 2]],

       [[0, 1, 2],
        [0, 1, 2],
        [0, 1, 2]]])
y = array([[[0, 2, 1],
        [1, 0, 2],
        [0, 1, 2]],

       [[0, 2, 1],
        [2, 0, 1],
        [1, 0, 2]]])
err_msg = '', verbose = True, strides_check = False

    def assert_array_equal(x, y, err_msg='', verbose=True, strides_check=False):
        """Raises an AssertionError if two array_like objects are not equal.
    
        Args:
             x(numpy.ndarray or cupy.ndarray): The actual object to check.
             y(numpy.ndarray or cupy.ndarray): The desired, expected object.
             strides_check(bool): If ``True``, consistency of strides is also
                 checked.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting values
                 are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_array_equal`
        """
>       numpy.testing.assert_array_equal(
            cupy.asnumpy(x), cupy.asnumpy(y), err_msg=err_msg,
            verbose=verbose)
E       AssertionError: 
E       Arrays are not equal
E       
E       Mismatched elements: 11 / 18 (61.1%)
E       Max absolute difference: 2
E       Max relative difference: 1.
E        x: array([[[0, 1, 2],
E               [0, 1, 2],
E               [0, 1, 2]],...
E        y: array([[[0, 2, 1],
E               [1, 0, 2],
E               [0, 1, 2]],...

cupy/testing/array.py:91: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_______ TestArgsort_param_0_{external=False}.test_argsort_negative_axis ________
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:648: in check_func
    array.assert_array_equal(x, y, err_msg, verbose, strides_check)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([[[0, 1, 2],
        [0, 1, 2],
        [0, 1, 2]],

       [[0, 1, 2],
        [0, 1, 2],
        [0, 1, 2]]])
y = array([[[0, 2, 1],
        [1, 0, 2],
        [0, 1, 2]],

       [[0, 2, 1],
        [2, 0, 1],
        [1, 0, 2]]])
err_msg = '', verbose = True, strides_check = False

    def assert_array_equal(x, y, err_msg='', verbose=True, strides_check=False):
        """Raises an AssertionError if two array_like objects are not equal.
    
        Args:
             x(numpy.ndarray or cupy.ndarray): The actual object to check.
             y(numpy.ndarray or cupy.ndarray): The desired, expected object.
             strides_check(bool): If ``True``, consistency of strides is also
                 checked.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting values
                 are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_array_equal`
        """
>       numpy.testing.assert_array_equal(
            cupy.asnumpy(x), cupy.asnumpy(y), err_msg=err_msg,
            verbose=verbose)
E       AssertionError: 
E       Arrays are not equal
E       
E       Mismatched elements: 11 / 18 (61.1%)
E       Max absolute difference: 2
E       Max relative difference: 1.
E        x: array([[[0, 1, 2],
E               [0, 1, 2],
E               [0, 1, 2]],...
E        y: array([[[0, 2, 1],
E               [1, 0, 2],
E               [0, 1, 2]],...

cupy/testing/array.py:91: AssertionError
__________ TestArgsort_param_0_{external=False}.test_argsort_one_dim ___________
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:648: in check_func
    array.assert_array_equal(x, y, err_msg, verbose, strides_check)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
y = array([9, 4, 6, 3, 0, 2, 5, 1, 7, 8]), err_msg = '', verbose = True
strides_check = False

    def assert_array_equal(x, y, err_msg='', verbose=True, strides_check=False):
        """Raises an AssertionError if two array_like objects are not equal.
    
        Args:
             x(numpy.ndarray or cupy.ndarray): The actual object to check.
             y(numpy.ndarray or cupy.ndarray): The desired, expected object.
             strides_check(bool): If ``True``, consistency of strides is also
                 checked.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting values
                 are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_array_equal`
        """
>       numpy.testing.assert_array_equal(
            cupy.asnumpy(x), cupy.asnumpy(y), err_msg=err_msg,
            verbose=verbose)
E       AssertionError: 
E       Arrays are not equal
E       
E       Mismatched elements: 9 / 10 (90%)
E       Max absolute difference: 9
E       Max relative difference: 6.
E        x: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
E        y: array([9, 4, 6, 3, 0, 2, 5, 1, 7, 8])

cupy/testing/array.py:91: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float16'>
________________ TestArgsort_param_0_{external=False}.test_nan1 ________________
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:648: in check_func
    array.assert_array_equal(x, y, err_msg, verbose, strides_check)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
y = array([9, 4, 3, 0, 5, 1, 7, 8, 2, 6]), err_msg = '', verbose = True
strides_check = False

    def assert_array_equal(x, y, err_msg='', verbose=True, strides_check=False):
        """Raises an AssertionError if two array_like objects are not equal.
    
        Args:
             x(numpy.ndarray or cupy.ndarray): The actual object to check.
             y(numpy.ndarray or cupy.ndarray): The desired, expected object.
             strides_check(bool): If ``True``, consistency of strides is also
                 checked.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting values
                 are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_array_equal`
        """
>       numpy.testing.assert_array_equal(
            cupy.asnumpy(x), cupy.asnumpy(y), err_msg=err_msg,
            verbose=verbose)
E       AssertionError: 
E       Arrays are not equal
E       
E       Mismatched elements: 10 / 10 (100%)
E       Max absolute difference: 9
E       Max relative difference: 4.
E        x: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
E        y: array([9, 4, 3, 0, 5, 1, 7, 8, 2, 6])

cupy/testing/array.py:91: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is e
________________ TestArgsort_param_0_{external=False}.test_nan2 ________________
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:648: in check_func
    array.assert_array_equal(x, y, err_msg, verbose, strides_check)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([[[0, 1, 2, 3],
        [0, 1, 2, 3],
        [0, 1, 2, 3]],

       [[0, 1, 2, 3],
        [0, 1, 2, 3],
        [0, 1, 2, 3]]])
y = array([[[3, 0, 2, 1],
        [0, 2, 1, 3],
        [3, 2, 0, 1]],

       [[2, 3, 0, 1],
        [0, 2, 1, 3],
        [2, 3, 1, 0]]])
err_msg = '', verbose = True, strides_check = False

    def assert_array_equal(x, y, err_msg='', verbose=True, strides_check=False):
        """Raises an AssertionError if two array_like objects are not equal.
    
        Args:
             x(numpy.ndarray or cupy.ndarray): The actual object to check.
             y(numpy.ndarray or cupy.ndarray): The desired, expected object.
             strides_check(bool): If ``True``, consistency of strides is also
                 checked.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting values
                 are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_array_equal`
        """
>       numpy.testing.assert_array_equal(
            cupy.asnumpy(x), cupy.asnumpy(y), err_msg=err_msg,
            verbose=verbose)
E       AssertionError: 
E       Arrays are not equal
E       
E       Mismatched elements: 19 / 24 (79.2%)
E       Max absolute difference: 3
E       Max relative difference: 2.
E        x: array([[[0, 1, 2, 3],
E               [0, 1, 2, 3],
E               [0, 1, 2, 3]],...
E        y: array([[[3, 0, 2, 1],
E               [0, 2, 1, 3],
E               [3, 2, 0, 1]],...

cupy/testing/array.py:91: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is e
____________ TestArgsort_param_1_{external=True}.test_argsort_axis _____________
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:648: in check_func
    array.assert_array_equal(x, y, err_msg, verbose, strides_check)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([[[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]],

       [[1, 1, 1],
        [1, 1, 1],
        [1, 1, 1]]])
y = array([[[1, 0, 1],
        [0, 0, 1],
        [1, 1, 1]],

       [[0, 1, 0],
        [1, 1, 0],
        [0, 0, 0]]])
err_msg = '', verbose = True, strides_check = False

    def assert_array_equal(x, y, err_msg='', verbose=True, strides_check=False):
        """Raises an AssertionError if two array_like objects are not equal.
    
        Args:
             x(numpy.ndarray or cupy.ndarray): The actual object to check.
             y(numpy.ndarray or cupy.ndarray): The desired, expected object.
             strides_check(bool): If ``True``, consistency of strides is also
                 checked.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting values
                 are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_array_equal`
        """
>       numpy.testing.assert_array_equal(
            cupy.asnumpy(x), cupy.asnumpy(y), err_msg=err_msg,
            verbose=verbose)
E       AssertionError: 
E       Arrays are not equal
E       
E       Mismatched elements: 12 / 18 (66.7%)
E       Max absolute difference: 1
E       Max relative difference: 1.
E        x: array([[[0, 0, 0],
E               [0, 0, 0],
E               [0, 0, 0]],...
E        y: array([[[1, 0, 1],
E               [0, 0, 1],
E               [1, 1, 1]],...

cupy/testing/array.py:91: AssertionError
__________ TestArgsort_param_1_{external=True}.test_argsort_multi_dim __________
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:648: in check_func
    array.assert_array_equal(x, y, err_msg, verbose, strides_check)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([[[0, 1, 2],
        [0, 1, 2],
        [0, 1, 2]],

       [[0, 1, 2],
        [0, 1, 2],
        [0, 1, 2]]])
y = array([[[0, 2, 1],
        [1, 0, 2],
        [0, 1, 2]],

       [[0, 2, 1],
        [2, 0, 1],
        [1, 0, 2]]])
err_msg = '', verbose = True, strides_check = False

    def assert_array_equal(x, y, err_msg='', verbose=True, strides_check=False):
        """Raises an AssertionError if two array_like objects are not equal.
    
        Args:
             x(numpy.ndarray or cupy.ndarray): The actual object to check.
             y(numpy.ndarray or cupy.ndarray): The desired, expected object.
             strides_check(bool): If ``True``, consistency of strides is also
                 checked.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting values
                 are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_array_equal`
        """
>       numpy.testing.assert_array_equal(
            cupy.asnumpy(x), cupy.asnumpy(y), err_msg=err_msg,
            verbose=verbose)
E       AssertionError: 
E       Arrays are not equal
E       
E       Mismatched elements: 11 / 18 (61.1%)
E       Max absolute difference: 2
E       Max relative difference: 1.
E        x: array([[[0, 1, 2],
E               [0, 1, 2],
E               [0, 1, 2]],...
E        y: array([[[0, 2, 1],
E               [1, 0, 2],
E               [0, 1, 2]],...

cupy/testing/array.py:91: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
________ TestArgsort_param_1_{external=True}.test_argsort_negative_axis ________
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:648: in check_func
    array.assert_array_equal(x, y, err_msg, verbose, strides_check)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([[[0, 1, 2],
        [0, 1, 2],
        [0, 1, 2]],

       [[0, 1, 2],
        [0, 1, 2],
        [0, 1, 2]]])
y = array([[[0, 2, 1],
        [1, 0, 2],
        [0, 1, 2]],

       [[0, 2, 1],
        [2, 0, 1],
        [1, 0, 2]]])
err_msg = '', verbose = True, strides_check = False

    def assert_array_equal(x, y, err_msg='', verbose=True, strides_check=False):
        """Raises an AssertionError if two array_like objects are not equal.
    
        Args:
             x(numpy.ndarray or cupy.ndarray): The actual object to check.
             y(numpy.ndarray or cupy.ndarray): The desired, expected object.
             strides_check(bool): If ``True``, consistency of strides is also
                 checked.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting values
                 are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_array_equal`
        """
>       numpy.testing.assert_array_equal(
            cupy.asnumpy(x), cupy.asnumpy(y), err_msg=err_msg,
            verbose=verbose)
E       AssertionError: 
E       Arrays are not equal
E       
E       Mismatched elements: 11 / 18 (61.1%)
E       Max absolute difference: 2
E       Max relative difference: 1.
E        x: array([[[0, 1, 2],
E               [0, 1, 2],
E               [0, 1, 2]],...
E        y: array([[[0, 2, 1],
E               [1, 0, 2],
E               [0, 1, 2]],...

cupy/testing/array.py:91: AssertionError
___________ TestArgsort_param_1_{external=True}.test_argsort_one_dim ___________
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:648: in check_func
    array.assert_array_equal(x, y, err_msg, verbose, strides_check)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
y = array([9, 4, 6, 3, 0, 2, 5, 1, 7, 8]), err_msg = '', verbose = True
strides_check = False

    def assert_array_equal(x, y, err_msg='', verbose=True, strides_check=False):
        """Raises an AssertionError if two array_like objects are not equal.
    
        Args:
             x(numpy.ndarray or cupy.ndarray): The actual object to check.
             y(numpy.ndarray or cupy.ndarray): The desired, expected object.
             strides_check(bool): If ``True``, consistency of strides is also
                 checked.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting values
                 are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_array_equal`
        """
>       numpy.testing.assert_array_equal(
            cupy.asnumpy(x), cupy.asnumpy(y), err_msg=err_msg,
            verbose=verbose)
E       AssertionError: 
E       Arrays are not equal
E       
E       Mismatched elements: 9 / 10 (90%)
E       Max absolute difference: 9
E       Max relative difference: 6.
E        x: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
E        y: array([9, 4, 6, 3, 0, 2, 5, 1, 7, 8])

cupy/testing/array.py:91: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float16'>
________________ TestArgsort_param_1_{external=True}.test_nan1 _________________
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:648: in check_func
    array.assert_array_equal(x, y, err_msg, verbose, strides_check)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
y = array([9, 4, 3, 0, 5, 1, 7, 8, 2, 6]), err_msg = '', verbose = True
strides_check = False

    def assert_array_equal(x, y, err_msg='', verbose=True, strides_check=False):
        """Raises an AssertionError if two array_like objects are not equal.
    
        Args:
             x(numpy.ndarray or cupy.ndarray): The actual object to check.
             y(numpy.ndarray or cupy.ndarray): The desired, expected object.
             strides_check(bool): If ``True``, consistency of strides is also
                 checked.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting values
                 are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_array_equal`
        """
>       numpy.testing.assert_array_equal(
            cupy.asnumpy(x), cupy.asnumpy(y), err_msg=err_msg,
            verbose=verbose)
E       AssertionError: 
E       Arrays are not equal
E       
E       Mismatched elements: 10 / 10 (100%)
E       Max absolute difference: 9
E       Max relative difference: 4.
E        x: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
E        y: array([9, 4, 3, 0, 5, 1, 7, 8, 2, 6])

cupy/testing/array.py:91: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is e
________________ TestArgsort_param_1_{external=True}.test_nan2 _________________
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:648: in check_func
    array.assert_array_equal(x, y, err_msg, verbose, strides_check)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([[[0, 1, 2, 3],
        [0, 1, 2, 3],
        [0, 1, 2, 3]],

       [[0, 1, 2, 3],
        [0, 1, 2, 3],
        [0, 1, 2, 3]]])
y = array([[[3, 0, 2, 1],
        [0, 2, 1, 3],
        [3, 2, 0, 1]],

       [[2, 3, 0, 1],
        [0, 2, 1, 3],
        [2, 3, 1, 0]]])
err_msg = '', verbose = True, strides_check = False

    def assert_array_equal(x, y, err_msg='', verbose=True, strides_check=False):
        """Raises an AssertionError if two array_like objects are not equal.
    
        Args:
             x(numpy.ndarray or cupy.ndarray): The actual object to check.
             y(numpy.ndarray or cupy.ndarray): The desired, expected object.
             strides_check(bool): If ``True``, consistency of strides is also
                 checked.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting values
                 are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_array_equal`
        """
>       numpy.testing.assert_array_equal(
            cupy.asnumpy(x), cupy.asnumpy(y), err_msg=err_msg,
            verbose=verbose)
E       AssertionError: 
E       Arrays are not equal
E       
E       Mismatched elements: 19 / 24 (79.2%)
E       Max absolute difference: 3
E       Max relative difference: 2.
E        x: array([[[0, 1, 2, 3],
E               [0, 1, 2, 3],
E               [0, 1, 2, 3]],...
E        y: array([[[3, 0, 2, 1],
E               [0, 2, 1, 3],
E               [3, 2, 0, 1]],...

cupy/testing/array.py:91: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is e
____ TestPartition_param_0_{external=False, length=10}.test_partition_axis _____
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:648: in check_func
    array.assert_array_equal(x, y, err_msg, verbose, strides_check)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([[3.1179588 , 6.9634347 , 3.7775185 , 1.7960367 , 0.24678728,
        0.6724963 , 6.7939277 , 4.536968  , 5.3657...7  , 1.8984791 , 5.1131897 ,
        2.2431703 , 0.9784449 , 8.621915  , 9.729195  , 9.608347  ]],
      dtype=float32)
y = array([[3.1038082 , 3.27988   , 2.114548  , 0.8110139 , 2.4875314 ,
        2.3223414 , 2.650397  , 0.6614946 , 2.2308...46 , 4.042436  , 3.0444636 ,
        2.2431703 , 2.2741463 , 2.4217858 , 2.2864654 , 4.166918  ]],
      dtype=float32)
err_msg = '', verbose = True, strides_check = False

    def assert_array_equal(x, y, err_msg='', verbose=True, strides_check=False):
        """Raises an AssertionError if two array_like objects are not equal.
    
        Args:
             x(numpy.ndarray or cupy.ndarray): The actual object to check.
             y(numpy.ndarray or cupy.ndarray): The desired, expected object.
             strides_check(bool): If ``True``, consistency of strides is also
                 checked.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting values
                 are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_array_equal`
        """
>       numpy.testing.assert_array_equal(
            cupy.asnumpy(x), cupy.asnumpy(y), err_msg=err_msg,
            verbose=verbose)
E       AssertionError: 
E       Arrays are not equal
E       
E       Mismatched elements: 92 / 100 (92%)
E       Max absolute difference: 8.282187
E       Max relative difference: 6.7366967
E        x: array([[3.117959, 6.963435, 3.777519, 1.796037, 0.246787, 0.672496,
E               6.793928, 4.536968, 5.365792, 8.966713],
E              [9.90339 , 2.16897 , 6.630782, 2.633224, 0.20651 , 7.583786,...
E        y: array([[3.103808, 3.27988 , 2.114548, 0.811014, 2.487531, 2.322341,
E               2.650397, 0.661495, 2.230816, 1.158985],
E              [1.621203, 2.16897 , 2.8857  , 1.334394, 0.96804 , 2.124344,...

cupy/testing/array.py:91: AssertionError
__ TestPartition_param_0_{external=False, length=10}.test_partition_multi_dim __

self = <<cupy_tests.sorting_tests.test_sort.TestPartition_param_0_{external=False, length=10} testMethod=test_partition_multi_dim>  parameter: {'external': False, 'length': 10}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.1cAEeXesk6/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float64'>

    @testing.for_all_dtypes()
    @testing.numpy_cupy_array_equal()
    def test_partition_multi_dim(self, xp, dtype):
        a = testing.shaped_random((10, 10, self.length), xp, dtype)
        kth = 2
        x = self.partition(a, kth)
>       assert xp.all(x[:, :, 0:kth] <= x[:, :, kth:kth + 1])
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.1cAEeXesk6/cupy/cupy/testing/helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.1cAEeXesk6/cupy/tests/cupy_tests/sorting_tests/test_sort.py", line 486, in test_partition_multi_dim
E           assert xp.all(x[:, :, 0:kth] <= x[:, :, kth:kth + 1])
E       AssertionError: assert array(False)
E        +  where array(False) = <function all at 0x7f9ec2747a60>(array([[[5.48813504e+00, 7.15189366e+00],\n        [7.91725038e+00, 5.28894920e+00],\n        [9.78618342e+00, 7.9915856...[7.34813775e+00, 1.76499389e+00],\n        [9.21719067e+00, 8.05263856e+00],\n        [1.21711569e-01, 3.22829538e+00]]]) <= array([[[6.02763376],\n        [5.68044561],\n        [4.61479362],\n        [4.56150332],\n        [6.97631196],\n        ...51964],\n        [1.62357948],\n        [1.11496057],\n        [9.39160909],\n        [7.23941399],\n        [2.29567445]]]))
E        +    where <function all at 0x7f9ec2747a60> = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.1cAEeXesk6/cupy/cupy/__init__.py'>.all

tests/cupy_tests/sorting_tests/test_sort.py:486: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestPartition_param_0_{external=False, length=10}.test_partition_negative_axis _
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:648: in check_func
    array.assert_array_equal(x, y, err_msg, verbose, strides_check)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([[6.0276337 , 5.6804457 , 4.614794  , 4.5615034 , 6.976312  ,
        9.8837385 , 6.563296  , 9.767611  , 0.6414...66 , 3.3307204 , 0.68851966,
        1.6235795 , 1.1149606 , 9.391609  , 7.239414  , 2.2956746 ]],
      dtype=float32)
y = array([[4.375872  , 0.871293  , 4.1466193 , 4.5615034 , 2.1038256 ,
        2.0887675 , 1.1037514 , 1.2019656 , 2.6538...66 , 1.509349  , 2.2736244 ,
        2.1766284 , 2.2010386 , 2.9024804 , 5.5917377 , 2.2864654 ]],
      dtype=float32)
err_msg = '', verbose = True, strides_check = False

    def assert_array_equal(x, y, err_msg='', verbose=True, strides_check=False):
        """Raises an AssertionError if two array_like objects are not equal.
    
        Args:
             x(numpy.ndarray or cupy.ndarray): The actual object to check.
             y(numpy.ndarray or cupy.ndarray): The desired, expected object.
             strides_check(bool): If ``True``, consistency of strides is also
                 checked.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting values
                 are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_array_equal`
        """
>       numpy.testing.assert_array_equal(
            cupy.asnumpy(x), cupy.asnumpy(y), err_msg=err_msg,
            verbose=verbose)
E       AssertionError: 
E       Arrays are not equal
E       
E       Mismatched elements: 88 / 100 (88%)
E       Max absolute difference: 8.565645
E       Max relative difference: 7.1263647
E        x: array([[6.027634, 5.680446, 4.614794, 4.561503, 6.976312, 9.883739,
E               6.563296, 9.767611, 0.641475, 1.317979],
E              [7.35194 , 6.994793, 9.560837, 1.354741, 4.358649, 1.624929,...
E        y: array([[4.375872, 0.871293, 4.146619, 4.561503, 2.103826, 2.088768,
E               1.103751, 1.201966, 2.653895, 1.317979],
E              [2.70008 , 4.471254, 3.015748, 4.287687, 4.358649, 1.494483,...

cupy/testing/array.py:91: AssertionError
___ TestPartition_param_0_{external=False, length=10}.test_partition_one_dim ___

self = <<cupy_tests.sorting_tests.test_sort.TestPartition_param_0_{external=False, length=10} testMethod=test_partition_one_dim>  parameter: {'external': False, 'length': 10}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.1cAEeXesk6/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float16'>

    @testing.for_all_dtypes()
    @testing.numpy_cupy_equal()
    def test_partition_one_dim(self, xp, dtype):
        a = testing.shaped_random((self.length,), xp, dtype)
        kth = 2
        x = self.partition(a, kth)
>       assert xp.all(x[0:kth] <= x[kth:kth + 1])
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.1cAEeXesk6/cupy/cupy/testing/helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.1cAEeXesk6/cupy/tests/cupy_tests/sorting_tests/test_sort.py", line 476, in test_partition_one_dim
E           assert xp.all(x[0:kth] <= x[kth:kth + 1])
E       AssertionError: assert array(False)
E        +  where array(False) = <function all at 0x7f9ec2747a60>(array([5.49 , 7.152], dtype=float16) <= array([6.027], dtype=float16))
E        +    where <function all at 0x7f9ec2747a60> = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.1cAEeXesk6/cupy/cupy/__init__.py'>.all

tests/cupy_tests/sorting_tests/test_sort.py:476: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float16'>
_____ TestPartition_param_2_{external=True, length=10}.test_partition_axis _____
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:648: in check_func
    array.assert_array_equal(x, y, err_msg, verbose, strides_check)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([[3.1179588 , 6.9634347 , 3.7775185 , 1.7960367 , 0.24678728,
        0.6724963 , 6.7939277 , 4.536968  , 5.3657...7  , 1.8984791 , 5.1131897 ,
        2.2431703 , 0.9784449 , 8.621915  , 9.729195  , 9.608347  ]],
      dtype=float32)
y = array([[3.1038082 , 3.27988   , 2.114548  , 0.8110139 , 2.4875314 ,
        2.3223414 , 2.650397  , 0.6614946 , 2.2308...46 , 4.042436  , 3.0444636 ,
        2.2431703 , 2.2741463 , 2.4217858 , 2.2864654 , 4.166918  ]],
      dtype=float32)
err_msg = '', verbose = True, strides_check = False

    def assert_array_equal(x, y, err_msg='', verbose=True, strides_check=False):
        """Raises an AssertionError if two array_like objects are not equal.
    
        Args:
             x(numpy.ndarray or cupy.ndarray): The actual object to check.
             y(numpy.ndarray or cupy.ndarray): The desired, expected object.
             strides_check(bool): If ``True``, consistency of strides is also
                 checked.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting values
                 are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_array_equal`
        """
>       numpy.testing.assert_array_equal(
            cupy.asnumpy(x), cupy.asnumpy(y), err_msg=err_msg,
            verbose=verbose)
E       AssertionError: 
E       Arrays are not equal
E       
E       Mismatched elements: 92 / 100 (92%)
E       Max absolute difference: 8.282187
E       Max relative difference: 6.7366967
E        x: array([[3.117959, 6.963435, 3.777519, 1.796037, 0.246787, 0.672496,
E               6.793928, 4.536968, 5.365792, 8.966713],
E              [9.90339 , 2.16897 , 6.630782, 2.633224, 0.20651 , 7.583786,...
E        y: array([[3.103808, 3.27988 , 2.114548, 0.811014, 2.487531, 2.322341,
E               2.650397, 0.661495, 2.230816, 1.158985],
E              [1.621203, 2.16897 , 2.8857  , 1.334394, 0.96804 , 2.124344,...

cupy/testing/array.py:91: AssertionError
__ TestPartition_param_2_{external=True, length=10}.test_partition_multi_dim ___

self = <<cupy_tests.sorting_tests.test_sort.TestPartition_param_2_{external=True, length=10} testMethod=test_partition_multi_dim>  parameter: {'external': True, 'length': 10}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.1cAEeXesk6/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float64'>

    @testing.for_all_dtypes()
    @testing.numpy_cupy_array_equal()
    def test_partition_multi_dim(self, xp, dtype):
        a = testing.shaped_random((10, 10, self.length), xp, dtype)
        kth = 2
        x = self.partition(a, kth)
>       assert xp.all(x[:, :, 0:kth] <= x[:, :, kth:kth + 1])
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.1cAEeXesk6/cupy/cupy/testing/helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.1cAEeXesk6/cupy/tests/cupy_tests/sorting_tests/test_sort.py", line 486, in test_partition_multi_dim
E           assert xp.all(x[:, :, 0:kth] <= x[:, :, kth:kth + 1])
E       AssertionError: assert array(False)
E        +  where array(False) = <function all at 0x7f9ec2747a60>(array([[[5.48813504e+00, 7.15189366e+00],\n        [7.91725038e+00, 5.28894920e+00],\n        [9.78618342e+00, 7.9915856...[7.34813775e+00, 1.76499389e+00],\n        [9.21719067e+00, 8.05263856e+00],\n        [1.21711569e-01, 3.22829538e+00]]]) <= array([[[6.02763376],\n        [5.68044561],\n        [4.61479362],\n        [4.56150332],\n        [6.97631196],\n        ...51964],\n        [1.62357948],\n        [1.11496057],\n        [9.39160909],\n        [7.23941399],\n        [2.29567445]]]))
E        +    where <function all at 0x7f9ec2747a60> = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.1cAEeXesk6/cupy/cupy/__init__.py'>.all

tests/cupy_tests/sorting_tests/test_sort.py:486: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestPartition_param_2_{external=True, length=10}.test_partition_negative_axis _
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:648: in check_func
    array.assert_array_equal(x, y, err_msg, verbose, strides_check)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([[6.0276337 , 5.6804457 , 4.614794  , 4.5615034 , 6.976312  ,
        9.8837385 , 6.563296  , 9.767611  , 0.6414...66 , 3.3307204 , 0.68851966,
        1.6235795 , 1.1149606 , 9.391609  , 7.239414  , 2.2956746 ]],
      dtype=float32)
y = array([[4.375872  , 0.871293  , 4.1466193 , 4.5615034 , 2.1038256 ,
        2.0887675 , 1.1037514 , 1.2019656 , 2.6538...66 , 1.509349  , 2.2736244 ,
        2.1766284 , 2.2010386 , 2.9024804 , 5.5917377 , 2.2864654 ]],
      dtype=float32)
err_msg = '', verbose = True, strides_check = False

    def assert_array_equal(x, y, err_msg='', verbose=True, strides_check=False):
        """Raises an AssertionError if two array_like objects are not equal.
    
        Args:
             x(numpy.ndarray or cupy.ndarray): The actual object to check.
             y(numpy.ndarray or cupy.ndarray): The desired, expected object.
             strides_check(bool): If ``True``, consistency of strides is also
                 checked.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting values
                 are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_array_equal`
        """
>       numpy.testing.assert_array_equal(
            cupy.asnumpy(x), cupy.asnumpy(y), err_msg=err_msg,
            verbose=verbose)
E       AssertionError: 
E       Arrays are not equal
E       
E       Mismatched elements: 88 / 100 (88%)
E       Max absolute difference: 8.565645
E       Max relative difference: 7.1263647
E        x: array([[6.027634, 5.680446, 4.614794, 4.561503, 6.976312, 9.883739,
E               6.563296, 9.767611, 0.641475, 1.317979],
E              [7.35194 , 6.994793, 9.560837, 1.354741, 4.358649, 1.624929,...
E        y: array([[4.375872, 0.871293, 4.146619, 4.561503, 2.103826, 2.088768,
E               1.103751, 1.201966, 2.653895, 1.317979],
E              [2.70008 , 4.471254, 3.015748, 4.287687, 4.358649, 1.494483,...

cupy/testing/array.py:91: AssertionError
___ TestPartition_param_2_{external=True, length=10}.test_partition_one_dim ____

self = <<cupy_tests.sorting_tests.test_sort.TestPartition_param_2_{external=True, length=10} testMethod=test_partition_one_dim>  parameter: {'external': True, 'length': 10}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.1cAEeXesk6/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float16'>

    @testing.for_all_dtypes()
    @testing.numpy_cupy_equal()
    def test_partition_one_dim(self, xp, dtype):
        a = testing.shaped_random((self.length,), xp, dtype)
        kth = 2
        x = self.partition(a, kth)
>       assert xp.all(x[0:kth] <= x[kth:kth + 1])
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.1cAEeXesk6/cupy/cupy/testing/helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.1cAEeXesk6/cupy/tests/cupy_tests/sorting_tests/test_sort.py", line 476, in test_partition_one_dim
E           assert xp.all(x[0:kth] <= x[kth:kth + 1])
E       AssertionError: assert array(False)
E        +  where array(False) = <function all at 0x7f9ec2747a60>(array([5.49 , 7.152], dtype=float16) <= array([6.027], dtype=float16))
E        +    where <function all at 0x7f9ec2747a60> = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.1cAEeXesk6/cupy/cupy/__init__.py'>.all

tests/cupy_tests/sorting_tests/test_sort.py:476: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float16'>
_______ TestArgpartition_param_0_{external=False}.test_argpartition_axis _______

self = <<cupy_tests.sorting_tests.test_sort.TestArgpartition_param_0_{external=False} testMethod=test_argpartition_axis>  parameter: {'external': False}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.1cAEeXesk6/cupy/cupy/__init__.py'>

    @testing.numpy_cupy_array_equal()
    def test_argpartition_axis(self, xp):
        a = testing.shaped_random((10, 3, 3), xp, scale=100)
        kth = 2
        axis = 0
        idx = self.argpartition(a, kth, axis=axis)
        rows = [[[0], [1], [2]]]
        cols = [[[0, 1, 2]]]
>       assert (a[idx[:kth, :, :], rows, cols] <
                a[idx[kth:kth + 1, :, :], rows, cols]).all()
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.1cAEeXesk6/cupy/cupy/testing/helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.1cAEeXesk6/cupy/tests/cupy_tests/sorting_tests/test_sort.py", line 701, in test_argpartition_axis
E           assert (a[idx[:kth, :, :], rows, cols] <
E       AssertionError: assert array(False)
E        +  where array(False) = <built-in method all of cupy.core.core.ndarray object at 0x7f95b5160040>()
E        +    where <built-in method all of cupy.core.core.ndarray object at 0x7f95b5160040> = array([[[54.88135  , 71.518936 , 60.276337 ],\n        [54.48832  , 42.36548  , 64.58941  ],\n        [43.75872  , 89.17....889492 ],\n        [56.804455 , 92.55966  ,  7.1036057],\n        [ 8.71293  ,  2.0218399, 83.261986 ]]], dtype=float32) < array([[[77.815674, 87.00121 , 97.86183 ],\n        [79.915855, 46.147938, 78.05292 ],\n        [11.827442, 63.992104, 14.335329]]], dtype=float32).all

tests/cupy_tests/sorting_tests/test_sort.py:701: AssertionError
____ TestArgpartition_param_0_{external=False}.test_argpartition_multi_dim _____

self = <<cupy_tests.sorting_tests.test_sort.TestArgpartition_param_0_{external=False} testMethod=test_argpartition_multi_dim>  parameter: {'external': False}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.1cAEeXesk6/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float64'>

    @testing.for_all_dtypes(no_bool=True)
    @testing.numpy_cupy_array_equal()
    def test_argpartition_multi_dim(self, xp, dtype):
        a = testing.shaped_random((3, 3, 10), xp, dtype, 100)
        kth = 2
        idx = self.argpartition(a, kth)
        rows = [[[0]], [[1]], [[2]]]
        cols = [[[0], [1], [2]]]
>       assert (a[rows, cols, idx[:, :, :kth]] <
                a[rows, cols, idx[:, :, kth:kth + 1]]).all()
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.1cAEeXesk6/cupy/cupy/testing/helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.1cAEeXesk6/cupy/tests/cupy_tests/sorting_tests/test_sort.py", line 639, in test_argpartition_multi_dim
E           assert (a[rows, cols, idx[:, :, :kth]] <
E       AssertionError: assert array(False)
E        +  where array(False) = <built-in method all of cupy.core.core.ndarray object at 0x7f95b51605e0>()
E        +    where <built-in method all of cupy.core.core.ndarray object at 0x7f95b51605e0> = array([[[54.88135039, 71.51893664],\n        [79.17250381, 52.88949198],\n        [97.86183422, 79.91585642]],\n\n       [...15135]],\n\n       [[15.89695836, 11.03751412],\n        [97.6459465 , 46.86512016],\n        [31.79831794, 41.42629945]]]) < array([[[60.27633761],\n        [56.80445611],\n        [46.14793623]],\n\n       [[45.61503322],\n        [69.76311959],\n        [98.83738381]],\n\n       [[65.63295895],\n        [97.67610882],\n        [ 6.41474963]]]).all

tests/cupy_tests/sorting_tests/test_sort.py:639: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
__ TestArgpartition_param_0_{external=False}.test_argpartition_negative_axis ___

self = <<cupy_tests.sorting_tests.test_sort.TestArgpartition_param_0_{external=False} testMethod=test_argpartition_negative_axis>  parameter: {'external': False}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.1cAEeXesk6/cupy/cupy/__init__.py'>

    @testing.numpy_cupy_array_equal()
    def test_argpartition_negative_axis(self, xp):
        a = testing.shaped_random((3, 3, 10), xp, scale=100)
        kth = 2
        axis = -1
        idx = self.argpartition(a, kth, axis=axis)
        rows = [[[0]], [[1]], [[2]]]
        cols = [[[0], [1], [2]]]
>       assert (a[rows, cols, idx[:, :, :kth]] <
                a[rows, cols, idx[:, :, kth:kth + 1]]).all()
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.1cAEeXesk6/cupy/cupy/testing/helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.1cAEeXesk6/cupy/tests/cupy_tests/sorting_tests/test_sort.py", line 715, in test_argpartition_negative_axis
E           assert (a[rows, cols, idx[:, :, :kth]] <
E       AssertionError: assert array(False)
E        +  where array(False) = <built-in method all of cupy.core.core.ndarray object at 0x7f95b5160e50>()
E        +    where <built-in method all of cupy.core.core.ndarray object at 0x7f95b5160e50> = array([[[54.88135 , 71.518936],\n        [79.1725  , 52.889492],\n        [97.86183 , 79.915855]],\n\n       [[26.45556 , ...53]],\n\n       [[15.896958, 11.037514],\n        [97.64594 , 46.86512 ],\n        [31.798319, 41.4263  ]]], dtype=float32) < array([[[60.276337 ],\n        [56.804455 ],\n        [46.147938 ]],\n\n       [[45.615032 ],\n        [69.76312  ],\n        [98.83739  ]],\n\n       [[65.63296  ],\n        [97.67611  ],\n        [ 6.4147496]]], dtype=float32).all

tests/cupy_tests/sorting_tests/test_sort.py:715: AssertionError
_____ TestArgpartition_param_0_{external=False}.test_argpartition_one_dim ______

self = <<cupy_tests.sorting_tests.test_sort.TestArgpartition_param_0_{external=False} testMethod=test_argpartition_one_dim>  parameter: {'external': False}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.1cAEeXesk6/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float16'>

    @testing.for_all_dtypes()
    @testing.numpy_cupy_equal()
    def test_argpartition_one_dim(self, xp, dtype):
        a = testing.shaped_random((10,), xp, dtype, 100)
        kth = 2
        idx = self.argpartition(a, kth)
>       assert (a[idx[:kth]] <= a[idx[kth]]).all()
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.1cAEeXesk6/cupy/cupy/testing/helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.1cAEeXesk6/cupy/tests/cupy_tests/sorting_tests/test_sort.py", line 625, in test_argpartition_one_dim
E           assert (a[idx[:kth]] <= a[idx[kth]]).all()
E       AssertionError: assert array(False)
E        +  where array(False) = <built-in method all of cupy.core.core.ndarray object at 0x7f95b5160b80>()
E        +    where <built-in method all of cupy.core.core.ndarray object at 0x7f95b5160b80> = array([54.88, 71.5 ], dtype=float16) <= array(60.28, dtype=float16).all

tests/cupy_tests/sorting_tests/test_sort.py:625: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float16'>
_______ TestArgpartition_param_1_{external=True}.test_argpartition_axis ________

self = <<cupy_tests.sorting_tests.test_sort.TestArgpartition_param_1_{external=True} testMethod=test_argpartition_axis>  parameter: {'external': True}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.1cAEeXesk6/cupy/cupy/__init__.py'>

    @testing.numpy_cupy_array_equal()
    def test_argpartition_axis(self, xp):
        a = testing.shaped_random((10, 3, 3), xp, scale=100)
        kth = 2
        axis = 0
        idx = self.argpartition(a, kth, axis=axis)
        rows = [[[0], [1], [2]]]
        cols = [[[0, 1, 2]]]
>       assert (a[idx[:kth, :, :], rows, cols] <
                a[idx[kth:kth + 1, :, :], rows, cols]).all()
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.1cAEeXesk6/cupy/cupy/testing/helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.1cAEeXesk6/cupy/tests/cupy_tests/sorting_tests/test_sort.py", line 701, in test_argpartition_axis
E           assert (a[idx[:kth, :, :], rows, cols] <
E       AssertionError: assert array(False)
E        +  where array(False) = <built-in method all of cupy.core.core.ndarray object at 0x7f95b541e280>()
E        +    where <built-in method all of cupy.core.core.ndarray object at 0x7f95b541e280> = array([[[54.88135  , 71.518936 , 60.276337 ],\n        [54.48832  , 42.36548  , 64.58941  ],\n        [43.75872  , 89.17....889492 ],\n        [56.804455 , 92.55966  ,  7.1036057],\n        [ 8.71293  ,  2.0218399, 83.261986 ]]], dtype=float32) < array([[[77.815674, 87.00121 , 97.86183 ],\n        [79.915855, 46.147938, 78.05292 ],\n        [11.827442, 63.992104, 14.335329]]], dtype=float32).all

tests/cupy_tests/sorting_tests/test_sort.py:701: AssertionError
_____ TestArgpartition_param_1_{external=True}.test_argpartition_multi_dim _____

self = <<cupy_tests.sorting_tests.test_sort.TestArgpartition_param_1_{external=True} testMethod=test_argpartition_multi_dim>  parameter: {'external': True}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.1cAEeXesk6/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float64'>

    @testing.for_all_dtypes(no_bool=True)
    @testing.numpy_cupy_array_equal()
    def test_argpartition_multi_dim(self, xp, dtype):
        a = testing.shaped_random((3, 3, 10), xp, dtype, 100)
        kth = 2
        idx = self.argpartition(a, kth)
        rows = [[[0]], [[1]], [[2]]]
        cols = [[[0], [1], [2]]]
>       assert (a[rows, cols, idx[:, :, :kth]] <
                a[rows, cols, idx[:, :, kth:kth + 1]]).all()
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.1cAEeXesk6/cupy/cupy/testing/helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.1cAEeXesk6/cupy/tests/cupy_tests/sorting_tests/test_sort.py", line 639, in test_argpartition_multi_dim
E           assert (a[rows, cols, idx[:, :, :kth]] <
E       AssertionError: assert array(False)
E        +  where array(False) = <built-in method all of cupy.core.core.ndarray object at 0x7f95b541e8b0>()
E        +    where <built-in method all of cupy.core.core.ndarray object at 0x7f95b541e8b0> = array([[[54.88135039, 71.51893664],\n        [79.17250381, 52.88949198],\n        [97.86183422, 79.91585642]],\n\n       [...15135]],\n\n       [[15.89695836, 11.03751412],\n        [97.6459465 , 46.86512016],\n        [31.79831794, 41.42629945]]]) < array([[[60.27633761],\n        [56.80445611],\n        [46.14793623]],\n\n       [[45.61503322],\n        [69.76311959],\n        [98.83738381]],\n\n       [[65.63295895],\n        [97.67610882],\n        [ 6.41474963]]]).all

tests/cupy_tests/sorting_tests/test_sort.py:639: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
___ TestArgpartition_param_1_{external=True}.test_argpartition_negative_axis ___

self = <<cupy_tests.sorting_tests.test_sort.TestArgpartition_param_1_{external=True} testMethod=test_argpartition_negative_axis>  parameter: {'external': True}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.1cAEeXesk6/cupy/cupy/__init__.py'>

    @testing.numpy_cupy_array_equal()
    def test_argpartition_negative_axis(self, xp):
        a = testing.shaped_random((3, 3, 10), xp, scale=100)
        kth = 2
        axis = -1
        idx = self.argpartition(a, kth, axis=axis)
        rows = [[[0]], [[1]], [[2]]]
        cols = [[[0], [1], [2]]]
>       assert (a[rows, cols, idx[:, :, :kth]] <
                a[rows, cols, idx[:, :, kth:kth + 1]]).all()
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.1cAEeXesk6/cupy/cupy/testing/helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.1cAEeXesk6/cupy/tests/cupy_tests/sorting_tests/test_sort.py", line 715, in test_argpartition_negative_axis
E           assert (a[rows, cols, idx[:, :, :kth]] <
E       AssertionError: assert array(False)
E        +  where array(False) = <built-in method all of cupy.core.core.ndarray object at 0x7f95b541ef70>()
E        +    where <built-in method all of cupy.core.core.ndarray object at 0x7f95b541ef70> = array([[[54.88135 , 71.518936],\n        [79.1725  , 52.889492],\n        [97.86183 , 79.915855]],\n\n       [[26.45556 , ...53]],\n\n       [[15.896958, 11.037514],\n        [97.64594 , 46.86512 ],\n        [31.798319, 41.4263  ]]], dtype=float32) < array([[[60.276337 ],\n        [56.804455 ],\n        [46.147938 ]],\n\n       [[45.615032 ],\n        [69.76312  ],\n        [98.83739  ]],\n\n       [[65.63296  ],\n        [97.67611  ],\n        [ 6.4147496]]], dtype=float32).all

tests/cupy_tests/sorting_tests/test_sort.py:715: AssertionError
______ TestArgpartition_param_1_{external=True}.test_argpartition_one_dim ______

self = <<cupy_tests.sorting_tests.test_sort.TestArgpartition_param_1_{external=True} testMethod=test_argpartition_one_dim>  parameter: {'external': True}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.1cAEeXesk6/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float16'>

    @testing.for_all_dtypes()
    @testing.numpy_cupy_equal()
    def test_argpartition_one_dim(self, xp, dtype):
        a = testing.shaped_random((10,), xp, dtype, 100)
        kth = 2
        idx = self.argpartition(a, kth)
>       assert (a[idx[:kth]] <= a[idx[kth]]).all()
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.1cAEeXesk6/cupy/cupy/testing/helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.1cAEeXesk6/cupy/tests/cupy_tests/sorting_tests/test_sort.py", line 625, in test_argpartition_one_dim
E           assert (a[idx[:kth]] <= a[idx[kth]]).all()
E       AssertionError: assert array(False)
E        +  where array(False) = <built-in method all of cupy.core.core.ndarray object at 0x7f95b51e9160>()
E        +    where <built-in method all of cupy.core.core.ndarray object at 0x7f95b51e9160> = array([54.88, 71.5 ], dtype=float16) <= array(60.28, dtype=float16).all

tests/cupy_tests/sorting_tests/test_sort.py:625: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float16'>
_______________________ TestSort.test_external_sort_axis _______________________
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:648: in check_func
    array.assert_array_equal(x, y, err_msg, verbose, strides_check)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([[[5.488135  , 7.1518936 , 6.0276337 ],
        [5.448832  , 4.236548  , 6.458941  ],
        [4.375872  , 8.917...288949  ],
        [5.6804457 , 9.255966  , 0.7103606 ],
        [0.871293  , 0.20218398, 8.326199  ]]], dtype=float32)
y = array([[[3.8344152 , 7.1518936 , 5.288949  ],
        [5.448832  , 4.236548  , 0.7103606 ],
        [0.871293  , 0.202...0276337 ],
        [5.6804457 , 9.255966  , 6.458941  ],
        [4.375872  , 8.91773   , 9.636627  ]]], dtype=float32)
err_msg = '', verbose = True, strides_check = False

    def assert_array_equal(x, y, err_msg='', verbose=True, strides_check=False):
        """Raises an AssertionError if two array_like objects are not equal.
    
        Args:
             x(numpy.ndarray or cupy.ndarray): The actual object to check.
             y(numpy.ndarray or cupy.ndarray): The desired, expected object.
             strides_check(bool): If ``True``, consistency of strides is also
                 checked.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting values
                 are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_array_equal`
        """
>       numpy.testing.assert_array_equal(
            cupy.asnumpy(x), cupy.asnumpy(y), err_msg=err_msg,
            verbose=verbose)
E       AssertionError: 
E       Arrays are not equal
E       
E       Mismatched elements: 12 / 18 (66.7%)
E       Max absolute difference: 8.715547
E       Max relative difference: 43.10701
E        x: array([[[5.488135, 7.151894, 6.027634],
E               [5.448832, 4.236548, 6.458941],
E               [4.375872, 8.91773 , 9.636627]],...
E        y: array([[[3.834415, 7.151894, 5.288949],
E               [5.448832, 4.236548, 0.710361],
E               [0.871293, 0.202184, 8.326199]],...

cupy/testing/array.py:91: AssertionError
______________________ TestSort.test_external_sort_dtype _______________________
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:648: in check_func
    array.assert_array_equal(x, y, err_msg, verbose, strides_check)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([5.49 , 7.152, 6.027, 5.45 , 4.24 , 6.457, 4.375, 8.914, 9.63 ,
       3.834], dtype=float16)
y = array([3.834, 4.24 , 4.375, 5.45 , 5.49 , 6.027, 6.457, 7.152, 8.914,
       9.63 ], dtype=float16)
err_msg = '', verbose = True, strides_check = False

    def assert_array_equal(x, y, err_msg='', verbose=True, strides_check=False):
        """Raises an AssertionError if two array_like objects are not equal.
    
        Args:
             x(numpy.ndarray or cupy.ndarray): The actual object to check.
             y(numpy.ndarray or cupy.ndarray): The desired, expected object.
             strides_check(bool): If ``True``, consistency of strides is also
                 checked.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting values
                 are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_array_equal`
        """
>       numpy.testing.assert_array_equal(
            cupy.asnumpy(x), cupy.asnumpy(y), err_msg=err_msg,
            verbose=verbose)
E       AssertionError: 
E       Arrays are not equal
E       
E       Mismatched elements: 9 / 10 (90%)
E       Max absolute difference: 5.797
E       Max relative difference: 0.6875
E        x: array([5.49 , 7.152, 6.027, 5.45 , 4.24 , 6.457, 4.375, 8.914, 9.63 ,
E              3.834], dtype=float16)
E        y: array([3.834, 4.24 , 4.375, 5.45 , 5.49 , 6.027, 6.457, 7.152, 8.914,
E              9.63 ], dtype=float16)

cupy/testing/array.py:91: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float16'>
__________________ TestSort.test_external_sort_negative_axis ___________________
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:648: in check_func
    array.assert_array_equal(x, y, err_msg, verbose, strides_check)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([[[5.488135  , 7.1518936 , 6.0276337 ],
        [5.448832  , 4.236548  , 6.458941  ],
        [4.375872  , 8.917...288949  ],
        [5.6804457 , 9.255966  , 0.7103606 ],
        [0.871293  , 0.20218398, 8.326199  ]]], dtype=float32)
y = array([[[4.375872  , 4.236548  , 6.0276337 ],
        [5.448832  , 7.1518936 , 6.458941  ],
        [5.488135  , 8.917...7103606 ],
        [3.8344152 , 7.91725   , 5.288949  ],
        [5.6804457 , 9.255966  , 8.326199  ]]], dtype=float32)
err_msg = '', verbose = True, strides_check = False

    def assert_array_equal(x, y, err_msg='', verbose=True, strides_check=False):
        """Raises an AssertionError if two array_like objects are not equal.
    
        Args:
             x(numpy.ndarray or cupy.ndarray): The actual object to check.
             y(numpy.ndarray or cupy.ndarray): The desired, expected object.
             strides_check(bool): If ``True``, consistency of strides is also
                 checked.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting values
                 are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_array_equal`
        """
>       numpy.testing.assert_array_equal(
            cupy.asnumpy(x), cupy.asnumpy(y), err_msg=err_msg,
            verbose=verbose)
E       AssertionError: 
E       Arrays are not equal
E       
E       Mismatched elements: 12 / 18 (66.7%)
E       Max absolute difference: 9.053782
E       Max relative difference: 38.15864
E        x: array([[[5.488135, 7.151894, 6.027634],
E               [5.448832, 4.236548, 6.458941],
E               [4.375872, 8.91773 , 9.636627]],...
E        y: array([[[4.375872, 4.236548, 6.027634],
E               [5.448832, 7.151894, 6.458941],
E               [5.488135, 8.91773 , 9.636627]],...

cupy/testing/array.py:91: AssertionError
_________________ TestSort.test_external_sort_two_or_more_dim __________________
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:648: in check_func
    array.assert_array_equal(x, y, err_msg, verbose, strides_check)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([[[5.488135  , 7.1518936 , 6.0276337 ],
        [5.448832  , 4.236548  , 6.458941  ],
        [4.375872  , 8.917...288949  ],
        [5.6804457 , 9.255966  , 0.7103606 ],
        [0.871293  , 0.20218398, 8.326199  ]]], dtype=float32)
y = array([[[5.488135  , 6.0276337 , 7.1518936 ],
        [4.236548  , 5.448832  , 6.458941  ],
        [4.375872  , 8.917...91725   ],
        [0.7103606 , 5.6804457 , 9.255966  ],
        [0.20218398, 0.871293  , 8.326199  ]]], dtype=float32)
err_msg = '', verbose = True, strides_check = False

    def assert_array_equal(x, y, err_msg='', verbose=True, strides_check=False):
        """Raises an AssertionError if two array_like objects are not equal.
    
        Args:
             x(numpy.ndarray or cupy.ndarray): The actual object to check.
             y(numpy.ndarray or cupy.ndarray): The desired, expected object.
             strides_check(bool): If ``True``, consistency of strides is also
                 checked.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting values
                 are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_array_equal`
        """
>       numpy.testing.assert_array_equal(
            cupy.asnumpy(x), cupy.asnumpy(y), err_msg=err_msg,
            verbose=verbose)
E       AssertionError: 
E       Arrays are not equal
E       
E       Mismatched elements: 11 / 18 (61.1%)
E       Max absolute difference: 8.545606
E       Max relative difference: 6.996567
E        x: array([[[5.488135, 7.151894, 6.027634],
E               [5.448832, 4.236548, 6.458941],
E               [4.375872, 8.91773 , 9.636627]],...
E        y: array([[[5.488135, 6.027634, 7.151894],
E               [4.236548, 5.448832, 6.458941],
E               [4.375872, 8.91773 , 9.636627]],...

cupy/testing/array.py:91: AssertionError
______________________________ TestSort.test_nan1 ______________________________
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:648: in check_func
    array.assert_array_equal(x, y, err_msg, verbose, strides_check)
cupy/testing/array.py:91: in assert_array_equal
    numpy.testing.assert_array_equal(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([5.49 , 7.152,   nan, 5.45 , 4.24 , 6.457,   nan, 8.914, 9.63 ,
       3.834], dtype=float16)
y = array([3.834, 4.24 , 5.45 , 5.49 , 6.457, 7.152, 8.914, 9.63 ,   nan,
         nan], dtype=float16)
func = <ufunc 'isnan'>, hasval = 'nan'

    def func_assert_same_pos(x, y, func=isnan, hasval='nan'):
        """Handling nan/inf.
    
        Combine results of running func on x and y, checking that they are True
        at the same locations.
    
        """
        x_id = func(x)
        y_id = func(y)
        # We include work-arounds here to handle three types of slightly
        # pathological ndarray subclasses:
        # (1) all() on `masked` array scalars can return masked arrays, so we
        #     use != True
        # (2) __eq__ on some ndarray subclasses returns Python booleans
        #     instead of element-wise comparisons, so we cast to bool_() and
        #     use isinstance(..., bool) checks
        # (3) subclasses with bare-bones __array_function__ implementations may
        #     not implement np.all(), so favor using the .all() method
        # We are not committed to supporting such subclasses, but it's nice to
        # support them if possible.
        if bool_(x_id == y_id).all() != True:
            msg = build_err_msg([x, y],
                                err_msg + '\nx and y %s location mismatch:'
                                % (hasval), verbose=verbose, header=header,
                                names=('x', 'y'), precision=precision)
>           raise AssertionError(msg)
E           AssertionError: 
E           Arrays are not equal
E           
E           x and y nan location mismatch:
E            x: array([5.49 , 7.152,   nan, 5.45 , 4.24 , 6.457,   nan, 8.914, 9.63 ,
E                  3.834], dtype=float16)
E            y: array([3.834, 4.24 , 5.45 , 5.49 , 6.457, 7.152, 8.914, 9.63 ,   nan,
E                    nan], dtype=float16)

/home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/testing/_private/utils.py:740: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is e
______________________________ TestSort.test_nan2 ______________________________
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:648: in check_func
    array.assert_array_equal(x, y, err_msg, verbose, strides_check)
cupy/testing/array.py:91: in assert_array_equal
    numpy.testing.assert_array_equal(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([[[5.49  , 7.152 , 6.027 , 5.45  ],
        [4.24  , 6.457 , 4.375 , 8.914 ],
        [9.63  ,    nan, 7.918 , 5..., 0.7104,    nan],
        [0.2021, 8.33  , 7.78  , 8.7   ],
        [9.79  , 7.992 , 4.613 , 7.805 ]]], dtype=float16)
y = array([[[5.49  , 7.152 , 0.7104, 5.45  ],
        [0.2021, 6.457 , 4.375 , 8.7   ],
        [9.63  , 7.992 , 4.613 , 5..., 6.027 ,    nan],
        [4.24  , 8.33  , 7.78  , 8.914 ],
        [9.79  ,    nan, 7.918 , 7.805 ]]], dtype=float16)
func = <ufunc 'isnan'>, hasval = 'nan'

    def func_assert_same_pos(x, y, func=isnan, hasval='nan'):
        """Handling nan/inf.
    
        Combine results of running func on x and y, checking that they are True
        at the same locations.
    
        """
        x_id = func(x)
        y_id = func(y)
        # We include work-arounds here to handle three types of slightly
        # pathological ndarray subclasses:
        # (1) all() on `masked` array scalars can return masked arrays, so we
        #     use != True
        # (2) __eq__ on some ndarray subclasses returns Python booleans
        #     instead of element-wise comparisons, so we cast to bool_() and
        #     use isinstance(..., bool) checks
        # (3) subclasses with bare-bones __array_function__ implementations may
        #     not implement np.all(), so favor using the .all() method
        # We are not committed to supporting such subclasses, but it's nice to
        # support them if possible.
        if bool_(x_id == y_id).all() != True:
            msg = build_err_msg([x, y],
                                err_msg + '\nx and y %s location mismatch:'
                                % (hasval), verbose=verbose, header=header,
                                names=('x', 'y'), precision=precision)
>           raise AssertionError(msg)
E           AssertionError: 
E           Arrays are not equal
E           
E           x and y nan location mismatch:
E            x: array([[[5.49  , 7.152 , 6.027 , 5.45  ],
E                   [4.24  , 6.457 , 4.375 , 8.914 ],
E                   [9.63  ,    nan, 7.918 , 5.29  ]],...
E            y: array([[[5.49  , 7.152 , 0.7104, 5.45  ],
E                   [0.2021, 6.457 , 4.375 , 8.7   ],
E                   [9.63  , 7.992 , 4.613 , 5.29  ]],...

/home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/testing/_private/utils.py:740: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is e
______________________________ TestSort.test_nan3 ______________________________
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:648: in check_func
    array.assert_array_equal(x, y, err_msg, verbose, strides_check)
cupy/testing/array.py:91: in assert_array_equal
    numpy.testing.assert_array_equal(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([[[5.49  , 7.152 , 6.027 , 5.45  ],
        [4.24  , 6.457 , 4.375 , 8.914 ],
        [9.63  ,    nan, 7.918 , 5..., 0.7104,    nan],
        [0.2021, 8.33  , 7.78  , 8.7   ],
        [9.79  , 7.992 , 4.613 , 7.805 ]]], dtype=float16)
y = array([[[4.24  , 6.457 , 4.375 , 5.29  ],
        [5.49  , 7.152 , 6.027 , 5.45  ],
        [9.63  ,    nan, 7.918 , 8..., 0.7104, 7.805 ],
        [5.68  , 8.33  , 4.613 , 8.7   ],
        [9.79  , 9.26  , 7.78  ,    nan]]], dtype=float16)
func = <ufunc 'isnan'>, hasval = 'nan'

    def func_assert_same_pos(x, y, func=isnan, hasval='nan'):
        """Handling nan/inf.
    
        Combine results of running func on x and y, checking that they are True
        at the same locations.
    
        """
        x_id = func(x)
        y_id = func(y)
        # We include work-arounds here to handle three types of slightly
        # pathological ndarray subclasses:
        # (1) all() on `masked` array scalars can return masked arrays, so we
        #     use != True
        # (2) __eq__ on some ndarray subclasses returns Python booleans
        #     instead of element-wise comparisons, so we cast to bool_() and
        #     use isinstance(..., bool) checks
        # (3) subclasses with bare-bones __array_function__ implementations may
        #     not implement np.all(), so favor using the .all() method
        # We are not committed to supporting such subclasses, but it's nice to
        # support them if possible.
        if bool_(x_id == y_id).all() != True:
            msg = build_err_msg([x, y],
                                err_msg + '\nx and y %s location mismatch:'
                                % (hasval), verbose=verbose, header=header,
                                names=('x', 'y'), precision=precision)
>           raise AssertionError(msg)
E           AssertionError: 
E           Arrays are not equal
E           
E           x and y nan location mismatch:
E            x: array([[[5.49  , 7.152 , 6.027 , 5.45  ],
E                   [4.24  , 6.457 , 4.375 , 8.914 ],
E                   [9.63  ,    nan, 7.918 , 5.29  ]],...
E            y: array([[[4.24  , 6.457 , 4.375 , 5.29  ],
E                   [5.49  , 7.152 , 6.027 , 5.45  ],
E                   [9.63  ,    nan, 7.918 , 8.914 ]],...

/home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/testing/_private/utils.py:740: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is e
______________________________ TestSort.test_nan4 ______________________________
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:648: in check_func
    array.assert_array_equal(x, y, err_msg, verbose, strides_check)
cupy/testing/array.py:91: in assert_array_equal
    numpy.testing.assert_array_equal(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([[[5.49  , 7.152 , 6.027 , 5.45  ],
        [4.24  , 6.457 , 4.375 , 8.914 ],
        [9.63  ,    nan, 7.918 , 5..., 0.7104,    nan],
        [0.2021, 8.33  , 7.78  , 8.7   ],
        [9.79  , 7.992 , 4.613 , 7.805 ]]], dtype=float16)
y = array([[[5.45  , 5.49  , 6.027 , 7.152 ],
        [4.24  , 4.375 , 6.457 , 8.914 ],
        [5.29  , 7.918 , 9.63  ,  ..., 9.26  ,    nan],
        [0.2021, 7.78  , 8.33  , 8.7   ],
        [4.613 , 7.805 , 7.992 , 9.79  ]]], dtype=float16)
func = <ufunc 'isnan'>, hasval = 'nan'

    def func_assert_same_pos(x, y, func=isnan, hasval='nan'):
        """Handling nan/inf.
    
        Combine results of running func on x and y, checking that they are True
        at the same locations.
    
        """
        x_id = func(x)
        y_id = func(y)
        # We include work-arounds here to handle three types of slightly
        # pathological ndarray subclasses:
        # (1) all() on `masked` array scalars can return masked arrays, so we
        #     use != True
        # (2) __eq__ on some ndarray subclasses returns Python booleans
        #     instead of element-wise comparisons, so we cast to bool_() and
        #     use isinstance(..., bool) checks
        # (3) subclasses with bare-bones __array_function__ implementations may
        #     not implement np.all(), so favor using the .all() method
        # We are not committed to supporting such subclasses, but it's nice to
        # support them if possible.
        if bool_(x_id == y_id).all() != True:
            msg = build_err_msg([x, y],
                                err_msg + '\nx and y %s location mismatch:'
                                % (hasval), verbose=verbose, header=header,
                                names=('x', 'y'), precision=precision)
>           raise AssertionError(msg)
E           AssertionError: 
E           Arrays are not equal
E           
E           x and y nan location mismatch:
E            x: array([[[5.49  , 7.152 , 6.027 , 5.45  ],
E                   [4.24  , 6.457 , 4.375 , 8.914 ],
E                   [9.63  ,    nan, 7.918 , 5.29  ]],...
E            y: array([[[5.45  , 5.49  , 6.027 , 7.152 ],
E                   [4.24  , 4.375 , 6.457 , 8.914 ],
E                   [5.29  , 7.918 , 9.63  ,    nan]],...

/home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/testing/_private/utils.py:740: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is e
___________________________ TestSort.test_sort_axis1 ___________________________
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:648: in check_func
    array.assert_array_equal(x, y, err_msg, verbose, strides_check)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([[[5.488135  , 7.1518936 , 6.0276337 , 5.448832  ],
        [4.236548  , 6.458941  , 4.375872  , 8.91773   ],
  ...218398, 8.326199  , 7.7815676 , 8.700122  ],
        [9.786183  , 7.9915857 , 4.614794  , 7.8052917 ]]], dtype=float32)
y = array([[[5.488135  , 7.1518936 , 0.7103606 , 0.871293  ],
        [0.20218398, 6.458941  , 4.375872  , 8.700122  ],
  ...6548  , 8.326199  , 7.7815676 , 8.91773   ],
        [9.786183  , 7.9915857 , 7.91725   , 7.8052917 ]]], dtype=float32)
err_msg = '', verbose = True, strides_check = False

    def assert_array_equal(x, y, err_msg='', verbose=True, strides_check=False):
        """Raises an AssertionError if two array_like objects are not equal.
    
        Args:
             x(numpy.ndarray or cupy.ndarray): The actual object to check.
             y(numpy.ndarray or cupy.ndarray): The desired, expected object.
             strides_check(bool): If ``True``, consistency of strides is also
                 checked.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting values
                 are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_array_equal`
        """
>       numpy.testing.assert_array_equal(
            cupy.asnumpy(x), cupy.asnumpy(y), err_msg=err_msg,
            verbose=verbose)
E       AssertionError: 
E       Arrays are not equal
E       
E       Mismatched elements: 10 / 24 (41.7%)
E       Max absolute difference: 5.317273
E       Max relative difference: 19.953924
E        x: array([[[5.488135, 7.151894, 6.027634, 5.448832],
E               [4.236548, 6.458941, 4.375872, 8.91773 ],
E               [9.636627, 3.834415, 7.91725 , 5.288949]],...
E        y: array([[[5.488135, 7.151894, 0.710361, 0.871293],
E               [0.202184, 6.458941, 4.375872, 8.700122],
E               [9.636627, 3.834415, 4.614794, 5.288949]],...

cupy/testing/array.py:91: AssertionError
___________________________ TestSort.test_sort_axis2 ___________________________
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:648: in check_func
    array.assert_array_equal(x, y, err_msg, verbose, strides_check)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([[[5.488135  , 7.1518936 , 6.0276337 , 5.448832  ],
        [4.236548  , 6.458941  , 4.375872  , 8.91773   ],
  ...218398, 8.326199  , 7.7815676 , 8.700122  ],
        [9.786183  , 7.9915857 , 4.614794  , 7.8052917 ]]], dtype=float32)
y = array([[[4.236548  , 3.8344152 , 4.375872  , 5.288949  ],
        [5.488135  , 6.458941  , 6.0276337 , 5.448832  ],
  ...04457 , 8.326199  , 4.614794  , 7.8052917 ],
        [9.786183  , 9.255966  , 7.7815676 , 8.700122  ]]], dtype=float32)
err_msg = '', verbose = True, strides_check = False

    def assert_array_equal(x, y, err_msg='', verbose=True, strides_check=False):
        """Raises an AssertionError if two array_like objects are not equal.
    
        Args:
             x(numpy.ndarray or cupy.ndarray): The actual object to check.
             y(numpy.ndarray or cupy.ndarray): The desired, expected object.
             strides_check(bool): If ``True``, consistency of strides is also
                 checked.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting values
                 are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_array_equal`
        """
>       numpy.testing.assert_array_equal(
            cupy.asnumpy(x), cupy.asnumpy(y), err_msg=err_msg,
            verbose=verbose)
E       AssertionError: 
E       Arrays are not equal
E       
E       Mismatched elements: 17 / 24 (70.8%)
E       Max absolute difference: 5.4782615
E       Max relative difference: 27.095428
E        x: array([[[5.488135, 7.151894, 6.027634, 5.448832],
E               [4.236548, 6.458941, 4.375872, 8.91773 ],
E               [9.636627, 3.834415, 7.91725 , 5.288949]],...
E        y: array([[[4.236548, 3.834415, 4.375872, 5.288949],
E               [5.488135, 6.458941, 6.027634, 5.448832],
E               [9.636627, 7.151894, 7.91725 , 8.91773 ]],...

cupy/testing/array.py:91: AssertionError
___________________________ TestSort.test_sort_axis3 ___________________________
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:648: in check_func
    array.assert_array_equal(x, y, err_msg, verbose, strides_check)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([[[5.488135  , 7.1518936 , 6.0276337 , 5.448832  ],
        [4.236548  , 6.458941  , 4.375872  , 8.91773   ],
  ...218398, 8.326199  , 7.7815676 , 8.700122  ],
        [9.786183  , 7.9915857 , 4.614794  , 7.8052917 ]]], dtype=float32)
y = array([[[5.448832  , 5.488135  , 6.0276337 , 7.1518936 ],
        [4.236548  , 4.375872  , 6.458941  , 8.91773   ],
  ...218398, 7.7815676 , 8.326199  , 8.700122  ],
        [4.614794  , 7.8052917 , 7.9915857 , 9.786183  ]]], dtype=float32)
err_msg = '', verbose = True, strides_check = False

    def assert_array_equal(x, y, err_msg='', verbose=True, strides_check=False):
        """Raises an AssertionError if two array_like objects are not equal.
    
        Args:
             x(numpy.ndarray or cupy.ndarray): The actual object to check.
             y(numpy.ndarray or cupy.ndarray): The desired, expected object.
             strides_check(bool): If ``True``, consistency of strides is also
                 checked.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting values
                 are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_array_equal`
        """
>       numpy.testing.assert_array_equal(
            cupy.asnumpy(x), cupy.asnumpy(y), err_msg=err_msg,
            verbose=verbose)
E       AssertionError: 
E       Arrays are not equal
E       
E       Mismatched elements: 18 / 24 (75%)
E       Max absolute difference: 8.384673
E       Max relative difference: 9.623253
E        x: array([[[5.488135, 7.151894, 6.027634, 5.448832],
E               [4.236548, 6.458941, 4.375872, 8.91773 ],
E               [9.636627, 3.834415, 7.91725 , 5.288949]],...
E        y: array([[[5.448832, 5.488135, 6.027634, 7.151894],
E               [4.236548, 4.375872, 6.458941, 8.91773 ],
E               [3.834415, 5.288949, 7.91725 , 9.636627]],...

cupy/testing/array.py:91: AssertionError
___________________________ TestSort.test_sort_dtype ___________________________
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:648: in check_func
    array.assert_array_equal(x, y, err_msg, verbose, strides_check)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([5.49 , 7.152, 6.027, 5.45 , 4.24 , 6.457, 4.375, 8.914, 9.63 ,
       3.834], dtype=float16)
y = array([3.834, 4.24 , 4.375, 5.45 , 5.49 , 6.027, 6.457, 7.152, 8.914,
       9.63 ], dtype=float16)
err_msg = '', verbose = True, strides_check = False

    def assert_array_equal(x, y, err_msg='', verbose=True, strides_check=False):
        """Raises an AssertionError if two array_like objects are not equal.
    
        Args:
             x(numpy.ndarray or cupy.ndarray): The actual object to check.
             y(numpy.ndarray or cupy.ndarray): The desired, expected object.
             strides_check(bool): If ``True``, consistency of strides is also
                 checked.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting values
                 are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_array_equal`
        """
>       numpy.testing.assert_array_equal(
            cupy.asnumpy(x), cupy.asnumpy(y), err_msg=err_msg,
            verbose=verbose)
E       AssertionError: 
E       Arrays are not equal
E       
E       Mismatched elements: 9 / 10 (90%)
E       Max absolute difference: 5.797
E       Max relative difference: 0.6875
E        x: array([5.49 , 7.152, 6.027, 5.45 , 4.24 , 6.457, 4.375, 8.914, 9.63 ,
E              3.834], dtype=float16)
E        y: array([3.834, 4.24 , 4.375, 5.45 , 5.49 , 6.027, 6.457, 7.152, 8.914,
E              9.63 ], dtype=float16)

cupy/testing/array.py:91: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float16'>
_______________________ TestSort.test_sort_negative_axis _______________________
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:648: in check_func
    array.assert_array_equal(x, y, err_msg, verbose, strides_check)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([[[5.488135  , 7.1518936 , 6.0276337 ],
        [5.448832  , 4.236548  , 6.458941  ],
        [4.375872  , 8.917...288949  ],
        [5.6804457 , 9.255966  , 0.7103606 ],
        [0.871293  , 0.20218398, 8.326199  ]]], dtype=float32)
y = array([[[4.375872  , 4.236548  , 6.0276337 ],
        [5.448832  , 7.1518936 , 6.458941  ],
        [5.488135  , 8.917...7103606 ],
        [3.8344152 , 7.91725   , 5.288949  ],
        [5.6804457 , 9.255966  , 8.326199  ]]], dtype=float32)
err_msg = '', verbose = True, strides_check = False

    def assert_array_equal(x, y, err_msg='', verbose=True, strides_check=False):
        """Raises an AssertionError if two array_like objects are not equal.
    
        Args:
             x(numpy.ndarray or cupy.ndarray): The actual object to check.
             y(numpy.ndarray or cupy.ndarray): The desired, expected object.
             strides_check(bool): If ``True``, consistency of strides is also
                 checked.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting values
                 are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_array_equal`
        """
>       numpy.testing.assert_array_equal(
            cupy.asnumpy(x), cupy.asnumpy(y), err_msg=err_msg,
            verbose=verbose)
E       AssertionError: 
E       Arrays are not equal
E       
E       Mismatched elements: 12 / 18 (66.7%)
E       Max absolute difference: 9.053782
E       Max relative difference: 38.15864
E        x: array([[[5.488135, 7.151894, 6.027634],
E               [5.448832, 4.236548, 6.458941],
E               [4.375872, 8.91773 , 9.636627]],...
E        y: array([[[4.375872, 4.236548, 6.027634],
E               [5.448832, 7.151894, 6.458941],
E               [5.488135, 8.91773 , 9.636627]],...

cupy/testing/array.py:91: AssertionError
______________________ TestSort.test_sort_two_or_more_dim ______________________
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:648: in check_func
    array.assert_array_equal(x, y, err_msg, verbose, strides_check)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([[[5.488135  , 7.1518936 , 6.0276337 ],
        [5.448832  , 4.236548  , 6.458941  ],
        [4.375872  , 8.917...288949  ],
        [5.6804457 , 9.255966  , 0.7103606 ],
        [0.871293  , 0.20218398, 8.326199  ]]], dtype=float32)
y = array([[[5.488135  , 6.0276337 , 7.1518936 ],
        [4.236548  , 5.448832  , 6.458941  ],
        [4.375872  , 8.917...91725   ],
        [0.7103606 , 5.6804457 , 9.255966  ],
        [0.20218398, 0.871293  , 8.326199  ]]], dtype=float32)
err_msg = '', verbose = True, strides_check = False

    def assert_array_equal(x, y, err_msg='', verbose=True, strides_check=False):
        """Raises an AssertionError if two array_like objects are not equal.
    
        Args:
             x(numpy.ndarray or cupy.ndarray): The actual object to check.
             y(numpy.ndarray or cupy.ndarray): The desired, expected object.
             strides_check(bool): If ``True``, consistency of strides is also
                 checked.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting values
                 are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_array_equal`
        """
>       numpy.testing.assert_array_equal(
            cupy.asnumpy(x), cupy.asnumpy(y), err_msg=err_msg,
            verbose=verbose)
E       AssertionError: 
E       Arrays are not equal
E       
E       Mismatched elements: 11 / 18 (61.1%)
E       Max absolute difference: 8.545606
E       Max relative difference: 6.996567
E        x: array([[[5.488135, 7.151894, 6.027634],
E               [5.448832, 4.236548, 6.458941],
E               [4.375872, 8.91773 , 9.636627]],...
E        y: array([[[5.488135, 6.027634, 7.151894],
E               [4.236548, 5.448832, 6.458941],
E               [4.375872, 8.91773 , 9.636627]],...

cupy/testing/array.py:91: AssertionError
___________________________ TestLexsort.test_F_order ___________________________
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:648: in check_func
    array.assert_array_equal(x, y, err_msg, verbose, strides_check)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([0, 1, 2, 3, 4, 5, 6, 7]), y = array([0, 2, 6, 5, 4, 1, 7, 3])
err_msg = '', verbose = True, strides_check = False

    def assert_array_equal(x, y, err_msg='', verbose=True, strides_check=False):
        """Raises an AssertionError if two array_like objects are not equal.
    
        Args:
             x(numpy.ndarray or cupy.ndarray): The actual object to check.
             y(numpy.ndarray or cupy.ndarray): The desired, expected object.
             strides_check(bool): If ``True``, consistency of strides is also
                 checked.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting values
                 are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_array_equal`
        """
>       numpy.testing.assert_array_equal(
            cupy.asnumpy(x), cupy.asnumpy(y), err_msg=err_msg,
            verbose=verbose)
E       AssertionError: 
E       Arrays are not equal
E       
E       Mismatched elements: 6 / 8 (75%)
E       Max absolute difference: 4
E       Max relative difference: 4.
E        x: array([0, 1, 2, 3, 4, 5, 6, 7])
E        y: array([0, 2, 6, 5, 4, 1, 7, 3])

cupy/testing/array.py:91: AssertionError
________________________ TestLexsort.test_lexsort_dtype ________________________
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:648: in check_func
    array.assert_array_equal(x, y, err_msg, verbose, strides_check)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
y = array([6, 4, 5, 1, 2, 8, 0, 7, 9, 3]), err_msg = '', verbose = True
strides_check = False

    def assert_array_equal(x, y, err_msg='', verbose=True, strides_check=False):
        """Raises an AssertionError if two array_like objects are not equal.
    
        Args:
             x(numpy.ndarray or cupy.ndarray): The actual object to check.
             y(numpy.ndarray or cupy.ndarray): The desired, expected object.
             strides_check(bool): If ``True``, consistency of strides is also
                 checked.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting values
                 are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_array_equal`
        """
>       numpy.testing.assert_array_equal(
            cupy.asnumpy(x), cupy.asnumpy(y), err_msg=err_msg,
            verbose=verbose)
E       AssertionError: 
E       Arrays are not equal
E       
E       Mismatched elements: 9 / 10 (90%)
E       Max absolute difference: 6
E       Max relative difference: 2.
E        x: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
E        y: array([6, 4, 5, 1, 2, 8, 0, 7, 9, 3])

cupy/testing/array.py:91: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
____________________________ TestLexsort.test_nan1 _____________________________
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:648: in check_func
    array.assert_array_equal(x, y, err_msg, verbose, strides_check)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
y = array([6, 4, 5, 1, 2, 8, 0, 7, 9, 3]), err_msg = '', verbose = True
strides_check = False

    def assert_array_equal(x, y, err_msg='', verbose=True, strides_check=False):
        """Raises an AssertionError if two array_like objects are not equal.
    
        Args:
             x(numpy.ndarray or cupy.ndarray): The actual object to check.
             y(numpy.ndarray or cupy.ndarray): The desired, expected object.
             strides_check(bool): If ``True``, consistency of strides is also
                 checked.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting values
                 are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_array_equal`
        """
>       numpy.testing.assert_array_equal(
            cupy.asnumpy(x), cupy.asnumpy(y), err_msg=err_msg,
            verbose=verbose)
E       AssertionError: 
E       Arrays are not equal
E       
E       Mismatched elements: 9 / 10 (90%)
E       Max absolute difference: 6
E       Max relative difference: 2.
E        x: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
E        y: array([6, 4, 5, 1, 2, 8, 0, 7, 9, 3])

cupy/testing/array.py:91: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is e
____________________________ TestLexsort.test_nan2 _____________________________
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:648: in check_func
    array.assert_array_equal(x, y, err_msg, verbose, strides_check)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
y = array([6, 4, 5, 1, 8, 0, 7, 9, 3, 2]), err_msg = '', verbose = True
strides_check = False

    def assert_array_equal(x, y, err_msg='', verbose=True, strides_check=False):
        """Raises an AssertionError if two array_like objects are not equal.
    
        Args:
             x(numpy.ndarray or cupy.ndarray): The actual object to check.
             y(numpy.ndarray or cupy.ndarray): The desired, expected object.
             strides_check(bool): If ``True``, consistency of strides is also
                 checked.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting values
                 are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_array_equal`
        """
>       numpy.testing.assert_array_equal(
            cupy.asnumpy(x), cupy.asnumpy(y), err_msg=err_msg,
            verbose=verbose)
E       AssertionError: 
E       Arrays are not equal
E       
E       Mismatched elements: 10 / 10 (100%)
E       Max absolute difference: 7
E       Max relative difference: 3.5
E        x: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
E        y: array([6, 4, 5, 1, 8, 0, 7, 9, 3, 2])

cupy/testing/array.py:91: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is e
____________________________ TestLexsort.test_nan3 _____________________________
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:648: in check_func
    array.assert_array_equal(x, y, err_msg, verbose, strides_check)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
y = array([4, 5, 1, 8, 0, 7, 9, 3, 6, 2]), err_msg = '', verbose = True
strides_check = False

    def assert_array_equal(x, y, err_msg='', verbose=True, strides_check=False):
        """Raises an AssertionError if two array_like objects are not equal.
    
        Args:
             x(numpy.ndarray or cupy.ndarray): The actual object to check.
             y(numpy.ndarray or cupy.ndarray): The desired, expected object.
             strides_check(bool): If ``True``, consistency of strides is also
                 checked.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting values
                 are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_array_equal`
        """
>       numpy.testing.assert_array_equal(
            cupy.asnumpy(x), cupy.asnumpy(y), err_msg=err_msg,
            verbose=verbose)
E       AssertionError: 
E       Arrays are not equal
E       
E       Mismatched elements: 10 / 10 (100%)
E       Max absolute difference: 7
E       Max relative difference: 3.5
E        x: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
E        y: array([4, 5, 1, 8, 0, 7, 9, 3, 6, 2])

cupy/testing/array.py:91: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is e
____________________________ TestLexsort.test_view _____________________________
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:648: in check_func
    array.assert_array_equal(x, y, err_msg, verbose, strides_check)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([0, 1, 2, 3]), y = array([2, 3, 0, 1]), err_msg = '', verbose = True
strides_check = False

    def assert_array_equal(x, y, err_msg='', verbose=True, strides_check=False):
        """Raises an AssertionError if two array_like objects are not equal.
    
        Args:
             x(numpy.ndarray or cupy.ndarray): The actual object to check.
             y(numpy.ndarray or cupy.ndarray): The desired, expected object.
             strides_check(bool): If ``True``, consistency of strides is also
                 checked.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting values
                 are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_array_equal`
        """
>       numpy.testing.assert_array_equal(
            cupy.asnumpy(x), cupy.asnumpy(y), err_msg=err_msg,
            verbose=verbose)
E       AssertionError: 
E       Arrays are not equal
E       
E       Mismatched elements: 4 / 4 (100%)
E       Max absolute difference: 2
E       Max relative difference: 2.
E        x: array([0, 1, 2, 3])
E        y: array([2, 3, 0, 1])

cupy/testing/array.py:91: AssertionError
________________________ TestMsort.test_msort_multi_dim ________________________
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:648: in check_func
    array.assert_array_equal(x, y, err_msg, verbose, strides_check)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([[5.48813504, 7.15189366, 6.02763376],
       [5.44883183, 4.23654799, 6.45894113]])
y = array([[5.44883183, 4.23654799, 6.02763376],
       [5.48813504, 7.15189366, 6.45894113]])
err_msg = '', verbose = True, strides_check = False

    def assert_array_equal(x, y, err_msg='', verbose=True, strides_check=False):
        """Raises an AssertionError if two array_like objects are not equal.
    
        Args:
             x(numpy.ndarray or cupy.ndarray): The actual object to check.
             y(numpy.ndarray or cupy.ndarray): The desired, expected object.
             strides_check(bool): If ``True``, consistency of strides is also
                 checked.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting values
                 are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_array_equal`
        """
>       numpy.testing.assert_array_equal(
            cupy.asnumpy(x), cupy.asnumpy(y), err_msg=err_msg,
            verbose=verbose)
E       AssertionError: 
E       Arrays are not equal
E       
E       Mismatched elements: 4 / 6 (66.7%)
E       Max absolute difference: 2.91534567
E       Max relative difference: 0.68814178
E        x: array([[5.488135, 7.151894, 6.027634],
E              [5.448832, 4.236548, 6.458941]])
E        y: array([[5.448832, 4.236548, 6.027634],
E              [5.488135, 7.151894, 6.458941]])

cupy/testing/array.py:91: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_________________________ TestMsort.test_msort_one_dim _________________________
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:648: in check_func
    array.assert_array_equal(x, y, err_msg, verbose, strides_check)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([5.49 , 7.152, 6.027, 5.45 , 4.24 , 6.457, 4.375, 8.914, 9.63 ,
       3.834], dtype=float16)
y = array([3.834, 4.24 , 4.375, 5.45 , 5.49 , 6.027, 6.457, 7.152, 8.914,
       9.63 ], dtype=float16)
err_msg = '', verbose = True, strides_check = False

    def assert_array_equal(x, y, err_msg='', verbose=True, strides_check=False):
        """Raises an AssertionError if two array_like objects are not equal.
    
        Args:
             x(numpy.ndarray or cupy.ndarray): The actual object to check.
             y(numpy.ndarray or cupy.ndarray): The desired, expected object.
             strides_check(bool): If ``True``, consistency of strides is also
                 checked.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting values
                 are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_array_equal`
        """
>       numpy.testing.assert_array_equal(
            cupy.asnumpy(x), cupy.asnumpy(y), err_msg=err_msg,
            verbose=verbose)
E       AssertionError: 
E       Arrays are not equal
E       
E       Mismatched elements: 9 / 10 (90%)
E       Max absolute difference: 5.797
E       Max relative difference: 0.6875
E        x: array([5.49 , 7.152, 6.027, 5.45 , 4.24 , 6.457, 4.375, 8.914, 9.63 ,
E              3.834], dtype=float16)
E        y: array([3.834, 4.24 , 4.375, 5.45 , 5.49 , 6.027, 6.457, 7.152, 8.914,
E              9.63 ], dtype=float16)

cupy/testing/array.py:91: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float16'>
________ TestCorrelate_param_0_{mode='valid'}.test_correlate_diff_types ________
cupy/testing/helper.py:1068: in test_func
    impl(self, *args, **kw_copy)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:495: in check_func
    array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([1191,  651,  779,  562,  751,  745,  693,  862,  864,  936, 1027,
        988,  962,  827,  937,  817,  832,  8...,  888,  891,
        942, 1035, 1029, 1037, 1013, 1027,  923, 1029,  944,  889,  908,
        874,  863], dtype=int16)
desired = array([2592, 1718, 1987, 1649, 1849, 1731, 1795, 1760, 1768, 1660, 1897,
       1677, 1809, 1717, 1837, 1735, 1847, 18..., 1964, 1901,
       1937, 2021, 2012, 2070, 2067, 2075, 1921, 2122, 1994, 2076, 2045,
       2048, 1965], dtype=int16)
rtol = 0.01, atol = 0, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=0.01, atol=0
E       
E       Mismatched elements: 101 / 101 (100%)
E       Max absolute difference: 1401
E       Max relative difference: 0.65918739
E        x: array([1191,  651,  779,  562,  751,  745,  693,  862,  864,  936, 1027,
E               988,  962,  827,  937,  817,  832,  837,  814,  740,  794,  842,
E               771,  822,  895,  956,  943,  996,  946,  983,  890,  912,  824,...
E        y: array([2592, 1718, 1987, 1649, 1849, 1731, 1795, 1760, 1768, 1660, 1897,
E              1677, 1809, 1717, 1837, 1735, 1847, 1829, 1986, 1817, 1897, 1825,
E              1697, 1752, 1698, 1794, 1725, 1754, 1791, 1757, 1813, 1836, 1871,...

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.uint8'>, 'dtype2': <class 'numpy.int8'>}
________ TestCorrelate_param_1_{mode='full'}.test_correlate_diff_types _________
cupy/testing/helper.py:1068: in test_func
    impl(self, *args, **kw_copy)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:495: in check_func
    array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([   0,   40,   56,   73,   80,   79,  128,  123,  187,  204,  215,
        299,  242,  279,  284,  208,  256,  1...,  150,  135,
         76,   44,   46,   12,   36,    0,    0,    0,    0,    0,    0,
          0,    0], dtype=int16)
desired = array([   0,   40,   56,   73,   80,   79,  128,  123,  187,  204,  215,
        299,  242,  304,  329,  277,  358,  3...,  326,  352,
        289,  246,  209,  168,  178,  182,  152,  109,   62,   44,   34,
         28,   20], dtype=int16)
rtol = 0.01, atol = 0, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=0.01, atol=0
E       
E       Mismatched elements: 286 / 299 (95.7%)
E       Max absolute difference: 1401
E       Max relative difference: 1.
E        x: array([   0,   40,   56,   73,   80,   79,  128,  123,  187,  204,  215,
E               299,  242,  279,  284,  208,  256,  198,  294,  247,  241,  281,
E               241,  295,  252,  230,  347,  386,  508,  431,  419,  397,  372,...
E        y: array([   0,   40,   56,   73,   80,   79,  128,  123,  187,  204,  215,
E               299,  242,  304,  329,  277,  358,  300,  413,  372,  388,  436,
E               369,  465,  394,  362,  529,  498,  640,  599,  581,  613,  610,...

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.uint8'>, 'dtype2': <class 'numpy.int8'>}
______ TestCorrelate_param_1_{mode='full'}.test_correlate_non_contiguous _______
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:495: in check_func
    array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([   81., 16290.,  2210.], dtype=float16)
desired = array([   81., 16290.,  2212.], dtype=float16), rtol = 1e-05, atol = 0
err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-05, atol=0
E       
E       Mismatched elements: 1 / 3 (33.3%)
E       Max absolute difference: 2.
E       Max relative difference: 0.000904
E        x: array([   81., 16290.,  2210.], dtype=float16)
E        y: array([   81., 16290.,  2212.], dtype=float16)

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float16'>
________ TestCorrelate_param_2_{mode='same'}.test_correlate_diff_types _________
cupy/testing/helper.py:1068: in test_func
    impl(self, *args, **kw_copy)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:495: in check_func
    array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([ 433,  490,  366,  409,  436,  493,  492,  480,  470,  565,  534,
        624,  543,  675,  595,  583,  563,  5...,  630,  677,
        696,  535,  532,  515,  451,  370,  561,  359,  416,  370,  467,
        401,  460], dtype=int16)
desired = array([ 830,  945,  881,  917,  878, 1017,  923,  963,  887, 1009,  869,
       1113,  956, 1121, 1006, 1164, 1110, 11..., 1371, 1450,
       1441, 1328, 1307, 1264, 1253, 1280, 1404, 1213, 1263, 1154, 1182,
       1070, 1101], dtype=int16)
rtol = 0.01, atol = 0, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=0.01, atol=0
E       
E       Mismatched elements: 200 / 200 (100%)
E       Max absolute difference: 1401
E       Max relative difference: 0.7109375
E        x: array([ 433,  490,  366,  409,  436,  493,  492,  480,  470,  565,  534,
E               624,  543,  675,  595,  583,  563,  521,  511,  502,  507,  487,
E               611,  663,  662,  740,  800,  852,  778,  827,  800,  709,  739,...
E        y: array([ 830,  945,  881,  917,  878, 1017,  923,  963,  887, 1009,  869,
E              1113,  956, 1121, 1006, 1164, 1110, 1166, 1208, 1237, 1192, 1168,
E              1257, 1258, 1229, 1331, 1295, 1301, 1283, 1427, 1478, 1466, 1603,...

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.uint8'>, 'dtype2': <class 'numpy.int8'>}
_ TestMedianAxis_param_0_{axis=(0, 1), keepdims=True, shape=(3, 4, 5)}.test_median_axis_sequence _
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:495: in check_func
    array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[[4.52238317, 4.58793488, 7.00409625, 5.45141135, 2.1672587 ]]])
desired = array([[[5.93916134, 4.83748217, 6.09848686, 5.56658566, 3.73576145]]])
rtol = 1e-07, atol = 0, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=0
E       
E       Mismatched elements: 5 / 5 (100%)
E       Max absolute difference: 1.56850275
E       Max relative difference: 0.41986159
E        x: array([[[4.522383, 4.587935, 7.004096, 5.451411, 2.167259]]])
E        y: array([[[5.939161, 4.837482, 6.098487, 5.566586, 3.735761]]])

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestMedianAxis_param_1_{axis=(0, 1), keepdims=False, shape=(3, 4, 5)}.test_median_axis_sequence _
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:495: in check_func
    array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([4.52238317, 4.58793488, 7.00409625, 5.45141135, 2.1672587 ])
desired = array([5.93916134, 4.83748217, 6.09848686, 5.56658566, 3.73576145])
rtol = 1e-07, atol = 0, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=0
E       
E       Mismatched elements: 5 / 5 (100%)
E       Max absolute difference: 1.56850275
E       Max relative difference: 0.41986159
E        x: array([4.522383, 4.587935, 7.004096, 5.451411, 2.167259])
E        y: array([5.939161, 4.837482, 6.098487, 5.566586, 3.735761])

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestMedianAxis_param_2_{axis=(0, -1), keepdims=True, shape=(3, 4, 5)}.test_median_axis_sequence _
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:495: in check_func
    array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[[4.61479362],
        [9.44668917],
        [4.56150332],
        [6.16933997]]])
desired = array([[[5.48813504],
        [4.37587211],
        [5.2889492 ],
        [6.16933997]]])
rtol = 1e-07, atol = 0, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=0
E       
E       Mismatched elements: 3 / 4 (75%)
E       Max absolute difference: 5.07081706
E       Max relative difference: 1.1588129
E        x: array([[[4.614794],
E               [9.446689],
E               [4.561503],
E               [6.16934 ]]])
E        y: array([[[5.488135],
E               [4.375872],
E               [5.288949],
E               [6.16934 ]]])

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestMedianAxis_param_3_{axis=(0, -1), keepdims=False, shape=(3, 4, 5)}.test_median_axis_sequence _
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:495: in check_func
    array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([4.61479362, 9.44668917, 4.56150332, 6.16933997])
desired = array([5.48813504, 4.37587211, 5.2889492 , 6.16933997]), rtol = 1e-07
atol = 0, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=0
E       
E       Mismatched elements: 3 / 4 (75%)
E       Max absolute difference: 5.07081706
E       Max relative difference: 1.1588129
E        x: array([4.614794, 9.446689, 4.561503, 6.16934 ])
E        y: array([5.488135, 4.375872, 5.288949, 6.16934 ])

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestMedianAxis_param_4_{axis=(1, 2), keepdims=True, shape=(3, 4, 5)}.test_median_axis_sequence _
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:495: in check_func
    array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[[5.87583278]],

       [[3.39608776]],

       [[4.66953771]]])
desired = array([[[5.85403969]],

       [[6.1451486 ]],

       [[3.61609336]]])
rtol = 1e-07, atol = 0, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=0
E       
E       Mismatched elements: 3 / 3 (100%)
E       Max absolute difference: 2.74906084
E       Max relative difference: 0.44735466
E        x: array([[[5.875833]],
E       
E              [[3.396088]],...
E        y: array([[[5.85404 ]],
E       
E              [[6.145149]],...

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestMedianAxis_param_5_{axis=(1, 2), keepdims=False, shape=(3, 4, 5)}.test_median_axis_sequence _
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:495: in check_func
    array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([5.87583278, 3.39608776, 4.66953771])
desired = array([5.85403969, 6.1451486 , 3.61609336]), rtol = 1e-07, atol = 0
err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=0
E       
E       Mismatched elements: 3 / 3 (100%)
E       Max absolute difference: 2.74906084
E       Max relative difference: 0.44735466
E        x: array([5.875833, 3.396088, 4.669538])
E        y: array([5.85404 , 6.145149, 3.616093])

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestMedianAxis_param_6_{axis=(1,), keepdims=True, shape=(3, 4, 5)}.test_median_axis_sequence _
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:495: in check_func
    array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[[7.18809576, 4.83241066, 7.29908781, 9.44629699, 2.27238789]],

       [[4.52238317, 4.58793488, 7.00409625, 5.45141135, 2.1672587 ]],

       [[6.2041732 , 3.24492037, 5.58650068, 2.08736581, 2.86293764]]])
desired = array([[[5.97353808, 4.83241066, 7.17691611, 8.51876695, 4.03548159]],

       [[6.28778259, 6.93164706, 5.3920668 , 6.74481563, 2.66468183]],

       [[4.64852335, 4.37816734, 4.75461399, 2.08736581, 3.04068181]]])
rtol = 1e-07, atol = 0, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=0
E       
E       Mismatched elements: 13 / 15 (86.7%)
E       Max absolute difference: 2.34371218
E       Max relative difference: 0.43689797
E        x: array([[[7.188096, 4.832411, 7.299088, 9.446297, 2.272388]],
E       
E              [[4.522383, 4.587935, 7.004096, 5.451411, 2.167259]],...
E        y: array([[[5.973538, 4.832411, 7.176916, 8.518767, 4.035482]],
E       
E              [[6.287783, 6.931647, 5.392067, 6.744816, 2.664682]],...

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestMedianAxis_param_7_{axis=(1,), keepdims=False, shape=(3, 4, 5)}.test_median_axis_sequence _
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:495: in check_func
    array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[7.18809576, 4.83241066, 7.29908781, 9.44629699, 2.27238789],
       [4.52238317, 4.58793488, 7.00409625, 5.45141135, 2.1672587 ],
       [6.2041732 , 3.24492037, 5.58650068, 2.08736581, 2.86293764]])
desired = array([[5.97353808, 4.83241066, 7.17691611, 8.51876695, 4.03548159],
       [6.28778259, 6.93164706, 5.3920668 , 6.74481563, 2.66468183],
       [4.64852335, 4.37816734, 4.75461399, 2.08736581, 3.04068181]])
rtol = 1e-07, atol = 0, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=0
E       
E       Mismatched elements: 13 / 15 (86.7%)
E       Max absolute difference: 2.34371218
E       Max relative difference: 0.43689797
E        x: array([[7.188096, 4.832411, 7.299088, 9.446297, 2.272388],
E              [4.522383, 4.587935, 7.004096, 5.451411, 2.167259],
E              [6.204173, 3.24492 , 5.586501, 2.087366, 2.862938]])
E        y: array([[5.973538, 4.832411, 7.176916, 8.518767, 4.035482],
E              [6.287783, 6.931647, 5.392067, 6.744816, 2.664682],
E              [4.648523, 4.378167, 4.754614, 2.087366, 3.040682]])

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestNanMedian_param_4_{axis=0, keepdims=True, overwrite_input=True, shape=(3, 4, 5)}.test_nanmedian _
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:495: in check_func
    array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[[1.00000000e+000, 1.00000000e+000, 1.00000000e+000,
         1.00000000e+000, 8.98846567e+307],
        [1.000...        nan],
        [1.79769313e+308, 8.98846567e+307, 1.00000000e+000,
         1.00000000e+000, 1.00000000e+000]]])
desired = array([[[ 1.,  1.,  1.,  1.,  1.],
        [ 1.,  1.,  1.,  1.,  1.],
        [ 1.,  1.,  1.,  1., nan],
        [ 1.,  1.,  1.,  1.,  1.]]])
rtol = 1e-07, atol = 0, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=0
E       
E       Mismatched elements: 3 / 20 (15%)
E       Max absolute difference: 1.79769313e+308
E       Max relative difference: 1.79769313e+308
E        x: array([[[1.000000e+000, 1.000000e+000, 1.000000e+000, 1.000000e+000,
E                8.988466e+307],
E               [1.000000e+000, 1.000000e+000, 1.000000e+000, 1.000000e+000,...
E        y: array([[[ 1.,  1.,  1.,  1.,  1.],
E               [ 1.,  1.,  1.,  1.,  1.],
E               [ 1.,  1.,  1.,  1., nan],
E               [ 1.,  1.,  1.,  1.,  1.]]])

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestNanMedian_param_5_{axis=0, keepdims=True, overwrite_input=False, shape=(3, 4, 5)}.test_nanmedian _
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:495: in check_func
    array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[[1.00000000e+000, 1.00000000e+000, 1.00000000e+000,
         1.00000000e+000, 8.98846567e+307],
        [1.000...        nan],
        [1.79769313e+308, 8.98846567e+307, 1.00000000e+000,
         1.00000000e+000, 1.00000000e+000]]])
desired = array([[[ 1.,  1.,  1.,  1.,  1.],
        [ 1.,  1.,  1.,  1.,  1.],
        [ 1.,  1.,  1.,  1., nan],
        [ 1.,  1.,  1.,  1.,  1.]]])
rtol = 1e-07, atol = 0, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=0
E       
E       Mismatched elements: 3 / 20 (15%)
E       Max absolute difference: 1.79769313e+308
E       Max relative difference: 1.79769313e+308
E        x: array([[[1.000000e+000, 1.000000e+000, 1.000000e+000, 1.000000e+000,
E                8.988466e+307],
E               [1.000000e+000, 1.000000e+000, 1.000000e+000, 1.000000e+000,...
E        y: array([[[ 1.,  1.,  1.,  1.,  1.],
E               [ 1.,  1.,  1.,  1.,  1.],
E               [ 1.,  1.,  1.,  1., nan],
E               [ 1.,  1.,  1.,  1.,  1.]]])

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestNanMedian_param_6_{axis=0, keepdims=False, overwrite_input=True, shape=(3, 4, 5)}.test_nanmedian _
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:495: in check_func
    array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[1.00000000e+000, 1.00000000e+000, 1.00000000e+000,
        1.00000000e+000, 8.98846567e+307],
       [1.000000...           nan],
       [1.79769313e+308, 8.98846567e+307, 1.00000000e+000,
        1.00000000e+000, 1.00000000e+000]])
desired = array([[ 1.,  1.,  1.,  1.,  1.],
       [ 1.,  1.,  1.,  1.,  1.],
       [ 1.,  1.,  1.,  1., nan],
       [ 1.,  1.,  1.,  1.,  1.]])
rtol = 1e-07, atol = 0, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=0
E       
E       Mismatched elements: 3 / 20 (15%)
E       Max absolute difference: 1.79769313e+308
E       Max relative difference: 1.79769313e+308
E        x: array([[1.000000e+000, 1.000000e+000, 1.000000e+000, 1.000000e+000,
E               8.988466e+307],
E              [1.000000e+000, 1.000000e+000, 1.000000e+000, 1.000000e+000,...
E        y: array([[ 1.,  1.,  1.,  1.,  1.],
E              [ 1.,  1.,  1.,  1.,  1.],
E              [ 1.,  1.,  1.,  1., nan],
E              [ 1.,  1.,  1.,  1.,  1.]])

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestNanMedian_param_7_{axis=0, keepdims=False, overwrite_input=False, shape=(3, 4, 5)}.test_nanmedian _
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:495: in check_func
    array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[1.00000000e+000, 1.00000000e+000, 1.00000000e+000,
        1.00000000e+000, 8.98846567e+307],
       [1.000000...           nan],
       [1.79769313e+308, 8.98846567e+307, 1.00000000e+000,
        1.00000000e+000, 1.00000000e+000]])
desired = array([[ 1.,  1.,  1.,  1.,  1.],
       [ 1.,  1.,  1.,  1.,  1.],
       [ 1.,  1.,  1.,  1., nan],
       [ 1.,  1.,  1.,  1.,  1.]])
rtol = 1e-07, atol = 0, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=0
E       
E       Mismatched elements: 3 / 20 (15%)
E       Max absolute difference: 1.79769313e+308
E       Max relative difference: 1.79769313e+308
E        x: array([[1.000000e+000, 1.000000e+000, 1.000000e+000, 1.000000e+000,
E               8.988466e+307],
E              [1.000000e+000, 1.000000e+000, 1.000000e+000, 1.000000e+000,...
E        y: array([[ 1.,  1.,  1.,  1.,  1.],
E              [ 1.,  1.,  1.,  1.,  1.],
E              [ 1.,  1.,  1.,  1., nan],
E              [ 1.,  1.,  1.,  1.,  1.]])

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestNanMedian_param_8_{axis=1, keepdims=True, overwrite_input=True, shape=(3, 4, 5)}.test_nanmedian _
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:495: in check_func
    array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[[1.00000000e+000, 1.00000000e+000, 1.00000000e+000,
         1.00000000e+000, 1.00000000e+000]],

       [[1.0...6567e+307]],

       [[1.00000000e+000, 1.79769313e+308, 1.79769313e+308,
         8.98846567e+307, 1.00000000e+000]]])
desired = array([[[1., 1., 1., 1., 1.]],

       [[1., 1., 1., 1., 1.]],

       [[1., 1., 1., 1., 1.]]])
rtol = 1e-07, atol = 0, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=0
E       
E       Mismatched elements: 5 / 15 (33.3%)
E       Max absolute difference: 1.79769313e+308
E       Max relative difference: 1.79769313e+308
E        x: array([[[1.000000e+000, 1.000000e+000, 1.000000e+000, 1.000000e+000,
E                1.000000e+000]],
E       ...
E        y: array([[[1., 1., 1., 1., 1.]],
E       
E              [[1., 1., 1., 1., 1.]],...

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestNanMedian_param_9_{axis=1, keepdims=True, overwrite_input=False, shape=(3, 4, 5)}.test_nanmedian _
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:495: in check_func
    array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[[1.00000000e+000, 1.00000000e+000, 1.00000000e+000,
         1.00000000e+000, 1.00000000e+000]],

       [[1.0...6567e+307]],

       [[1.00000000e+000, 1.79769313e+308, 1.79769313e+308,
         8.98846567e+307, 1.00000000e+000]]])
desired = array([[[1., 1., 1., 1., 1.]],

       [[1., 1., 1., 1., 1.]],

       [[1., 1., 1., 1., 1.]]])
rtol = 1e-07, atol = 0, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=0
E       
E       Mismatched elements: 5 / 15 (33.3%)
E       Max absolute difference: 1.79769313e+308
E       Max relative difference: 1.79769313e+308
E        x: array([[[1.000000e+000, 1.000000e+000, 1.000000e+000, 1.000000e+000,
E                1.000000e+000]],
E       ...
E        y: array([[[1., 1., 1., 1., 1.]],
E       
E              [[1., 1., 1., 1., 1.]],...

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestNanMedian_param_10_{axis=1, keepdims=False, overwrite_input=True, shape=(3, 4, 5)}.test_nanmedian _
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:495: in check_func
    array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[1.00000000e+000, 1.00000000e+000, 1.00000000e+000,
        1.00000000e+000, 1.00000000e+000],
       [1.000000....98846567e+307],
       [1.00000000e+000, 1.79769313e+308, 1.79769313e+308,
        8.98846567e+307, 1.00000000e+000]])
desired = array([[1., 1., 1., 1., 1.],
       [1., 1., 1., 1., 1.],
       [1., 1., 1., 1., 1.]])
rtol = 1e-07, atol = 0, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=0
E       
E       Mismatched elements: 5 / 15 (33.3%)
E       Max absolute difference: 1.79769313e+308
E       Max relative difference: 1.79769313e+308
E        x: array([[1.000000e+000, 1.000000e+000, 1.000000e+000, 1.000000e+000,
E               1.000000e+000],
E              [1.000000e+000, 1.797693e+308, 1.000000e+000, 1.000000e+000,...
E        y: array([[1., 1., 1., 1., 1.],
E              [1., 1., 1., 1., 1.],
E              [1., 1., 1., 1., 1.]])

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestNanMedian_param_11_{axis=1, keepdims=False, overwrite_input=False, shape=(3, 4, 5)}.test_nanmedian _
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:495: in check_func
    array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[1.00000000e+000, 1.00000000e+000, 1.00000000e+000,
        1.00000000e+000, 1.00000000e+000],
       [1.000000....98846567e+307],
       [1.00000000e+000, 1.79769313e+308, 1.79769313e+308,
        8.98846567e+307, 1.00000000e+000]])
desired = array([[1., 1., 1., 1., 1.],
       [1., 1., 1., 1., 1.],
       [1., 1., 1., 1., 1.]])
rtol = 1e-07, atol = 0, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=0
E       
E       Mismatched elements: 5 / 15 (33.3%)
E       Max absolute difference: 1.79769313e+308
E       Max relative difference: 1.79769313e+308
E        x: array([[1.000000e+000, 1.000000e+000, 1.000000e+000, 1.000000e+000,
E               1.000000e+000],
E              [1.000000e+000, 1.797693e+308, 1.000000e+000, 1.000000e+000,...
E        y: array([[1., 1., 1., 1., 1.],
E              [1., 1., 1., 1., 1.],
E              [1., 1., 1., 1., 1.]])

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestNanMedian_param_12_{axis=-1, keepdims=True, overwrite_input=True, shape=(3, 4, 5)}.test_nanmedian _
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:495: in check_func
    array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[[1.00000000e+000],
        [1.00000000e+000],
        [1.00000000e+000],
        [1.79769313e+308]],

       [...e+000]],

       [[1.00000000e+000],
        [1.79769313e+308],
        [1.00000000e+000],
        [1.00000000e+000]]])
desired = array([[[1.],
        [1.],
        [1.],
        [1.]],

       [[1.],
        [1.],
        [1.],
        [1.]],

       [[1.],
        [1.],
        [1.],
        [1.]]])
rtol = 1e-07, atol = 0, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=0
E       
E       Mismatched elements: 3 / 12 (25%)
E       Max absolute difference: 1.79769313e+308
E       Max relative difference: 1.79769313e+308
E        x: array([[[1.000000e+000],
E               [1.000000e+000],
E               [1.000000e+000],...
E        y: array([[[1.],
E               [1.],
E               [1.],...

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestNanMedian_param_13_{axis=-1, keepdims=True, overwrite_input=False, shape=(3, 4, 5)}.test_nanmedian _
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:495: in check_func
    array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[[1.00000000e+000],
        [1.00000000e+000],
        [1.00000000e+000],
        [1.79769313e+308]],

       [...e+000]],

       [[1.00000000e+000],
        [1.79769313e+308],
        [1.00000000e+000],
        [1.00000000e+000]]])
desired = array([[[1.],
        [1.],
        [1.],
        [1.]],

       [[1.],
        [1.],
        [1.],
        [1.]],

       [[1.],
        [1.],
        [1.],
        [1.]]])
rtol = 1e-07, atol = 0, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=0
E       
E       Mismatched elements: 3 / 12 (25%)
E       Max absolute difference: 1.79769313e+308
E       Max relative difference: 1.79769313e+308
E        x: array([[[1.000000e+000],
E               [1.000000e+000],
E               [1.000000e+000],...
E        y: array([[[1.],
E               [1.],
E               [1.],...

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestNanMedian_param_14_{axis=-1, keepdims=False, overwrite_input=True, shape=(3, 4, 5)}.test_nanmedian _
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:495: in check_func
    array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[1.00000000e+000, 1.00000000e+000, 1.00000000e+000,
        1.79769313e+308],
       [1.00000000e+000, 8.988465...0e+000,
        1.00000000e+000],
       [1.00000000e+000, 1.79769313e+308, 1.00000000e+000,
        1.00000000e+000]])
desired = array([[1., 1., 1., 1.],
       [1., 1., 1., 1.],
       [1., 1., 1., 1.]])
rtol = 1e-07, atol = 0, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=0
E       
E       Mismatched elements: 3 / 12 (25%)
E       Max absolute difference: 1.79769313e+308
E       Max relative difference: 1.79769313e+308
E        x: array([[1.000000e+000, 1.000000e+000, 1.000000e+000, 1.797693e+308],
E              [1.000000e+000, 8.988466e+307, 1.000000e+000, 1.000000e+000],
E              [1.000000e+000, 1.797693e+308, 1.000000e+000, 1.000000e+000]])
E        y: array([[1., 1., 1., 1.],
E              [1., 1., 1., 1.],
E              [1., 1., 1., 1.]])

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestNanMedian_param_15_{axis=-1, keepdims=False, overwrite_input=False, shape=(3, 4, 5)}.test_nanmedian _
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:495: in check_func
    array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[1.00000000e+000, 1.00000000e+000, 1.00000000e+000,
        1.79769313e+308],
       [1.00000000e+000, 8.988465...0e+000,
        1.00000000e+000],
       [1.00000000e+000, 1.79769313e+308, 1.00000000e+000,
        1.00000000e+000]])
desired = array([[1., 1., 1., 1.],
       [1., 1., 1., 1.],
       [1., 1., 1., 1.]])
rtol = 1e-07, atol = 0, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=0
E       
E       Mismatched elements: 3 / 12 (25%)
E       Max absolute difference: 1.79769313e+308
E       Max relative difference: 1.79769313e+308
E        x: array([[1.000000e+000, 1.000000e+000, 1.000000e+000, 1.797693e+308],
E              [1.000000e+000, 8.988466e+307, 1.000000e+000, 1.000000e+000],
E              [1.000000e+000, 1.797693e+308, 1.000000e+000, 1.000000e+000]])
E        y: array([[1., 1., 1., 1.],
E              [1., 1., 1., 1.],
E              [1., 1., 1., 1.]])

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestNanMedian_param_20_{axis=(0, 2), keepdims=True, overwrite_input=True, shape=(3, 4, 5)}.test_nanmedian _
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:495: in check_func
    array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[[1.00000000e+000],
        [8.98846567e+307],
        [1.00000000e+000],
        [1.00000000e+000]]])
desired = array([[[1.],
        [1.],
        [1.],
        [1.]]])
rtol = 1e-07, atol = 0, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=0
E       
E       Mismatched elements: 1 / 4 (25%)
E       Max absolute difference: 8.98846567e+307
E       Max relative difference: 8.98846567e+307
E        x: array([[[1.000000e+000],
E               [8.988466e+307],
E               [1.000000e+000],
E               [1.000000e+000]]])
E        y: array([[[1.],
E               [1.],
E               [1.],
E               [1.]]])

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestNanMedian_param_21_{axis=(0, 2), keepdims=True, overwrite_input=False, shape=(3, 4, 5)}.test_nanmedian _
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:495: in check_func
    array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[[1.00000000e+000],
        [8.98846567e+307],
        [1.00000000e+000],
        [1.00000000e+000]]])
desired = array([[[1.],
        [1.],
        [1.],
        [1.]]])
rtol = 1e-07, atol = 0, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=0
E       
E       Mismatched elements: 1 / 4 (25%)
E       Max absolute difference: 8.98846567e+307
E       Max relative difference: 8.98846567e+307
E        x: array([[[1.000000e+000],
E               [8.988466e+307],
E               [1.000000e+000],
E               [1.000000e+000]]])
E        y: array([[[1.],
E               [1.],
E               [1.],
E               [1.]]])

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestNanMedian_param_22_{axis=(0, 2), keepdims=False, overwrite_input=True, shape=(3, 4, 5)}.test_nanmedian _
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:495: in check_func
    array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([1.00000000e+000, 8.98846567e+307, 1.00000000e+000, 1.00000000e+000])
desired = array([1., 1., 1., 1.]), rtol = 1e-07, atol = 0, err_msg = ''
verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=0
E       
E       Mismatched elements: 1 / 4 (25%)
E       Max absolute difference: 8.98846567e+307
E       Max relative difference: 8.98846567e+307
E        x: array([1.000000e+000, 8.988466e+307, 1.000000e+000, 1.000000e+000])
E        y: array([1., 1., 1., 1.])

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestNanMedian_param_23_{axis=(0, 2), keepdims=False, overwrite_input=False, shape=(3, 4, 5)}.test_nanmedian _
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:495: in check_func
    array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([1.00000000e+000, 8.98846567e+307, 1.00000000e+000, 1.00000000e+000])
desired = array([1., 1., 1., 1.]), rtol = 1e-07, atol = 0, err_msg = ''
verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=0
E       
E       Mismatched elements: 1 / 4 (25%)
E       Max absolute difference: 8.98846567e+307
E       Max relative difference: 8.98846567e+307
E        x: array([1.000000e+000, 8.988466e+307, 1.000000e+000, 1.000000e+000])
E        y: array([1., 1., 1., 1.])

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestNanMedian_param_24_{axis=(-1, -2), keepdims=True, overwrite_input=True, shape=(3, 4, 5)}.test_nanmedian _
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:495: in check_func
    array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[[1.00000000e+000]],

       [[1.00000000e+000]],

       [[1.79769313e+308]]])
desired = array([[[1.]],

       [[1.]],

       [[1.]]]), rtol = 1e-07
atol = 0, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=0
E       
E       Mismatched elements: 1 / 3 (33.3%)
E       Max absolute difference: 1.79769313e+308
E       Max relative difference: 1.79769313e+308
E        x: array([[[1.000000e+000]],
E       
E              [[1.000000e+000]],...
E        y: array([[[1.]],
E       
E              [[1.]],...

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestNanMedian_param_25_{axis=(-1, -2), keepdims=True, overwrite_input=False, shape=(3, 4, 5)}.test_nanmedian _
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:495: in check_func
    array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[[1.00000000e+000]],

       [[1.00000000e+000]],

       [[1.79769313e+308]]])
desired = array([[[1.]],

       [[1.]],

       [[1.]]]), rtol = 1e-07
atol = 0, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=0
E       
E       Mismatched elements: 1 / 3 (33.3%)
E       Max absolute difference: 1.79769313e+308
E       Max relative difference: 1.79769313e+308
E        x: array([[[1.000000e+000]],
E       
E              [[1.000000e+000]],...
E        y: array([[[1.]],
E       
E              [[1.]],...

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestNanMedian_param_26_{axis=(-1, -2), keepdims=False, overwrite_input=True, shape=(3, 4, 5)}.test_nanmedian _
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:495: in check_func
    array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([1.00000000e+000, 1.00000000e+000, 1.79769313e+308])
desired = array([1., 1., 1.]), rtol = 1e-07, atol = 0, err_msg = ''
verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=0
E       
E       Mismatched elements: 1 / 3 (33.3%)
E       Max absolute difference: 1.79769313e+308
E       Max relative difference: 1.79769313e+308
E        x: array([1.000000e+000, 1.000000e+000, 1.797693e+308])
E        y: array([1., 1., 1.])

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestNanMedian_param_27_{axis=(-1, -2), keepdims=False, overwrite_input=False, shape=(3, 4, 5)}.test_nanmedian _
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:495: in check_func
    array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([1.00000000e+000, 1.00000000e+000, 1.79769313e+308])
desired = array([1., 1., 1.]), rtol = 1e-07, atol = 0, err_msg = ''
verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=0
E       
E       Mismatched elements: 1 / 3 (33.3%)
E       Max absolute difference: 1.79769313e+308
E       Max relative difference: 1.79769313e+308
E        x: array([1.000000e+000, 1.000000e+000, 1.797693e+308])
E        y: array([1., 1., 1.])

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_________________________ TestMedian.test_median_axis1 _________________________
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:495: in check_func
    array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[7.18809576, 4.83241066, 7.29908781, 9.44629699, 2.27238789],
       [4.52238317, 4.58793488, 7.00409625, 5.45141135, 2.1672587 ],
       [6.2041732 , 3.24492037, 5.58650068, 2.08736581, 2.86293764]])
desired = array([[5.97353808, 4.83241066, 7.17691611, 8.51876695, 4.03548159],
       [6.28778259, 6.93164706, 5.3920668 , 6.74481563, 2.66468183],
       [4.64852335, 4.37816734, 4.75461399, 2.08736581, 3.04068181]])
rtol = 1e-07, atol = 0, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=0
E       
E       Mismatched elements: 13 / 15 (86.7%)
E       Max absolute difference: 2.34371218
E       Max relative difference: 0.43689797
E        x: array([[7.188096, 4.832411, 7.299088, 9.446297, 2.272388],
E              [4.522383, 4.587935, 7.004096, 5.451411, 2.167259],
E              [6.204173, 3.24492 , 5.586501, 2.087366, 2.862938]])
E        y: array([[5.973538, 4.832411, 7.176916, 8.518767, 4.035482],
E              [6.287783, 6.931647, 5.392067, 6.744816, 2.664682],
E              [4.648523, 4.378167, 4.754614, 2.087366, 3.040682]])

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_________________________ TestMedian.test_median_axis2 _________________________
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:495: in check_func
    array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[6.02763376, 8.91773001, 5.68044561, 8.32619846],
       [4.61479362, 9.44668917, 4.56150332, 6.16933997],
       [6.97631196, 1.28926298, 9.88373838, 2.53291603]])
desired = array([[5.48813504, 6.45894113, 5.68044561, 7.78156751],
       [7.80529176, 5.21848322, 4.56150332, 6.17635497],
       [4.37031954, 3.15428351, 4.38601513, 2.53291603]])
rtol = 1e-07, atol = 0, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=0
E       
E       Mismatched elements: 9 / 12 (75%)
E       Max absolute difference: 5.49772325
E       Max relative difference: 1.25346655
E        x: array([[6.027634, 8.91773 , 5.680446, 8.326198],
E              [4.614794, 9.446689, 4.561503, 6.16934 ],
E              [6.976312, 1.289263, 9.883738, 2.532916]])
E        y: array([[5.488135, 6.458941, 5.680446, 7.781568],
E              [7.805292, 5.218483, 4.561503, 6.176355],
E              [4.37032 , 3.154284, 4.386015, 2.532916]])

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
____________________ TestMedian.test_median_keepdims_axis1 _____________________
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:495: in check_func
    array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[[7.18809576, 4.83241066, 7.29908781, 9.44629699, 2.27238789]],

       [[4.52238317, 4.58793488, 7.00409625, 5.45141135, 2.1672587 ]],

       [[6.2041732 , 3.24492037, 5.58650068, 2.08736581, 2.86293764]]])
desired = array([[[5.97353808, 4.83241066, 7.17691611, 8.51876695, 4.03548159]],

       [[6.28778259, 6.93164706, 5.3920668 , 6.74481563, 2.66468183]],

       [[4.64852335, 4.37816734, 4.75461399, 2.08736581, 3.04068181]]])
rtol = 1e-07, atol = 0, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=0
E       
E       Mismatched elements: 13 / 15 (86.7%)
E       Max absolute difference: 2.34371218
E       Max relative difference: 0.43689797
E        x: array([[[7.188096, 4.832411, 7.299088, 9.446297, 2.272388]],
E       
E              [[4.522383, 4.587935, 7.004096, 5.451411, 2.167259]],...
E        y: array([[[5.973538, 4.832411, 7.176916, 8.518767, 4.035482]],
E       
E              [[6.287783, 6.931647, 5.392067, 6.744816, 2.664682]],...

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
____________________ TestMedian.test_median_keepdims_noaxis ____________________
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:495: in check_func
    array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[[3.398]]], dtype=float16)
desired = array([[[5.47]]], dtype=float16), rtol = 1e-07, atol = 0, err_msg = ''
verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=0
E       
E       Mismatched elements: 1 / 1 (100%)
E       Max absolute difference: 2.07
E       Max relative difference: 0.3787
E        x: array([[[3.398]]], dtype=float16)
E        y: array([[[5.47]]], dtype=float16)

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float16'>
________________________ TestMedian.test_median_noaxis _________________________
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:495: in check_func
    array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array(3.398, dtype=float16), desired = 5.47, rtol = 1e-07, atol = 0
err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=0
E       
E       Mismatched elements: 1 / 1 (100%)
E       Max absolute difference: 2.07
E       Max relative difference: 0.3787
E        x: array(3.398, dtype=float16)
E        y: array(5.47, dtype=float16)

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float16'>
____________________ TestMedian.test_median_overwrite_input ____________________
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:495: in check_func
    array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array(3.398, dtype=float16), desired = 5.47, rtol = 1e-07, atol = 0
err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=0
E       
E       Mismatched elements: 1 / 1 (100%)
E       Max absolute difference: 2.07
E       Max relative difference: 0.3787
E        x: array(3.398, dtype=float16)
E        y: array(5.47, dtype=float16)

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float16'>
______________________ TestOrder.test_percentile_neg_axis ______________________
cupy/testing/helper.py:1175: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:495: in check_func
    array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[[[[5.44883183e+00, 5.28894920e+00],
          [8.70012148e+00, 9.44668917e+00],
          [6.17635497e+00, 6.0...34772e+00, 1.04834207e+00],
          [8.16725687e+00, 2.63213353e-01],
          [9.22914291e+00, 3.55927551e+00]]]]])
desired = array([[[[[5.48813504, 5.2889492 ],
          [7.80529176, 4.1466194 ],
          [6.12095723, 3.59507901],
          ...   ...,
          [1.94194208, 1.18020311],
          [5.58410027, 5.12349146],
          [5.49418583, 2.85174928]]]]])
rtol = 1e-06, atol = 0, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-06, atol=0
E       
E       Mismatched elements: 1047 / 1200 (87.2%)
E       Max absolute difference: 8.45046456
E       Max relative difference: 9.82027337
E        x: array([[[[[5.448832e+00, 5.288949e+00],
E                 [8.700121e+00, 9.446689e+00],
E                 [6.176355e+00, 6.022547e-01],...
E        y: array([[[[[5.488135, 5.288949],
E                 [7.805292, 4.146619],
E                 [6.120957, 3.595079],...

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
interpolation is lower
________________________ TestOrder.test_percentile_out _________________________
cupy/testing/helper.py:1175: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:495: in check_func
    array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[[[5.48813504, 6.02763376, 4.23654799],
         [4.37587211, 9.63662761, 7.91725038]],

        [[5.68044561, ...753144, 5.92041931]],

        [[2.23081633, 4.47125379, 6.99479275],
         [8.1379782 , 8.81103197, 8.81735362]]]])
desired = array([[[[5.48813504, 5.44883183, 4.23654799],
         [4.37587211, 3.83441519, 5.2889492 ]],

        [[5.68044561, ...753144, 5.72251906]],

        [[2.23081633, 4.47125379, 2.97436951],
         [3.96505741, 5.81272873, 6.9253159 ]]]])
rtol = 1e-06, atol = 0, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-06, atol=0
E       
E       Mismatched elements: 165 / 300 (55%)
E       Max absolute difference: 8.86329027
E       Max relative difference: 175.54014103
E        x: array([[[[5.488135, 6.027634, 4.236548],
E                [4.375872, 9.636628, 7.91725 ]],
E       ...
E        y: array([[[[5.488135, 5.448832, 4.236548],
E                [4.375872, 3.834415, 5.288949]],
E       ...

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
interpolation is lower
_____________________ TestOrder.test_percentile_tuple_axis _____________________
cupy/testing/helper.py:1175: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:495: in check_func
    array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[7.78156751, 8.70012148],
       [1.18274426, 6.39921021],
       [9.78618342, 7.99158564],
       [7.78156751, 8.70012148],
       [0.71036058, 0.871293  ]])
desired = array([[4.61479362, 7.15189366],
       [5.68044561, 7.99158564],
       [5.21848322, 7.74233689],
       [4.61479362, 7.15189366],
       [4.37587211, 6.39921021]])
rtol = 1e-06, atol = 0, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-06, atol=0
E       
E       Mismatched elements: 10 / 10 (100%)
E       Max absolute difference: 5.52791722
E       Max relative difference: 0.87529269
E        x: array([[7.781568, 8.700121],
E              [1.182744, 6.39921 ],
E              [9.786183, 7.991586],...
E        y: array([[4.614794, 7.151894],
E              [5.680446, 7.991586],
E              [5.218483, 7.742337],...

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
interpolation is lower
_______________________ TestOrder.test_quantile_neg_axis _______________________
cupy/testing/helper.py:1175: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:495: in check_func
    array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[[[[5.44883183e+00, 5.28894920e+00],
          [8.70012148e+00, 9.44668917e+00],
          [6.17635497e+00, 6.0...34772e+00, 1.04834207e+00],
          [8.16725687e+00, 2.63213353e-01],
          [9.22914291e+00, 3.55927551e+00]]]]])
desired = array([[[[[5.48813504, 5.2889492 ],
          [7.80529176, 4.1466194 ],
          [6.12095723, 3.59507901],
          ...   ...,
          [1.94194208, 1.18020311],
          [5.58410027, 5.12349146],
          [5.49418583, 2.85174928]]]]])
rtol = 1e-06, atol = 0, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-06, atol=0
E       
E       Mismatched elements: 1047 / 1200 (87.2%)
E       Max absolute difference: 8.45046456
E       Max relative difference: 9.82027337
E        x: array([[[[[5.448832e+00, 5.288949e+00],
E                 [8.700121e+00, 9.446689e+00],
E                 [6.176355e+00, 6.022547e-01],...
E        y: array([[[[[5.488135, 5.288949],
E                 [7.805292, 4.146619],
E                 [6.120957, 3.595079],...

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
interpolation is lower
_________________________ TestOrder.test_quantile_out __________________________
cupy/testing/helper.py:1175: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:495: in check_func
    array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[[[5.48813504, 6.02763376, 4.23654799],
         [4.37587211, 9.63662761, 7.91725038]],

        [[5.68044561, ...753144, 5.92041931]],

        [[2.23081633, 4.47125379, 6.99479275],
         [8.1379782 , 8.81103197, 8.81735362]]]])
desired = array([[[[5.48813504, 5.44883183, 4.23654799],
         [4.37587211, 3.83441519, 5.2889492 ]],

        [[5.68044561, ...753144, 5.72251906]],

        [[2.23081633, 4.47125379, 2.97436951],
         [3.96505741, 5.81272873, 6.9253159 ]]]])
rtol = 1e-06, atol = 0, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-06, atol=0
E       
E       Mismatched elements: 165 / 300 (55%)
E       Max absolute difference: 8.86329027
E       Max relative difference: 175.54014103
E        x: array([[[[5.488135, 6.027634, 4.236548],
E                [4.375872, 9.636628, 7.91725 ]],
E       ...
E        y: array([[[[5.488135, 5.448832, 4.236548],
E                [4.375872, 3.834415, 5.288949]],
E       ...

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
interpolation is lower
______________________ TestOrder.test_quantile_tuple_axis ______________________
cupy/testing/helper.py:1175: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/helper.py:495: in check_func
    array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[7.78156751, 8.70012148],
       [1.18274426, 6.39921021],
       [9.78618342, 7.99158564],
       [7.78156751, 8.70012148],
       [0.71036058, 0.871293  ]])
desired = array([[4.61479362, 7.15189366],
       [5.68044561, 7.99158564],
       [5.21848322, 7.74233689],
       [4.61479362, 7.15189366],
       [4.37587211, 6.39921021]])
rtol = 1e-06, atol = 0, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-06, atol=0
E       
E       Mismatched elements: 10 / 10 (100%)
E       Max absolute difference: 5.52791722
E       Max relative difference: 0.87529269
E        x: array([[7.781568, 8.700121],
E              [1.182744, 6.39921 ],
E              [9.786183, 7.991586],...
E        y: array([[4.614794, 7.151894],
E              [5.680446, 7.991586],
E              [5.218483, 7.742337],...

cupy/testing/array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
interpolation is lower
_ TestGenerateMatrix_param_5_{dtype=float16, x_s_shapes=((2, 3), (2,)), xp=cupy}.test_generate_matrix _

self = <<cupy_tests.testing_tests.test_helper.TestGenerateMatrix_param_5_{dtype=float16, x_s_shapes=((2, 3), (2,)), xp=cupy} ..., 'xp': <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.1cAEeXesk6/cupy/cupy/__init__.py'>}>

    def test_generate_matrix(self):
        dtype = self.dtype
        x_shape, s_shape = self.x_s_shapes
        sv = self.xp.random.uniform(
            0.5, 1.5, s_shape).astype(dtype().real.dtype)
        x = testing.generate_matrix(
            x_shape, xp=self.xp, dtype=dtype, singular_values=sv)
        assert x.shape == x_shape
    
        if 0 in x_shape:
            return
    
        s = self.xp.linalg.svd(
            x.astype(numpy.complex128), full_matrices=False, compute_uv=False,
        )
        sv = self.xp.broadcast_to(sv, s.shape)
        sv_sorted = self.xp.sort(sv, axis=-1)[..., ::-1]
    
        rtol = 1e-3 if dtype == numpy.float16 else 1e-7
>       self.xp.testing.assert_allclose(s, sv_sorted, rtol=rtol)

tests/cupy_tests/testing_tests/test_helper.py:476: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([1.30649837, 1.27642476])
desired = array([1.276, 1.307], dtype=float16), rtol = 0.001, atol = 0
err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=0.001, atol=0
E       
E       Mismatched elements: 2 / 2 (100%)
E       Max absolute difference: 0.03021586
E       Max relative difference: 0.02360698
E        x: array([1.306498, 1.276425])
E        y: array([1.276, 1.307], dtype=float16)

cupy/testing/array.py:24: AssertionError
_______________________ TestMonteCarlo.test_monte_carlo ________________________

self = <example_tests.test_finance.TestMonteCarlo testMethod=test_monte_carlo>

    def test_monte_carlo(self):
>       output = example_test.run_example(
            'finance/monte_carlo.py', '--n-options', '10',
            '--n-samples-per-thread', '10',
            '--n-threads-per-option', '10')

tests/example_tests/test_finance.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/example_tests/example_test.py:12: in run_example
    return subprocess.check_output(
/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/subprocess.py:411: in check_output
    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input = None, capture_output = False, timeout = None, check = True
popenargs = (('/home/kmaeh/.pyenv/versions/rocm-ci/bin/python', '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.1cAEeXesk6/...tests/example_tests/../../examples/finance/monte_carlo.py', '--n-options', '10', '--n-samples-per-thread', '10', ...),)
kwargs = {'stderr': -2, 'stdout': -1}
process = <subprocess.Popen object at 0x7f966fdfb610>
stdout = b'initializing...\nstart computation\n    # of options: 10\n    # of samples per option: 100\nTraceback (most recent c...r generated when compiling for gfx906.\nError: Failed to compile opencl source (from CL or HIP source to LLVM IR).\n\n'
stderr = None, retcode = 1

    def run(*popenargs,
            input=None, capture_output=False, timeout=None, check=False, **kwargs):
        """Run command with arguments and return a CompletedProcess instance.
    
        The returned instance will have attributes args, returncode, stdout and
        stderr. By default, stdout and stderr are not captured, and those attributes
        will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.
    
        If check is True and the exit code was non-zero, it raises a
        CalledProcessError. The CalledProcessError object will have the return code
        in the returncode attribute, and output & stderr attributes if those streams
        were captured.
    
        If timeout is given, and the process takes too long, a TimeoutExpired
        exception will be raised.
    
        There is an optional argument "input", allowing you to
        pass bytes or a string to the subprocess's stdin.  If you use this argument
        you may not also use the Popen constructor's "stdin" argument, as
        it will be used internally.
    
        By default, all communication is in bytes, and therefore any "input" should
        be bytes, and the stdout and stderr will be bytes. If in text mode, any
        "input" should be a string, and stdout and stderr will be strings decoded
        according to locale encoding, or by "encoding" if set. Text mode is
        triggered by setting any of text, encoding, errors or universal_newlines.
    
        The other arguments are the same as for the Popen constructor.
        """
        if input is not None:
            if kwargs.get('stdin') is not None:
                raise ValueError('stdin and input arguments may not both be used.')
            kwargs['stdin'] = PIPE
    
        if capture_output:
            if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:
                raise ValueError('stdout and stderr arguments may not be used '
                                 'with capture_output.')
            kwargs['stdout'] = PIPE
            kwargs['stderr'] = PIPE
    
        with Popen(*popenargs, **kwargs) as process:
            try:
                stdout, stderr = process.communicate(input, timeout=timeout)
            except TimeoutExpired as exc:
                process.kill()
                if _mswindows:
                    # Windows accumulates the output in a single blocking
                    # read() call run on child threads, with the timeout
                    # being done in a join() on those threads.  communicate()
                    # _after_ kill() is required to collect that and add it
                    # to the exception.
                    exc.stdout, exc.stderr = process.communicate()
                else:
                    # POSIX _communicate already populated the output so
                    # far into the TimeoutExpired exception.
                    process.wait()
                raise
            except:  # Including KeyboardInterrupt, communicate handled that.
                process.kill()
                # We don't call process.wait() as .__exit__ does that for us.
                raise
            retcode = process.poll()
            if check and retcode:
>               raise CalledProcessError(retcode, process.args,
                                         output=stdout, stderr=stderr)
E               subprocess.CalledProcessError: Command '('/home/kmaeh/.pyenv/versions/rocm-ci/bin/python', '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.1cAEeXesk6/cupy/tests/example_tests/../../examples/finance/monte_carlo.py', '--n-options', '10', '--n-samples-per-thread', '10', '--n-threads-per-option', '10')' returned non-zero exit status 1.

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/subprocess.py:512: CalledProcessError
----------------------------- Captured stdout call -----------------------------
Original error message:
initializing...
start computation
    # of options: 10
    # of samples per option: 100
Traceback (most recent call last):
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.1cAEeXesk6/cupy/cupy/cuda/compiler.py", line 625, in compile
    nvrtc.compileProgram(self.ptr, options)
  File "cupy_backends/cuda/libs/nvrtc.pyx", line 116, in cupy_backends.cuda.libs.nvrtc.compileProgram
    cpdef compileProgram(intptr_t prog, options):
  File "cupy_backends/cuda/libs/nvrtc.pyx", line 128, in cupy_backends.cuda.libs.nvrtc.compileProgram
    check_status(status)
  File "cupy_backends/cuda/libs/nvrtc.pyx", line 62, in cupy_backends.cuda.libs.nvrtc.check_status
    raise NVRTCError(status)
cupy_backends.cuda.libs.nvrtc.NVRTCError: HIPRTC_ERROR_COMPILATION (6)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.1cAEeXesk6/cupy/tests/example_tests/../../examples/finance/monte_carlo.py", line 159, in <module>
    sys.exit(main())
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.1cAEeXesk6/cupy/tests/example_tests/../../examples/finance/monte_carlo.py", line 145, in main
    call_mc = compute_option_prices(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.1cAEeXesk6/cupy/tests/example_tests/../../examples/finance/monte_carlo.py", line 104, in compute_option_prices
    monte_carlo_kernel(
  File "cupy/core/_kernel.pyx", line 840, in cupy.core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
  File "cupy/core/_kernel.pyx", line 865, in cupy.core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/core/_kernel.pyx", line 652, in cupy.core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
  File "cupy/core/_kernel.pyx", line 38, in cupy.core._kernel._get_simple_elementwise_kernel
    cpdef function.Function _get_simple_elementwise_kernel(
  File "cupy/core/_kernel.pyx", line 61, in cupy.core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
  File "cupy/core/core.pyx", line 2021, in cupy.core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.1cAEeXesk6/cupy/cupy/cuda/compiler.py", line 430, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.1cAEeXesk6/cupy/cupy/cuda/compiler.py", line 814, in _compile_with_cache_hip
    binary, mapping = compile_using_nvrtc(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.1cAEeXesk6/cupy/cupy/cuda/compiler.py", line 273, in compile_using_nvrtc
    return _compile(source, options, cu_path,
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.1cAEeXesk6/cupy/cupy/cuda/compiler.py", line 257, in _compile
    ptx, mapping = prog.compile(options, log_stream)
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.1cAEeXesk6/cupy/cupy/cuda/compiler.py", line 637, in compile
    raise CompileException(log, self.src, self.name, options,
cupy.cuda.compiler.CompileException: /tmp/comgr-a66ee1/input/CompileSource:5358:32: error: typedef redefinition with different types ('unsigned long long' vs '__uint64_t' (aka 'unsigned long'))
    typedef unsigned long long uint64_t;
                               ^
/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h:27:20: note: previous definition is here
typedef __uint64_t uint64_t;
                   ^
/tmp/comgr-a66ee1/input/CompileSource:5388:25: warning: integer literal is too large to be represented in a signed integer type, interpreting as unsigned [-Wimplicitly-unsigned-literal]
        return T(x) / T(18446744073709551615);
                        ^
1 warning and 1 error generated when compiling for gfx906.
Error: Failed to compile opencl source (from CL or HIP source to LLVM IR).


_____________ TestMonteCarloWithMultiGPU.test_monte_carlo_multigpu _____________

self = <example_tests.test_finance.TestMonteCarloWithMultiGPU testMethod=test_monte_carlo_multigpu>

    @testing.multi_gpu(2)
    def test_monte_carlo_multigpu(self):
>       output = example_test.run_example(
            'finance/monte_carlo_multigpu.py', '--gpus', '0', '1',
            '--n-options', '10',
            '--n-samples-per-thread', '10',
            '--n-threads-per-option', '10')

tests/example_tests/test_finance.py:49: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/example_tests/example_test.py:12: in run_example
    return subprocess.check_output(
/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/subprocess.py:411: in check_output
    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input = None, capture_output = False, timeout = None, check = True
popenargs = (('/home/kmaeh/.pyenv/versions/rocm-ci/bin/python', '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.1cAEeXesk6/cupy/tests/example_tests/../../examples/finance/monte_carlo_multigpu.py', '--gpus', '0', '1', '--n-options', ...),)
kwargs = {'stderr': -2, 'stdout': -1}
process = <subprocess.Popen object at 0x7f95b33428b0>
stdout = b'initializing...\nstart computation\n    # of gpus: 2\n    # of options: 10\n    # of samples per option: 200\nTraceb...r generated when compiling for gfx906.\nError: Failed to compile opencl source (from CL or HIP source to LLVM IR).\n\n'
stderr = None, retcode = 1

    def run(*popenargs,
            input=None, capture_output=False, timeout=None, check=False, **kwargs):
        """Run command with arguments and return a CompletedProcess instance.
    
        The returned instance will have attributes args, returncode, stdout and
        stderr. By default, stdout and stderr are not captured, and those attributes
        will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.
    
        If check is True and the exit code was non-zero, it raises a
        CalledProcessError. The CalledProcessError object will have the return code
        in the returncode attribute, and output & stderr attributes if those streams
        were captured.
    
        If timeout is given, and the process takes too long, a TimeoutExpired
        exception will be raised.
    
        There is an optional argument "input", allowing you to
        pass bytes or a string to the subprocess's stdin.  If you use this argument
        you may not also use the Popen constructor's "stdin" argument, as
        it will be used internally.
    
        By default, all communication is in bytes, and therefore any "input" should
        be bytes, and the stdout and stderr will be bytes. If in text mode, any
        "input" should be a string, and stdout and stderr will be strings decoded
        according to locale encoding, or by "encoding" if set. Text mode is
        triggered by setting any of text, encoding, errors or universal_newlines.
    
        The other arguments are the same as for the Popen constructor.
        """
        if input is not None:
            if kwargs.get('stdin') is not None:
                raise ValueError('stdin and input arguments may not both be used.')
            kwargs['stdin'] = PIPE
    
        if capture_output:
            if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:
                raise ValueError('stdout and stderr arguments may not be used '
                                 'with capture_output.')
            kwargs['stdout'] = PIPE
            kwargs['stderr'] = PIPE
    
        with Popen(*popenargs, **kwargs) as process:
            try:
                stdout, stderr = process.communicate(input, timeout=timeout)
            except TimeoutExpired as exc:
                process.kill()
                if _mswindows:
                    # Windows accumulates the output in a single blocking
                    # read() call run on child threads, with the timeout
                    # being done in a join() on those threads.  communicate()
                    # _after_ kill() is required to collect that and add it
                    # to the exception.
                    exc.stdout, exc.stderr = process.communicate()
                else:
                    # POSIX _communicate already populated the output so
                    # far into the TimeoutExpired exception.
                    process.wait()
                raise
            except:  # Including KeyboardInterrupt, communicate handled that.
                process.kill()
                # We don't call process.wait() as .__exit__ does that for us.
                raise
            retcode = process.poll()
            if check and retcode:
>               raise CalledProcessError(retcode, process.args,
                                         output=stdout, stderr=stderr)
E               subprocess.CalledProcessError: Command '('/home/kmaeh/.pyenv/versions/rocm-ci/bin/python', '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.1cAEeXesk6/cupy/tests/example_tests/../../examples/finance/monte_carlo_multigpu.py', '--gpus', '0', '1', '--n-options', '10', '--n-samples-per-thread', '10', '--n-threads-per-option', '10')' returned non-zero exit status 1.

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/subprocess.py:512: CalledProcessError
----------------------------- Captured stdout call -----------------------------
Original error message:
initializing...
start computation
    # of gpus: 2
    # of options: 10
    # of samples per option: 200
Traceback (most recent call last):
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.1cAEeXesk6/cupy/cupy/cuda/compiler.py", line 625, in compile
    nvrtc.compileProgram(self.ptr, options)
  File "cupy_backends/cuda/libs/nvrtc.pyx", line 116, in cupy_backends.cuda.libs.nvrtc.compileProgram
    cpdef compileProgram(intptr_t prog, options):
  File "cupy_backends/cuda/libs/nvrtc.pyx", line 128, in cupy_backends.cuda.libs.nvrtc.compileProgram
    check_status(status)
  File "cupy_backends/cuda/libs/nvrtc.pyx", line 62, in cupy_backends.cuda.libs.nvrtc.check_status
    raise NVRTCError(status)
cupy_backends.cuda.libs.nvrtc.NVRTCError: HIPRTC_ERROR_COMPILATION (6)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.1cAEeXesk6/cupy/tests/example_tests/../../examples/finance/monte_carlo_multigpu.py", line 74, in <module>
    monte_carlo_kernel(
  File "cupy/core/_kernel.pyx", line 840, in cupy.core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
  File "cupy/core/_kernel.pyx", line 865, in cupy.core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/core/_kernel.pyx", line 652, in cupy.core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
  File "cupy/core/_kernel.pyx", line 38, in cupy.core._kernel._get_simple_elementwise_kernel
    cpdef function.Function _get_simple_elementwise_kernel(
  File "cupy/core/_kernel.pyx", line 61, in cupy.core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
  File "cupy/core/core.pyx", line 2021, in cupy.core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.1cAEeXesk6/cupy/cupy/cuda/compiler.py", line 430, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.1cAEeXesk6/cupy/cupy/cuda/compiler.py", line 814, in _compile_with_cache_hip
    binary, mapping = compile_using_nvrtc(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.1cAEeXesk6/cupy/cupy/cuda/compiler.py", line 273, in compile_using_nvrtc
    return _compile(source, options, cu_path,
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.1cAEeXesk6/cupy/cupy/cuda/compiler.py", line 257, in _compile
    ptx, mapping = prog.compile(options, log_stream)
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.1cAEeXesk6/cupy/cupy/cuda/compiler.py", line 637, in compile
    raise CompileException(log, self.src, self.name, options,
cupy.cuda.compiler.CompileException: /tmp/comgr-fccbc8/input/CompileSource:5358:32: error: typedef redefinition with different types ('unsigned long long' vs '__uint64_t' (aka 'unsigned long'))
    typedef unsigned long long uint64_t;
                               ^
/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h:27:20: note: previous definition is here
typedef __uint64_t uint64_t;
                   ^
/tmp/comgr-fccbc8/input/CompileSource:5388:25: warning: integer literal is too large to be represented in a signed integer type, interpreting as unsigned [-Wimplicitly-unsigned-literal]
        return T(x) / T(18446744073709551615);
                        ^
1 warning and 1 error generated when compiling for gfx906.
Error: Failed to compile opencl source (from CL or HIP source to LLVM IR).


___________________ TestCheckVersion.test_check_cuda_version ___________________

self = <install_tests.test_build.TestCheckVersion testMethod=test_check_cuda_version>

    @pytest.mark.gpu
    def test_check_cuda_version(self):
        with self.assertRaises(RuntimeError):
            build.get_cuda_version()
>       assert build.check_cuda_version(
            self.compiler, self.settings)
E       AssertionError: assert False
E        +  where False = <function check_cuda_version at 0x7f966fca75e0>(<distutils.unixccompiler.UnixCCompiler object at 0x7f959144efa0>, {'define_macros': [], 'extra_compile_args': [], 'include_dirs': ['/home/kmaeh/Development/cupy-rocm-ci-report/tools/tm...kmaeh/Development/cupy-rocm-ci-report/tools/tmp.1cAEeXesk6/cupy/install/../cupy/core/include'], 'language': 'c++', ...})
E        +    where <function check_cuda_version at 0x7f966fca75e0> = build.check_cuda_version
E        +    and   <distutils.unixccompiler.UnixCCompiler object at 0x7f959144efa0> = <install_tests.test_build.TestCheckVersion testMethod=test_check_cuda_version>.compiler
E        +    and   {'define_macros': [], 'extra_compile_args': [], 'include_dirs': ['/home/kmaeh/Development/cupy-rocm-ci-report/tools/tm...kmaeh/Development/cupy-rocm-ci-report/tools/tmp.1cAEeXesk6/cupy/install/../cupy/core/include'], 'language': 'c++', ...} = <install_tests.test_build.TestCheckVersion testMethod=test_check_cuda_version>.settings

tests/install_tests/test_build.py:21: AssertionError
----------------------------- Captured stdout call -----------------------------
**************************************************
*** WARNING: Cannot check CUDA version
*** WARNING: command 'gcc' failed with exit status 1
**************************************************
----------------------------- Captured stderr call -----------------------------
/tmp/tmpiyk8n2ao/a.cpp:2:18: fatal error: cuda.h: No such file or directory
         #include <cuda.h>
                  ^~~~~~~~
compilation terminated.
__________________ TestCheckVersion.test_check_cudnn_version ___________________

self = <install_tests.test_build.TestCheckVersion testMethod=test_check_cudnn_version>

    @pytest.mark.gpu
    @pytest.mark.cudnn
    def test_check_cudnn_version(self):
        with self.assertRaises(RuntimeError):
            build.get_cudnn_version()
>       assert build.check_cudnn_version(
            self.compiler, self.settings)
E       AssertionError: assert False
E        +  where False = <function check_cudnn_version at 0x7f966fca7a60>(<distutils.unixccompiler.UnixCCompiler object at 0x7f959140d1c0>, {'define_macros': [], 'extra_compile_args': [], 'include_dirs': ['/home/kmaeh/Development/cupy-rocm-ci-report/tools/tm...kmaeh/Development/cupy-rocm-ci-report/tools/tmp.1cAEeXesk6/cupy/install/../cupy/core/include'], 'language': 'c++', ...})
E        +    where <function check_cudnn_version at 0x7f966fca7a60> = build.check_cudnn_version
E        +    and   <distutils.unixccompiler.UnixCCompiler object at 0x7f959140d1c0> = <install_tests.test_build.TestCheckVersion testMethod=test_check_cudnn_version>.compiler
E        +    and   {'define_macros': [], 'extra_compile_args': [], 'include_dirs': ['/home/kmaeh/Development/cupy-rocm-ci-report/tools/tm...kmaeh/Development/cupy-rocm-ci-report/tools/tmp.1cAEeXesk6/cupy/install/../cupy/core/include'], 'language': 'c++', ...} = <install_tests.test_build.TestCheckVersion testMethod=test_check_cudnn_version>.settings

tests/install_tests/test_build.py:31: AssertionError
----------------------------- Captured stdout call -----------------------------
**************************************************
*** WARNING: Cannot check cuDNN version
command 'gcc' failed with exit status 1
**************************************************
----------------------------- Captured stderr call -----------------------------
/tmp/tmpfvbe73us/a.cpp:2:18: fatal error: cudnn.h: No such file or directory
         #include <cudnn.h>
                  ^~~~~~~~~
compilation terminated.
=============================== warnings summary ===============================
tests/cupy_tests/core_tests/fusion_tests/test_array.py: 1 warning
tests/cupy_tests/math_tests/test_sumprod.py: 19 warnings
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/core/_methods.py:51: RuntimeWarning: overflow encountered in reduce
    return umr_prod(a, axis, dtype, out, keepdims, initial, where)

tests/cupy_tests/core_tests/fusion_tests/test_routines.py::TestFusionNumericalReduction_param_1_{func='prod'}::test_reduction
tests/cupy_tests/math_tests/test_sumprod.py::TestNansumNanprodLong_param_11_{axis=0, func='nanprod', keepdims=True, shape=(20, 30, 40), transpose_axes=False}::test_nansum_all
tests/cupy_tests/math_tests/test_sumprod.py::TestNansumNanprodLong_param_11_{axis=0, func='nanprod', keepdims=True, shape=(20, 30, 40), transpose_axes=False}::test_nansum_axis_transposed
tests/cupy_tests/math_tests/test_sumprod.py::TestNansumNanprodLong_param_15_{axis=0, func='nanprod', keepdims=False, shape=(20, 30, 40), transpose_axes=False}::test_nansum_all
tests/cupy_tests/math_tests/test_sumprod.py::TestNansumNanprodLong_param_15_{axis=0, func='nanprod', keepdims=False, shape=(20, 30, 40), transpose_axes=False}::test_nansum_axis_transposed
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/core/fromnumeric.py:87: RuntimeWarning: overflow encountered in reduce
    return ufunc.reduce(obj, axis, dtype, out, **passkwargs)

tests/cupy_tests/functional_tests/test_vectorize.py::TestVectorize::test_vectorize_arithmetic_ops
  /home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.1cAEeXesk6/cupy/tests/cupy_tests/functional_tests/test_vectorize.py:556: RuntimeWarning: overflow encountered in byte_scalars
    y = x1 + x2 * x3 ** x1

tests/cupy_tests/functional_tests/test_vectorize.py::TestVectorize::test_vectorize_arithmetic_ops
  /home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.1cAEeXesk6/cupy/tests/cupy_tests/functional_tests/test_vectorize.py:556: RuntimeWarning: overflow encountered in ubyte_scalars
    y = x1 + x2 * x3 ** x1

tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyval_param_0_{type_l='poly1d', type_r='ndarray'}::test_polyval
tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyval_param_3_{type_l='ndarray', type_r='ndarray'}::test_polyval
tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyvalDtypesCombination::test_polyval_diff_types_array_array
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/lib/polynomial.py:734: RuntimeWarning: overflow encountered in multiply
    y = y * x + p[i]

tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyval_param_1_{type_l='poly1d', type_r='numpy_scalar'}::test_polyval
tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyval_param_4_{type_l='ndarray', type_r='numpy_scalar'}::test_polyval
tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyvalDtypesCombination::test_polyval_diff_types_array_scalar
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/lib/polynomial.py:734: RuntimeWarning: overflow encountered in half_scalars
    y = y * x + p[i]

tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyval_param_1_{type_l='poly1d', type_r='numpy_scalar'}::test_polyval
tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyval_param_4_{type_l='ndarray', type_r='numpy_scalar'}::test_polyval
tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyvalDtypesCombination::test_polyval_diff_types_array_scalar
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/lib/polynomial.py:734: RuntimeWarning: overflow encountered in byte_scalars
    y = y * x + p[i]

tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyval_param_1_{type_l='poly1d', type_r='numpy_scalar'}::test_polyval
tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyval_param_4_{type_l='ndarray', type_r='numpy_scalar'}::test_polyval
tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyvalDtypesCombination::test_polyval_diff_types_array_scalar
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/lib/polynomial.py:734: RuntimeWarning: overflow encountered in short_scalars
    y = y * x + p[i]

tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyval_param_1_{type_l='poly1d', type_r='numpy_scalar'}::test_polyval
tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyval_param_4_{type_l='ndarray', type_r='numpy_scalar'}::test_polyval
tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyvalDtypesCombination::test_polyval_diff_types_array_scalar
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/lib/polynomial.py:734: RuntimeWarning: overflow encountered in ubyte_scalars
    y = y * x + p[i]

tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyval_param_1_{type_l='poly1d', type_r='numpy_scalar'}::test_polyval
tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyval_param_4_{type_l='ndarray', type_r='numpy_scalar'}::test_polyval
tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyvalDtypesCombination::test_polyval_diff_types_array_scalar
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/lib/polynomial.py:734: RuntimeWarning: overflow encountered in ushort_scalars
    y = y * x + p[i]

tests/cupy_tests/linalg_tests/test_norms.py: 14 warnings
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/linalg/linalg.py:2568: RuntimeWarning: divide by zero encountered in power
    absx **= ord

tests/cupy_tests/linalg_tests/test_norms.py: 14 warnings
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/linalg/linalg.py:2568: RuntimeWarning: divide by zero encountered in reciprocal
    absx **= ord

tests/cupy_tests/math_tests/test_misc.py::TestMisc::test_nan_to_num_inf
tests/cupy_tests/math_tests/test_misc.py::TestMisc::test_nan_to_num_inf_nan
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/core/numeric.py:2276: RuntimeWarning: overflow encountered in absolute
    return less_equal(abs(x-y), atol + rtol * abs(y))

tests/cupy_tests/math_tests/test_sumprod.py: 15 warnings
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/core/_methods.py:51: RuntimeWarning: invalid value encountered in reduce
    return umr_prod(a, axis, dtype, out, keepdims, initial, where)

tests/cupy_tests/math_tests/test_sumprod.py::TestNansumNanprodLong_param_11_{axis=0, func='nanprod', keepdims=True, shape=(20, 30, 40), transpose_axes=False}::test_nansum_all
tests/cupy_tests/math_tests/test_sumprod.py::TestNansumNanprodLong_param_11_{axis=0, func='nanprod', keepdims=True, shape=(20, 30, 40), transpose_axes=False}::test_nansum_axis_transposed
tests/cupy_tests/math_tests/test_sumprod.py::TestNansumNanprodLong_param_15_{axis=0, func='nanprod', keepdims=False, shape=(20, 30, 40), transpose_axes=False}::test_nansum_all
tests/cupy_tests/math_tests/test_sumprod.py::TestNansumNanprodLong_param_15_{axis=0, func='nanprod', keepdims=False, shape=(20, 30, 40), transpose_axes=False}::test_nansum_axis_transposed
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/core/fromnumeric.py:87: RuntimeWarning: invalid value encountered in reduce
    return ufunc.reduce(obj, axis, dtype, out, **passkwargs)

tests/cupy_tests/math_tests/test_sumprod.py: 32 warnings
  /home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.1cAEeXesk6/cupy/tests/cupy_tests/math_tests/test_sumprod.py:799: RuntimeWarning: invalid value encountered in true_divide
    a = a / a

tests/cupy_tests/math_tests/test_sumprod.py::TestSumprod::test_sum_all2
tests/cupy_tests/math_tests/test_sumprod.py::TestSumprod::test_sum_all_transposed2
tests/cupy_tests/math_tests/test_sumprod.py::TestSumprod::test_sum_axes2
tests/cupy_tests/math_tests/test_sumprod.py::TestSumprod::test_sum_axes4
tests/cupy_tests/math_tests/test_sumprod.py::TestSumprod::test_sum_axis_transposed2
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/core/_methods.py:47: RuntimeWarning: overflow encountered in reduce
    return umr_sum(a, axis, dtype, out, keepdims, initial, where)

tests/cupy_tests/statistics_tests/test_meanvar.py: 28 warnings
  /home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.1cAEeXesk6/cupy/tests/cupy_tests/statistics_tests/test_meanvar.py:114: RuntimeWarning: invalid value encountered in true_divide
    a = a / a

tests/cupy_tests/statistics_tests/test_meanvar.py::TestNanMedian_param_4_{axis=0, keepdims=True, overwrite_input=True, shape=(3, 4, 5)}::test_nanmedian
tests/cupy_tests/statistics_tests/test_meanvar.py::TestNanMedian_param_5_{axis=0, keepdims=True, overwrite_input=False, shape=(3, 4, 5)}::test_nanmedian
tests/cupy_tests/statistics_tests/test_meanvar.py::TestNanMedian_param_6_{axis=0, keepdims=False, overwrite_input=True, shape=(3, 4, 5)}::test_nanmedian
tests/cupy_tests/statistics_tests/test_meanvar.py::TestNanMedian_param_7_{axis=0, keepdims=False, overwrite_input=False, shape=(3, 4, 5)}::test_nanmedian
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/lib/nanfunctions.py:1113: RuntimeWarning: All-NaN slice encountered
    r, k = function_base._ureduce(a, func=_nanmedian, axis=axis, out=out,

tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_1_{func='mean', params=((0,), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_2_{func='mean', params=((0, 0), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_3_{func='mean', params=((0, 0), 1)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_4_{func='mean', params=((0, 0, 0), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_5_{func='mean', params=((0, 0, 0), (0, 2))}::test_external_mean_zero_len
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/core/fromnumeric.py:3372: RuntimeWarning: Mean of empty slice.
    return _methods._mean(a, axis=axis, dtype=dtype,

tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_1_{func='mean', params=((0,), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_2_{func='mean', params=((0, 0), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_4_{func='mean', params=((0, 0, 0), None)}::test_external_mean_zero_len
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/core/_methods.py:170: RuntimeWarning: invalid value encountered in double_scalars
    ret = ret.dtype.type(ret / rcount)

tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_1_{func='mean', params=((0,), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_2_{func='mean', params=((0, 0), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_4_{func='mean', params=((0, 0, 0), None)}::test_external_mean_zero_len
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/core/_methods.py:170: RuntimeWarning: invalid value encountered in true_divide
    ret = ret.dtype.type(ret / rcount)

tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_1_{func='mean', params=((0,), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_2_{func='mean', params=((0, 0), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_4_{func='mean', params=((0, 0, 0), None)}::test_external_mean_zero_len
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/core/_methods.py:168: RuntimeWarning: invalid value encountered in true_divide
    ret = arr.dtype.type(ret / rcount)

tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_7_{func='std', params=((0,), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_8_{func='std', params=((0, 0), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_9_{func='std', params=((0, 0), 1)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_10_{func='std', params=((0, 0, 0), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_11_{func='std', params=((0, 0, 0), (0, 2))}::test_external_mean_zero_len
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/core/_methods.py:233: RuntimeWarning: Degrees of freedom <= 0 for slice
    ret = _var(a, axis=axis, dtype=dtype, out=out, ddof=ddof,

tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_7_{func='std', params=((0,), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_8_{func='std', params=((0, 0), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_10_{func='std', params=((0, 0, 0), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_13_{func='var', params=((0,), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_14_{func='var', params=((0, 0), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_16_{func='var', params=((0, 0, 0), None)}::test_external_mean_zero_len
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/core/_methods.py:194: RuntimeWarning: invalid value encountered in true_divide
    arrmean = um.true_divide(

tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_7_{func='std', params=((0,), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_8_{func='std', params=((0, 0), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_10_{func='std', params=((0, 0, 0), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_13_{func='var', params=((0,), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_14_{func='var', params=((0, 0), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_16_{func='var', params=((0, 0, 0), None)}::test_external_mean_zero_len
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/core/_methods.py:226: RuntimeWarning: invalid value encountered in double_scalars
    ret = ret.dtype.type(ret / rcount)

tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_7_{func='std', params=((0,), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_8_{func='std', params=((0, 0), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_10_{func='std', params=((0, 0, 0), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_13_{func='var', params=((0,), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_14_{func='var', params=((0, 0), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_16_{func='var', params=((0, 0, 0), None)}::test_external_mean_zero_len
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/core/_methods.py:226: RuntimeWarning: invalid value encountered in true_divide
    ret = ret.dtype.type(ret / rcount)

tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_13_{func='var', params=((0,), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_14_{func='var', params=((0, 0), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_15_{func='var', params=((0, 0), 1)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_16_{func='var', params=((0, 0, 0), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_17_{func='var', params=((0, 0, 0), (0, 2))}::test_external_mean_zero_len
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/core/fromnumeric.py:3621: RuntimeWarning: Degrees of freedom <= 0 for slice
    return _methods._var(a, axis=axis, dtype=dtype, out=out, ddof=ddof,

-- Docs: https://docs.pytest.org/en/stable/warnings.html
=========================== short test summary info ============================
FAILED tests/cupy_tests/core_tests/test_ndarray_conversion.py::TestNdarrayToBytes_param_1_{shape=(1,)}::test_item
FAILED tests/cupy_tests/core_tests/test_ndarray_conversion.py::TestNdarrayToBytes_param_2_{shape=(2, 3)}::test_item
FAILED tests/cupy_tests/core_tests/test_ndarray_indexing.py::TestArrayIndexingParameterized_param_0_{indexes=(1, 0, 2), shape=(2, 3, 4), transpose=None}::test_getitem
FAILED tests/cupy_tests/core_tests/test_ndarray_indexing.py::TestArrayIndexingParameterized_param_1_{indexes=(-1, 0, -2), shape=(2, 3, 4), transpose=None}::test_getitem
FAILED tests/cupy_tests/core_tests/test_ndarray_indexing.py::TestArrayIndexingParameterized_param_2_{indexes=(1, 0, 2), shape=(2, 3, 4), transpose=(2, 0, 1)}::test_getitem
FAILED tests/cupy_tests/core_tests/test_ndarray_indexing.py::TestArrayIndexingParameterized_param_3_{indexes=(-1, 0, -2), shape=(2, 3, 4), transpose=(2, 0, 1)}::test_getitem
FAILED tests/cupy_tests/core_tests/test_ndarray_indexing.py::TestArrayIndexingParameterized_param_27_{indexes=(slice(-4, -5, -1),), shape=(10,), transpose=None}::test_getitem
FAILED tests/cupy_tests/core_tests/test_ndarray_indexing.py::TestArrayIndexingParameterized_param_38_{indexes=(slice(-5, -6, -1),), shape=(10,), transpose=None}::test_getitem
FAILED tests/cupy_tests/core_tests/test_ndarray_unary_op.py::TestArrayBoolOp::test_bool_one_element
FAILED tests/cupy_tests/creation_tests/test_from_data.py::TestFromData::test_array_from_list_of_numpy_scalar
FAILED tests/cupy_tests/cuda_tests/test_device.py::TestDeviceHandles::test_cusparse_handle
FAILED tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyArithmeticDiffTypes_param_2_{fname='polymul'}::test_polyroutine_diff_types_array
FAILED tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyArithmeticDiffTypes_param_2_{fname='polymul'}::test_polyroutine_diff_types_poly1d
FAILED tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyfitParametersCombinations_param_0_{deg=0, rcond=None, shape1=(3,), shape2=(3,), weighted=True}::test_polyfit_default
FAILED tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyfitParametersCombinations_param_0_{deg=0, rcond=None, shape1=(3,), shape2=(3,), weighted=True}::test_polyfit_full
FAILED tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyfitParametersCombinations_param_1_{deg=0, rcond=None, shape1=(3,), shape2=(3,), weighted=False}::test_polyfit_default
FAILED tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyfitParametersCombinations_param_1_{deg=0, rcond=None, shape1=(3,), shape2=(3,), weighted=False}::test_polyfit_full
FAILED tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyfitParametersCombinations_param_2_{deg=0, rcond=None, shape1=(3,), shape2=(3, 2), weighted=True}::test_polyfit_default
FAILED tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyfitParametersCombinations_param_2_{deg=0, rcond=None, shape1=(3,), shape2=(3, 2), weighted=True}::test_polyfit_full
FAILED tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyfitParametersCombinations_param_3_{deg=0, rcond=None, shape1=(3,), shape2=(3, 2), weighted=False}::test_polyfit_default
FAILED tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyfitParametersCombinations_param_3_{deg=0, rcond=None, shape1=(3,), shape2=(3, 2), weighted=False}::test_polyfit_full
FAILED tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyfitParametersCombinations_param_4_{deg=0, rcond=0.5, shape1=(3,), shape2=(3,), weighted=True}::test_polyfit_default
FAILED tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyfitParametersCombinations_param_4_{deg=0, rcond=0.5, shape1=(3,), shape2=(3,), weighted=True}::test_polyfit_full
FAILED tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyfitParametersCombinations_param_5_{deg=0, rcond=0.5, shape1=(3,), shape2=(3,), weighted=False}::test_polyfit_default
FAILED tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyfitParametersCombinations_param_5_{deg=0, rcond=0.5, shape1=(3,), shape2=(3,), weighted=False}::test_polyfit_full
FAILED tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyfitParametersCombinations_param_6_{deg=0, rcond=0.5, shape1=(3,), shape2=(3, 2), weighted=True}::test_polyfit_default
FAILED tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyfitParametersCombinations_param_6_{deg=0, rcond=0.5, shape1=(3,), shape2=(3, 2), weighted=True}::test_polyfit_full
FAILED tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyfitParametersCombinations_param_7_{deg=0, rcond=0.5, shape1=(3,), shape2=(3, 2), weighted=False}::test_polyfit_default
FAILED tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyfitParametersCombinations_param_7_{deg=0, rcond=0.5, shape1=(3,), shape2=(3, 2), weighted=False}::test_polyfit_full
FAILED tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyfitParametersCombinations_param_8_{deg=0, rcond=1e-15, shape1=(3,), shape2=(3,), weighted=True}::test_polyfit_default
FAILED tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyfitParametersCombinations_param_8_{deg=0, rcond=1e-15, shape1=(3,), shape2=(3,), weighted=True}::test_polyfit_full
FAILED tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyfitParametersCombinations_param_9_{deg=0, rcond=1e-15, shape1=(3,), shape2=(3,), weighted=False}::test_polyfit_default
FAILED tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyfitParametersCombinations_param_9_{deg=0, rcond=1e-15, shape1=(3,), shape2=(3,), weighted=False}::test_polyfit_full
FAILED tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyfitParametersCombinations_param_10_{deg=0, rcond=1e-15, shape1=(3,), shape2=(3, 2), weighted=True}::test_polyfit_default
FAILED tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyfitParametersCombinations_param_10_{deg=0, rcond=1e-15, shape1=(3,), shape2=(3, 2), weighted=True}::test_polyfit_full
FAILED tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyfitParametersCombinations_param_11_{deg=0, rcond=1e-15, shape1=(3,), shape2=(3, 2), weighted=False}::test_polyfit_default
FAILED tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyfitParametersCombinations_param_11_{deg=0, rcond=1e-15, shape1=(3,), shape2=(3, 2), weighted=False}::test_polyfit_full
FAILED tests/cupy_tests/linalg_tests/test_product.py::TestMatrixPower::test_matrix_power_1
FAILED tests/cupy_tests/polynomial_tests/test_polyutils.py::TestAsSeries_param_1_{trim=False}::test_as_series_trailing_zeros
FAILED tests/cupy_tests/random_tests/test_permutations.py::TestPermutations_param_0_{seed=None}::test_permutation_sort_ndim
FAILED tests/cupy_tests/random_tests/test_permutations.py::TestPermutations_param_1_{seed=0}::test_permutation_sort_ndim
FAILED tests/cupy_tests/random_tests/test_permutations.py::TestShuffle::test_shuffle_sort_ndim
FAILED tests/cupy_tests/sorting_tests/test_sort.py::TestArgsort_param_0_{external=False}::test_argsort_axis
FAILED tests/cupy_tests/sorting_tests/test_sort.py::TestArgsort_param_0_{external=False}::test_argsort_multi_dim
FAILED tests/cupy_tests/sorting_tests/test_sort.py::TestArgsort_param_0_{external=False}::test_argsort_negative_axis
FAILED tests/cupy_tests/sorting_tests/test_sort.py::TestArgsort_param_0_{external=False}::test_argsort_one_dim
FAILED tests/cupy_tests/sorting_tests/test_sort.py::TestArgsort_param_0_{external=False}::test_nan1
FAILED tests/cupy_tests/sorting_tests/test_sort.py::TestArgsort_param_0_{external=False}::test_nan2
FAILED tests/cupy_tests/sorting_tests/test_sort.py::TestArgsort_param_1_{external=True}::test_argsort_axis
FAILED tests/cupy_tests/sorting_tests/test_sort.py::TestArgsort_param_1_{external=True}::test_argsort_multi_dim
FAILED tests/cupy_tests/sorting_tests/test_sort.py::TestArgsort_param_1_{external=True}::test_argsort_negative_axis
FAILED tests/cupy_tests/sorting_tests/test_sort.py::TestArgsort_param_1_{external=True}::test_argsort_one_dim
FAILED tests/cupy_tests/sorting_tests/test_sort.py::TestArgsort_param_1_{external=True}::test_nan1
FAILED tests/cupy_tests/sorting_tests/test_sort.py::TestArgsort_param_1_{external=True}::test_nan2
FAILED tests/cupy_tests/sorting_tests/test_sort.py::TestPartition_param_0_{external=False, length=10}::test_partition_axis
FAILED tests/cupy_tests/sorting_tests/test_sort.py::TestPartition_param_0_{external=False, length=10}::test_partition_multi_dim
FAILED tests/cupy_tests/sorting_tests/test_sort.py::TestPartition_param_0_{external=False, length=10}::test_partition_negative_axis
FAILED tests/cupy_tests/sorting_tests/test_sort.py::TestPartition_param_0_{external=False, length=10}::test_partition_one_dim
FAILED tests/cupy_tests/sorting_tests/test_sort.py::TestPartition_param_2_{external=True, length=10}::test_partition_axis
FAILED tests/cupy_tests/sorting_tests/test_sort.py::TestPartition_param_2_{external=True, length=10}::test_partition_multi_dim
FAILED tests/cupy_tests/sorting_tests/test_sort.py::TestPartition_param_2_{external=True, length=10}::test_partition_negative_axis
FAILED tests/cupy_tests/sorting_tests/test_sort.py::TestPartition_param_2_{external=True, length=10}::test_partition_one_dim
FAILED tests/cupy_tests/sorting_tests/test_sort.py::TestArgpartition_param_0_{external=False}::test_argpartition_axis
FAILED tests/cupy_tests/sorting_tests/test_sort.py::TestArgpartition_param_0_{external=False}::test_argpartition_multi_dim
FAILED tests/cupy_tests/sorting_tests/test_sort.py::TestArgpartition_param_0_{external=False}::test_argpartition_negative_axis
FAILED tests/cupy_tests/sorting_tests/test_sort.py::TestArgpartition_param_0_{external=False}::test_argpartition_one_dim
FAILED tests/cupy_tests/sorting_tests/test_sort.py::TestArgpartition_param_1_{external=True}::test_argpartition_axis
FAILED tests/cupy_tests/sorting_tests/test_sort.py::TestArgpartition_param_1_{external=True}::test_argpartition_multi_dim
FAILED tests/cupy_tests/sorting_tests/test_sort.py::TestArgpartition_param_1_{external=True}::test_argpartition_negative_axis
FAILED tests/cupy_tests/sorting_tests/test_sort.py::TestArgpartition_param_1_{external=True}::test_argpartition_one_dim
FAILED tests/cupy_tests/sorting_tests/test_sort.py::TestSort::test_external_sort_axis
FAILED tests/cupy_tests/sorting_tests/test_sort.py::TestSort::test_external_sort_dtype
FAILED tests/cupy_tests/sorting_tests/test_sort.py::TestSort::test_external_sort_negative_axis
FAILED tests/cupy_tests/sorting_tests/test_sort.py::TestSort::test_external_sort_two_or_more_dim
FAILED tests/cupy_tests/sorting_tests/test_sort.py::TestSort::test_nan1 - Ass...
FAILED tests/cupy_tests/sorting_tests/test_sort.py::TestSort::test_nan2 - Ass...
FAILED tests/cupy_tests/sorting_tests/test_sort.py::TestSort::test_nan3 - Ass...
FAILED tests/cupy_tests/sorting_tests/test_sort.py::TestSort::test_nan4 - Ass...
FAILED tests/cupy_tests/sorting_tests/test_sort.py::TestSort::test_sort_axis1
FAILED tests/cupy_tests/sorting_tests/test_sort.py::TestSort::test_sort_axis2
FAILED tests/cupy_tests/sorting_tests/test_sort.py::TestSort::test_sort_axis3
FAILED tests/cupy_tests/sorting_tests/test_sort.py::TestSort::test_sort_dtype
FAILED tests/cupy_tests/sorting_tests/test_sort.py::TestSort::test_sort_negative_axis
FAILED tests/cupy_tests/sorting_tests/test_sort.py::TestSort::test_sort_two_or_more_dim
FAILED tests/cupy_tests/sorting_tests/test_sort.py::TestLexsort::test_F_order
FAILED tests/cupy_tests/sorting_tests/test_sort.py::TestLexsort::test_lexsort_dtype
FAILED tests/cupy_tests/sorting_tests/test_sort.py::TestLexsort::test_nan1 - ...
FAILED tests/cupy_tests/sorting_tests/test_sort.py::TestLexsort::test_nan2 - ...
FAILED tests/cupy_tests/sorting_tests/test_sort.py::TestLexsort::test_nan3 - ...
FAILED tests/cupy_tests/sorting_tests/test_sort.py::TestLexsort::test_view - ...
FAILED tests/cupy_tests/sorting_tests/test_sort.py::TestMsort::test_msort_multi_dim
FAILED tests/cupy_tests/sorting_tests/test_sort.py::TestMsort::test_msort_one_dim
FAILED tests/cupy_tests/statistics_tests/test_correlation.py::TestCorrelate_param_0_{mode='valid'}::test_correlate_diff_types
FAILED tests/cupy_tests/statistics_tests/test_correlation.py::TestCorrelate_param_1_{mode='full'}::test_correlate_diff_types
FAILED tests/cupy_tests/statistics_tests/test_correlation.py::TestCorrelate_param_1_{mode='full'}::test_correlate_non_contiguous
FAILED tests/cupy_tests/statistics_tests/test_correlation.py::TestCorrelate_param_2_{mode='same'}::test_correlate_diff_types
FAILED tests/cupy_tests/statistics_tests/test_meanvar.py::TestMedianAxis_param_0_{axis=(0, 1), keepdims=True, shape=(3, 4, 5)}::test_median_axis_sequence
FAILED tests/cupy_tests/statistics_tests/test_meanvar.py::TestMedianAxis_param_1_{axis=(0, 1), keepdims=False, shape=(3, 4, 5)}::test_median_axis_sequence
FAILED tests/cupy_tests/statistics_tests/test_meanvar.py::TestMedianAxis_param_2_{axis=(0, -1), keepdims=True, shape=(3, 4, 5)}::test_median_axis_sequence
FAILED tests/cupy_tests/statistics_tests/test_meanvar.py::TestMedianAxis_param_3_{axis=(0, -1), keepdims=False, shape=(3, 4, 5)}::test_median_axis_sequence
FAILED tests/cupy_tests/statistics_tests/test_meanvar.py::TestMedianAxis_param_4_{axis=(1, 2), keepdims=True, shape=(3, 4, 5)}::test_median_axis_sequence
FAILED tests/cupy_tests/statistics_tests/test_meanvar.py::TestMedianAxis_param_5_{axis=(1, 2), keepdims=False, shape=(3, 4, 5)}::test_median_axis_sequence
FAILED tests/cupy_tests/statistics_tests/test_meanvar.py::TestMedianAxis_param_6_{axis=(1,), keepdims=True, shape=(3, 4, 5)}::test_median_axis_sequence
FAILED tests/cupy_tests/statistics_tests/test_meanvar.py::TestMedianAxis_param_7_{axis=(1,), keepdims=False, shape=(3, 4, 5)}::test_median_axis_sequence
FAILED tests/cupy_tests/statistics_tests/test_meanvar.py::TestNanMedian_param_4_{axis=0, keepdims=True, overwrite_input=True, shape=(3, 4, 5)}::test_nanmedian
FAILED tests/cupy_tests/statistics_tests/test_meanvar.py::TestNanMedian_param_5_{axis=0, keepdims=True, overwrite_input=False, shape=(3, 4, 5)}::test_nanmedian
FAILED tests/cupy_tests/statistics_tests/test_meanvar.py::TestNanMedian_param_6_{axis=0, keepdims=False, overwrite_input=True, shape=(3, 4, 5)}::test_nanmedian
FAILED tests/cupy_tests/statistics_tests/test_meanvar.py::TestNanMedian_param_7_{axis=0, keepdims=False, overwrite_input=False, shape=(3, 4, 5)}::test_nanmedian
FAILED tests/cupy_tests/statistics_tests/test_meanvar.py::TestNanMedian_param_8_{axis=1, keepdims=True, overwrite_input=True, shape=(3, 4, 5)}::test_nanmedian
FAILED tests/cupy_tests/statistics_tests/test_meanvar.py::TestNanMedian_param_9_{axis=1, keepdims=True, overwrite_input=False, shape=(3, 4, 5)}::test_nanmedian
FAILED tests/cupy_tests/statistics_tests/test_meanvar.py::TestNanMedian_param_10_{axis=1, keepdims=False, overwrite_input=True, shape=(3, 4, 5)}::test_nanmedian
FAILED tests/cupy_tests/statistics_tests/test_meanvar.py::TestNanMedian_param_11_{axis=1, keepdims=False, overwrite_input=False, shape=(3, 4, 5)}::test_nanmedian
FAILED tests/cupy_tests/statistics_tests/test_meanvar.py::TestNanMedian_param_12_{axis=-1, keepdims=True, overwrite_input=True, shape=(3, 4, 5)}::test_nanmedian
FAILED tests/cupy_tests/statistics_tests/test_meanvar.py::TestNanMedian_param_13_{axis=-1, keepdims=True, overwrite_input=False, shape=(3, 4, 5)}::test_nanmedian
FAILED tests/cupy_tests/statistics_tests/test_meanvar.py::TestNanMedian_param_14_{axis=-1, keepdims=False, overwrite_input=True, shape=(3, 4, 5)}::test_nanmedian
FAILED tests/cupy_tests/statistics_tests/test_meanvar.py::TestNanMedian_param_15_{axis=-1, keepdims=False, overwrite_input=False, shape=(3, 4, 5)}::test_nanmedian
FAILED tests/cupy_tests/statistics_tests/test_meanvar.py::TestNanMedian_param_20_{axis=(0, 2), keepdims=True, overwrite_input=True, shape=(3, 4, 5)}::test_nanmedian
FAILED tests/cupy_tests/statistics_tests/test_meanvar.py::TestNanMedian_param_21_{axis=(0, 2), keepdims=True, overwrite_input=False, shape=(3, 4, 5)}::test_nanmedian
FAILED tests/cupy_tests/statistics_tests/test_meanvar.py::TestNanMedian_param_22_{axis=(0, 2), keepdims=False, overwrite_input=True, shape=(3, 4, 5)}::test_nanmedian
FAILED tests/cupy_tests/statistics_tests/test_meanvar.py::TestNanMedian_param_23_{axis=(0, 2), keepdims=False, overwrite_input=False, shape=(3, 4, 5)}::test_nanmedian
FAILED tests/cupy_tests/statistics_tests/test_meanvar.py::TestNanMedian_param_24_{axis=(-1, -2), keepdims=True, overwrite_input=True, shape=(3, 4, 5)}::test_nanmedian
FAILED tests/cupy_tests/statistics_tests/test_meanvar.py::TestNanMedian_param_25_{axis=(-1, -2), keepdims=True, overwrite_input=False, shape=(3, 4, 5)}::test_nanmedian
FAILED tests/cupy_tests/statistics_tests/test_meanvar.py::TestNanMedian_param_26_{axis=(-1, -2), keepdims=False, overwrite_input=True, shape=(3, 4, 5)}::test_nanmedian
FAILED tests/cupy_tests/statistics_tests/test_meanvar.py::TestNanMedian_param_27_{axis=(-1, -2), keepdims=False, overwrite_input=False, shape=(3, 4, 5)}::test_nanmedian
FAILED tests/cupy_tests/statistics_tests/test_meanvar.py::TestMedian::test_median_axis1
FAILED tests/cupy_tests/statistics_tests/test_meanvar.py::TestMedian::test_median_axis2
FAILED tests/cupy_tests/statistics_tests/test_meanvar.py::TestMedian::test_median_keepdims_axis1
FAILED tests/cupy_tests/statistics_tests/test_meanvar.py::TestMedian::test_median_keepdims_noaxis
FAILED tests/cupy_tests/statistics_tests/test_meanvar.py::TestMedian::test_median_noaxis
FAILED tests/cupy_tests/statistics_tests/test_meanvar.py::TestMedian::test_median_overwrite_input
FAILED tests/cupy_tests/statistics_tests/test_order.py::TestOrder::test_percentile_neg_axis
FAILED tests/cupy_tests/statistics_tests/test_order.py::TestOrder::test_percentile_out
FAILED tests/cupy_tests/statistics_tests/test_order.py::TestOrder::test_percentile_tuple_axis
FAILED tests/cupy_tests/statistics_tests/test_order.py::TestOrder::test_quantile_neg_axis
FAILED tests/cupy_tests/statistics_tests/test_order.py::TestOrder::test_quantile_out
FAILED tests/cupy_tests/statistics_tests/test_order.py::TestOrder::test_quantile_tuple_axis
FAILED tests/cupy_tests/testing_tests/test_helper.py::TestGenerateMatrix_param_5_{dtype=float16, x_s_shapes=((2, 3), (2,)), xp=cupy}::test_generate_matrix
FAILED tests/example_tests/test_finance.py::TestMonteCarlo::test_monte_carlo
FAILED tests/example_tests/test_finance.py::TestMonteCarloWithMultiGPU::test_monte_carlo_multigpu
FAILED tests/install_tests/test_build.py::TestCheckVersion::test_check_cuda_version
FAILED tests/install_tests/test_build.py::TestCheckVersion::test_check_cudnn_version
= 141 failed, 24277 passed, 39217 skipped, 56 deselected, 94 xfailed, 205 warnings in 13646.68s (3:47:26) =
