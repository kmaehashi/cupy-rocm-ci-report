v9: 0e977ba Merge pull request #5116 from chainer-ci/bp-5103-v9-add-path-to-load-cudnn-v8-win
============================= test session starts ==============================
platform linux -- Python 3.8.7, pytest-6.2.2, py-1.10.0, pluggy-0.13.1
rootdir: /home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy, configfile: setup.cfg
plugins: html-3.1.1, metadata-1.11.0
collected 71745 items / 65 deselected / 12 skipped / 71668 selected

tests/cupy_tests/test_cublas.py ........................................ [  0%]
........................................................................ [  0%]
........................................................................ [  0%]
........................................................................ [  0%]
........................................................................ [  0%]
........................................................................ [  0%]
........................................................................ [  0%]
........................................................................ [  0%]
........................................................................ [  0%]
........................................................................ [  0%]
........................................................................ [  1%]
........................................................................ [  1%]
........................................................................ [  1%]
........................................................................ [  1%]
........................................................................ [  1%]
........................................................................ [  1%]
........................................................................ [  1%]
........................................................................ [  1%]
........................................................................ [  1%]
........................................................................ [  1%]
........................................................................ [  2%]
........................................................................ [  2%]
........................................................................ [  2%]
........................................................................ [  2%]
........................................................................ [  2%]
........................................................................ [  2%]
........................................................................ [  2%]
........................................................................ [  2%]
........................................................................ [  2%]
........................................................................ [  2%]
........................................................................ [  3%]
........................................................................ [  3%]
........................................................................ [  3%]
...........................x...........x.............................x.. [  3%]
.........x..........                                                     [  3%]
tests/cupy_tests/test_cudnn.py sssssssssssssssssssssssssssssssssssssssss [  3%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  3%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  3%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  3%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  3%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  3%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  4%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  4%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  4%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  4%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  4%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  4%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  4%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  4%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  4%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  4%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  5%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  5%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  5%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  5%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  5%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  5%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  5%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  5%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  5%]
sssssssssssssssssssssssssssssssssssssssssssssssssssssss                  [  5%]
tests/cupy_tests/test_cusolver.py ssssssssssssssssssssssssssssssssssssss [  5%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  6%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  6%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  6%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  6%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  6%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  6%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  6%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [  6%]
ssssssssssssssssssssssssss                                               [  6%]
tests/cupy_tests/test_cutensor.py ssssssssssssssssssssssssssssssssssssss [  6%]
sssssssssssssssssssssssssssssssssssss                                    [  6%]
tests/cupy_tests/test_init.py ..s.......                                 [  6%]
tests/cupy_tests/test_ndim.py ............                               [  6%]
tests/cupy_tests/test_numpy_interop.py ..x....                           [  6%]
tests/cupy_tests/test_type_routines.py ................................. [  7%]
.                                                                        [  7%]
tests/cupy_tests/binary_tests/test_elementwise.py ......                 [  7%]
tests/cupy_tests/binary_tests/test_packing.py ...                        [  7%]
tests/cupy_tests/core_tests/test_array_function.py .....                 [  7%]
tests/cupy_tests/core_tests/test_carray.py .....                         [  7%]
tests/cupy_tests/core_tests/test_core.py ......                          [  7%]
tests/cupy_tests/core_tests/test_cub_reduction.py ...................... [  7%]
...                                                                      [  7%]
tests/cupy_tests/core_tests/test_dlpack.py ....                          [  7%]
tests/cupy_tests/core_tests/test_elementwise.py ...............          [  7%]
tests/cupy_tests/core_tests/test_flags.py .............................  [  7%]
tests/cupy_tests/core_tests/test_function.py ..                          [  7%]
tests/cupy_tests/core_tests/test_internal.py ........................... [  7%]
...............................................................          [  7%]
tests/cupy_tests/core_tests/test_iter.py ............                    [  7%]
tests/cupy_tests/core_tests/test_ndarray.py ..........................ss [  7%]
ssss.................................................................... [  7%]
......................F...sss...............                             [  7%]
tests/cupy_tests/core_tests/test_ndarray_adv_indexing.py ............... [  7%]
........................................................................ [  7%]
........................................................................ [  7%]
........................................................................ [  7%]
.............................................                            [  7%]
tests/cupy_tests/core_tests/test_ndarray_complex_ops.py ................ [  7%]
.....                                                                    [  7%]
tests/cupy_tests/core_tests/test_ndarray_contiguity.py .                 [  7%]
tests/cupy_tests/core_tests/test_ndarray_conversion.py .......xx..       [  7%]
tests/cupy_tests/core_tests/test_ndarray_copy_and_view.py ss........s... [  7%]
....ssss.......                                                          [  7%]
tests/cupy_tests/core_tests/test_ndarray_cuda_array_interface.py sssssss [  7%]
sssssssssssssssssssssssssssssssssssssssssssssssss                        [  8%]
tests/cupy_tests/core_tests/test_ndarray_elementwise_op.py ............. [  8%]
........................................................................ [  8%]
.................................................................        [  8%]
tests/cupy_tests/core_tests/test_ndarray_get.py ............             [  8%]
tests/cupy_tests/core_tests/test_ndarray_indexing.py xxxx..........x...x [  8%]
........x..........x.............................                        [  8%]
tests/cupy_tests/core_tests/test_ndarray_math.py ......................s [  8%]
sssssssssss                                                              [  8%]
tests/cupy_tests/core_tests/test_ndarray_owndata.py ...                  [  8%]
tests/cupy_tests/core_tests/test_ndarray_reduction.py .................. [  8%]
........................................................................ [  8%]
........................................................................ [  8%]
................................                                         [  8%]
tests/cupy_tests/core_tests/test_ndarray_scatter.py ..........FFFFF..... [  8%]
.FFFFFFFFFFFFFFF..FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF.............. [  8%]
...............................FFFFFFFFF.........FFFFFFFFFFFFFF          [  8%]
tests/cupy_tests/core_tests/test_ndarray_ufunc.py .....FF                [  8%]
tests/cupy_tests/core_tests/test_ndarray_unary_op.py .......X....FFFFF.s [  8%]
..F                                                                      [  8%]
tests/cupy_tests/core_tests/test_raw.py .ss.........sss..s.s.s........ss [  9%]
.........sss..s.s.s........ss.........sss..s.s.s......ssssssssssssssssss [  9%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss.s [  9%]
s.......sssss....s.s......sssssssssssssssssssssssssssss                  [  9%]
tests/cupy_tests/core_tests/test_reduction.py FFF.FFFFFF.FFFFFFFFFF.F    [  9%]
tests/cupy_tests/core_tests/test_scan.py .FFF                            [  9%]
tests/cupy_tests/core_tests/test_syncdetect.py ....                      [  9%]
tests/cupy_tests/core_tests/test_userkernel.py FFFFsssFFF.FF.F.F.F.      [  9%]
tests/cupy_tests/core_tests/fusion_tests/test_array.py FFFFFFFFFFFFFFFFF [  9%]
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [  9%]
FFFFFFFFFFF.FFFFFFFFFFF.FFFFFFFFFFF.FFFFFFFFFFFFFFFF                     [  9%]
tests/cupy_tests/core_tests/fusion_tests/test_indexing.py FFFFFFFFFFFFFF [  9%]
FFFFFFF....FFFFFFs                                                       [  9%]
tests/cupy_tests/core_tests/fusion_tests/test_kernel_cache.py FFFF       [  9%]
tests/cupy_tests/core_tests/fusion_tests/test_misc.py FFFFFFFsFF.F..FFFF [  9%]
FFFFFFFF                                                                 [  9%]
tests/cupy_tests/core_tests/fusion_tests/test_optimization.py FFFFFFFFFF [  9%]
FFFF                                                                     [  9%]
tests/cupy_tests/core_tests/fusion_tests/test_reduction.py ............F [  9%]
F....FF..FF..FFFF....FFFF....FFFFFF....FF....................FFFFFFFF..F [  9%]
FFF..FF..FFFFFFFF..F.....................................s.s.s.s.s.s.s.s [  9%]
.s.ssssssssssssssssss.sss                                                [  9%]
tests/cupy_tests/core_tests/fusion_tests/test_routines.py .............. [  9%]
........................................................................ [ 10%]
..............                                                           [ 10%]
tests/cupy_tests/core_tests/fusion_tests/test_ufunc.py ................. [ 10%]
......................................................                   [ 10%]
tests/cupy_tests/creation_tests/test_basic.py .......................... [ 10%]
...........................................................s............ [ 10%]
....s.                                                                   [ 10%]
tests/cupy_tests/creation_tests/test_from_data.py ssssssssssssssssssssss [ 10%]
sssssssssssssssssssssssssssssssssssssssssssssssssssssssssss............. [ 10%]
....................................F..............................      [ 10%]
tests/cupy_tests/creation_tests/test_matrix.py ......................... [ 10%]
.................................                                        [ 10%]
tests/cupy_tests/creation_tests/test_ranges.py ......................... [ 10%]
..............................................................           [ 10%]
tests/cupy_tests/cuda_tests/test_compiler.py sssssss........             [ 10%]
tests/cupy_tests/cuda_tests/test_cublas.py .                             [ 10%]
tests/cupy_tests/cuda_tests/test_cudnn.py s                              [ 10%]
tests/cupy_tests/cuda_tests/test_cufft.py ssssssssssssssss.              [ 10%]
tests/cupy_tests/cuda_tests/test_curand.py .....                         [ 10%]
tests/cupy_tests/cuda_tests/test_cusolver.py .                           [ 10%]
tests/cupy_tests/cuda_tests/test_cusparse.py .                           [ 10%]
tests/cupy_tests/cuda_tests/test_cutensor.py s                           [ 10%]
tests/cupy_tests/cuda_tests/test_device.py .............x.               [ 10%]
tests/cupy_tests/cuda_tests/test_driver.py ss.                           [ 10%]
tests/cupy_tests/cuda_tests/test_memory.py ....ssssssss................. [ 10%]
.ssssssssss.........................................s..........sssssssss [ 10%]
                                                                         [ 10%]
tests/cupy_tests/cuda_tests/test_memory_hook.py .                        [ 10%]
tests/cupy_tests/cuda_tests/test_nccl.py ........                        [ 10%]
tests/cupy_tests/cuda_tests/test_nvrtc.py .                              [ 10%]
tests/cupy_tests/cuda_tests/test_nvtx.py ....                            [ 10%]
tests/cupy_tests/cuda_tests/test_pinned_memory.py ............           [ 10%]
tests/cupy_tests/cuda_tests/test_profile.py ..                           [ 10%]
tests/cupy_tests/cuda_tests/test_runtime.py .                            [ 10%]
tests/cupy_tests/cuda_tests/test_stream.py ..s..s..ssssssss.s            [ 11%]
tests/cupy_tests/cuda_tests/memory_hooks_tests/test_debug_print.py .     [ 11%]
tests/cupy_tests/cuda_tests/memory_hooks_tests/test_line_profile.py ..   [ 11%]
tests/cupy_tests/fft_tests/test_cache.py ..sss.....s..                   [ 11%]
tests/cupy_tests/fft_tests/test_callback.py ssssssssssssssssssssssssssss [ 11%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 11%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 11%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 11%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 11%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 11%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 11%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 11%]
ssssssssssssssssssssssssssssssssssssssssssssssssssss                     [ 11%]
tests/cupy_tests/fft_tests/test_fft.py ....ssss....ssss........ssss....s [ 11%]
sss........ssss....ssss........ssss....ssss........ssss....ssss........s [ 11%]
sss....ssss........ssss....ssss........ssss....ssss........ssss....ssss. [ 12%]
.......ssss....ssss....................................................s [ 12%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 12%]
sssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss. [ 12%]
.s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s [ 12%]
.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s [ 12%]
..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s.. [ 12%]
s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s. [ 12%]
s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s. [ 12%]
.s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s [ 12%]
.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s [ 13%]
.s.s.sssss.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s [ 13%]
.sssss.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.sss [ 13%]
ss.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s [ 13%]
.sssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss.s.s..s.s. [ 13%]
.s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s [ 13%]
.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s...ss..ss....ss..ss....ss..ss....ss [ 13%]
..ss....ss..ss....ss..ss....ss..ss....ss..ss...s.s.s.s.s.s.s.s.s.s.s.s.s [ 13%]
.s.s.s.s.s.s.s.s.s.s.s.s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s. [ 13%]
.s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s [ 14%]
.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s......s.s..s.s..s.s..s.s..s.s..s.s. [ 14%]
.s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s [ 14%]
.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s [ 14%]
..s.s..s.s..s.s..s.s..s.s..s.s..s.s.sssss.s.s..s.s.sssssssssssssssssssss [ 14%]
ssssssssssssssssssssssssssssssssssssssssssss.s.s..s.s..s.s..s.s..s.s..s. [ 14%]
s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s..s.s. [ 14%]
.s.s..s.s..s.s..s.s..s.s..s.s.......ss..ss....ss..ss....ss..ss....ss..ss [ 14%]
....ss..ss....ss..ss....ss..ss....ss..ss........................         [ 14%]
tests/cupy_tests/functional_tests/test_piecewise.py .............        [ 14%]
tests/cupy_tests/functional_tests/test_vectorize.py .................... [ 14%]
.......................FF.......                                         [ 14%]
tests/cupy_tests/indexing_tests/test_generate.py .......x............... [ 14%]
...............                                                          [ 14%]
tests/cupy_tests/indexing_tests/test_indexing.py ....................... [ 14%]
.........................                                                [ 15%]
tests/cupy_tests/indexing_tests/test_insert.py ......................... [ 15%]
........................................................................ [ 15%]
........................................................................ [ 15%]
.........................................................                [ 15%]
tests/cupy_tests/indexing_tests/test_iterate.py ........................ [ 15%]
...............................................                          [ 15%]
tests/cupy_tests/io_tests/test_base_n.py ............................    [ 15%]
tests/cupy_tests/io_tests/test_formatting.py ..                          [ 15%]
tests/cupy_tests/io_tests/test_npz.py .......                            [ 15%]
tests/cupy_tests/lib_tests/test_polynomial.py .......ss.......ssssssssss [ 15%]
sssssss........ssssssssssssssssssssssssssssssssssssxxxxxxxxxxxxxxxxxxxx. [ 15%]
..ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 15%]
ssssssssssssssssssssssssss......xxxxxxxxxxxxxxxxxxxxxxxx................ [ 15%]
........................................................................ [ 15%]
........xxxxxxxx........xxxxxxxx........................................ [ 16%]
...........xxxxxx............................x.......................... [ 16%]
..                                                                       [ 16%]
tests/cupy_tests/lib_tests/test_shape_base.py ......................     [ 16%]
tests/cupy_tests/lib_tests/test_strided_tricks.py ..                     [ 16%]
tests/cupy_tests/linalg_tests/test_decomposition.py .................... [ 16%]
.......................                                                  [ 16%]
tests/cupy_tests/linalg_tests/test_eigenvalue.py xxxxxxxx                [ 16%]
tests/cupy_tests/linalg_tests/test_einsum.py ........................... [ 16%]
........................................................................ [ 16%]
........................................................................ [ 16%]
........................................................................ [ 16%]
........................................................................ [ 16%]
........................................................................ [ 16%]
........................................................................ [ 16%]
........................................................................ [ 16%]
........................................................................ [ 17%]
........................................................................ [ 17%]
........................................................................ [ 17%]
..........                                                               [ 17%]
tests/cupy_tests/linalg_tests/test_norms.py ............................ [ 17%]
........................................................................ [ 17%]
........................................................................ [ 17%]
.................................................................        [ 17%]
tests/cupy_tests/linalg_tests/test_product.py .......................... [ 17%]
........................................................................ [ 17%]
........................................................................ [ 17%]
..........................................                               [ 17%]
tests/cupy_tests/linalg_tests/test_solve.py ............................ [ 17%]
                                                                         [ 17%]
tests/cupy_tests/logic_tests/test_comparison.py ........................ [ 17%]
.....                                                                    [ 17%]
tests/cupy_tests/logic_tests/test_content.py ...                         [ 17%]
tests/cupy_tests/logic_tests/test_ops.py ....                            [ 17%]
tests/cupy_tests/logic_tests/test_truth.py ............................. [ 18%]
........................................................................ [ 18%]
........................................................................ [ 18%]
........................................................................ [ 18%]
........................................................................ [ 18%]
........................................................................ [ 18%]
........................................................................ [ 18%]
........................................................................ [ 18%]
........................................................................ [ 18%]
........................................................................ [ 18%]
...........................................                              [ 18%]
tests/cupy_tests/logic_tests/test_type_test.py ......................... [ 19%]
.......                                                                  [ 19%]
tests/cupy_tests/manipulation_tests/test_add_remove.py ................. [ 19%]
.........................                                                [ 19%]
tests/cupy_tests/manipulation_tests/test_basic.py ...................... [ 19%]
.......................................................                  [ 19%]
tests/cupy_tests/manipulation_tests/test_dims.py .....x.x............... [ 19%]
................................................                         [ 19%]
tests/cupy_tests/manipulation_tests/test_join.py ....................... [ 19%]
...........................                                              [ 19%]
tests/cupy_tests/manipulation_tests/test_kind.py ...........             [ 19%]
tests/cupy_tests/manipulation_tests/test_rearrange.py .................. [ 19%]
.......................................................                  [ 19%]
tests/cupy_tests/manipulation_tests/test_shape.py ...................... [ 19%]
....................................                                     [ 19%]
tests/cupy_tests/manipulation_tests/test_split.py ..................     [ 19%]
tests/cupy_tests/manipulation_tests/test_tiling.py ..................... [ 19%]
...........                                                              [ 19%]
tests/cupy_tests/manipulation_tests/test_transpose.py .................. [ 19%]
..........                                                               [ 19%]
tests/cupy_tests/math_tests/test_arithmetic.py ......................... [ 19%]
........................................................................ [ 19%]
........................................................................ [ 19%]
........................................................................ [ 20%]
........................................................................ [ 20%]
........................................................................ [ 20%]
........................................................................ [ 20%]
........................................................................ [ 20%]
........................................................................ [ 20%]
........................................................................ [ 20%]
........................................................................ [ 20%]
........................................................................ [ 20%]
........................................................................ [ 20%]
........................................................................ [ 21%]
........................................................................ [ 21%]
........................................................................ [ 21%]
........................................................................ [ 21%]
........................................................................ [ 21%]
........................................................................ [ 21%]
........................................................................ [ 21%]
........................................................................ [ 21%]
........................................................................ [ 21%]
........................................................................ [ 21%]
........................................................................ [ 22%]
........................................................................ [ 22%]
........................................................................ [ 22%]
........................................................................ [ 22%]
........................................................................ [ 22%]
........................................................................ [ 22%]
........................................................................ [ 22%]
........................................................................ [ 22%]
........................................................................ [ 22%]
........................................................................ [ 22%]
........................................................................ [ 23%]
........................................................................ [ 23%]
........................................................................ [ 23%]
........................................................................ [ 23%]
........................................................................ [ 23%]
........................................................................ [ 23%]
........................................................................ [ 23%]
........................................................................ [ 23%]
........................................................................ [ 23%]
........................................................................ [ 23%]
........................................................................ [ 24%]
........................................................................ [ 24%]
........................................................................ [ 24%]
........................................................................ [ 24%]
........................................................................ [ 24%]
........................................................................ [ 24%]
........................................................................ [ 24%]
........................................................................ [ 24%]
........................................................................ [ 24%]
........................................................................ [ 24%]
........................................................................ [ 25%]
........................................................................ [ 25%]
........................................................................ [ 25%]
........................................................................ [ 25%]
........................................................................ [ 25%]
........................................................................ [ 25%]
........................................................................ [ 25%]
........................................................................ [ 25%]
........................................................................ [ 25%]
........................................................................ [ 25%]
........................................................................ [ 26%]
........................................................................ [ 26%]
........................................................................ [ 26%]
........................................................................ [ 26%]
........................................................................ [ 26%]
........................................................................ [ 26%]
........................................................................ [ 26%]
........................................................................ [ 26%]
........................................................................ [ 26%]
........................................................................ [ 26%]
........................................................................ [ 27%]
........................................................................ [ 27%]
........................................................................ [ 27%]
........................................................................ [ 27%]
........................................................................ [ 27%]
........................................................................ [ 27%]
........................................................................ [ 27%]
........................................................................ [ 27%]
........................................................................ [ 27%]
........................................................................ [ 27%]
........................................................................ [ 28%]
........................................................................ [ 28%]
........................................................................ [ 28%]
........................................................................ [ 28%]
........................................................................ [ 28%]
........................................................................ [ 28%]
........................................................................ [ 28%]
........................................................................ [ 28%]
........................................................................ [ 28%]
........................................................................ [ 28%]
........................................................................ [ 29%]
........................................................................ [ 29%]
........................................................................ [ 29%]
........................................................................ [ 29%]
........................................................................ [ 29%]
........................................................................ [ 29%]
........................................................................ [ 29%]
........................................................................ [ 29%]
........................................................................ [ 29%]
........................................................................ [ 29%]
........................................................................ [ 30%]
........................................................................ [ 30%]
........................................................................ [ 30%]
........................................................................ [ 30%]
........................................................................ [ 30%]
........................................................................ [ 30%]
........................................................................ [ 30%]
........................................................................ [ 30%]
........................................................................ [ 30%]
........................................................................ [ 30%]
...........................                                              [ 31%]
tests/cupy_tests/math_tests/test_explog.py .........                     [ 31%]
tests/cupy_tests/math_tests/test_floating.py .......                     [ 31%]
tests/cupy_tests/math_tests/test_hyperbolic.py ......                    [ 31%]
tests/cupy_tests/math_tests/test_matmul.py ............................. [ 31%]
........................................................................ [ 31%]
........................................................................ [ 31%]
........................................................................ [ 31%]
...............................................                          [ 31%]
tests/cupy_tests/math_tests/test_misc.py ............................... [ 31%]
............................................x..x..x..................... [ 31%]
............................                                             [ 31%]
tests/cupy_tests/math_tests/test_rational.py ....                        [ 31%]
tests/cupy_tests/math_tests/test_rounding.py ........................... [ 31%]
..........................................                               [ 31%]
tests/cupy_tests/math_tests/test_special.py ...                          [ 31%]
tests/cupy_tests/math_tests/test_sumprod.py ............................ [ 31%]
....................................................ssssssssssssssss.... [ 31%]
........................................................................ [ 31%]
........................................................................ [ 32%]
........................................................................ [ 32%]
........................................................................ [ 32%]
........................................................................ [ 32%]
........................................................................ [ 32%]
........................................................................ [ 32%]
........................................................................ [ 32%]
..............................................................           [ 32%]
tests/cupy_tests/math_tests/test_trigonometric.py ...............        [ 32%]
tests/cupy_tests/math_tests/test_window.py ............................. [ 32%]
.....                                                                    [ 32%]
tests/cupy_tests/misc_tests/test_memory_ranges.py ................       [ 32%]
tests/cupy_tests/misc_tests/test_who.py ......                           [ 32%]
tests/cupy_tests/padding_tests/test_pad.py ............................. [ 32%]
..............................................                           [ 32%]
tests/cupy_tests/polynomial_tests/test_polynomial.py ................... [ 32%]
                                                                         [ 32%]
tests/cupy_tests/polynomial_tests/test_polyutils.py .................... [ 33%]
................                                                         [ 33%]
tests/cupy_tests/prof_tests/test_range.py ........                       [ 33%]
tests/cupy_tests/random_tests/test_bit_generator.py ssssssssssss         [ 33%]
tests/cupy_tests/random_tests/test_distributions.py .................... [ 33%]
........................................................................ [ 33%]
................................................F.F.F.F.F.F.F.F.F.F.F.F. [ 33%]
F.F.F.F.F.F.F.F.F.F.F.F................................................. [ 33%]
........................................................................ [ 33%]
........................................................................ [ 33%]
........................................................................ [ 33%]
........................................................................ [ 33%]
........................................................................ [ 33%]
........................................................................ [ 34%]
........................................................................ [ 34%]
........................................................................ [ 34%]
........................................................................ [ 34%]
........................................................................ [ 34%]
........................................................................ [ 34%]
.....F.F.F.F............................................................ [ 34%]
........................................................................ [ 34%]
.....                                                                    [ 34%]
tests/cupy_tests/random_tests/test_generator.py ........................ [ 34%]
........................................................................ [ 34%]
........................................................................ [ 34%]
.........................s.s............................................ [ 35%]
...............................x...............................          [ 35%]
tests/cupy_tests/random_tests/test_generator_api.py ssssssssssssssssssss [ 35%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss       [ 35%]
tests/cupy_tests/random_tests/test_init.py .                             [ 35%]
tests/cupy_tests/random_tests/test_permutations.py ...x...x............. [ 35%]
........................................................................ [ 35%]
........................................................................ [ 35%]
.............                                                            [ 35%]
tests/cupy_tests/random_tests/test_random.py .                           [ 35%]
tests/cupy_tests/random_tests/test_sample.py ...............x........x.. [ 35%]
............                                                             [ 35%]
tests/cupy_tests/sorting_tests/test_count.py ....                        [ 35%]
tests/cupy_tests/sorting_tests/test_search.py ssssssss........ssssssss.. [ 35%]
........................................................................ [ 35%]
........................................................................ [ 35%]
....................................................................     [ 35%]
tests/cupy_tests/sorting_tests/test_sort.py ............................ [ 35%]
........................................................................ [ 36%]
..........................................................x...........   [ 36%]
tests/cupy_tests/statistics_tests/test_correlation.py .................. [ 36%]
..............................x..x.xx...................                 [ 36%]
tests/cupy_tests/statistics_tests/test_histogram.py .................... [ 36%]
........................................................................ [ 36%]
........................................................................ [ 36%]
........................................................................ [ 36%]
........................................................................ [ 36%]
........................................................                 [ 36%]
tests/cupy_tests/statistics_tests/test_meanvar.py ...................... [ 36%]
........................................................................ [ 36%]
........................................................................ [ 36%]
..                                                                       [ 36%]
tests/cupy_tests/statistics_tests/test_order.py sssss................... [ 37%]
.........................                                                [ 37%]
tests/cupy_tests/testing_tests/test_array.py ........................... [ 37%]
...............................................                          [ 37%]
tests/cupy_tests/testing_tests/test_condition.py ................        [ 37%]
tests/cupy_tests/testing_tests/test_helper.py .......................... [ 37%]
........................................................................ [ 37%]
.....sssss..sssssss..ssxxxxxxxx................x..x.................     [ 37%]
tests/cupy_tests/testing_tests/test_parameterized.py ............s.s.s.s [ 37%]
....ssss......                                                           [ 37%]
tests/cupyx_tests/test_cupyx.py ..                                       [ 37%]
tests/cupyx_tests/test_lapack.py .s.s.s.s.....s.s.s.s.....s.s.s.s.....s. [ 37%]
s.s.s.............sssssssssssss                                          [ 37%]
tests/cupyx_tests/test_optimize.py sssssssss                             [ 37%]
tests/cupyx_tests/test_pinned_array.py ................................. [ 37%]
.......................................                                  [ 37%]
tests/cupyx_tests/test_rsqrt.py .                                        [ 37%]
tests/cupyx_tests/test_runtime.py s.                                     [ 37%]
tests/cupyx_tests/test_scatter.py ...                                    [ 37%]
tests/cupyx_tests/test_time.py .........                                 [ 37%]
tests/cupyx_tests/fallback_mode_tests/test_fallback.py ................. [ 37%]
........................................................................ [ 37%]
.........                                                                [ 37%]
tests/cupyx_tests/fallback_mode_tests/test_notifications.py .........    [ 37%]
tests/cupyx_tests/jit_tests/test_raw.py .....F....                       [ 37%]
tests/cupyx_tests/linalg_tests/test_solve.py xxxxxxxxxxxxxxxx....ssss    [ 37%]
tests/cupyx_tests/scipy_tests/test_get_array_module.py ..                [ 37%]
tests/cupyx_tests/scipy_tests/fft_tests/test_fft.py .................... [ 37%]
........................................................................ [ 38%]
........................................................................ [ 38%]
........................................................................ [ 38%]
........................................................................ [ 38%]
........................................................................ [ 38%]
........................................................................ [ 38%]
........................................................................ [ 38%]
........................................................................ [ 38%]
........................................................................ [ 38%]
........................................................................ [ 38%]
........................................................................ [ 39%]
........................................................................ [ 39%]
........................................................................ [ 39%]
........................................................................ [ 39%]
........................................................................ [ 39%]
........................................................................ [ 39%]
........................................................................ [ 39%]
........................................................................ [ 39%]
........................................................................ [ 39%]
........................................................................ [ 39%]
........................................................................ [ 40%]
........................................................................ [ 40%]
........................................................................ [ 40%]
........................................................................ [ 40%]
........................................................................ [ 40%]
........................................................................ [ 40%]
........................................................................ [ 40%]
........................................................................ [ 40%]
........................................................................ [ 40%]
........................................................................ [ 40%]
........................................................................ [ 41%]
........................................................................ [ 41%]
........................................................................ [ 41%]
........................................................................ [ 41%]
........................................................................ [ 41%]
........................................................................ [ 41%]
........................................................................ [ 41%]
........................................................................ [ 41%]
........................................................................ [ 41%]
........................................................................ [ 41%]
........................................................................ [ 42%]
........................................................................ [ 42%]
........................................................................ [ 42%]
........................................................................ [ 42%]
........................................................................ [ 42%]
........................................................................ [ 42%]
........................................................................ [ 42%]
........................................................................ [ 42%]
........................................................................ [ 42%]
........................................................................ [ 42%]
........................................................................ [ 43%]
........................................................................ [ 43%]
........................................................................ [ 43%]
........................................................................ [ 43%]
........................................................................ [ 43%]
........................................................................ [ 43%]
........................................................................ [ 43%]
........................................................................ [ 43%]
........................................................................ [ 43%]
........................................................................ [ 43%]
........................................................................ [ 44%]
........................................................................ [ 44%]
........................................................................ [ 44%]
........................................................................ [ 44%]
........................................................................ [ 44%]
........................................................................ [ 44%]
........................................................................ [ 44%]
........................................................................ [ 44%]
........................................................................ [ 44%]
........................................................................ [ 44%]
........................................................................ [ 45%]
........................................................................ [ 45%]
........................................................................ [ 45%]
........................................................................ [ 45%]
........................................................................ [ 45%]
........................................................................ [ 45%]
........................................................................ [ 45%]
........................................................................ [ 45%]
........................................................................ [ 45%]
........................................................................ [ 45%]
........................................................................ [ 46%]
........................................................................ [ 46%]
........................................................................ [ 46%]
........................................................................ [ 46%]
........................................................................ [ 46%]
........................................................................ [ 46%]
........................................................................ [ 46%]
........................................................................ [ 46%]
........................................................................ [ 46%]
........................................................................ [ 46%]
........................................................................ [ 47%]
........................................................................ [ 47%]
........................................................................ [ 47%]
........................................................................ [ 47%]
........................................................................ [ 47%]
........................................................................ [ 47%]
........................................................................ [ 47%]
........................................................................ [ 47%]
........................................................................ [ 47%]
........................................................................ [ 47%]
........................................................................ [ 48%]
........................................................................ [ 48%]
........................................................................ [ 48%]
.................sss.........sss.........sss.........sss.........sss.... [ 48%]
.....sss.........sss.........sss.........sss.........sss.........sss.... [ 48%]
.....sss.........sss.........sss.........sss.........sss.........sss.... [ 48%]
.....sss.........sss.........sss.........sss.........sss.........sss.... [ 48%]
.....sss.........sss.........sss.........sss.........sss.........sss.... [ 48%]
.....sss.........sss.........sss.........sss.........sss.........sss.... [ 48%]
.....sss.........sss.........sss.........sss.........sss.........sss.... [ 48%]
.....sss.........sss.........sss.........sss.........sss.........sss.... [ 49%]
.....sss.........sss.........sss.........sss.........sss.........sss.... [ 49%]
.....sss.........sss.........sss.........sss.........sss.........sss.... [ 49%]
.....sss.........sss.........sss.........sss.........sss.........sss.... [ 49%]
.....sss.........sss.........sss.........sss.........sss.........sss.... [ 49%]
.....sss.........sss.........sss.........sss.........sss.........sss.... [ 49%]
.....sss.........sss.........sss.........sss.........sss.........sss.... [ 49%]
.....sss.........sss.........sss.........sss.........sss.........sss.... [ 49%]
.....sss.........sss.........sss.........sss.........sss.........sss.... [ 49%]
.....sss.........sss.........sss.........sss.........sss.........sss.... [ 49%]
.....sss.........sss.........sss.........sss.........sss.........sss.... [ 50%]
.....sss.........sss.........sss.........sss.........sss.........sss.... [ 50%]
.....sss.........sss.........sss.........sss.........sss.........sss.... [ 50%]
.....sss.........sss.........sss.........sss.........sss.........sss.... [ 50%]
.....sss.........sss.........sss.........sss.........sss.........sss.... [ 50%]
.....sss.........sss.........sss.........sss.........sss.........sss.... [ 50%]
.....sss.........sss.........sss........................................ [ 50%]
........................................................................ [ 50%]
........................................................................ [ 50%]
........................................................................ [ 50%]
........................................................................ [ 51%]
........................................................................ [ 51%]
........................................................................ [ 51%]
........................................................................ [ 51%]
........................................................................ [ 51%]
......................................                                   [ 51%]
tests/cupyx_tests/scipy_tests/fft_tests/test_helper.py .                 [ 51%]
tests/cupyx_tests/scipy_tests/fftpack_tests/test_fftpack.py ............ [ 51%]
........................................................................ [ 51%]
........................................................................ [ 51%]
........................................................................ [ 51%]
........................................................................ [ 51%]
........................................................................ [ 52%]
........................................................................ [ 52%]
........................................................................ [ 52%]
........................................................................ [ 52%]
........................................................................ [ 52%]
........................................................................ [ 52%]
........................................................................ [ 52%]
........................................................................ [ 52%]
.........................                                                [ 52%]
tests/cupyx_tests/scipy_tests/linalg_tests/test_decomp_lu.py ........... [ 52%]
.............................................F.F.F.                      [ 52%]
tests/cupyx_tests/scipy_tests/linalg_tests/test_solve_triangular.py .... [ 52%]
........................................................................ [ 52%]
........................................................................ [ 53%]
........................................................................ [ 53%]
....................................................................     [ 53%]
tests/cupyx_tests/scipy_tests/linalg_tests/test_special_matrices.py .... [ 53%]
........................................................................ [ 53%]
.................................................                        [ 53%]
tests/cupyx_tests/scipy_tests/ndimage_tests/test_filters.py ...sss...... [ 53%]
sss......sss......sss......sss......sss.........sss......sss......sss... [ 53%]
...sss......sss......sss................................................ [ 53%]
...........................................................sss......sss. [ 53%]
.....sss......sss......sss......sss.........sss......sss......sss......s [ 53%]
ss......sss......sss.................................................... [ 53%]
.......................................................sss......sss..... [ 54%]
.sss......sss......sss......sss.........sss......sss......sss......sss.. [ 54%]
....sss......sss........................................................ [ 54%]
...................................................sss......sss......sss [ 54%]
......sss......sss......sss.........sss......sss......sss......sss...... [ 54%]
sss......sss............................................................ [ 54%]
...............................................sss......sss......sss.... [ 54%]
..sss......sss......sss.........sss......sss......sss......sss......sss. [ 54%]
.....sss................................................................ [ 54%]
...........................................sss......sss......sss......ss [ 54%]
s......sss......sss.........sss......sss......sss......sss......sss..... [ 55%]
.sss.................................................................... [ 55%]
.......................................sss......sss......sss......sss... [ 55%]
...sss......sss.........sss......sss......sss......sss......sss......sss [ 55%]
........................................................................ [ 55%]
...................................sss......sss......sss......sss......s [ 55%]
ss......sss.........sss......sss......sss......sss......sss......sss.... [ 55%]
........................................................................ [ 55%]
...............................sss......sss......sss......sss......sss.. [ 55%]
....sss.........sss......sss......sss......sss......sss......sss........ [ 55%]
........................................................................ [ 56%]
...........................sss......sss......sss......sss......sss...... [ 56%]
sss.........sss......sss......sss......sss......sss......sss............ [ 56%]
........................................................................ [ 56%]
.......................sss......sss......sss......sss......sss......sss. [ 56%]
........sss......sss......sss......sss......sss......sss................ [ 56%]
........................................................................ [ 56%]
...................sss......sss......sss......sss......sss......sss..... [ 56%]
....sss......sss......sss......sss......sss......sss.................... [ 56%]
........................................................................ [ 56%]
...............sss......sss......sss......sss......sss......sss......... [ 57%]
sss......sss......sss......sss......sss......sss........................ [ 57%]
........................................................................ [ 57%]
...........sss......sss......sss......sss......sss......sss.........sss. [ 57%]
.....sss......sss......sss......sss......sss............................ [ 57%]
........................................................................ [ 57%]
xxx....sss......sss......sss......sss......sss......sss....x..x.sss.x..x [ 57%]
.sss.x..x.sss......sss......sss......sss................................ [ 57%]
.....................................................x..x.............x. [ 57%]
......................................x.....x....x.....x......x.....x... [ 57%]
........................................................................ [ 58%]
........................................................................ [ 58%]
........................................................................ [ 58%]
........................................................................ [ 58%]
........................................................................ [ 58%]
........................................................................ [ 58%]
........................................................................ [ 58%]
........................................................................ [ 58%]
........................................................................ [ 58%]
........................F.F.F.F......................................... [ 58%]
........................................................................ [ 59%]
................................................F.F..................... [ 59%]
........................................................................ [ 59%]
................................................................F.F.F.F. [ 59%]
........................................................................ [ 59%]
........................................................................ [ 59%]
................F.F..................................................... [ 59%]
........................................................................ [ 59%]
........................................................................ [ 59%]
........................................................................ [ 59%]
........................................................................ [ 60%]
........................................................................ [ 60%]
........................................................................ [ 60%]
........................................................................ [ 60%]
........................................................................ [ 60%]
........................................................................ [ 60%]
........................s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s............. [ 60%]
........................................................................ [ 60%]
.........................s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.ss.s.s.s.s.s. [ 60%]
s.s.s.s.s.s.s.s.s.s.s.s................................................. [ 60%]
.............................................................s.s.s.s.s.s [ 61%]
.s.s.s.s.s.s.s.s.s.s.s.ss.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s............. [ 61%]
........................................................................ [ 61%]
.........................s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.ss.s.s.s.s.s. [ 61%]
s.s.s.s.s.s.s.s.s.s.s.s................................................. [ 61%]
.............................................................s.s.s.s.s.s [ 61%]
.s.s.s.s.s.s.s.s.s.s.s.ss.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s............. [ 61%]
........................................................................ [ 61%]
.........................s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.ss.s.s.s.s.s. [ 61%]
s.s.s.s.s.s.s.s.s.s.s.s................................................. [ 62%]
.............................................................s.s.s.s.s.s [ 62%]
.s.s.s.s.s.s.s.s.s.s.s.ss.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s............. [ 62%]
........................................................................ [ 62%]
.........................s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.s.ss.s.s.s.s.s. [ 62%]
s.s.s.s.s.s.s.s.s.s.s.s................................................. [ 62%]
.............................................................s.s.s.s.s.s [ 62%]
.s.s.s.s.s.s.s.s.s.s.s.ssss..sss..sss............sss..sss..sss.......... [ 62%]
..sss..sss..sss............sss..sss..sss............sss..sss..sss....... [ 62%]
.....sss..sss..sss............sss..sss..sss............sss..sss..sss.... [ 62%]
........sss..sss..sss............sss..sss..sss............sss..sss..sss. [ 63%]
...........sss..sss..sss................................................ [ 63%]
........................................................................ [ 63%]
....................................                                     [ 63%]
tests/cupyx_tests/scipy_tests/ndimage_tests/test_fourier.py ............ [ 63%]
........................................................................ [ 63%]
........................................................................ [ 63%]
........................................................................ [ 63%]
........................................................................ [ 63%]
........................................................................ [ 63%]
........................................................................ [ 63%]
........................................................................ [ 63%]
........................................                                 [ 64%]
tests/cupyx_tests/scipy_tests/ndimage_tests/test_interpolation.py ...... [ 64%]
........................................................................ [ 64%]
........................................................................ [ 64%]
........................................................................ [ 64%]
........................................................................ [ 64%]
........................................................................ [ 64%]
........................................................................ [ 64%]
........................................................................ [ 64%]
........................................................................ [ 64%]
........................................................................ [ 64%]
........................................................................ [ 65%]
........................................................................ [ 65%]
........................................................................ [ 65%]
........................................................................ [ 65%]
........................................................................ [ 65%]
........................................................................ [ 65%]
........................................................................ [ 65%]
........................................................................ [ 65%]
........................................................................ [ 65%]
........................................................................ [ 65%]
........................................................................ [ 66%]
........................................................................ [ 66%]
........................................................................ [ 66%]
........................................................................ [ 66%]
........................................................................ [ 66%]
........................................................................ [ 66%]
........................................................................ [ 66%]
........................................................................ [ 66%]
........................................................................ [ 66%]
........................................................................ [ 66%]
........................................................................ [ 67%]
........................................................................ [ 67%]
........................................................................ [ 67%]
........................................................................ [ 67%]
........................................................................ [ 67%]
........................................................................ [ 67%]
........................................................................ [ 67%]
........................................................................ [ 67%]
........................................................................ [ 67%]
........................................................................ [ 67%]
........................................................................ [ 68%]
........................................................................ [ 68%]
........................................................................ [ 68%]
........................................................................ [ 68%]
........................................................................ [ 68%]
........................................................................ [ 68%]
........................................................................ [ 68%]
........................................................................ [ 68%]
........................................................................ [ 68%]
........................................................................ [ 68%]
........................................................................ [ 69%]
........................................................................ [ 69%]
........................................................................ [ 69%]
........................................................................ [ 69%]
........................................................................ [ 69%]
........................................................................ [ 69%]
........................................................................ [ 69%]
........................................................................ [ 69%]
........................................................................ [ 69%]
........................................................................ [ 69%]
........................................................................ [ 70%]
........................................................................ [ 70%]
........................................................................ [ 70%]
........................................................................ [ 70%]
........................................................................ [ 70%]
........................................................................ [ 70%]
........................................................................ [ 70%]
........................................................................ [ 70%]
........................................................................ [ 70%]
........................................................................ [ 70%]
........................................................................ [ 71%]
........................................................................ [ 71%]
........................................................................ [ 71%]
........................................................................ [ 71%]
........................................................................ [ 71%]
........................................................................ [ 71%]
........................................................................ [ 71%]
........................................................................ [ 71%]
........................................................................ [ 71%]
........................................................................ [ 71%]
........................................................................ [ 72%]
........................................................................ [ 72%]
........................................................................ [ 72%]
........................................................................ [ 72%]
........................................................................ [ 72%]
........................................................................ [ 72%]
........................................................................ [ 72%]
........................................................................ [ 72%]
........................................................................ [ 72%]
........................................................................ [ 72%]
........................................................................ [ 73%]
........................................................................ [ 73%]
........................................................................ [ 73%]
........................................................................ [ 73%]
........................................................................ [ 73%]
........................................................................ [ 73%]
........................................................................ [ 73%]
........................................................................ [ 73%]
........................................................................ [ 73%]
........................................................................ [ 73%]
........................................................................ [ 74%]
........................................................................ [ 74%]
........................................................................ [ 74%]
........................................................................ [ 74%]
........................................................................ [ 74%]
........................................................................ [ 74%]
........................................................................ [ 74%]
........................................................................ [ 74%]
........................................................................ [ 74%]
........................................................................ [ 74%]
........................................................................ [ 75%]
........................................................................ [ 75%]
........................................................................ [ 75%]
........................................................................ [ 75%]
...............................x...x.x...x.x...x.x...x.............x...x [ 75%]
.x...x.x...x.x...x.............x...x.x...x.x...x.x...x.............x...x [ 75%]
.x...x.x...x.x...x.............x...x.x...x.x...x.x...x.............x...x [ 75%]
.x...x.x...x.x...x.............x...x.x...x.x...x.x...x.............x...x [ 75%]
.x...x.x...x.x...x.............x...x.x...x.x...x.x...x.............x...x [ 75%]
.x...x.x...x.x...x.............x...x.x...x.x...x.x...x.............x...x [ 75%]
.x...x.x...x.x...x.............x...x.x...x.x...x.x...x.............x...x [ 76%]
.x...x.x...x.x...x.............x...x.x...x.x...x.x...x.............x...x [ 76%]
.x...x.x...x.x...x.............x...x.x...x.x...x.x...x.............x...x [ 76%]
.x...x.x...x.x...x.............x...x.x...x.x...x.x...x.............x...x [ 76%]
.x...x.x...x.x...x.............x...x.x...x.x...x.x...x.............x...x [ 76%]
.x...x.x...x.x...x.............x...x.x...x.x...x.x...x.............x...x [ 76%]
.x...x.x...x.x...x.............x...x.x...x.x...x.x...x.............x...x [ 76%]
.x...x.x...x.x...x.............x...x.x...x.x...x.x...x.............x...x [ 76%]
.x...x.x...x.x...x.............x...x.x...x.x...x.x...x.............x...x [ 76%]
.x...x.x...x.x...x.............x...x.x...x.x...x.x...x.............x...x [ 76%]
.x...x.x...x.x...x...................................................... [ 77%]
........................................................................ [ 77%]
........................................................................ [ 77%]
........................................................................ [ 77%]
........................................................................ [ 77%]
........................................................................ [ 77%]
........................................................................ [ 77%]
........................................................................ [ 77%]
........................................................................ [ 77%]
........................................................................ [ 78%]
........................................................................ [ 78%]
........................................................................ [ 78%]
........................................................................ [ 78%]
........................................................................ [ 78%]
........................................................................ [ 78%]
........................................................................ [ 78%]
.....................s.................................................. [ 78%]
........................................................................ [ 78%]
........................................................................ [ 78%]
........................................................................ [ 79%]
.........................x.....x.....x.....x.....x.....x.....x.....x.... [ 79%]
.x.....x.....x.....x.......x........x..x..x........s.................... [ 79%]
........................................................................ [ 79%]
........................................................................ [ 79%]
........................................................................ [ 79%]
........................................................................ [ 79%]
........................................................................ [ 79%]
........................................................................ [ 79%]
........................................................................ [ 79%]
........................................................................ [ 80%]
........................................................................ [ 80%]
........................................................................ [ 80%]
.......x.....x....................x.....x....................x.....x.... [ 80%]
................x.....x....................x.....x....................x. [ 80%]
....x....................x.....x....................x.....x............. [ 80%]
........................................................................ [ 80%]
........................................................................ [ 80%]
........................................................................ [ 80%]
........................................s............................... [ 80%]
........................................................................ [ 81%]
........................................................................ [ 81%]
........................................................................ [ 81%]
........................................................................ [ 81%]
.................................ss..................................... [ 81%]
........................................................................ [ 81%]
........................................................................ [ 81%]
........................................................................ [ 81%]
........................................................................ [ 81%]
........................................................................ [ 81%]
........................................................................ [ 82%]
........................................................................ [ 82%]
........................................................................ [ 82%]
........................................................................ [ 82%]
........................................................................ [ 82%]
...........ssssssssssssssssssssssssssssssssssssssssssssssss              [ 82%]
tests/cupyx_tests/scipy_tests/ndimage_tests/test_measurements.py ....... [ 82%]
........................................................................ [ 82%]
........................................................................ [ 82%]
........................................................................ [ 82%]
........................................................................ [ 82%]
........................................................................ [ 83%]
........................................................................ [ 83%]
........................................................................ [ 83%]
........................................................................ [ 83%]
........................................................................ [ 83%]
........................................................................ [ 83%]
........................................................................ [ 83%]
........................................................................ [ 83%]
........................................................................ [ 83%]
........................................................................ [ 83%]
........................................................................ [ 84%]
........................................................................ [ 84%]
........................................................................ [ 84%]
........................................................................ [ 84%]
........................................................................ [ 84%]
........................................................................ [ 84%]
........................................................................ [ 84%]
........................................................................ [ 84%]
........................................................................ [ 84%]
........................................................................ [ 84%]
........................................................................ [ 85%]
........................................................................ [ 85%]
........................................................................ [ 85%]
........................................................................ [ 85%]
........................................................................ [ 85%]
........................................................................ [ 85%]
........................................................................ [ 85%]
........................................................................ [ 85%]
........................................................................ [ 85%]
........................................................................ [ 85%]
........................................................................ [ 86%]
........................................................................ [ 86%]
........................................................................ [ 86%]
.....xx..........xx..........xx..........xx..........xx..........F...... [ 86%]
.....xx..................................xx............................. [ 86%]
.....xx..........xx..........xx..........xx..........xx..........F...... [ 86%]
.....xx..................................xx............................. [ 86%]
........................................................................ [ 86%]
........................................................................ [ 86%]
...                                                                      [ 86%]
tests/cupyx_tests/scipy_tests/ndimage_tests/test_morphology.py ......... [ 86%]
......................s....s....s..s....s....s.......................... [ 86%]
..........s....s....s..s....s....s....................................s. [ 87%]
...s....s..s....s....s....................................s....s....s..s [ 87%]
....s....s....................................s....s....s..s....s....s.. [ 87%]
..................................s....s....s..s....s....s.............. [ 87%]
......................s....s....s..s....s....s.......................... [ 87%]
..........s....s....s..s....s....s....................................s. [ 87%]
...s....s..s....s....s....................................s....s....s..s [ 87%]
....s....s....................................s....s....s..s....s....s.. [ 87%]
..................................s....s....s..s....s....s.............. [ 87%]
......................s....s....s..s....s....s.......................... [ 87%]
..........s....s....s..s....s....s....................................s. [ 88%]
...s....s..s....s....s....................................s....s....s..s [ 88%]
....s....s....................................s....s....s..s....s....s.. [ 88%]
..................................s....s....s..s....s....s.............. [ 88%]
......................s....s....s..s....s....s.......................... [ 88%]
..........s....s....s..s....s....s....................................s. [ 88%]
...s....s..s....s....s....................................s....s....s..s [ 88%]
....s....s....................................s....s....s..s....s....s.. [ 88%]
..................................s....s....s..s....s....s.............. [ 88%]
........................................................................ [ 88%]
........................................................................ [ 89%]
........................................................................ [ 89%]
........................................................................ [ 89%]
........................................................................ [ 89%]
........................................................................ [ 89%]
........................................................................ [ 89%]
.......................................................................s [ 89%]
.s.s.............s.s.s.............s.s.s.............s.s.s.............s [ 89%]
.s.s.............s.s.s.............s.s.s.............s.s.s.............s [ 89%]
.s.s.............s.s.s.............s.s.s.............s.s.s.............s [ 89%]
.s.s.............s.s.s.............s.s.s.............s.s.s.............s [ 90%]
.s.s.............s.s.s.............s.s.s.............s.s.s.............s [ 90%]
.s.s.............s.s.s.............s.s.s.............s.s.s.............s [ 90%]
.s.s.............s.s.s.............s.s.s.............s.s.s.............s [ 90%]
.s.s.............s.s.s.............s.s.s.............s.s.s.............s [ 90%]
.s.s.............s.s.s.............s.s.s.............s.s.s.............s [ 90%]
.s.s.............s.s.s.............s.s.s.............s.s.s.............s [ 90%]
.s.s.............s.s.s.............s.s.s.............s.s.s.............s [ 90%]
.s.s.............s.s.s.............s.s.s.............s.s.s.............s [ 90%]
.s.s.............s.s.s.............s.s.s.............s.s.s.............s [ 90%]
.s.s.............s.s.s.............s.s.s.............s.s.s.............s [ 91%]
.s.s.............s.s.s.............s.s.s.............s.s.s.............s [ 91%]
.s.s.............s.s.s.............s.s.s.............s.s.s.............s [ 91%]
.s.s.............s.s.s.............s.s.s.............s.s.s.............s [ 91%]
.s.s.............s.s.s.............s.s.s.............s.s.s.............s [ 91%]
.s.s.............s.s.s.............s.s.s.............s.s.s.............s [ 91%]
.s.s.............s.s.s.............s.s.s.............s.s.s.............s [ 91%]
.s.s.............s.s.s.............s.s.s.............s.s.s.............s [ 91%]
.s.s.............s.s.s.............s.s.s.............s.s.s.............s [ 91%]
.s.s.............s.s.s.............s.s.s.............s.s.s.............s [ 91%]
.s.s.............s.s.s.............s.s.s.............s.s.s.............s [ 92%]
.s.s.............s.s.s.............s.s.s.............s.s.s.............s [ 92%]
.s.s.............s.s.s.............s.s.s.............s.s.s.............s [ 92%]
.s.s.............s.s.s.............s.s.s.............s.s.s.............s [ 92%]
.s.s.............s.s.s.............s.s.s.............s.s.s.............s [ 92%]
.s.s.............s.s.s.............s.s.s.............s.s.s.............s [ 92%]
.s.s.............s.s.s.............s.s.s.............s.s.s.............s [ 92%]
.s.s.............s.s.s.............s.s.s.............s.s.s.............s [ 92%]
.s.s.............s.s.s.............s.s.s.............s.s.s.............s [ 92%]
.s.s.............s.s.s.............s.s.s.............s.s.s.............s [ 92%]
.s.s.............s.s.s.............s.s.s.............s.s.s.............s [ 93%]
.s.s.............s.s.s.............s.s.s.............s.s.s.............s [ 93%]
.s.s.............s.s.s.............s.s.s.............s.s.s.............. [ 93%]
........................................................................ [ 93%]
......s....s....s....s....s....s....s....s....s....s....s....s......s... [ 93%]
.s....s....s....s....s....s....s....s....s....s....s.................... [ 93%]
..........................................s....s....s....s....s....s.... [ 93%]
s....s....s....s....s....s......s....s....s....s....s....s....s....s.... [ 93%]
s....s....s....s........................................................ [ 93%]
......s....s....s....s....s....s....s....s....s....s....s....s......s... [ 93%]
.s....s....s....s....s....s....s....s....s....s....s.................... [ 94%]
..........................................s....s....s....s....s....s.... [ 94%]
s....s....s....s....s....s......s....s....s....s....s....s....s....s.... [ 94%]
s....s....s....s........................................................ [ 94%]
......s....s....s....s....s....s....s....s....s....s....s....s......s... [ 94%]
.s....s....s....s....s....s....s....s....s....s....s.................... [ 94%]
..........................................s....s....s....s....s....s.... [ 94%]
s....s....s....s....s....s......s....s....s....s....s....s....s....s.... [ 94%]
s....s....s....s........................................................ [ 94%]
......s....s....s....s....s....s....s....s....s....s....s....s......s... [ 94%]
.s....s....s....s....s....s....s....s....s....s....s.................... [ 95%]
..........................................s....s....s....s....s....s.... [ 95%]
s....s....s....s....s....s......s....s....s....s....s....s....s....s.... [ 95%]
s....s....s....s........................................................ [ 95%]
......s....s....s....s....s....s....s....s....s....s....s....s......s... [ 95%]
.s....s....s....s....s....s....s....s....s....s....s.................... [ 95%]
..........................................s....s....s....s....s....s.... [ 95%]
s....s....s....s....s....s......s....s....s....s....s....s....s....s.... [ 95%]
s....s....s....s........................................................ [ 95%]
......s....s....s....s....s....s....s....s....s....s....s....s......s... [ 95%]
.s....s....s....s....s....s....s....s....s....s....s.................... [ 96%]
..........................................s....s....s....s....s....s.... [ 96%]
s....s....s....s....s....s......s....s....s....s....s....s....s....s.... [ 96%]
s....s....s....s........................................................ [ 96%]
........................................................................ [ 96%]
........................................................................ [ 96%]
........................................................................ [ 96%]
........................................................ssssssss........ [ 96%]
........................................................ssssssss........ [ 96%]
........................................................ssssssss........ [ 96%]
........................................................ssssssss........ [ 97%]
........................................................................ [ 97%]
........................................................................ [ 97%]
........................................................................ [ 97%]
........................................................................ [ 97%]
........................................................................ [ 97%]
........................................................................ [ 97%]
........................................................................ [ 97%]
........................................................................ [ 97%]
........................................................................ [ 98%]
........................................................................ [ 98%]
........................................................................ [ 98%]
........................................................................ [ 98%]
........................................................................ [ 98%]
........................................................................ [ 98%]
                                                                         [ 98%]
tests/cupyx_tests/scipy_tests/signal_tests/test_bsplines.py ............ [ 98%]
                                                                         [ 98%]
tests/cupyx_tests/scipy_tests/signal_tests/test_signaltools.py ......... [ 98%]
........................................................................ [ 98%]
...................................................FFFxxxxxxxxx......... [ 98%]
...........................xxxxxxxxxxxx................................. [ 98%]
...FFF......xxx..x.x..x.x..x.x..x.x..x.x..x.x..x.x..x.x..x.x..x.x..x.x.. [ 98%]
x.x..................................................................... [ 99%]
........................................................................ [ 99%]
........................................................................ [ 99%]
........................................................................ [ 99%]
........................................................................ [ 99%]
....................................                                     [ 99%]
tests/cupyx_tests/scipy_tests/sparse_tests/csgraph_tests/test_traversal.py s [ 99%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 99%]
sssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss  [ 99%]
tests/cupyx_tests/scipy_tests/special_tests/test_bessel.py ............  [ 99%]
tests/cupyx_tests/scipy_tests/special_tests/test_convex_analysis.py .... [ 99%]
.                                                                        [ 99%]
tests/cupyx_tests/scipy_tests/special_tests/test_digamma.py .....        [ 99%]
tests/cupyx_tests/scipy_tests/special_tests/test_erf.py ............     [ 99%]
tests/cupyx_tests/scipy_tests/special_tests/test_gamma.py ....           [ 99%]
tests/cupyx_tests/scipy_tests/special_tests/test_gammaln.py ....         [ 99%]
tests/cupyx_tests/scipy_tests/special_tests/test_polygamma.py ....       [ 99%]
tests/cupyx_tests/scipy_tests/special_tests/test_statistics.py ..        [ 99%]
tests/cupyx_tests/scipy_tests/special_tests/test_zeta.py ....            [ 99%]
tests/cupyx_tests/scipy_tests/stats_tests/test_distributions.py ........ [ 99%]
........................................................................ [ 99%]
........................................................................ [ 99%]
                                                                         [ 99%]
tests/cupyx_tests/tools_tests/test_install_library.py ......             [ 99%]
tests/example_tests/test_finance.py ...                                  [ 99%]
tests/example_tests/test_gemm.py .                                       [ 99%]
tests/example_tests/test_gmm.py ss                                       [ 99%]
tests/example_tests/test_kmeans.py sss                                   [ 99%]
tests/install_tests/test_build.py sx.                                    [ 99%]
tests/install_tests/test_utils.py ..                                     [100%]

=================================== FAILURES ===================================
______________ TestNdarrayCopy.test_copy_multi_device_with_stream ______________

self = <cupy_tests.core_tests.test_ndarray.TestNdarrayCopy testMethod=test_copy_multi_device_with_stream>

    @testing.multi_gpu(2)
    def test_copy_multi_device_with_stream(self):
        # Kernel that takes long enough then finally writes values.
        kern = cupy.RawKernel(
            _test_copy_multi_device_with_stream_src, 'wait_and_write')
    
        # Allocates a memory and launches the kernel on a device with its
        # stream.
        with cuda.Device(0):
            with cuda.Stream():
                a = cupy.zeros((2,), dtype=numpy.uint64)
                kern((1,), (1,), a)
    
        # D2D copy to another device with another stream should get the
        # original values of the memory before the kernel on the first device
        # finally makes the write.
        with cuda.Device(1):
            with cuda.Stream():
                b = a.copy()
>               testing.assert_array_equal(
                    b, numpy.array([0, 0], dtype=numpy.uint64))

tests/cupy_tests/core_tests/test_ndarray.py:217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([              1, 634248936320718], dtype=uint64)
y = array([0, 0], dtype=uint64), err_msg = '', verbose = True
strides_check = False

    def assert_array_equal(x, y, err_msg='', verbose=True, strides_check=False):
        """Raises an AssertionError if two array_like objects are not equal.
    
        Args:
             x(numpy.ndarray or cupy.ndarray): The actual object to check.
             y(numpy.ndarray or cupy.ndarray): The desired, expected object.
             strides_check(bool): If ``True``, consistency of strides is also
                 checked.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting values
                 are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_array_equal`
        """
>       numpy.testing.assert_array_equal(
            cupy.asnumpy(x), cupy.asnumpy(y), err_msg=err_msg,
            verbose=verbose)
E       AssertionError: 
E       Arrays are not equal
E       
E       Mismatched elements: 2 / 2 (100%)
E       Max absolute difference: 634248936320718
E       Max relative difference: inf
E        x: array([              1, 634248936320718], dtype=uint64)
E        y: array([0, 0], dtype=uint64)

cupy/testing/_array.py:91: AssertionError
_ TestScatterParametrized_param_3_{shape=(3, 4, 5), slices=(slice(None, None, None), [[1, 2], [0, -1]]), value=1}.test_scatter_max _

self = <<cupy_tests.core_tests.test_ndarray_scatter.TestScatterParametrized_param_3_{shape=(3, 4, 5), slices=(slice(None, Non...test_scatter_max>  parameter: {'shape': (3, 4, 5), 'slices': (slice(None, None, None), [[1, 2], [0, -1]]), 'value': 1}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float64'>

    @testing.for_dtypes([numpy.float32, numpy.int32, numpy.uint32,
                         numpy.uint64, numpy.ulonglong, numpy.float64])
    @testing.numpy_cupy_array_equal()
    def test_scatter_max(self, xp, dtype):
        a = xp.zeros(self.shape, dtype)
        if xp is cupy:
>           a.scatter_max(self.slices, self.value)

tests/cupy_tests/core_tests/test_ndarray_scatter.py:135: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/core.pyx:1402: in cupy._core.core.ndarray.scatter_max
    _indexing._ndarray_scatter_max(self, slices, value)
cupy/_core/_routines_indexing.pyx:130: in cupy._core._routines_indexing._ndarray_scatter_max
    _scatter_op(self, slices, value, 'max')
cupy/_core/_routines_indexing.pyx:941: in cupy._core._routines_indexing._scatter_op
    _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
cupy/_core/_routines_indexing.pyx:878: in cupy._core._routines_indexing._scatter_op_single
    _scatter_max_kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03bc30a970>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/test_ndarray_scatter.py", line 135, in test_scatter_max
E           a.scatter_max(self.slices, self.value)
E         File "cupy/_core/core.pyx", line 1402, in cupy._core.core.ndarray.scatter_max
E           _indexing._ndarray_scatter_max(self, slices, value)
E         File "cupy/_core/_routines_indexing.pyx", line 130, in cupy._core._routines_indexing._ndarray_scatter_max
E           _scatter_op(self, slices, value, 'max')
E         File "cupy/_core/_routines_indexing.pyx", line 941, in cupy._core._routines_indexing._scatter_op
E           _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
E         File "cupy/_core/_routines_indexing.pyx", line 878, in cupy._core._routines_indexing._scatter_op_single
E           _scatter_max_kernel(
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestScatterParametrized_param_3_{shape=(3, 4, 5), slices=(slice(None, None, None), [[1, 2], [0, -1]]), value=1}.test_scatter_min _

self = <<cupy_tests.core_tests.test_ndarray_scatter.TestScatterParametrized_param_3_{shape=(3, 4, 5), slices=(slice(None, Non...test_scatter_min>  parameter: {'shape': (3, 4, 5), 'slices': (slice(None, None, None), [[1, 2], [0, -1]]), 'value': 1}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float32'>

    @testing.for_dtypes([numpy.float32, numpy.int32, numpy.uint32,
                         numpy.uint64, numpy.ulonglong, numpy.float64])
    @testing.numpy_cupy_array_equal()
    def test_scatter_min(self, xp, dtype):
        a = xp.zeros(self.shape, dtype)
        if xp is cupy:
>           a.scatter_min(self.slices, self.value)

tests/cupy_tests/core_tests/test_ndarray_scatter.py:146: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/core.pyx:1411: in cupy._core.core.ndarray.scatter_min
    _indexing._ndarray_scatter_min(self, slices, value)
cupy/_core/_routines_indexing.pyx:134: in cupy._core._routines_indexing._ndarray_scatter_min
    _scatter_op(self, slices, value, 'min')
cupy/_core/_routines_indexing.pyx:941: in cupy._core._routines_indexing._scatter_op
    _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
cupy/_core/_routines_indexing.pyx:887: in cupy._core._routines_indexing._scatter_op_single
    _scatter_min_kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4f82a30>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/test_ndarray_scatter.py", line 146, in test_scatter_min
E           a.scatter_min(self.slices, self.value)
E         File "cupy/_core/core.pyx", line 1411, in cupy._core.core.ndarray.scatter_min
E           _indexing._ndarray_scatter_min(self, slices, value)
E         File "cupy/_core/_routines_indexing.pyx", line 134, in cupy._core._routines_indexing._ndarray_scatter_min
E           _scatter_op(self, slices, value, 'min')
E         File "cupy/_core/_routines_indexing.pyx", line 941, in cupy._core._routines_indexing._scatter_op
E           _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
E         File "cupy/_core/_routines_indexing.pyx", line 887, in cupy._core._routines_indexing._scatter_op_single
E           _scatter_min_kernel(
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
_ TestScatterParametrized_param_4_{shape=(3, 4, 5), slices=(slice(None, None, None), slice(None, None, None), [[1, 2], [0, 3]]), value=1}.test_scatter_add _

self = <<cupy_tests.core_tests.test_ndarray_scatter.TestScatterParametrized_param_4_{shape=(3, 4, 5), slices=(slice(None, Non...eter: {'shape': (3, 4, 5), 'slices': (slice(None, None, None), slice(None, None, None), [[1, 2], [0, 3]]), 'value': 1}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float32'>

    @testing.for_dtypes([numpy.float32, numpy.int32, numpy.uint32,
                         numpy.uint64, numpy.ulonglong, numpy.float16,
                         numpy.float64])
    @testing.numpy_cupy_array_equal()
    def test_scatter_add(self, xp, dtype):
        if cupy.cuda.runtime.is_hip and dtype == numpy.float16:
            pytest.skip('atomicAdd does not support float16 in HIP')
        a = xp.zeros(self.shape, dtype)
        if xp is cupy:
>           a.scatter_add(self.slices, self.value)

tests/cupy_tests/core_tests/test_ndarray_scatter.py:124: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/core.pyx:1393: in cupy._core.core.ndarray.scatter_add
    _indexing._ndarray_scatter_add(self, slices, value)
cupy/_core/_routines_indexing.pyx:126: in cupy._core._routines_indexing._ndarray_scatter_add
    _scatter_op(self, slices, value, 'add')
cupy/_core/_routines_indexing.pyx:941: in cupy._core._routines_indexing._scatter_op
    _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
cupy/_core/_routines_indexing.pyx:869: in cupy._core._routines_indexing._scatter_op_single
    _scatter_add_kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4fc9280>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/test_ndarray_scatter.py", line 124, in test_scatter_add
E           a.scatter_add(self.slices, self.value)
E         File "cupy/_core/core.pyx", line 1393, in cupy._core.core.ndarray.scatter_add
E           _indexing._ndarray_scatter_add(self, slices, value)
E         File "cupy/_core/_routines_indexing.pyx", line 126, in cupy._core._routines_indexing._ndarray_scatter_add
E           _scatter_op(self, slices, value, 'add')
E         File "cupy/_core/_routines_indexing.pyx", line 941, in cupy._core._routines_indexing._scatter_op
E           _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
E         File "cupy/_core/_routines_indexing.pyx", line 869, in cupy._core._routines_indexing._scatter_op_single
E           _scatter_add_kernel(
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
_ TestScatterParametrized_param_4_{shape=(3, 4, 5), slices=(slice(None, None, None), slice(None, None, None), [[1, 2], [0, 3]]), value=1}.test_scatter_max _

self = <<cupy_tests.core_tests.test_ndarray_scatter.TestScatterParametrized_param_4_{shape=(3, 4, 5), slices=(slice(None, Non...eter: {'shape': (3, 4, 5), 'slices': (slice(None, None, None), slice(None, None, None), [[1, 2], [0, 3]]), 'value': 1}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float32'>

    @testing.for_dtypes([numpy.float32, numpy.int32, numpy.uint32,
                         numpy.uint64, numpy.ulonglong, numpy.float64])
    @testing.numpy_cupy_array_equal()
    def test_scatter_max(self, xp, dtype):
        a = xp.zeros(self.shape, dtype)
        if xp is cupy:
>           a.scatter_max(self.slices, self.value)

tests/cupy_tests/core_tests/test_ndarray_scatter.py:135: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/core.pyx:1402: in cupy._core.core.ndarray.scatter_max
    _indexing._ndarray_scatter_max(self, slices, value)
cupy/_core/_routines_indexing.pyx:130: in cupy._core._routines_indexing._ndarray_scatter_max
    _scatter_op(self, slices, value, 'max')
cupy/_core/_routines_indexing.pyx:941: in cupy._core._routines_indexing._scatter_op
    _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
cupy/_core/_routines_indexing.pyx:878: in cupy._core._routines_indexing._scatter_op_single
    _scatter_max_kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4f823a0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/test_ndarray_scatter.py", line 135, in test_scatter_max
E           a.scatter_max(self.slices, self.value)
E         File "cupy/_core/core.pyx", line 1402, in cupy._core.core.ndarray.scatter_max
E           _indexing._ndarray_scatter_max(self, slices, value)
E         File "cupy/_core/_routines_indexing.pyx", line 130, in cupy._core._routines_indexing._ndarray_scatter_max
E           _scatter_op(self, slices, value, 'max')
E         File "cupy/_core/_routines_indexing.pyx", line 941, in cupy._core._routines_indexing._scatter_op
E           _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
E         File "cupy/_core/_routines_indexing.pyx", line 878, in cupy._core._routines_indexing._scatter_op_single
E           _scatter_max_kernel(
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
_ TestScatterParametrized_param_4_{shape=(3, 4, 5), slices=(slice(None, None, None), slice(None, None, None), [[1, 2], [0, 3]]), value=1}.test_scatter_min _

self = <<cupy_tests.core_tests.test_ndarray_scatter.TestScatterParametrized_param_4_{shape=(3, 4, 5), slices=(slice(None, Non...eter: {'shape': (3, 4, 5), 'slices': (slice(None, None, None), slice(None, None, None), [[1, 2], [0, 3]]), 'value': 1}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float32'>

    @testing.for_dtypes([numpy.float32, numpy.int32, numpy.uint32,
                         numpy.uint64, numpy.ulonglong, numpy.float64])
    @testing.numpy_cupy_array_equal()
    def test_scatter_min(self, xp, dtype):
        a = xp.zeros(self.shape, dtype)
        if xp is cupy:
>           a.scatter_min(self.slices, self.value)

tests/cupy_tests/core_tests/test_ndarray_scatter.py:146: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/core.pyx:1411: in cupy._core.core.ndarray.scatter_min
    _indexing._ndarray_scatter_min(self, slices, value)
cupy/_core/_routines_indexing.pyx:134: in cupy._core._routines_indexing._ndarray_scatter_min
    _scatter_op(self, slices, value, 'min')
cupy/_core/_routines_indexing.pyx:941: in cupy._core._routines_indexing._scatter_op
    _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
cupy/_core/_routines_indexing.pyx:887: in cupy._core._routines_indexing._scatter_op_single
    _scatter_min_kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4fc9760>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/test_ndarray_scatter.py", line 146, in test_scatter_min
E           a.scatter_min(self.slices, self.value)
E         File "cupy/_core/core.pyx", line 1411, in cupy._core.core.ndarray.scatter_min
E           _indexing._ndarray_scatter_min(self, slices, value)
E         File "cupy/_core/_routines_indexing.pyx", line 134, in cupy._core._routines_indexing._ndarray_scatter_min
E           _scatter_op(self, slices, value, 'min')
E         File "cupy/_core/_routines_indexing.pyx", line 941, in cupy._core._routines_indexing._scatter_op
E           _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
E         File "cupy/_core/_routines_indexing.pyx", line 887, in cupy._core._routines_indexing._scatter_op_single
E           _scatter_min_kernel(
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
_ TestScatterParametrized_param_7_{shape=(2, 3), slices=(slice(1, 2, None), [1, 0, 1]), value=1}.test_scatter_add _

self = <<cupy_tests.core_tests.test_ndarray_scatter.TestScatterParametrized_param_7_{shape=(2, 3), slices=(slice(1, 2, None),...ue=1} testMethod=test_scatter_add>  parameter: {'shape': (2, 3), 'slices': (slice(1, 2, None), [1, 0, 1]), 'value': 1}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float32'>

    @testing.for_dtypes([numpy.float32, numpy.int32, numpy.uint32,
                         numpy.uint64, numpy.ulonglong, numpy.float16,
                         numpy.float64])
    @testing.numpy_cupy_array_equal()
    def test_scatter_add(self, xp, dtype):
        if cupy.cuda.runtime.is_hip and dtype == numpy.float16:
            pytest.skip('atomicAdd does not support float16 in HIP')
        a = xp.zeros(self.shape, dtype)
        if xp is cupy:
>           a.scatter_add(self.slices, self.value)

tests/cupy_tests/core_tests/test_ndarray_scatter.py:124: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/core.pyx:1393: in cupy._core.core.ndarray.scatter_add
    _indexing._ndarray_scatter_add(self, slices, value)
cupy/_core/_routines_indexing.pyx:126: in cupy._core._routines_indexing._ndarray_scatter_add
    _scatter_op(self, slices, value, 'add')
cupy/_core/_routines_indexing.pyx:941: in cupy._core._routines_indexing._scatter_op
    _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
cupy/_core/_routines_indexing.pyx:869: in cupy._core._routines_indexing._scatter_op_single
    _scatter_add_kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b5274670>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/test_ndarray_scatter.py", line 124, in test_scatter_add
E           a.scatter_add(self.slices, self.value)
E         File "cupy/_core/core.pyx", line 1393, in cupy._core.core.ndarray.scatter_add
E           _indexing._ndarray_scatter_add(self, slices, value)
E         File "cupy/_core/_routines_indexing.pyx", line 126, in cupy._core._routines_indexing._ndarray_scatter_add
E           _scatter_op(self, slices, value, 'add')
E         File "cupy/_core/_routines_indexing.pyx", line 941, in cupy._core._routines_indexing._scatter_op
E           _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
E         File "cupy/_core/_routines_indexing.pyx", line 869, in cupy._core._routines_indexing._scatter_op_single
E           _scatter_add_kernel(
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
_ TestScatterParametrized_param_7_{shape=(2, 3), slices=(slice(1, 2, None), [1, 0, 1]), value=1}.test_scatter_max _

self = <<cupy_tests.core_tests.test_ndarray_scatter.TestScatterParametrized_param_7_{shape=(2, 3), slices=(slice(1, 2, None),...ue=1} testMethod=test_scatter_max>  parameter: {'shape': (2, 3), 'slices': (slice(1, 2, None), [1, 0, 1]), 'value': 1}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float32'>

    @testing.for_dtypes([numpy.float32, numpy.int32, numpy.uint32,
                         numpy.uint64, numpy.ulonglong, numpy.float64])
    @testing.numpy_cupy_array_equal()
    def test_scatter_max(self, xp, dtype):
        a = xp.zeros(self.shape, dtype)
        if xp is cupy:
>           a.scatter_max(self.slices, self.value)

tests/cupy_tests/core_tests/test_ndarray_scatter.py:135: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/core.pyx:1402: in cupy._core.core.ndarray.scatter_max
    _indexing._ndarray_scatter_max(self, slices, value)
cupy/_core/_routines_indexing.pyx:130: in cupy._core._routines_indexing._ndarray_scatter_max
    _scatter_op(self, slices, value, 'max')
cupy/_core/_routines_indexing.pyx:941: in cupy._core._routines_indexing._scatter_op
    _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
cupy/_core/_routines_indexing.pyx:878: in cupy._core._routines_indexing._scatter_op_single
    _scatter_max_kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4f0d490>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/test_ndarray_scatter.py", line 135, in test_scatter_max
E           a.scatter_max(self.slices, self.value)
E         File "cupy/_core/core.pyx", line 1402, in cupy._core.core.ndarray.scatter_max
E           _indexing._ndarray_scatter_max(self, slices, value)
E         File "cupy/_core/_routines_indexing.pyx", line 130, in cupy._core._routines_indexing._ndarray_scatter_max
E           _scatter_op(self, slices, value, 'max')
E         File "cupy/_core/_routines_indexing.pyx", line 941, in cupy._core._routines_indexing._scatter_op
E           _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
E         File "cupy/_core/_routines_indexing.pyx", line 878, in cupy._core._routines_indexing._scatter_op_single
E           _scatter_max_kernel(
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
_ TestScatterParametrized_param_7_{shape=(2, 3), slices=(slice(1, 2, None), [1, 0, 1]), value=1}.test_scatter_min _

self = <<cupy_tests.core_tests.test_ndarray_scatter.TestScatterParametrized_param_7_{shape=(2, 3), slices=(slice(1, 2, None),...ue=1} testMethod=test_scatter_min>  parameter: {'shape': (2, 3), 'slices': (slice(1, 2, None), [1, 0, 1]), 'value': 1}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float32'>

    @testing.for_dtypes([numpy.float32, numpy.int32, numpy.uint32,
                         numpy.uint64, numpy.ulonglong, numpy.float64])
    @testing.numpy_cupy_array_equal()
    def test_scatter_min(self, xp, dtype):
        a = xp.zeros(self.shape, dtype)
        if xp is cupy:
>           a.scatter_min(self.slices, self.value)

tests/cupy_tests/core_tests/test_ndarray_scatter.py:146: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/core.pyx:1411: in cupy._core.core.ndarray.scatter_min
    _indexing._ndarray_scatter_min(self, slices, value)
cupy/_core/_routines_indexing.pyx:134: in cupy._core._routines_indexing._ndarray_scatter_min
    _scatter_op(self, slices, value, 'min')
cupy/_core/_routines_indexing.pyx:941: in cupy._core._routines_indexing._scatter_op
    _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
cupy/_core/_routines_indexing.pyx:887: in cupy._core._routines_indexing._scatter_op_single
    _scatter_min_kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03c49f14f0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/test_ndarray_scatter.py", line 146, in test_scatter_min
E           a.scatter_min(self.slices, self.value)
E         File "cupy/_core/core.pyx", line 1411, in cupy._core.core.ndarray.scatter_min
E           _indexing._ndarray_scatter_min(self, slices, value)
E         File "cupy/_core/_routines_indexing.pyx", line 134, in cupy._core._routines_indexing._ndarray_scatter_min
E           _scatter_op(self, slices, value, 'min')
E         File "cupy/_core/_routines_indexing.pyx", line 941, in cupy._core._routines_indexing._scatter_op
E           _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
E         File "cupy/_core/_routines_indexing.pyx", line 887, in cupy._core._routines_indexing._scatter_op_single
E           _scatter_min_kernel(
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
_ TestScatterParametrized_param_8_{shape=(3, 4, 5), slices=(slice(None, None, None), slice(1, 2, None), [[1, 3], [0, 2]]), value=1}.test_scatter_add _

self = <<cupy_tests.core_tests.test_ndarray_scatter.TestScatterParametrized_param_8_{shape=(3, 4, 5), slices=(slice(None, Non... parameter: {'shape': (3, 4, 5), 'slices': (slice(None, None, None), slice(1, 2, None), [[1, 3], [0, 2]]), 'value': 1}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float32'>

    @testing.for_dtypes([numpy.float32, numpy.int32, numpy.uint32,
                         numpy.uint64, numpy.ulonglong, numpy.float16,
                         numpy.float64])
    @testing.numpy_cupy_array_equal()
    def test_scatter_add(self, xp, dtype):
        if cupy.cuda.runtime.is_hip and dtype == numpy.float16:
            pytest.skip('atomicAdd does not support float16 in HIP')
        a = xp.zeros(self.shape, dtype)
        if xp is cupy:
>           a.scatter_add(self.slices, self.value)

tests/cupy_tests/core_tests/test_ndarray_scatter.py:124: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/core.pyx:1393: in cupy._core.core.ndarray.scatter_add
    _indexing._ndarray_scatter_add(self, slices, value)
cupy/_core/_routines_indexing.pyx:126: in cupy._core._routines_indexing._ndarray_scatter_add
    _scatter_op(self, slices, value, 'add')
cupy/_core/_routines_indexing.pyx:941: in cupy._core._routines_indexing._scatter_op
    _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
cupy/_core/_routines_indexing.pyx:869: in cupy._core._routines_indexing._scatter_op_single
    _scatter_add_kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03c51034c0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/test_ndarray_scatter.py", line 124, in test_scatter_add
E           a.scatter_add(self.slices, self.value)
E         File "cupy/_core/core.pyx", line 1393, in cupy._core.core.ndarray.scatter_add
E           _indexing._ndarray_scatter_add(self, slices, value)
E         File "cupy/_core/_routines_indexing.pyx", line 126, in cupy._core._routines_indexing._ndarray_scatter_add
E           _scatter_op(self, slices, value, 'add')
E         File "cupy/_core/_routines_indexing.pyx", line 941, in cupy._core._routines_indexing._scatter_op
E           _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
E         File "cupy/_core/_routines_indexing.pyx", line 869, in cupy._core._routines_indexing._scatter_op_single
E           _scatter_add_kernel(
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
_ TestScatterParametrized_param_8_{shape=(3, 4, 5), slices=(slice(None, None, None), slice(1, 2, None), [[1, 3], [0, 2]]), value=1}.test_scatter_max _

self = <<cupy_tests.core_tests.test_ndarray_scatter.TestScatterParametrized_param_8_{shape=(3, 4, 5), slices=(slice(None, Non... parameter: {'shape': (3, 4, 5), 'slices': (slice(None, None, None), slice(1, 2, None), [[1, 3], [0, 2]]), 'value': 1}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float32'>

    @testing.for_dtypes([numpy.float32, numpy.int32, numpy.uint32,
                         numpy.uint64, numpy.ulonglong, numpy.float64])
    @testing.numpy_cupy_array_equal()
    def test_scatter_max(self, xp, dtype):
        a = xp.zeros(self.shape, dtype)
        if xp is cupy:
>           a.scatter_max(self.slices, self.value)

tests/cupy_tests/core_tests/test_ndarray_scatter.py:135: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/core.pyx:1402: in cupy._core.core.ndarray.scatter_max
    _indexing._ndarray_scatter_max(self, slices, value)
cupy/_core/_routines_indexing.pyx:130: in cupy._core._routines_indexing._ndarray_scatter_max
    _scatter_op(self, slices, value, 'max')
cupy/_core/_routines_indexing.pyx:941: in cupy._core._routines_indexing._scatter_op
    _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
cupy/_core/_routines_indexing.pyx:878: in cupy._core._routines_indexing._scatter_op_single
    _scatter_max_kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03bc066d30>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/test_ndarray_scatter.py", line 135, in test_scatter_max
E           a.scatter_max(self.slices, self.value)
E         File "cupy/_core/core.pyx", line 1402, in cupy._core.core.ndarray.scatter_max
E           _indexing._ndarray_scatter_max(self, slices, value)
E         File "cupy/_core/_routines_indexing.pyx", line 130, in cupy._core._routines_indexing._ndarray_scatter_max
E           _scatter_op(self, slices, value, 'max')
E         File "cupy/_core/_routines_indexing.pyx", line 941, in cupy._core._routines_indexing._scatter_op
E           _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
E         File "cupy/_core/_routines_indexing.pyx", line 878, in cupy._core._routines_indexing._scatter_op_single
E           _scatter_max_kernel(
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
_ TestScatterParametrized_param_8_{shape=(3, 4, 5), slices=(slice(None, None, None), slice(1, 2, None), [[1, 3], [0, 2]]), value=1}.test_scatter_min _

self = <<cupy_tests.core_tests.test_ndarray_scatter.TestScatterParametrized_param_8_{shape=(3, 4, 5), slices=(slice(None, Non... parameter: {'shape': (3, 4, 5), 'slices': (slice(None, None, None), slice(1, 2, None), [[1, 3], [0, 2]]), 'value': 1}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float32'>

    @testing.for_dtypes([numpy.float32, numpy.int32, numpy.uint32,
                         numpy.uint64, numpy.ulonglong, numpy.float64])
    @testing.numpy_cupy_array_equal()
    def test_scatter_min(self, xp, dtype):
        a = xp.zeros(self.shape, dtype)
        if xp is cupy:
>           a.scatter_min(self.slices, self.value)

tests/cupy_tests/core_tests/test_ndarray_scatter.py:146: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/core.pyx:1411: in cupy._core.core.ndarray.scatter_min
    _indexing._ndarray_scatter_min(self, slices, value)
cupy/_core/_routines_indexing.pyx:134: in cupy._core._routines_indexing._ndarray_scatter_min
    _scatter_op(self, slices, value, 'min')
cupy/_core/_routines_indexing.pyx:941: in cupy._core._routines_indexing._scatter_op
    _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
cupy/_core/_routines_indexing.pyx:887: in cupy._core._routines_indexing._scatter_op_single
    _scatter_min_kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b69499a0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/test_ndarray_scatter.py", line 146, in test_scatter_min
E           a.scatter_min(self.slices, self.value)
E         File "cupy/_core/core.pyx", line 1411, in cupy._core.core.ndarray.scatter_min
E           _indexing._ndarray_scatter_min(self, slices, value)
E         File "cupy/_core/_routines_indexing.pyx", line 134, in cupy._core._routines_indexing._ndarray_scatter_min
E           _scatter_op(self, slices, value, 'min')
E         File "cupy/_core/_routines_indexing.pyx", line 941, in cupy._core._routines_indexing._scatter_op
E           _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
E         File "cupy/_core/_routines_indexing.pyx", line 887, in cupy._core._routines_indexing._scatter_op_single
E           _scatter_min_kernel(
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
_ TestScatterParametrized_param_9_{shape=(3, 4, 5), slices=(None, [1, -1]), value=1}.test_scatter_add _

self = <<cupy_tests.core_tests.test_ndarray_scatter.TestScatterParametrized_param_9_{shape=(3, 4, 5), slices=(None, [1, -1]), value=1} testMethod=test_scatter_add>  parameter: {'shape': (3, 4, 5), 'slices': (None, [1, -1]), 'value': 1}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float32'>

    @testing.for_dtypes([numpy.float32, numpy.int32, numpy.uint32,
                         numpy.uint64, numpy.ulonglong, numpy.float16,
                         numpy.float64])
    @testing.numpy_cupy_array_equal()
    def test_scatter_add(self, xp, dtype):
        if cupy.cuda.runtime.is_hip and dtype == numpy.float16:
            pytest.skip('atomicAdd does not support float16 in HIP')
        a = xp.zeros(self.shape, dtype)
        if xp is cupy:
>           a.scatter_add(self.slices, self.value)

tests/cupy_tests/core_tests/test_ndarray_scatter.py:124: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/core.pyx:1393: in cupy._core.core.ndarray.scatter_add
    _indexing._ndarray_scatter_add(self, slices, value)
cupy/_core/_routines_indexing.pyx:126: in cupy._core._routines_indexing._ndarray_scatter_add
    _scatter_op(self, slices, value, 'add')
cupy/_core/_routines_indexing.pyx:941: in cupy._core._routines_indexing._scatter_op
    _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
cupy/_core/_routines_indexing.pyx:869: in cupy._core._routines_indexing._scatter_op_single
    _scatter_add_kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4e70ee0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/test_ndarray_scatter.py", line 124, in test_scatter_add
E           a.scatter_add(self.slices, self.value)
E         File "cupy/_core/core.pyx", line 1393, in cupy._core.core.ndarray.scatter_add
E           _indexing._ndarray_scatter_add(self, slices, value)
E         File "cupy/_core/_routines_indexing.pyx", line 126, in cupy._core._routines_indexing._ndarray_scatter_add
E           _scatter_op(self, slices, value, 'add')
E         File "cupy/_core/_routines_indexing.pyx", line 941, in cupy._core._routines_indexing._scatter_op
E           _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
E         File "cupy/_core/_routines_indexing.pyx", line 869, in cupy._core._routines_indexing._scatter_op_single
E           _scatter_add_kernel(
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
_ TestScatterParametrized_param_9_{shape=(3, 4, 5), slices=(None, [1, -1]), value=1}.test_scatter_max _

self = <<cupy_tests.core_tests.test_ndarray_scatter.TestScatterParametrized_param_9_{shape=(3, 4, 5), slices=(None, [1, -1]), value=1} testMethod=test_scatter_max>  parameter: {'shape': (3, 4, 5), 'slices': (None, [1, -1]), 'value': 1}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float32'>

    @testing.for_dtypes([numpy.float32, numpy.int32, numpy.uint32,
                         numpy.uint64, numpy.ulonglong, numpy.float64])
    @testing.numpy_cupy_array_equal()
    def test_scatter_max(self, xp, dtype):
        a = xp.zeros(self.shape, dtype)
        if xp is cupy:
>           a.scatter_max(self.slices, self.value)

tests/cupy_tests/core_tests/test_ndarray_scatter.py:135: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/core.pyx:1402: in cupy._core.core.ndarray.scatter_max
    _indexing._ndarray_scatter_max(self, slices, value)
cupy/_core/_routines_indexing.pyx:130: in cupy._core._routines_indexing._ndarray_scatter_max
    _scatter_op(self, slices, value, 'max')
cupy/_core/_routines_indexing.pyx:941: in cupy._core._routines_indexing._scatter_op
    _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
cupy/_core/_routines_indexing.pyx:878: in cupy._core._routines_indexing._scatter_op_single
    _scatter_max_kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4f0d880>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/test_ndarray_scatter.py", line 135, in test_scatter_max
E           a.scatter_max(self.slices, self.value)
E         File "cupy/_core/core.pyx", line 1402, in cupy._core.core.ndarray.scatter_max
E           _indexing._ndarray_scatter_max(self, slices, value)
E         File "cupy/_core/_routines_indexing.pyx", line 130, in cupy._core._routines_indexing._ndarray_scatter_max
E           _scatter_op(self, slices, value, 'max')
E         File "cupy/_core/_routines_indexing.pyx", line 941, in cupy._core._routines_indexing._scatter_op
E           _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
E         File "cupy/_core/_routines_indexing.pyx", line 878, in cupy._core._routines_indexing._scatter_op_single
E           _scatter_max_kernel(
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
_ TestScatterParametrized_param_9_{shape=(3, 4, 5), slices=(None, [1, -1]), value=1}.test_scatter_min _

self = <<cupy_tests.core_tests.test_ndarray_scatter.TestScatterParametrized_param_9_{shape=(3, 4, 5), slices=(None, [1, -1]), value=1} testMethod=test_scatter_min>  parameter: {'shape': (3, 4, 5), 'slices': (None, [1, -1]), 'value': 1}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float32'>

    @testing.for_dtypes([numpy.float32, numpy.int32, numpy.uint32,
                         numpy.uint64, numpy.ulonglong, numpy.float64])
    @testing.numpy_cupy_array_equal()
    def test_scatter_min(self, xp, dtype):
        a = xp.zeros(self.shape, dtype)
        if xp is cupy:
>           a.scatter_min(self.slices, self.value)

tests/cupy_tests/core_tests/test_ndarray_scatter.py:146: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/core.pyx:1411: in cupy._core.core.ndarray.scatter_min
    _indexing._ndarray_scatter_min(self, slices, value)
cupy/_core/_routines_indexing.pyx:134: in cupy._core._routines_indexing._ndarray_scatter_min
    _scatter_op(self, slices, value, 'min')
cupy/_core/_routines_indexing.pyx:941: in cupy._core._routines_indexing._scatter_op
    _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
cupy/_core/_routines_indexing.pyx:887: in cupy._core._routines_indexing._scatter_op_single
    _scatter_min_kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03c49e3b20>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/test_ndarray_scatter.py", line 146, in test_scatter_min
E           a.scatter_min(self.slices, self.value)
E         File "cupy/_core/core.pyx", line 1411, in cupy._core.core.ndarray.scatter_min
E           _indexing._ndarray_scatter_min(self, slices, value)
E         File "cupy/_core/_routines_indexing.pyx", line 134, in cupy._core._routines_indexing._ndarray_scatter_min
E           _scatter_op(self, slices, value, 'min')
E         File "cupy/_core/_routines_indexing.pyx", line 941, in cupy._core._routines_indexing._scatter_op
E           _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
E         File "cupy/_core/_routines_indexing.pyx", line 887, in cupy._core._routines_indexing._scatter_op_single
E           _scatter_min_kernel(
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
_ TestScatterParametrized_param_10_{shape=(3, 4, 5), slices=(None, [1, -1], None), value=1}.test_scatter_add _

self = <<cupy_tests.core_tests.test_ndarray_scatter.TestScatterParametrized_param_10_{shape=(3, 4, 5), slices=(None, [1, -1],...), value=1} testMethod=test_scatter_add>  parameter: {'shape': (3, 4, 5), 'slices': (None, [1, -1], None), 'value': 1}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float32'>

    @testing.for_dtypes([numpy.float32, numpy.int32, numpy.uint32,
                         numpy.uint64, numpy.ulonglong, numpy.float16,
                         numpy.float64])
    @testing.numpy_cupy_array_equal()
    def test_scatter_add(self, xp, dtype):
        if cupy.cuda.runtime.is_hip and dtype == numpy.float16:
            pytest.skip('atomicAdd does not support float16 in HIP')
        a = xp.zeros(self.shape, dtype)
        if xp is cupy:
>           a.scatter_add(self.slices, self.value)

tests/cupy_tests/core_tests/test_ndarray_scatter.py:124: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/core.pyx:1393: in cupy._core.core.ndarray.scatter_add
    _indexing._ndarray_scatter_add(self, slices, value)
cupy/_core/_routines_indexing.pyx:126: in cupy._core._routines_indexing._ndarray_scatter_add
    _scatter_op(self, slices, value, 'add')
cupy/_core/_routines_indexing.pyx:941: in cupy._core._routines_indexing._scatter_op
    _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
cupy/_core/_routines_indexing.pyx:869: in cupy._core._routines_indexing._scatter_op_single
    _scatter_add_kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4ead910>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/test_ndarray_scatter.py", line 124, in test_scatter_add
E           a.scatter_add(self.slices, self.value)
E         File "cupy/_core/core.pyx", line 1393, in cupy._core.core.ndarray.scatter_add
E           _indexing._ndarray_scatter_add(self, slices, value)
E         File "cupy/_core/_routines_indexing.pyx", line 126, in cupy._core._routines_indexing._ndarray_scatter_add
E           _scatter_op(self, slices, value, 'add')
E         File "cupy/_core/_routines_indexing.pyx", line 941, in cupy._core._routines_indexing._scatter_op
E           _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
E         File "cupy/_core/_routines_indexing.pyx", line 869, in cupy._core._routines_indexing._scatter_op_single
E           _scatter_add_kernel(
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
_ TestScatterParametrized_param_10_{shape=(3, 4, 5), slices=(None, [1, -1], None), value=1}.test_scatter_max _

self = <<cupy_tests.core_tests.test_ndarray_scatter.TestScatterParametrized_param_10_{shape=(3, 4, 5), slices=(None, [1, -1],...), value=1} testMethod=test_scatter_max>  parameter: {'shape': (3, 4, 5), 'slices': (None, [1, -1], None), 'value': 1}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float32'>

    @testing.for_dtypes([numpy.float32, numpy.int32, numpy.uint32,
                         numpy.uint64, numpy.ulonglong, numpy.float64])
    @testing.numpy_cupy_array_equal()
    def test_scatter_max(self, xp, dtype):
        a = xp.zeros(self.shape, dtype)
        if xp is cupy:
>           a.scatter_max(self.slices, self.value)

tests/cupy_tests/core_tests/test_ndarray_scatter.py:135: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/core.pyx:1402: in cupy._core.core.ndarray.scatter_max
    _indexing._ndarray_scatter_max(self, slices, value)
cupy/_core/_routines_indexing.pyx:130: in cupy._core._routines_indexing._ndarray_scatter_max
    _scatter_op(self, slices, value, 'max')
cupy/_core/_routines_indexing.pyx:941: in cupy._core._routines_indexing._scatter_op
    _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
cupy/_core/_routines_indexing.pyx:878: in cupy._core._routines_indexing._scatter_op_single
    _scatter_max_kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03bc04e700>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/test_ndarray_scatter.py", line 135, in test_scatter_max
E           a.scatter_max(self.slices, self.value)
E         File "cupy/_core/core.pyx", line 1402, in cupy._core.core.ndarray.scatter_max
E           _indexing._ndarray_scatter_max(self, slices, value)
E         File "cupy/_core/_routines_indexing.pyx", line 130, in cupy._core._routines_indexing._ndarray_scatter_max
E           _scatter_op(self, slices, value, 'max')
E         File "cupy/_core/_routines_indexing.pyx", line 941, in cupy._core._routines_indexing._scatter_op
E           _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
E         File "cupy/_core/_routines_indexing.pyx", line 878, in cupy._core._routines_indexing._scatter_op_single
E           _scatter_max_kernel(
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
_ TestScatterParametrized_param_10_{shape=(3, 4, 5), slices=(None, [1, -1], None), value=1}.test_scatter_min _

self = <<cupy_tests.core_tests.test_ndarray_scatter.TestScatterParametrized_param_10_{shape=(3, 4, 5), slices=(None, [1, -1],...), value=1} testMethod=test_scatter_min>  parameter: {'shape': (3, 4, 5), 'slices': (None, [1, -1], None), 'value': 1}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float32'>

    @testing.for_dtypes([numpy.float32, numpy.int32, numpy.uint32,
                         numpy.uint64, numpy.ulonglong, numpy.float64])
    @testing.numpy_cupy_array_equal()
    def test_scatter_min(self, xp, dtype):
        a = xp.zeros(self.shape, dtype)
        if xp is cupy:
>           a.scatter_min(self.slices, self.value)

tests/cupy_tests/core_tests/test_ndarray_scatter.py:146: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/core.pyx:1411: in cupy._core.core.ndarray.scatter_min
    _indexing._ndarray_scatter_min(self, slices, value)
cupy/_core/_routines_indexing.pyx:134: in cupy._core._routines_indexing._ndarray_scatter_min
    _scatter_op(self, slices, value, 'min')
cupy/_core/_routines_indexing.pyx:941: in cupy._core._routines_indexing._scatter_op
    _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
cupy/_core/_routines_indexing.pyx:887: in cupy._core._routines_indexing._scatter_op_single
    _scatter_min_kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03c49f1c10>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/test_ndarray_scatter.py", line 146, in test_scatter_min
E           a.scatter_min(self.slices, self.value)
E         File "cupy/_core/core.pyx", line 1411, in cupy._core.core.ndarray.scatter_min
E           _indexing._ndarray_scatter_min(self, slices, value)
E         File "cupy/_core/_routines_indexing.pyx", line 134, in cupy._core._routines_indexing._ndarray_scatter_min
E           _scatter_op(self, slices, value, 'min')
E         File "cupy/_core/_routines_indexing.pyx", line 941, in cupy._core._routines_indexing._scatter_op
E           _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
E         File "cupy/_core/_routines_indexing.pyx", line 887, in cupy._core._routines_indexing._scatter_op_single
E           _scatter_min_kernel(
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
_ TestScatterParametrized_param_11_{shape=(3, 4, 5), slices=(None, None, None, [1, -1]), value=1}.test_scatter_add _

self = <<cupy_tests.core_tests.test_ndarray_scatter.TestScatterParametrized_param_11_{shape=(3, 4, 5), slices=(None, None, No...ue=1} testMethod=test_scatter_add>  parameter: {'shape': (3, 4, 5), 'slices': (None, None, None, [1, -1]), 'value': 1}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float32'>

    @testing.for_dtypes([numpy.float32, numpy.int32, numpy.uint32,
                         numpy.uint64, numpy.ulonglong, numpy.float16,
                         numpy.float64])
    @testing.numpy_cupy_array_equal()
    def test_scatter_add(self, xp, dtype):
        if cupy.cuda.runtime.is_hip and dtype == numpy.float16:
            pytest.skip('atomicAdd does not support float16 in HIP')
        a = xp.zeros(self.shape, dtype)
        if xp is cupy:
>           a.scatter_add(self.slices, self.value)

tests/cupy_tests/core_tests/test_ndarray_scatter.py:124: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/core.pyx:1393: in cupy._core.core.ndarray.scatter_add
    _indexing._ndarray_scatter_add(self, slices, value)
cupy/_core/_routines_indexing.pyx:126: in cupy._core._routines_indexing._ndarray_scatter_add
    _scatter_op(self, slices, value, 'add')
cupy/_core/_routines_indexing.pyx:941: in cupy._core._routines_indexing._scatter_op
    _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
cupy/_core/_routines_indexing.pyx:869: in cupy._core._routines_indexing._scatter_op_single
    _scatter_add_kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4eef910>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/test_ndarray_scatter.py", line 124, in test_scatter_add
E           a.scatter_add(self.slices, self.value)
E         File "cupy/_core/core.pyx", line 1393, in cupy._core.core.ndarray.scatter_add
E           _indexing._ndarray_scatter_add(self, slices, value)
E         File "cupy/_core/_routines_indexing.pyx", line 126, in cupy._core._routines_indexing._ndarray_scatter_add
E           _scatter_op(self, slices, value, 'add')
E         File "cupy/_core/_routines_indexing.pyx", line 941, in cupy._core._routines_indexing._scatter_op
E           _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
E         File "cupy/_core/_routines_indexing.pyx", line 869, in cupy._core._routines_indexing._scatter_op_single
E           _scatter_add_kernel(
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
_ TestScatterParametrized_param_11_{shape=(3, 4, 5), slices=(None, None, None, [1, -1]), value=1}.test_scatter_max _

self = <<cupy_tests.core_tests.test_ndarray_scatter.TestScatterParametrized_param_11_{shape=(3, 4, 5), slices=(None, None, No...ue=1} testMethod=test_scatter_max>  parameter: {'shape': (3, 4, 5), 'slices': (None, None, None, [1, -1]), 'value': 1}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float32'>

    @testing.for_dtypes([numpy.float32, numpy.int32, numpy.uint32,
                         numpy.uint64, numpy.ulonglong, numpy.float64])
    @testing.numpy_cupy_array_equal()
    def test_scatter_max(self, xp, dtype):
        a = xp.zeros(self.shape, dtype)
        if xp is cupy:
>           a.scatter_max(self.slices, self.value)

tests/cupy_tests/core_tests/test_ndarray_scatter.py:135: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/core.pyx:1402: in cupy._core.core.ndarray.scatter_max
    _indexing._ndarray_scatter_max(self, slices, value)
cupy/_core/_routines_indexing.pyx:130: in cupy._core._routines_indexing._ndarray_scatter_max
    _scatter_op(self, slices, value, 'max')
cupy/_core/_routines_indexing.pyx:941: in cupy._core._routines_indexing._scatter_op
    _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
cupy/_core/_routines_indexing.pyx:878: in cupy._core._routines_indexing._scatter_op_single
    _scatter_max_kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03c49cc670>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/test_ndarray_scatter.py", line 135, in test_scatter_max
E           a.scatter_max(self.slices, self.value)
E         File "cupy/_core/core.pyx", line 1402, in cupy._core.core.ndarray.scatter_max
E           _indexing._ndarray_scatter_max(self, slices, value)
E         File "cupy/_core/_routines_indexing.pyx", line 130, in cupy._core._routines_indexing._ndarray_scatter_max
E           _scatter_op(self, slices, value, 'max')
E         File "cupy/_core/_routines_indexing.pyx", line 941, in cupy._core._routines_indexing._scatter_op
E           _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
E         File "cupy/_core/_routines_indexing.pyx", line 878, in cupy._core._routines_indexing._scatter_op_single
E           _scatter_max_kernel(
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
_ TestScatterParametrized_param_11_{shape=(3, 4, 5), slices=(None, None, None, [1, -1]), value=1}.test_scatter_min _

self = <<cupy_tests.core_tests.test_ndarray_scatter.TestScatterParametrized_param_11_{shape=(3, 4, 5), slices=(None, None, No...ue=1} testMethod=test_scatter_min>  parameter: {'shape': (3, 4, 5), 'slices': (None, None, None, [1, -1]), 'value': 1}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float32'>

    @testing.for_dtypes([numpy.float32, numpy.int32, numpy.uint32,
                         numpy.uint64, numpy.ulonglong, numpy.float64])
    @testing.numpy_cupy_array_equal()
    def test_scatter_min(self, xp, dtype):
        a = xp.zeros(self.shape, dtype)
        if xp is cupy:
>           a.scatter_min(self.slices, self.value)

tests/cupy_tests/core_tests/test_ndarray_scatter.py:146: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/core.pyx:1411: in cupy._core.core.ndarray.scatter_min
    _indexing._ndarray_scatter_min(self, slices, value)
cupy/_core/_routines_indexing.pyx:134: in cupy._core._routines_indexing._ndarray_scatter_min
    _scatter_op(self, slices, value, 'min')
cupy/_core/_routines_indexing.pyx:941: in cupy._core._routines_indexing._scatter_op
    _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
cupy/_core/_routines_indexing.pyx:887: in cupy._core._routines_indexing._scatter_op_single
    _scatter_min_kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4ebc1f0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/test_ndarray_scatter.py", line 146, in test_scatter_min
E           a.scatter_min(self.slices, self.value)
E         File "cupy/_core/core.pyx", line 1411, in cupy._core.core.ndarray.scatter_min
E           _indexing._ndarray_scatter_min(self, slices, value)
E         File "cupy/_core/_routines_indexing.pyx", line 134, in cupy._core._routines_indexing._ndarray_scatter_min
E           _scatter_op(self, slices, value, 'min')
E         File "cupy/_core/_routines_indexing.pyx", line 941, in cupy._core._routines_indexing._scatter_op
E           _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
E         File "cupy/_core/_routines_indexing.pyx", line 887, in cupy._core._routines_indexing._scatter_op_single
E           _scatter_min_kernel(
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
_ TestScatterParametrized_param_12_{shape=(3, 4, 5), slices=(slice(0, 1, None), None, [1, -1]), value=1}.test_scatter_min _

self = <<cupy_tests.core_tests.test_ndarray_scatter.TestScatterParametrized_param_12_{shape=(3, 4, 5), slices=(slice(0, 1, No...estMethod=test_scatter_min>  parameter: {'shape': (3, 4, 5), 'slices': (slice(0, 1, None), None, [1, -1]), 'value': 1}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>
dtype = <class 'numpy.uint32'>

    @testing.for_dtypes([numpy.float32, numpy.int32, numpy.uint32,
                         numpy.uint64, numpy.ulonglong, numpy.float64])
    @testing.numpy_cupy_array_equal()
    def test_scatter_min(self, xp, dtype):
        a = xp.zeros(self.shape, dtype)
        if xp is cupy:
>           a.scatter_min(self.slices, self.value)

tests/cupy_tests/core_tests/test_ndarray_scatter.py:146: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/core.pyx:1411: in cupy._core.core.ndarray.scatter_min
    _indexing._ndarray_scatter_min(self, slices, value)
cupy/_core/_routines_indexing.pyx:134: in cupy._core._routines_indexing._ndarray_scatter_min
    _scatter_op(self, slices, value, 'min')
cupy/_core/_routines_indexing.pyx:941: in cupy._core._routines_indexing._scatter_op
    _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
cupy/_core/_routines_indexing.pyx:887: in cupy._core._routines_indexing._scatter_op_single
    _scatter_min_kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03cd528250>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/test_ndarray_scatter.py", line 146, in test_scatter_min
E           a.scatter_min(self.slices, self.value)
E         File "cupy/_core/core.pyx", line 1411, in cupy._core.core.ndarray.scatter_min
E           _indexing._ndarray_scatter_min(self, slices, value)
E         File "cupy/_core/_routines_indexing.pyx", line 134, in cupy._core._routines_indexing._ndarray_scatter_min
E           _scatter_op(self, slices, value, 'min')
E         File "cupy/_core/_routines_indexing.pyx", line 941, in cupy._core._routines_indexing._scatter_op
E           _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
E         File "cupy/_core/_routines_indexing.pyx", line 887, in cupy._core._routines_indexing._scatter_op_single
E           _scatter_min_kernel(
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.uint32'>
_ TestScatterParametrized_param_13_{shape=(3, 4, 5), slices=(slice(0, 1, None), slice(1, 2, None), [1, -1]), value=1}.test_scatter_add _

self = <<cupy_tests.core_tests.test_ndarray_scatter.TestScatterParametrized_param_13_{shape=(3, 4, 5), slices=(slice(0, 1, No...t_scatter_add>  parameter: {'shape': (3, 4, 5), 'slices': (slice(0, 1, None), slice(1, 2, None), [1, -1]), 'value': 1}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float32'>

    @testing.for_dtypes([numpy.float32, numpy.int32, numpy.uint32,
                         numpy.uint64, numpy.ulonglong, numpy.float16,
                         numpy.float64])
    @testing.numpy_cupy_array_equal()
    def test_scatter_add(self, xp, dtype):
        if cupy.cuda.runtime.is_hip and dtype == numpy.float16:
            pytest.skip('atomicAdd does not support float16 in HIP')
        a = xp.zeros(self.shape, dtype)
        if xp is cupy:
>           a.scatter_add(self.slices, self.value)

tests/cupy_tests/core_tests/test_ndarray_scatter.py:124: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/core.pyx:1393: in cupy._core.core.ndarray.scatter_add
    _indexing._ndarray_scatter_add(self, slices, value)
cupy/_core/_routines_indexing.pyx:126: in cupy._core._routines_indexing._ndarray_scatter_add
    _scatter_op(self, slices, value, 'add')
cupy/_core/_routines_indexing.pyx:941: in cupy._core._routines_indexing._scatter_op
    _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
cupy/_core/_routines_indexing.pyx:869: in cupy._core._routines_indexing._scatter_op_single
    _scatter_add_kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4fe2730>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/test_ndarray_scatter.py", line 124, in test_scatter_add
E           a.scatter_add(self.slices, self.value)
E         File "cupy/_core/core.pyx", line 1393, in cupy._core.core.ndarray.scatter_add
E           _indexing._ndarray_scatter_add(self, slices, value)
E         File "cupy/_core/_routines_indexing.pyx", line 126, in cupy._core._routines_indexing._ndarray_scatter_add
E           _scatter_op(self, slices, value, 'add')
E         File "cupy/_core/_routines_indexing.pyx", line 941, in cupy._core._routines_indexing._scatter_op
E           _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
E         File "cupy/_core/_routines_indexing.pyx", line 869, in cupy._core._routines_indexing._scatter_op_single
E           _scatter_add_kernel(
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
_ TestScatterParametrized_param_13_{shape=(3, 4, 5), slices=(slice(0, 1, None), slice(1, 2, None), [1, -1]), value=1}.test_scatter_max _

self = <<cupy_tests.core_tests.test_ndarray_scatter.TestScatterParametrized_param_13_{shape=(3, 4, 5), slices=(slice(0, 1, No...t_scatter_max>  parameter: {'shape': (3, 4, 5), 'slices': (slice(0, 1, None), slice(1, 2, None), [1, -1]), 'value': 1}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float32'>

    @testing.for_dtypes([numpy.float32, numpy.int32, numpy.uint32,
                         numpy.uint64, numpy.ulonglong, numpy.float64])
    @testing.numpy_cupy_array_equal()
    def test_scatter_max(self, xp, dtype):
        a = xp.zeros(self.shape, dtype)
        if xp is cupy:
>           a.scatter_max(self.slices, self.value)

tests/cupy_tests/core_tests/test_ndarray_scatter.py:135: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/core.pyx:1402: in cupy._core.core.ndarray.scatter_max
    _indexing._ndarray_scatter_max(self, slices, value)
cupy/_core/_routines_indexing.pyx:130: in cupy._core._routines_indexing._ndarray_scatter_max
    _scatter_op(self, slices, value, 'max')
cupy/_core/_routines_indexing.pyx:941: in cupy._core._routines_indexing._scatter_op
    _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
cupy/_core/_routines_indexing.pyx:878: in cupy._core._routines_indexing._scatter_op_single
    _scatter_max_kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03cd4cf7f0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/test_ndarray_scatter.py", line 135, in test_scatter_max
E           a.scatter_max(self.slices, self.value)
E         File "cupy/_core/core.pyx", line 1402, in cupy._core.core.ndarray.scatter_max
E           _indexing._ndarray_scatter_max(self, slices, value)
E         File "cupy/_core/_routines_indexing.pyx", line 130, in cupy._core._routines_indexing._ndarray_scatter_max
E           _scatter_op(self, slices, value, 'max')
E         File "cupy/_core/_routines_indexing.pyx", line 941, in cupy._core._routines_indexing._scatter_op
E           _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
E         File "cupy/_core/_routines_indexing.pyx", line 878, in cupy._core._routines_indexing._scatter_op_single
E           _scatter_max_kernel(
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
_ TestScatterParametrized_param_13_{shape=(3, 4, 5), slices=(slice(0, 1, None), slice(1, 2, None), [1, -1]), value=1}.test_scatter_min _

self = <<cupy_tests.core_tests.test_ndarray_scatter.TestScatterParametrized_param_13_{shape=(3, 4, 5), slices=(slice(0, 1, No...t_scatter_min>  parameter: {'shape': (3, 4, 5), 'slices': (slice(0, 1, None), slice(1, 2, None), [1, -1]), 'value': 1}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float32'>

    @testing.for_dtypes([numpy.float32, numpy.int32, numpy.uint32,
                         numpy.uint64, numpy.ulonglong, numpy.float64])
    @testing.numpy_cupy_array_equal()
    def test_scatter_min(self, xp, dtype):
        a = xp.zeros(self.shape, dtype)
        if xp is cupy:
>           a.scatter_min(self.slices, self.value)

tests/cupy_tests/core_tests/test_ndarray_scatter.py:146: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/core.pyx:1411: in cupy._core.core.ndarray.scatter_min
    _indexing._ndarray_scatter_min(self, slices, value)
cupy/_core/_routines_indexing.pyx:134: in cupy._core._routines_indexing._ndarray_scatter_min
    _scatter_op(self, slices, value, 'min')
cupy/_core/_routines_indexing.pyx:941: in cupy._core._routines_indexing._scatter_op
    _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
cupy/_core/_routines_indexing.pyx:887: in cupy._core._routines_indexing._scatter_op_single
    _scatter_min_kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f01a6982940>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/test_ndarray_scatter.py", line 146, in test_scatter_min
E           a.scatter_min(self.slices, self.value)
E         File "cupy/_core/core.pyx", line 1411, in cupy._core.core.ndarray.scatter_min
E           _indexing._ndarray_scatter_min(self, slices, value)
E         File "cupy/_core/_routines_indexing.pyx", line 134, in cupy._core._routines_indexing._ndarray_scatter_min
E           _scatter_op(self, slices, value, 'min')
E         File "cupy/_core/_routines_indexing.pyx", line 941, in cupy._core._routines_indexing._scatter_op
E           _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
E         File "cupy/_core/_routines_indexing.pyx", line 887, in cupy._core._routines_indexing._scatter_op_single
E           _scatter_min_kernel(
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
_ TestScatterParametrized_param_14_{shape=(3, 4, 5), slices=(slice(0, 1, None), None, slice(1, 2, None), [1, -1]), value=1}.test_scatter_add _

self = <<cupy_tests.core_tests.test_ndarray_scatter.TestScatterParametrized_param_14_{shape=(3, 4, 5), slices=(slice(0, 1, No...ter_add>  parameter: {'shape': (3, 4, 5), 'slices': (slice(0, 1, None), None, slice(1, 2, None), [1, -1]), 'value': 1}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float32'>

    @testing.for_dtypes([numpy.float32, numpy.int32, numpy.uint32,
                         numpy.uint64, numpy.ulonglong, numpy.float16,
                         numpy.float64])
    @testing.numpy_cupy_array_equal()
    def test_scatter_add(self, xp, dtype):
        if cupy.cuda.runtime.is_hip and dtype == numpy.float16:
            pytest.skip('atomicAdd does not support float16 in HIP')
        a = xp.zeros(self.shape, dtype)
        if xp is cupy:
>           a.scatter_add(self.slices, self.value)

tests/cupy_tests/core_tests/test_ndarray_scatter.py:124: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/core.pyx:1393: in cupy._core.core.ndarray.scatter_add
    _indexing._ndarray_scatter_add(self, slices, value)
cupy/_core/_routines_indexing.pyx:126: in cupy._core._routines_indexing._ndarray_scatter_add
    _scatter_op(self, slices, value, 'add')
cupy/_core/_routines_indexing.pyx:941: in cupy._core._routines_indexing._scatter_op
    _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
cupy/_core/_routines_indexing.pyx:869: in cupy._core._routines_indexing._scatter_op_single
    _scatter_add_kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03c49cc5b0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/test_ndarray_scatter.py", line 124, in test_scatter_add
E           a.scatter_add(self.slices, self.value)
E         File "cupy/_core/core.pyx", line 1393, in cupy._core.core.ndarray.scatter_add
E           _indexing._ndarray_scatter_add(self, slices, value)
E         File "cupy/_core/_routines_indexing.pyx", line 126, in cupy._core._routines_indexing._ndarray_scatter_add
E           _scatter_op(self, slices, value, 'add')
E         File "cupy/_core/_routines_indexing.pyx", line 941, in cupy._core._routines_indexing._scatter_op
E           _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
E         File "cupy/_core/_routines_indexing.pyx", line 869, in cupy._core._routines_indexing._scatter_op_single
E           _scatter_add_kernel(
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
_ TestScatterParametrized_param_14_{shape=(3, 4, 5), slices=(slice(0, 1, None), None, slice(1, 2, None), [1, -1]), value=1}.test_scatter_max _

self = <<cupy_tests.core_tests.test_ndarray_scatter.TestScatterParametrized_param_14_{shape=(3, 4, 5), slices=(slice(0, 1, No...ter_max>  parameter: {'shape': (3, 4, 5), 'slices': (slice(0, 1, None), None, slice(1, 2, None), [1, -1]), 'value': 1}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float32'>

    @testing.for_dtypes([numpy.float32, numpy.int32, numpy.uint32,
                         numpy.uint64, numpy.ulonglong, numpy.float64])
    @testing.numpy_cupy_array_equal()
    def test_scatter_max(self, xp, dtype):
        a = xp.zeros(self.shape, dtype)
        if xp is cupy:
>           a.scatter_max(self.slices, self.value)

tests/cupy_tests/core_tests/test_ndarray_scatter.py:135: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/core.pyx:1402: in cupy._core.core.ndarray.scatter_max
    _indexing._ndarray_scatter_max(self, slices, value)
cupy/_core/_routines_indexing.pyx:130: in cupy._core._routines_indexing._ndarray_scatter_max
    _scatter_op(self, slices, value, 'max')
cupy/_core/_routines_indexing.pyx:941: in cupy._core._routines_indexing._scatter_op
    _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
cupy/_core/_routines_indexing.pyx:878: in cupy._core._routines_indexing._scatter_op_single
    _scatter_max_kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4bfc580>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/test_ndarray_scatter.py", line 135, in test_scatter_max
E           a.scatter_max(self.slices, self.value)
E         File "cupy/_core/core.pyx", line 1402, in cupy._core.core.ndarray.scatter_max
E           _indexing._ndarray_scatter_max(self, slices, value)
E         File "cupy/_core/_routines_indexing.pyx", line 130, in cupy._core._routines_indexing._ndarray_scatter_max
E           _scatter_op(self, slices, value, 'max')
E         File "cupy/_core/_routines_indexing.pyx", line 941, in cupy._core._routines_indexing._scatter_op
E           _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
E         File "cupy/_core/_routines_indexing.pyx", line 878, in cupy._core._routines_indexing._scatter_op_single
E           _scatter_max_kernel(
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
_ TestScatterParametrized_param_14_{shape=(3, 4, 5), slices=(slice(0, 1, None), None, slice(1, 2, None), [1, -1]), value=1}.test_scatter_min _

self = <<cupy_tests.core_tests.test_ndarray_scatter.TestScatterParametrized_param_14_{shape=(3, 4, 5), slices=(slice(0, 1, No...ter_min>  parameter: {'shape': (3, 4, 5), 'slices': (slice(0, 1, None), None, slice(1, 2, None), [1, -1]), 'value': 1}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float32'>

    @testing.for_dtypes([numpy.float32, numpy.int32, numpy.uint32,
                         numpy.uint64, numpy.ulonglong, numpy.float64])
    @testing.numpy_cupy_array_equal()
    def test_scatter_min(self, xp, dtype):
        a = xp.zeros(self.shape, dtype)
        if xp is cupy:
>           a.scatter_min(self.slices, self.value)

tests/cupy_tests/core_tests/test_ndarray_scatter.py:146: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/core.pyx:1411: in cupy._core.core.ndarray.scatter_min
    _indexing._ndarray_scatter_min(self, slices, value)
cupy/_core/_routines_indexing.pyx:134: in cupy._core._routines_indexing._ndarray_scatter_min
    _scatter_op(self, slices, value, 'min')
cupy/_core/_routines_indexing.pyx:941: in cupy._core._routines_indexing._scatter_op
    _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
cupy/_core/_routines_indexing.pyx:887: in cupy._core._routines_indexing._scatter_op_single
    _scatter_min_kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03cd4e5970>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/test_ndarray_scatter.py", line 146, in test_scatter_min
E           a.scatter_min(self.slices, self.value)
E         File "cupy/_core/core.pyx", line 1411, in cupy._core.core.ndarray.scatter_min
E           _indexing._ndarray_scatter_min(self, slices, value)
E         File "cupy/_core/_routines_indexing.pyx", line 134, in cupy._core._routines_indexing._ndarray_scatter_min
E           _scatter_op(self, slices, value, 'min')
E         File "cupy/_core/_routines_indexing.pyx", line 941, in cupy._core._routines_indexing._scatter_op
E           _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
E         File "cupy/_core/_routines_indexing.pyx", line 887, in cupy._core._routines_indexing._scatter_op_single
E           _scatter_min_kernel(
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
_ TestScatterParametrized_param_15_{shape=(3, 4, 5), slices=(slice(None, None, None), [[1, 2], [0, -1]]), value=array([[[[ 0,  1,  2,  3,  4],
         [ 5,  6,...1, 52, 53, 54],
         [55, 56, 57, 58, 59]]]])}.test_scatter_add _

self = <<cupy_tests.core_tests.test_ndarray_scatter.TestScatterParametrized_param_15_{shape=(3, 4, 5), slices=(slice(None, No...0, 41, 42, 43, 44],
         [45, 46, 47, 48, 49]],

        [[50, 51, 52, 53, 54],
         [55, 56, 57, 58, 59]]]])}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float32'>

    @testing.for_dtypes([numpy.float32, numpy.int32, numpy.uint32,
                         numpy.uint64, numpy.ulonglong, numpy.float16,
                         numpy.float64])
    @testing.numpy_cupy_array_equal()
    def test_scatter_add(self, xp, dtype):
        if cupy.cuda.runtime.is_hip and dtype == numpy.float16:
            pytest.skip('atomicAdd does not support float16 in HIP')
        a = xp.zeros(self.shape, dtype)
        if xp is cupy:
>           a.scatter_add(self.slices, self.value)

tests/cupy_tests/core_tests/test_ndarray_scatter.py:124: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/core.pyx:1393: in cupy._core.core.ndarray.scatter_add
    _indexing._ndarray_scatter_add(self, slices, value)
cupy/_core/_routines_indexing.pyx:126: in cupy._core._routines_indexing._ndarray_scatter_add
    _scatter_op(self, slices, value, 'add')
cupy/_core/_routines_indexing.pyx:941: in cupy._core._routines_indexing._scatter_op
    _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
cupy/_core/_routines_indexing.pyx:869: in cupy._core._routines_indexing._scatter_op_single
    _scatter_add_kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4ed96d0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/test_ndarray_scatter.py", line 124, in test_scatter_add
E           a.scatter_add(self.slices, self.value)
E         File "cupy/_core/core.pyx", line 1393, in cupy._core.core.ndarray.scatter_add
E           _indexing._ndarray_scatter_add(self, slices, value)
E         File "cupy/_core/_routines_indexing.pyx", line 126, in cupy._core._routines_indexing._ndarray_scatter_add
E           _scatter_op(self, slices, value, 'add')
E         File "cupy/_core/_routines_indexing.pyx", line 941, in cupy._core._routines_indexing._scatter_op
E           _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
E         File "cupy/_core/_routines_indexing.pyx", line 869, in cupy._core._routines_indexing._scatter_op_single
E           _scatter_add_kernel(
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
_ TestScatterParametrized_param_15_{shape=(3, 4, 5), slices=(slice(None, None, None), [[1, 2], [0, -1]]), value=array([[[[ 0,  1,  2,  3,  4],
         [ 5,  6,...1, 52, 53, 54],
         [55, 56, 57, 58, 59]]]])}.test_scatter_max _

self = <<cupy_tests.core_tests.test_ndarray_scatter.TestScatterParametrized_param_15_{shape=(3, 4, 5), slices=(slice(None, No...0, 41, 42, 43, 44],
         [45, 46, 47, 48, 49]],

        [[50, 51, 52, 53, 54],
         [55, 56, 57, 58, 59]]]])}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float32'>

    @testing.for_dtypes([numpy.float32, numpy.int32, numpy.uint32,
                         numpy.uint64, numpy.ulonglong, numpy.float64])
    @testing.numpy_cupy_array_equal()
    def test_scatter_max(self, xp, dtype):
        a = xp.zeros(self.shape, dtype)
        if xp is cupy:
>           a.scatter_max(self.slices, self.value)

tests/cupy_tests/core_tests/test_ndarray_scatter.py:135: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/core.pyx:1402: in cupy._core.core.ndarray.scatter_max
    _indexing._ndarray_scatter_max(self, slices, value)
cupy/_core/_routines_indexing.pyx:130: in cupy._core._routines_indexing._ndarray_scatter_max
    _scatter_op(self, slices, value, 'max')
cupy/_core/_routines_indexing.pyx:941: in cupy._core._routines_indexing._scatter_op
    _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
cupy/_core/_routines_indexing.pyx:878: in cupy._core._routines_indexing._scatter_op_single
    _scatter_max_kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03c5108a00>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/test_ndarray_scatter.py", line 135, in test_scatter_max
E           a.scatter_max(self.slices, self.value)
E         File "cupy/_core/core.pyx", line 1402, in cupy._core.core.ndarray.scatter_max
E           _indexing._ndarray_scatter_max(self, slices, value)
E         File "cupy/_core/_routines_indexing.pyx", line 130, in cupy._core._routines_indexing._ndarray_scatter_max
E           _scatter_op(self, slices, value, 'max')
E         File "cupy/_core/_routines_indexing.pyx", line 941, in cupy._core._routines_indexing._scatter_op
E           _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
E         File "cupy/_core/_routines_indexing.pyx", line 878, in cupy._core._routines_indexing._scatter_op_single
E           _scatter_max_kernel(
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
_ TestScatterParametrized_param_15_{shape=(3, 4, 5), slices=(slice(None, None, None), [[1, 2], [0, -1]]), value=array([[[[ 0,  1,  2,  3,  4],
         [ 5,  6,...1, 52, 53, 54],
         [55, 56, 57, 58, 59]]]])}.test_scatter_min _

self = <<cupy_tests.core_tests.test_ndarray_scatter.TestScatterParametrized_param_15_{shape=(3, 4, 5), slices=(slice(None, No...0, 41, 42, 43, 44],
         [45, 46, 47, 48, 49]],

        [[50, 51, 52, 53, 54],
         [55, 56, 57, 58, 59]]]])}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float32'>

    @testing.for_dtypes([numpy.float32, numpy.int32, numpy.uint32,
                         numpy.uint64, numpy.ulonglong, numpy.float64])
    @testing.numpy_cupy_array_equal()
    def test_scatter_min(self, xp, dtype):
        a = xp.zeros(self.shape, dtype)
        if xp is cupy:
>           a.scatter_min(self.slices, self.value)

tests/cupy_tests/core_tests/test_ndarray_scatter.py:146: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/core.pyx:1411: in cupy._core.core.ndarray.scatter_min
    _indexing._ndarray_scatter_min(self, slices, value)
cupy/_core/_routines_indexing.pyx:134: in cupy._core._routines_indexing._ndarray_scatter_min
    _scatter_op(self, slices, value, 'min')
cupy/_core/_routines_indexing.pyx:941: in cupy._core._routines_indexing._scatter_op
    _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
cupy/_core/_routines_indexing.pyx:887: in cupy._core._routines_indexing._scatter_op_single
    _scatter_min_kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4f2d220>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/test_ndarray_scatter.py", line 146, in test_scatter_min
E           a.scatter_min(self.slices, self.value)
E         File "cupy/_core/core.pyx", line 1411, in cupy._core.core.ndarray.scatter_min
E           _indexing._ndarray_scatter_min(self, slices, value)
E         File "cupy/_core/_routines_indexing.pyx", line 134, in cupy._core._routines_indexing._ndarray_scatter_min
E           _scatter_op(self, slices, value, 'min')
E         File "cupy/_core/_routines_indexing.pyx", line 941, in cupy._core._routines_indexing._scatter_op
E           _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
E         File "cupy/_core/_routines_indexing.pyx", line 887, in cupy._core._routines_indexing._scatter_op_single
E           _scatter_min_kernel(
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
_ TestScatterParametrized_param_16_{shape=(2, 3, 4), slices=([1, 0], [2, 1]), value=array([[0, 1, 2, 3],
       [4, 5, 6, 7]])}.test_scatter_add _

self = <<cupy_tests.core_tests.test_ndarray_scatter.TestScatterParametrized_param_16_{shape=(2, 3, 4), slices=([1, 0], [2, 1]...add>  parameter: {'shape': (2, 3, 4), 'slices': ([1, 0], [2, 1]), 'value': array([[0, 1, 2, 3],
       [4, 5, 6, 7]])}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float32'>

    @testing.for_dtypes([numpy.float32, numpy.int32, numpy.uint32,
                         numpy.uint64, numpy.ulonglong, numpy.float16,
                         numpy.float64])
    @testing.numpy_cupy_array_equal()
    def test_scatter_add(self, xp, dtype):
        if cupy.cuda.runtime.is_hip and dtype == numpy.float16:
            pytest.skip('atomicAdd does not support float16 in HIP')
        a = xp.zeros(self.shape, dtype)
        if xp is cupy:
>           a.scatter_add(self.slices, self.value)

tests/cupy_tests/core_tests/test_ndarray_scatter.py:124: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/core.pyx:1393: in cupy._core.core.ndarray.scatter_add
    _indexing._ndarray_scatter_add(self, slices, value)
cupy/_core/_routines_indexing.pyx:126: in cupy._core._routines_indexing._ndarray_scatter_add
    _scatter_op(self, slices, value, 'add')
cupy/_core/_routines_indexing.pyx:947: in cupy._core._routines_indexing._scatter_op
    _scatter_op_single(a_interm, reduced_idx, value, li, ri, op)
cupy/_core/_routines_indexing.pyx:869: in cupy._core._routines_indexing._scatter_op_single
    _scatter_add_kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4e13bb0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/test_ndarray_scatter.py", line 124, in test_scatter_add
E           a.scatter_add(self.slices, self.value)
E         File "cupy/_core/core.pyx", line 1393, in cupy._core.core.ndarray.scatter_add
E           _indexing._ndarray_scatter_add(self, slices, value)
E         File "cupy/_core/_routines_indexing.pyx", line 126, in cupy._core._routines_indexing._ndarray_scatter_add
E           _scatter_op(self, slices, value, 'add')
E         File "cupy/_core/_routines_indexing.pyx", line 947, in cupy._core._routines_indexing._scatter_op
E           _scatter_op_single(a_interm, reduced_idx, value, li, ri, op)
E         File "cupy/_core/_routines_indexing.pyx", line 869, in cupy._core._routines_indexing._scatter_op_single
E           _scatter_add_kernel(
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
_ TestScatterParametrized_param_16_{shape=(2, 3, 4), slices=([1, 0], [2, 1]), value=array([[0, 1, 2, 3],
       [4, 5, 6, 7]])}.test_scatter_max _

self = <<cupy_tests.core_tests.test_ndarray_scatter.TestScatterParametrized_param_16_{shape=(2, 3, 4), slices=([1, 0], [2, 1]...max>  parameter: {'shape': (2, 3, 4), 'slices': ([1, 0], [2, 1]), 'value': array([[0, 1, 2, 3],
       [4, 5, 6, 7]])}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float64'>

    @testing.for_dtypes([numpy.float32, numpy.int32, numpy.uint32,
                         numpy.uint64, numpy.ulonglong, numpy.float64])
    @testing.numpy_cupy_array_equal()
    def test_scatter_max(self, xp, dtype):
        a = xp.zeros(self.shape, dtype)
        if xp is cupy:
>           a.scatter_max(self.slices, self.value)

tests/cupy_tests/core_tests/test_ndarray_scatter.py:135: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/core.pyx:1402: in cupy._core.core.ndarray.scatter_max
    _indexing._ndarray_scatter_max(self, slices, value)
cupy/_core/_routines_indexing.pyx:130: in cupy._core._routines_indexing._ndarray_scatter_max
    _scatter_op(self, slices, value, 'max')
cupy/_core/_routines_indexing.pyx:947: in cupy._core._routines_indexing._scatter_op
    _scatter_op_single(a_interm, reduced_idx, value, li, ri, op)
cupy/_core/_routines_indexing.pyx:878: in cupy._core._routines_indexing._scatter_op_single
    _scatter_max_kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4eb54f0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/test_ndarray_scatter.py", line 135, in test_scatter_max
E           a.scatter_max(self.slices, self.value)
E         File "cupy/_core/core.pyx", line 1402, in cupy._core.core.ndarray.scatter_max
E           _indexing._ndarray_scatter_max(self, slices, value)
E         File "cupy/_core/_routines_indexing.pyx", line 130, in cupy._core._routines_indexing._ndarray_scatter_max
E           _scatter_op(self, slices, value, 'max')
E         File "cupy/_core/_routines_indexing.pyx", line 947, in cupy._core._routines_indexing._scatter_op
E           _scatter_op_single(a_interm, reduced_idx, value, li, ri, op)
E         File "cupy/_core/_routines_indexing.pyx", line 878, in cupy._core._routines_indexing._scatter_op_single
E           _scatter_max_kernel(
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestScatterParametrized_param_16_{shape=(2, 3, 4), slices=([1, 0], [2, 1]), value=array([[0, 1, 2, 3],
       [4, 5, 6, 7]])}.test_scatter_min _

self = <<cupy_tests.core_tests.test_ndarray_scatter.TestScatterParametrized_param_16_{shape=(2, 3, 4), slices=([1, 0], [2, 1]...min>  parameter: {'shape': (2, 3, 4), 'slices': ([1, 0], [2, 1]), 'value': array([[0, 1, 2, 3],
       [4, 5, 6, 7]])}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float32'>

    @testing.for_dtypes([numpy.float32, numpy.int32, numpy.uint32,
                         numpy.uint64, numpy.ulonglong, numpy.float64])
    @testing.numpy_cupy_array_equal()
    def test_scatter_min(self, xp, dtype):
        a = xp.zeros(self.shape, dtype)
        if xp is cupy:
>           a.scatter_min(self.slices, self.value)

tests/cupy_tests/core_tests/test_ndarray_scatter.py:146: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/core.pyx:1411: in cupy._core.core.ndarray.scatter_min
    _indexing._ndarray_scatter_min(self, slices, value)
cupy/_core/_routines_indexing.pyx:134: in cupy._core._routines_indexing._ndarray_scatter_min
    _scatter_op(self, slices, value, 'min')
cupy/_core/_routines_indexing.pyx:947: in cupy._core._routines_indexing._scatter_op
    _scatter_op_single(a_interm, reduced_idx, value, li, ri, op)
cupy/_core/_routines_indexing.pyx:887: in cupy._core._routines_indexing._scatter_op_single
    _scatter_min_kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03c5105880>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/test_ndarray_scatter.py", line 146, in test_scatter_min
E           a.scatter_min(self.slices, self.value)
E         File "cupy/_core/core.pyx", line 1411, in cupy._core.core.ndarray.scatter_min
E           _indexing._ndarray_scatter_min(self, slices, value)
E         File "cupy/_core/_routines_indexing.pyx", line 134, in cupy._core._routines_indexing._ndarray_scatter_min
E           _scatter_op(self, slices, value, 'min')
E         File "cupy/_core/_routines_indexing.pyx", line 947, in cupy._core._routines_indexing._scatter_op
E           _scatter_op_single(a_interm, reduced_idx, value, li, ri, op)
E         File "cupy/_core/_routines_indexing.pyx", line 887, in cupy._core._routines_indexing._scatter_op_single
E           _scatter_min_kernel(
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
_ TestScatterParametrized_param_17_{shape=(2, 3, 4), slices=([1, 0], slice(None, None, None), [2, 1]), value=array([[0, 1, 2],
       [3, 4, 5]])}.test_scatter_add _

self = <<cupy_tests.core_tests.test_ndarray_scatter.TestScatterParametrized_param_17_{shape=(2, 3, 4), slices=([1, 0], slice(...shape': (2, 3, 4), 'slices': ([1, 0], slice(None, None, None), [2, 1]), 'value': array([[0, 1, 2],
       [3, 4, 5]])}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float32'>

    @testing.for_dtypes([numpy.float32, numpy.int32, numpy.uint32,
                         numpy.uint64, numpy.ulonglong, numpy.float16,
                         numpy.float64])
    @testing.numpy_cupy_array_equal()
    def test_scatter_add(self, xp, dtype):
        if cupy.cuda.runtime.is_hip and dtype == numpy.float16:
            pytest.skip('atomicAdd does not support float16 in HIP')
        a = xp.zeros(self.shape, dtype)
        if xp is cupy:
>           a.scatter_add(self.slices, self.value)

tests/cupy_tests/core_tests/test_ndarray_scatter.py:124: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/core.pyx:1393: in cupy._core.core.ndarray.scatter_add
    _indexing._ndarray_scatter_add(self, slices, value)
cupy/_core/_routines_indexing.pyx:126: in cupy._core._routines_indexing._ndarray_scatter_add
    _scatter_op(self, slices, value, 'add')
cupy/_core/_routines_indexing.pyx:947: in cupy._core._routines_indexing._scatter_op
    _scatter_op_single(a_interm, reduced_idx, value, li, ri, op)
cupy/_core/_routines_indexing.pyx:869: in cupy._core._routines_indexing._scatter_op_single
    _scatter_add_kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4f391c0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/test_ndarray_scatter.py", line 124, in test_scatter_add
E           a.scatter_add(self.slices, self.value)
E         File "cupy/_core/core.pyx", line 1393, in cupy._core.core.ndarray.scatter_add
E           _indexing._ndarray_scatter_add(self, slices, value)
E         File "cupy/_core/_routines_indexing.pyx", line 126, in cupy._core._routines_indexing._ndarray_scatter_add
E           _scatter_op(self, slices, value, 'add')
E         File "cupy/_core/_routines_indexing.pyx", line 947, in cupy._core._routines_indexing._scatter_op
E           _scatter_op_single(a_interm, reduced_idx, value, li, ri, op)
E         File "cupy/_core/_routines_indexing.pyx", line 869, in cupy._core._routines_indexing._scatter_op_single
E           _scatter_add_kernel(
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
_ TestScatterParametrized_param_17_{shape=(2, 3, 4), slices=([1, 0], slice(None, None, None), [2, 1]), value=array([[0, 1, 2],
       [3, 4, 5]])}.test_scatter_max _

self = <<cupy_tests.core_tests.test_ndarray_scatter.TestScatterParametrized_param_17_{shape=(2, 3, 4), slices=([1, 0], slice(...shape': (2, 3, 4), 'slices': ([1, 0], slice(None, None, None), [2, 1]), 'value': array([[0, 1, 2],
       [3, 4, 5]])}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float32'>

    @testing.for_dtypes([numpy.float32, numpy.int32, numpy.uint32,
                         numpy.uint64, numpy.ulonglong, numpy.float64])
    @testing.numpy_cupy_array_equal()
    def test_scatter_max(self, xp, dtype):
        a = xp.zeros(self.shape, dtype)
        if xp is cupy:
>           a.scatter_max(self.slices, self.value)

tests/cupy_tests/core_tests/test_ndarray_scatter.py:135: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/core.pyx:1402: in cupy._core.core.ndarray.scatter_max
    _indexing._ndarray_scatter_max(self, slices, value)
cupy/_core/_routines_indexing.pyx:130: in cupy._core._routines_indexing._ndarray_scatter_max
    _scatter_op(self, slices, value, 'max')
cupy/_core/_routines_indexing.pyx:947: in cupy._core._routines_indexing._scatter_op
    _scatter_op_single(a_interm, reduced_idx, value, li, ri, op)
cupy/_core/_routines_indexing.pyx:878: in cupy._core._routines_indexing._scatter_op_single
    _scatter_max_kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4e389a0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/test_ndarray_scatter.py", line 135, in test_scatter_max
E           a.scatter_max(self.slices, self.value)
E         File "cupy/_core/core.pyx", line 1402, in cupy._core.core.ndarray.scatter_max
E           _indexing._ndarray_scatter_max(self, slices, value)
E         File "cupy/_core/_routines_indexing.pyx", line 130, in cupy._core._routines_indexing._ndarray_scatter_max
E           _scatter_op(self, slices, value, 'max')
E         File "cupy/_core/_routines_indexing.pyx", line 947, in cupy._core._routines_indexing._scatter_op
E           _scatter_op_single(a_interm, reduced_idx, value, li, ri, op)
E         File "cupy/_core/_routines_indexing.pyx", line 878, in cupy._core._routines_indexing._scatter_op_single
E           _scatter_max_kernel(
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
_ TestScatterParametrized_param_17_{shape=(2, 3, 4), slices=([1, 0], slice(None, None, None), [2, 1]), value=array([[0, 1, 2],
       [3, 4, 5]])}.test_scatter_min _

self = <<cupy_tests.core_tests.test_ndarray_scatter.TestScatterParametrized_param_17_{shape=(2, 3, 4), slices=([1, 0], slice(...shape': (2, 3, 4), 'slices': ([1, 0], slice(None, None, None), [2, 1]), 'value': array([[0, 1, 2],
       [3, 4, 5]])}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float32'>

    @testing.for_dtypes([numpy.float32, numpy.int32, numpy.uint32,
                         numpy.uint64, numpy.ulonglong, numpy.float64])
    @testing.numpy_cupy_array_equal()
    def test_scatter_min(self, xp, dtype):
        a = xp.zeros(self.shape, dtype)
        if xp is cupy:
>           a.scatter_min(self.slices, self.value)

tests/cupy_tests/core_tests/test_ndarray_scatter.py:146: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/core.pyx:1411: in cupy._core.core.ndarray.scatter_min
    _indexing._ndarray_scatter_min(self, slices, value)
cupy/_core/_routines_indexing.pyx:134: in cupy._core._routines_indexing._ndarray_scatter_min
    _scatter_op(self, slices, value, 'min')
cupy/_core/_routines_indexing.pyx:947: in cupy._core._routines_indexing._scatter_op
    _scatter_op_single(a_interm, reduced_idx, value, li, ri, op)
cupy/_core/_routines_indexing.pyx:887: in cupy._core._routines_indexing._scatter_op_single
    _scatter_min_kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03c5139370>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/test_ndarray_scatter.py", line 146, in test_scatter_min
E           a.scatter_min(self.slices, self.value)
E         File "cupy/_core/core.pyx", line 1411, in cupy._core.core.ndarray.scatter_min
E           _indexing._ndarray_scatter_min(self, slices, value)
E         File "cupy/_core/_routines_indexing.pyx", line 134, in cupy._core._routines_indexing._ndarray_scatter_min
E           _scatter_op(self, slices, value, 'min')
E         File "cupy/_core/_routines_indexing.pyx", line 947, in cupy._core._routines_indexing._scatter_op
E           _scatter_op_single(a_interm, reduced_idx, value, li, ri, op)
E         File "cupy/_core/_routines_indexing.pyx", line 887, in cupy._core._routines_indexing._scatter_op_single
E           _scatter_min_kernel(
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
_ TestScatterParametrized_param_18_{shape=(2, 3, 4), slices=([1, 0], slice(None, None, None), [[2, 0], [3, 1]]), value=array([[[ 0,  1,  2],
        [ 3,  4,  5]],

       [[ 6,  7,  8],
        [ 9, 10, 11]]])}.test_scatter_add _

self = <<cupy_tests.core_tests.test_ndarray_scatter.TestScatterParametrized_param_18_{shape=(2, 3, 4), slices=([1, 0], slice(...2, 0], [3, 1]]), 'value': array([[[ 0,  1,  2],
        [ 3,  4,  5]],

       [[ 6,  7,  8],
        [ 9, 10, 11]]])}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float32'>

    @testing.for_dtypes([numpy.float32, numpy.int32, numpy.uint32,
                         numpy.uint64, numpy.ulonglong, numpy.float16,
                         numpy.float64])
    @testing.numpy_cupy_array_equal()
    def test_scatter_add(self, xp, dtype):
        if cupy.cuda.runtime.is_hip and dtype == numpy.float16:
            pytest.skip('atomicAdd does not support float16 in HIP')
        a = xp.zeros(self.shape, dtype)
        if xp is cupy:
>           a.scatter_add(self.slices, self.value)

tests/cupy_tests/core_tests/test_ndarray_scatter.py:124: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/core.pyx:1393: in cupy._core.core.ndarray.scatter_add
    _indexing._ndarray_scatter_add(self, slices, value)
cupy/_core/_routines_indexing.pyx:126: in cupy._core._routines_indexing._ndarray_scatter_add
    _scatter_op(self, slices, value, 'add')
cupy/_core/_routines_indexing.pyx:947: in cupy._core._routines_indexing._scatter_op
    _scatter_op_single(a_interm, reduced_idx, value, li, ri, op)
cupy/_core/_routines_indexing.pyx:869: in cupy._core._routines_indexing._scatter_op_single
    _scatter_add_kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b6949970>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/test_ndarray_scatter.py", line 124, in test_scatter_add
E           a.scatter_add(self.slices, self.value)
E         File "cupy/_core/core.pyx", line 1393, in cupy._core.core.ndarray.scatter_add
E           _indexing._ndarray_scatter_add(self, slices, value)
E         File "cupy/_core/_routines_indexing.pyx", line 126, in cupy._core._routines_indexing._ndarray_scatter_add
E           _scatter_op(self, slices, value, 'add')
E         File "cupy/_core/_routines_indexing.pyx", line 947, in cupy._core._routines_indexing._scatter_op
E           _scatter_op_single(a_interm, reduced_idx, value, li, ri, op)
E         File "cupy/_core/_routines_indexing.pyx", line 869, in cupy._core._routines_indexing._scatter_op_single
E           _scatter_add_kernel(
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
_ TestScatterParametrized_param_18_{shape=(2, 3, 4), slices=([1, 0], slice(None, None, None), [[2, 0], [3, 1]]), value=array([[[ 0,  1,  2],
        [ 3,  4,  5]],

       [[ 6,  7,  8],
        [ 9, 10, 11]]])}.test_scatter_max _

self = <<cupy_tests.core_tests.test_ndarray_scatter.TestScatterParametrized_param_18_{shape=(2, 3, 4), slices=([1, 0], slice(...2, 0], [3, 1]]), 'value': array([[[ 0,  1,  2],
        [ 3,  4,  5]],

       [[ 6,  7,  8],
        [ 9, 10, 11]]])}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float32'>

    @testing.for_dtypes([numpy.float32, numpy.int32, numpy.uint32,
                         numpy.uint64, numpy.ulonglong, numpy.float64])
    @testing.numpy_cupy_array_equal()
    def test_scatter_max(self, xp, dtype):
        a = xp.zeros(self.shape, dtype)
        if xp is cupy:
>           a.scatter_max(self.slices, self.value)

tests/cupy_tests/core_tests/test_ndarray_scatter.py:135: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/core.pyx:1402: in cupy._core.core.ndarray.scatter_max
    _indexing._ndarray_scatter_max(self, slices, value)
cupy/_core/_routines_indexing.pyx:130: in cupy._core._routines_indexing._ndarray_scatter_max
    _scatter_op(self, slices, value, 'max')
cupy/_core/_routines_indexing.pyx:947: in cupy._core._routines_indexing._scatter_op
    _scatter_op_single(a_interm, reduced_idx, value, li, ri, op)
cupy/_core/_routines_indexing.pyx:878: in cupy._core._routines_indexing._scatter_op_single
    _scatter_max_kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4f3e1c0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/test_ndarray_scatter.py", line 135, in test_scatter_max
E           a.scatter_max(self.slices, self.value)
E         File "cupy/_core/core.pyx", line 1402, in cupy._core.core.ndarray.scatter_max
E           _indexing._ndarray_scatter_max(self, slices, value)
E         File "cupy/_core/_routines_indexing.pyx", line 130, in cupy._core._routines_indexing._ndarray_scatter_max
E           _scatter_op(self, slices, value, 'max')
E         File "cupy/_core/_routines_indexing.pyx", line 947, in cupy._core._routines_indexing._scatter_op
E           _scatter_op_single(a_interm, reduced_idx, value, li, ri, op)
E         File "cupy/_core/_routines_indexing.pyx", line 878, in cupy._core._routines_indexing._scatter_op_single
E           _scatter_max_kernel(
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
_ TestScatterParametrized_param_18_{shape=(2, 3, 4), slices=([1, 0], slice(None, None, None), [[2, 0], [3, 1]]), value=array([[[ 0,  1,  2],
        [ 3,  4,  5]],

       [[ 6,  7,  8],
        [ 9, 10, 11]]])}.test_scatter_min _

self = <<cupy_tests.core_tests.test_ndarray_scatter.TestScatterParametrized_param_18_{shape=(2, 3, 4), slices=([1, 0], slice(...2, 0], [3, 1]]), 'value': array([[[ 0,  1,  2],
        [ 3,  4,  5]],

       [[ 6,  7,  8],
        [ 9, 10, 11]]])}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float32'>

    @testing.for_dtypes([numpy.float32, numpy.int32, numpy.uint32,
                         numpy.uint64, numpy.ulonglong, numpy.float64])
    @testing.numpy_cupy_array_equal()
    def test_scatter_min(self, xp, dtype):
        a = xp.zeros(self.shape, dtype)
        if xp is cupy:
>           a.scatter_min(self.slices, self.value)

tests/cupy_tests/core_tests/test_ndarray_scatter.py:146: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/core.pyx:1411: in cupy._core.core.ndarray.scatter_min
    _indexing._ndarray_scatter_min(self, slices, value)
cupy/_core/_routines_indexing.pyx:134: in cupy._core._routines_indexing._ndarray_scatter_min
    _scatter_op(self, slices, value, 'min')
cupy/_core/_routines_indexing.pyx:947: in cupy._core._routines_indexing._scatter_op
    _scatter_op_single(a_interm, reduced_idx, value, li, ri, op)
cupy/_core/_routines_indexing.pyx:887: in cupy._core._routines_indexing._scatter_op_single
    _scatter_min_kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03c49e3790>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/test_ndarray_scatter.py", line 146, in test_scatter_min
E           a.scatter_min(self.slices, self.value)
E         File "cupy/_core/core.pyx", line 1411, in cupy._core.core.ndarray.scatter_min
E           _indexing._ndarray_scatter_min(self, slices, value)
E         File "cupy/_core/_routines_indexing.pyx", line 134, in cupy._core._routines_indexing._ndarray_scatter_min
E           _scatter_op(self, slices, value, 'min')
E         File "cupy/_core/_routines_indexing.pyx", line 947, in cupy._core._routines_indexing._scatter_op
E           _scatter_op_single(a_interm, reduced_idx, value, li, ri, op)
E         File "cupy/_core/_routines_indexing.pyx", line 887, in cupy._core._routines_indexing._scatter_op_single
E           _scatter_min_kernel(
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
_ TestScatterParametrized_param_19_{shape=(1, 1, 2, 3, 4), slices=(None, slice(None, None, None), 0, [1, 0], slice(0, 2, 2), [2, -1]), value=1}.test_scatter_add _

self = <<cupy_tests.core_tests.test_ndarray_scatter.TestScatterParametrized_param_19_{shape=(1, 1, 2, 3, 4), slices=(None, sl... {'shape': (1, 1, 2, 3, 4), 'slices': (None, slice(None, None, None), 0, [1, 0], slice(0, 2, 2), [2, -1]), 'value': 1}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float32'>

    @testing.for_dtypes([numpy.float32, numpy.int32, numpy.uint32,
                         numpy.uint64, numpy.ulonglong, numpy.float16,
                         numpy.float64])
    @testing.numpy_cupy_array_equal()
    def test_scatter_add(self, xp, dtype):
        if cupy.cuda.runtime.is_hip and dtype == numpy.float16:
            pytest.skip('atomicAdd does not support float16 in HIP')
        a = xp.zeros(self.shape, dtype)
        if xp is cupy:
>           a.scatter_add(self.slices, self.value)

tests/cupy_tests/core_tests/test_ndarray_scatter.py:124: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/core.pyx:1393: in cupy._core.core.ndarray.scatter_add
    _indexing._ndarray_scatter_add(self, slices, value)
cupy/_core/_routines_indexing.pyx:126: in cupy._core._routines_indexing._ndarray_scatter_add
    _scatter_op(self, slices, value, 'add')
cupy/_core/_routines_indexing.pyx:947: in cupy._core._routines_indexing._scatter_op
    _scatter_op_single(a_interm, reduced_idx, value, li, ri, op)
cupy/_core/_routines_indexing.pyx:869: in cupy._core._routines_indexing._scatter_op_single
    _scatter_add_kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03d612bbb0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/test_ndarray_scatter.py", line 124, in test_scatter_add
E           a.scatter_add(self.slices, self.value)
E         File "cupy/_core/core.pyx", line 1393, in cupy._core.core.ndarray.scatter_add
E           _indexing._ndarray_scatter_add(self, slices, value)
E         File "cupy/_core/_routines_indexing.pyx", line 126, in cupy._core._routines_indexing._ndarray_scatter_add
E           _scatter_op(self, slices, value, 'add')
E         File "cupy/_core/_routines_indexing.pyx", line 947, in cupy._core._routines_indexing._scatter_op
E           _scatter_op_single(a_interm, reduced_idx, value, li, ri, op)
E         File "cupy/_core/_routines_indexing.pyx", line 869, in cupy._core._routines_indexing._scatter_op_single
E           _scatter_add_kernel(
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
_ TestScatterParametrized_param_19_{shape=(1, 1, 2, 3, 4), slices=(None, slice(None, None, None), 0, [1, 0], slice(0, 2, 2), [2, -1]), value=1}.test_scatter_max _

self = <<cupy_tests.core_tests.test_ndarray_scatter.TestScatterParametrized_param_19_{shape=(1, 1, 2, 3, 4), slices=(None, sl... {'shape': (1, 1, 2, 3, 4), 'slices': (None, slice(None, None, None), 0, [1, 0], slice(0, 2, 2), [2, -1]), 'value': 1}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float32'>

    @testing.for_dtypes([numpy.float32, numpy.int32, numpy.uint32,
                         numpy.uint64, numpy.ulonglong, numpy.float64])
    @testing.numpy_cupy_array_equal()
    def test_scatter_max(self, xp, dtype):
        a = xp.zeros(self.shape, dtype)
        if xp is cupy:
>           a.scatter_max(self.slices, self.value)

tests/cupy_tests/core_tests/test_ndarray_scatter.py:135: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/core.pyx:1402: in cupy._core.core.ndarray.scatter_max
    _indexing._ndarray_scatter_max(self, slices, value)
cupy/_core/_routines_indexing.pyx:130: in cupy._core._routines_indexing._ndarray_scatter_max
    _scatter_op(self, slices, value, 'max')
cupy/_core/_routines_indexing.pyx:947: in cupy._core._routines_indexing._scatter_op
    _scatter_op_single(a_interm, reduced_idx, value, li, ri, op)
cupy/_core/_routines_indexing.pyx:878: in cupy._core._routines_indexing._scatter_op_single
    _scatter_max_kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4fc9e20>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/test_ndarray_scatter.py", line 135, in test_scatter_max
E           a.scatter_max(self.slices, self.value)
E         File "cupy/_core/core.pyx", line 1402, in cupy._core.core.ndarray.scatter_max
E           _indexing._ndarray_scatter_max(self, slices, value)
E         File "cupy/_core/_routines_indexing.pyx", line 130, in cupy._core._routines_indexing._ndarray_scatter_max
E           _scatter_op(self, slices, value, 'max')
E         File "cupy/_core/_routines_indexing.pyx", line 947, in cupy._core._routines_indexing._scatter_op
E           _scatter_op_single(a_interm, reduced_idx, value, li, ri, op)
E         File "cupy/_core/_routines_indexing.pyx", line 878, in cupy._core._routines_indexing._scatter_op_single
E           _scatter_max_kernel(
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
_ TestScatterParametrized_param_19_{shape=(1, 1, 2, 3, 4), slices=(None, slice(None, None, None), 0, [1, 0], slice(0, 2, 2), [2, -1]), value=1}.test_scatter_min _

self = <<cupy_tests.core_tests.test_ndarray_scatter.TestScatterParametrized_param_19_{shape=(1, 1, 2, 3, 4), slices=(None, sl... {'shape': (1, 1, 2, 3, 4), 'slices': (None, slice(None, None, None), 0, [1, 0], slice(0, 2, 2), [2, -1]), 'value': 1}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float32'>

    @testing.for_dtypes([numpy.float32, numpy.int32, numpy.uint32,
                         numpy.uint64, numpy.ulonglong, numpy.float64])
    @testing.numpy_cupy_array_equal()
    def test_scatter_min(self, xp, dtype):
        a = xp.zeros(self.shape, dtype)
        if xp is cupy:
>           a.scatter_min(self.slices, self.value)

tests/cupy_tests/core_tests/test_ndarray_scatter.py:146: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/core.pyx:1411: in cupy._core.core.ndarray.scatter_min
    _indexing._ndarray_scatter_min(self, slices, value)
cupy/_core/_routines_indexing.pyx:134: in cupy._core._routines_indexing._ndarray_scatter_min
    _scatter_op(self, slices, value, 'min')
cupy/_core/_routines_indexing.pyx:947: in cupy._core._routines_indexing._scatter_op
    _scatter_op_single(a_interm, reduced_idx, value, li, ri, op)
cupy/_core/_routines_indexing.pyx:887: in cupy._core._routines_indexing._scatter_op_single
    _scatter_min_kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4ec9670>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/test_ndarray_scatter.py", line 146, in test_scatter_min
E           a.scatter_min(self.slices, self.value)
E         File "cupy/_core/core.pyx", line 1411, in cupy._core.core.ndarray.scatter_min
E           _indexing._ndarray_scatter_min(self, slices, value)
E         File "cupy/_core/_routines_indexing.pyx", line 134, in cupy._core._routines_indexing._ndarray_scatter_min
E           _scatter_op(self, slices, value, 'min')
E         File "cupy/_core/_routines_indexing.pyx", line 947, in cupy._core._routines_indexing._scatter_op
E           _scatter_op_single(a_interm, reduced_idx, value, li, ri, op)
E         File "cupy/_core/_routines_indexing.pyx", line 887, in cupy._core._routines_indexing._scatter_op_single
E           _scatter_min_kernel(
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
_ TestScatterParametrized_param_20_{shape=(2, 3, 4), slices=([1, 1], [1, 1]), value=array([[0, 1, 2, 3],
       [4, 5, 6, 7]])}.test_scatter_add _

self = <<cupy_tests.core_tests.test_ndarray_scatter.TestScatterParametrized_param_20_{shape=(2, 3, 4), slices=([1, 1], [1, 1]...add>  parameter: {'shape': (2, 3, 4), 'slices': ([1, 1], [1, 1]), 'value': array([[0, 1, 2, 3],
       [4, 5, 6, 7]])}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float32'>

    @testing.for_dtypes([numpy.float32, numpy.int32, numpy.uint32,
                         numpy.uint64, numpy.ulonglong, numpy.float16,
                         numpy.float64])
    @testing.numpy_cupy_array_equal()
    def test_scatter_add(self, xp, dtype):
        if cupy.cuda.runtime.is_hip and dtype == numpy.float16:
            pytest.skip('atomicAdd does not support float16 in HIP')
        a = xp.zeros(self.shape, dtype)
        if xp is cupy:
>           a.scatter_add(self.slices, self.value)

tests/cupy_tests/core_tests/test_ndarray_scatter.py:124: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/core.pyx:1393: in cupy._core.core.ndarray.scatter_add
    _indexing._ndarray_scatter_add(self, slices, value)
cupy/_core/_routines_indexing.pyx:126: in cupy._core._routines_indexing._ndarray_scatter_add
    _scatter_op(self, slices, value, 'add')
cupy/_core/_routines_indexing.pyx:947: in cupy._core._routines_indexing._scatter_op
    _scatter_op_single(a_interm, reduced_idx, value, li, ri, op)
cupy/_core/_routines_indexing.pyx:869: in cupy._core._routines_indexing._scatter_op_single
    _scatter_add_kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4e3db20>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/test_ndarray_scatter.py", line 124, in test_scatter_add
E           a.scatter_add(self.slices, self.value)
E         File "cupy/_core/core.pyx", line 1393, in cupy._core.core.ndarray.scatter_add
E           _indexing._ndarray_scatter_add(self, slices, value)
E         File "cupy/_core/_routines_indexing.pyx", line 126, in cupy._core._routines_indexing._ndarray_scatter_add
E           _scatter_op(self, slices, value, 'add')
E         File "cupy/_core/_routines_indexing.pyx", line 947, in cupy._core._routines_indexing._scatter_op
E           _scatter_op_single(a_interm, reduced_idx, value, li, ri, op)
E         File "cupy/_core/_routines_indexing.pyx", line 869, in cupy._core._routines_indexing._scatter_op_single
E           _scatter_add_kernel(
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
_ TestScatterParametrized_param_20_{shape=(2, 3, 4), slices=([1, 1], [1, 1]), value=array([[0, 1, 2, 3],
       [4, 5, 6, 7]])}.test_scatter_max _

self = <<cupy_tests.core_tests.test_ndarray_scatter.TestScatterParametrized_param_20_{shape=(2, 3, 4), slices=([1, 1], [1, 1]...max>  parameter: {'shape': (2, 3, 4), 'slices': ([1, 1], [1, 1]), 'value': array([[0, 1, 2, 3],
       [4, 5, 6, 7]])}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float64'>

    @testing.for_dtypes([numpy.float32, numpy.int32, numpy.uint32,
                         numpy.uint64, numpy.ulonglong, numpy.float64])
    @testing.numpy_cupy_array_equal()
    def test_scatter_max(self, xp, dtype):
        a = xp.zeros(self.shape, dtype)
        if xp is cupy:
>           a.scatter_max(self.slices, self.value)

tests/cupy_tests/core_tests/test_ndarray_scatter.py:135: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/core.pyx:1402: in cupy._core.core.ndarray.scatter_max
    _indexing._ndarray_scatter_max(self, slices, value)
cupy/_core/_routines_indexing.pyx:130: in cupy._core._routines_indexing._ndarray_scatter_max
    _scatter_op(self, slices, value, 'max')
cupy/_core/_routines_indexing.pyx:947: in cupy._core._routines_indexing._scatter_op
    _scatter_op_single(a_interm, reduced_idx, value, li, ri, op)
cupy/_core/_routines_indexing.pyx:878: in cupy._core._routines_indexing._scatter_op_single
    _scatter_max_kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03cd4f3fa0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/test_ndarray_scatter.py", line 135, in test_scatter_max
E           a.scatter_max(self.slices, self.value)
E         File "cupy/_core/core.pyx", line 1402, in cupy._core.core.ndarray.scatter_max
E           _indexing._ndarray_scatter_max(self, slices, value)
E         File "cupy/_core/_routines_indexing.pyx", line 130, in cupy._core._routines_indexing._ndarray_scatter_max
E           _scatter_op(self, slices, value, 'max')
E         File "cupy/_core/_routines_indexing.pyx", line 947, in cupy._core._routines_indexing._scatter_op
E           _scatter_op_single(a_interm, reduced_idx, value, li, ri, op)
E         File "cupy/_core/_routines_indexing.pyx", line 878, in cupy._core._routines_indexing._scatter_op_single
E           _scatter_max_kernel(
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestScatterParametrized_param_20_{shape=(2, 3, 4), slices=([1, 1], [1, 1]), value=array([[0, 1, 2, 3],
       [4, 5, 6, 7]])}.test_scatter_min _

self = <<cupy_tests.core_tests.test_ndarray_scatter.TestScatterParametrized_param_20_{shape=(2, 3, 4), slices=([1, 1], [1, 1]...min>  parameter: {'shape': (2, 3, 4), 'slices': ([1, 1], [1, 1]), 'value': array([[0, 1, 2, 3],
       [4, 5, 6, 7]])}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float32'>

    @testing.for_dtypes([numpy.float32, numpy.int32, numpy.uint32,
                         numpy.uint64, numpy.ulonglong, numpy.float64])
    @testing.numpy_cupy_array_equal()
    def test_scatter_min(self, xp, dtype):
        a = xp.zeros(self.shape, dtype)
        if xp is cupy:
>           a.scatter_min(self.slices, self.value)

tests/cupy_tests/core_tests/test_ndarray_scatter.py:146: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/core.pyx:1411: in cupy._core.core.ndarray.scatter_min
    _indexing._ndarray_scatter_min(self, slices, value)
cupy/_core/_routines_indexing.pyx:134: in cupy._core._routines_indexing._ndarray_scatter_min
    _scatter_op(self, slices, value, 'min')
cupy/_core/_routines_indexing.pyx:947: in cupy._core._routines_indexing._scatter_op
    _scatter_op_single(a_interm, reduced_idx, value, li, ri, op)
cupy/_core/_routines_indexing.pyx:887: in cupy._core._routines_indexing._scatter_op_single
    _scatter_min_kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4ea0280>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/test_ndarray_scatter.py", line 146, in test_scatter_min
E           a.scatter_min(self.slices, self.value)
E         File "cupy/_core/core.pyx", line 1411, in cupy._core.core.ndarray.scatter_min
E           _indexing._ndarray_scatter_min(self, slices, value)
E         File "cupy/_core/_routines_indexing.pyx", line 134, in cupy._core._routines_indexing._ndarray_scatter_min
E           _scatter_op(self, slices, value, 'min')
E         File "cupy/_core/_routines_indexing.pyx", line 947, in cupy._core._routines_indexing._scatter_op
E           _scatter_op_single(a_interm, reduced_idx, value, li, ri, op)
E         File "cupy/_core/_routines_indexing.pyx", line 887, in cupy._core._routines_indexing._scatter_op_single
E           _scatter_min_kernel(
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
_ TestScatterParametrized_param_21_{shape=(2, 3, 4), slices=([1, 1], slice(None, None, None), [[2, 2], [3, 1]]), value=array([[[ 0,  1,  2],
        [ 3,  4,  5]],

       [[ 6,  7,  8],
        [ 9, 10, 11]]])}.test_scatter_add _

self = <<cupy_tests.core_tests.test_ndarray_scatter.TestScatterParametrized_param_21_{shape=(2, 3, 4), slices=([1, 1], slice(...2, 2], [3, 1]]), 'value': array([[[ 0,  1,  2],
        [ 3,  4,  5]],

       [[ 6,  7,  8],
        [ 9, 10, 11]]])}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float32'>

    @testing.for_dtypes([numpy.float32, numpy.int32, numpy.uint32,
                         numpy.uint64, numpy.ulonglong, numpy.float16,
                         numpy.float64])
    @testing.numpy_cupy_array_equal()
    def test_scatter_add(self, xp, dtype):
        if cupy.cuda.runtime.is_hip and dtype == numpy.float16:
            pytest.skip('atomicAdd does not support float16 in HIP')
        a = xp.zeros(self.shape, dtype)
        if xp is cupy:
>           a.scatter_add(self.slices, self.value)

tests/cupy_tests/core_tests/test_ndarray_scatter.py:124: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/core.pyx:1393: in cupy._core.core.ndarray.scatter_add
    _indexing._ndarray_scatter_add(self, slices, value)
cupy/_core/_routines_indexing.pyx:126: in cupy._core._routines_indexing._ndarray_scatter_add
    _scatter_op(self, slices, value, 'add')
cupy/_core/_routines_indexing.pyx:947: in cupy._core._routines_indexing._scatter_op
    _scatter_op_single(a_interm, reduced_idx, value, li, ri, op)
cupy/_core/_routines_indexing.pyx:869: in cupy._core._routines_indexing._scatter_op_single
    _scatter_add_kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4eb5c10>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/test_ndarray_scatter.py", line 124, in test_scatter_add
E           a.scatter_add(self.slices, self.value)
E         File "cupy/_core/core.pyx", line 1393, in cupy._core.core.ndarray.scatter_add
E           _indexing._ndarray_scatter_add(self, slices, value)
E         File "cupy/_core/_routines_indexing.pyx", line 126, in cupy._core._routines_indexing._ndarray_scatter_add
E           _scatter_op(self, slices, value, 'add')
E         File "cupy/_core/_routines_indexing.pyx", line 947, in cupy._core._routines_indexing._scatter_op
E           _scatter_op_single(a_interm, reduced_idx, value, li, ri, op)
E         File "cupy/_core/_routines_indexing.pyx", line 869, in cupy._core._routines_indexing._scatter_op_single
E           _scatter_add_kernel(
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
_ TestScatterParametrized_param_21_{shape=(2, 3, 4), slices=([1, 1], slice(None, None, None), [[2, 2], [3, 1]]), value=array([[[ 0,  1,  2],
        [ 3,  4,  5]],

       [[ 6,  7,  8],
        [ 9, 10, 11]]])}.test_scatter_max _

self = <<cupy_tests.core_tests.test_ndarray_scatter.TestScatterParametrized_param_21_{shape=(2, 3, 4), slices=([1, 1], slice(...2, 2], [3, 1]]), 'value': array([[[ 0,  1,  2],
        [ 3,  4,  5]],

       [[ 6,  7,  8],
        [ 9, 10, 11]]])}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float32'>

    @testing.for_dtypes([numpy.float32, numpy.int32, numpy.uint32,
                         numpy.uint64, numpy.ulonglong, numpy.float64])
    @testing.numpy_cupy_array_equal()
    def test_scatter_max(self, xp, dtype):
        a = xp.zeros(self.shape, dtype)
        if xp is cupy:
>           a.scatter_max(self.slices, self.value)

tests/cupy_tests/core_tests/test_ndarray_scatter.py:135: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/core.pyx:1402: in cupy._core.core.ndarray.scatter_max
    _indexing._ndarray_scatter_max(self, slices, value)
cupy/_core/_routines_indexing.pyx:130: in cupy._core._routines_indexing._ndarray_scatter_max
    _scatter_op(self, slices, value, 'max')
cupy/_core/_routines_indexing.pyx:947: in cupy._core._routines_indexing._scatter_op
    _scatter_op_single(a_interm, reduced_idx, value, li, ri, op)
cupy/_core/_routines_indexing.pyx:878: in cupy._core._routines_indexing._scatter_op_single
    _scatter_max_kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03cd4d4640>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/test_ndarray_scatter.py", line 135, in test_scatter_max
E           a.scatter_max(self.slices, self.value)
E         File "cupy/_core/core.pyx", line 1402, in cupy._core.core.ndarray.scatter_max
E           _indexing._ndarray_scatter_max(self, slices, value)
E         File "cupy/_core/_routines_indexing.pyx", line 130, in cupy._core._routines_indexing._ndarray_scatter_max
E           _scatter_op(self, slices, value, 'max')
E         File "cupy/_core/_routines_indexing.pyx", line 947, in cupy._core._routines_indexing._scatter_op
E           _scatter_op_single(a_interm, reduced_idx, value, li, ri, op)
E         File "cupy/_core/_routines_indexing.pyx", line 878, in cupy._core._routines_indexing._scatter_op_single
E           _scatter_max_kernel(
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
_ TestScatterParametrized_param_21_{shape=(2, 3, 4), slices=([1, 1], slice(None, None, None), [[2, 2], [3, 1]]), value=array([[[ 0,  1,  2],
        [ 3,  4,  5]],

       [[ 6,  7,  8],
        [ 9, 10, 11]]])}.test_scatter_min _

self = <<cupy_tests.core_tests.test_ndarray_scatter.TestScatterParametrized_param_21_{shape=(2, 3, 4), slices=([1, 1], slice(...2, 2], [3, 1]]), 'value': array([[[ 0,  1,  2],
        [ 3,  4,  5]],

       [[ 6,  7,  8],
        [ 9, 10, 11]]])}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float32'>

    @testing.for_dtypes([numpy.float32, numpy.int32, numpy.uint32,
                         numpy.uint64, numpy.ulonglong, numpy.float64])
    @testing.numpy_cupy_array_equal()
    def test_scatter_min(self, xp, dtype):
        a = xp.zeros(self.shape, dtype)
        if xp is cupy:
>           a.scatter_min(self.slices, self.value)

tests/cupy_tests/core_tests/test_ndarray_scatter.py:146: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/core.pyx:1411: in cupy._core.core.ndarray.scatter_min
    _indexing._ndarray_scatter_min(self, slices, value)
cupy/_core/_routines_indexing.pyx:134: in cupy._core._routines_indexing._ndarray_scatter_min
    _scatter_op(self, slices, value, 'min')
cupy/_core/_routines_indexing.pyx:947: in cupy._core._routines_indexing._scatter_op
    _scatter_op_single(a_interm, reduced_idx, value, li, ri, op)
cupy/_core/_routines_indexing.pyx:887: in cupy._core._routines_indexing._scatter_op_single
    _scatter_min_kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03bc03ee20>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/test_ndarray_scatter.py", line 146, in test_scatter_min
E           a.scatter_min(self.slices, self.value)
E         File "cupy/_core/core.pyx", line 1411, in cupy._core.core.ndarray.scatter_min
E           _indexing._ndarray_scatter_min(self, slices, value)
E         File "cupy/_core/_routines_indexing.pyx", line 134, in cupy._core._routines_indexing._ndarray_scatter_min
E           _scatter_op(self, slices, value, 'min')
E         File "cupy/_core/_routines_indexing.pyx", line 947, in cupy._core._routines_indexing._scatter_op
E           _scatter_op_single(a_interm, reduced_idx, value, li, ri, op)
E         File "cupy/_core/_routines_indexing.pyx", line 887, in cupy._core._routines_indexing._scatter_op_single
E           _scatter_min_kernel(
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
_ TestScatterParametrized_param_22_{shape=(2, 3, 4), slices=([1, 1], 1, [[2, 2], [3, 1]]), value=array([[0, 1],
       [2, 3]])}.test_scatter_add _

self = <<cupy_tests.core_tests.test_ndarray_scatter.TestScatterParametrized_param_22_{shape=(2, 3, 4), slices=([1, 1], 1, [[2...dd>  parameter: {'shape': (2, 3, 4), 'slices': ([1, 1], 1, [[2, 2], [3, 1]]), 'value': array([[0, 1],
       [2, 3]])}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float32'>

    @testing.for_dtypes([numpy.float32, numpy.int32, numpy.uint32,
                         numpy.uint64, numpy.ulonglong, numpy.float16,
                         numpy.float64])
    @testing.numpy_cupy_array_equal()
    def test_scatter_add(self, xp, dtype):
        if cupy.cuda.runtime.is_hip and dtype == numpy.float16:
            pytest.skip('atomicAdd does not support float16 in HIP')
        a = xp.zeros(self.shape, dtype)
        if xp is cupy:
>           a.scatter_add(self.slices, self.value)

tests/cupy_tests/core_tests/test_ndarray_scatter.py:124: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/core.pyx:1393: in cupy._core.core.ndarray.scatter_add
    _indexing._ndarray_scatter_add(self, slices, value)
cupy/_core/_routines_indexing.pyx:126: in cupy._core._routines_indexing._ndarray_scatter_add
    _scatter_op(self, slices, value, 'add')
cupy/_core/_routines_indexing.pyx:947: in cupy._core._routines_indexing._scatter_op
    _scatter_op_single(a_interm, reduced_idx, value, li, ri, op)
cupy/_core/_routines_indexing.pyx:869: in cupy._core._routines_indexing._scatter_op_single
    _scatter_add_kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4fdc3d0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/test_ndarray_scatter.py", line 124, in test_scatter_add
E           a.scatter_add(self.slices, self.value)
E         File "cupy/_core/core.pyx", line 1393, in cupy._core.core.ndarray.scatter_add
E           _indexing._ndarray_scatter_add(self, slices, value)
E         File "cupy/_core/_routines_indexing.pyx", line 126, in cupy._core._routines_indexing._ndarray_scatter_add
E           _scatter_op(self, slices, value, 'add')
E         File "cupy/_core/_routines_indexing.pyx", line 947, in cupy._core._routines_indexing._scatter_op
E           _scatter_op_single(a_interm, reduced_idx, value, li, ri, op)
E         File "cupy/_core/_routines_indexing.pyx", line 869, in cupy._core._routines_indexing._scatter_op_single
E           _scatter_add_kernel(
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
_ TestScatterParametrized_param_22_{shape=(2, 3, 4), slices=([1, 1], 1, [[2, 2], [3, 1]]), value=array([[0, 1],
       [2, 3]])}.test_scatter_max _

self = <<cupy_tests.core_tests.test_ndarray_scatter.TestScatterParametrized_param_22_{shape=(2, 3, 4), slices=([1, 1], 1, [[2...ax>  parameter: {'shape': (2, 3, 4), 'slices': ([1, 1], 1, [[2, 2], [3, 1]]), 'value': array([[0, 1],
       [2, 3]])}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float32'>

    @testing.for_dtypes([numpy.float32, numpy.int32, numpy.uint32,
                         numpy.uint64, numpy.ulonglong, numpy.float64])
    @testing.numpy_cupy_array_equal()
    def test_scatter_max(self, xp, dtype):
        a = xp.zeros(self.shape, dtype)
        if xp is cupy:
>           a.scatter_max(self.slices, self.value)

tests/cupy_tests/core_tests/test_ndarray_scatter.py:135: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/core.pyx:1402: in cupy._core.core.ndarray.scatter_max
    _indexing._ndarray_scatter_max(self, slices, value)
cupy/_core/_routines_indexing.pyx:130: in cupy._core._routines_indexing._ndarray_scatter_max
    _scatter_op(self, slices, value, 'max')
cupy/_core/_routines_indexing.pyx:947: in cupy._core._routines_indexing._scatter_op
    _scatter_op_single(a_interm, reduced_idx, value, li, ri, op)
cupy/_core/_routines_indexing.pyx:878: in cupy._core._routines_indexing._scatter_op_single
    _scatter_max_kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4f3e250>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/test_ndarray_scatter.py", line 135, in test_scatter_max
E           a.scatter_max(self.slices, self.value)
E         File "cupy/_core/core.pyx", line 1402, in cupy._core.core.ndarray.scatter_max
E           _indexing._ndarray_scatter_max(self, slices, value)
E         File "cupy/_core/_routines_indexing.pyx", line 130, in cupy._core._routines_indexing._ndarray_scatter_max
E           _scatter_op(self, slices, value, 'max')
E         File "cupy/_core/_routines_indexing.pyx", line 947, in cupy._core._routines_indexing._scatter_op
E           _scatter_op_single(a_interm, reduced_idx, value, li, ri, op)
E         File "cupy/_core/_routines_indexing.pyx", line 878, in cupy._core._routines_indexing._scatter_op_single
E           _scatter_max_kernel(
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
_ TestScatterParametrized_param_22_{shape=(2, 3, 4), slices=([1, 1], 1, [[2, 2], [3, 1]]), value=array([[0, 1],
       [2, 3]])}.test_scatter_min _

self = <<cupy_tests.core_tests.test_ndarray_scatter.TestScatterParametrized_param_22_{shape=(2, 3, 4), slices=([1, 1], 1, [[2...in>  parameter: {'shape': (2, 3, 4), 'slices': ([1, 1], 1, [[2, 2], [3, 1]]), 'value': array([[0, 1],
       [2, 3]])}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float32'>

    @testing.for_dtypes([numpy.float32, numpy.int32, numpy.uint32,
                         numpy.uint64, numpy.ulonglong, numpy.float64])
    @testing.numpy_cupy_array_equal()
    def test_scatter_min(self, xp, dtype):
        a = xp.zeros(self.shape, dtype)
        if xp is cupy:
>           a.scatter_min(self.slices, self.value)

tests/cupy_tests/core_tests/test_ndarray_scatter.py:146: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/core.pyx:1411: in cupy._core.core.ndarray.scatter_min
    _indexing._ndarray_scatter_min(self, slices, value)
cupy/_core/_routines_indexing.pyx:134: in cupy._core._routines_indexing._ndarray_scatter_min
    _scatter_op(self, slices, value, 'min')
cupy/_core/_routines_indexing.pyx:947: in cupy._core._routines_indexing._scatter_op
    _scatter_op_single(a_interm, reduced_idx, value, li, ri, op)
cupy/_core/_routines_indexing.pyx:887: in cupy._core._routines_indexing._scatter_op_single
    _scatter_min_kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4e13640>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/test_ndarray_scatter.py", line 146, in test_scatter_min
E           a.scatter_min(self.slices, self.value)
E         File "cupy/_core/core.pyx", line 1411, in cupy._core.core.ndarray.scatter_min
E           _indexing._ndarray_scatter_min(self, slices, value)
E         File "cupy/_core/_routines_indexing.pyx", line 134, in cupy._core._routines_indexing._ndarray_scatter_min
E           _scatter_op(self, slices, value, 'min')
E         File "cupy/_core/_routines_indexing.pyx", line 947, in cupy._core._routines_indexing._scatter_op
E           _scatter_op_single(a_interm, reduced_idx, value, li, ri, op)
E         File "cupy/_core/_routines_indexing.pyx", line 887, in cupy._core._routines_indexing._scatter_op_single
E           _scatter_min_kernel(
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
_ TestScatterParametrized_param_23_{shape=(3, 4, 5), slices=(array([[[ True, False, False,  True,  True],
  ...
        [ True,  True,  True,  True, False]]]),), value=1}.test_scatter_add _

self = <<cupy_tests.core_tests.test_ndarray_scatter.TestScatterParametrized_param_23_{shape=(3, 4, 5), slices=(array([[[ True...se, False],
        [ True, False, False, False,  True],
        [ True,  True,  True,  True, False]]]),), 'value': 1}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float32'>

    @testing.for_dtypes([numpy.float32, numpy.int32, numpy.uint32,
                         numpy.uint64, numpy.ulonglong, numpy.float16,
                         numpy.float64])
    @testing.numpy_cupy_array_equal()
    def test_scatter_add(self, xp, dtype):
        if cupy.cuda.runtime.is_hip and dtype == numpy.float16:
            pytest.skip('atomicAdd does not support float16 in HIP')
        a = xp.zeros(self.shape, dtype)
        if xp is cupy:
>           a.scatter_add(self.slices, self.value)

tests/cupy_tests/core_tests/test_ndarray_scatter.py:124: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/core.pyx:1393: in cupy._core.core.ndarray.scatter_add
    _indexing._ndarray_scatter_add(self, slices, value)
cupy/_core/_routines_indexing.pyx:126: in cupy._core._routines_indexing._ndarray_scatter_add
    _scatter_op(self, slices, value, 'add')
cupy/_core/_routines_indexing.pyx:934: in cupy._core._routines_indexing._scatter_op
    _scatter_op_mask_single(a, mask, value, mask_i, op)
cupy/_core/_routines_indexing.pyx:914: in cupy._core._routines_indexing._scatter_op_mask_single
    _scatter_add_mask_kernel(src, mask, mask_scanned, a)
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4e2cf10>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/test_ndarray_scatter.py", line 124, in test_scatter_add
E           a.scatter_add(self.slices, self.value)
E         File "cupy/_core/core.pyx", line 1393, in cupy._core.core.ndarray.scatter_add
E           _indexing._ndarray_scatter_add(self, slices, value)
E         File "cupy/_core/_routines_indexing.pyx", line 126, in cupy._core._routines_indexing._ndarray_scatter_add
E           _scatter_op(self, slices, value, 'add')
E         File "cupy/_core/_routines_indexing.pyx", line 934, in cupy._core._routines_indexing._scatter_op
E           _scatter_op_mask_single(a, mask, value, mask_i, op)
E         File "cupy/_core/_routines_indexing.pyx", line 914, in cupy._core._routines_indexing._scatter_op_mask_single
E           _scatter_add_mask_kernel(src, mask, mask_scanned, a)
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
_ TestScatterParametrized_param_23_{shape=(3, 4, 5), slices=(array([[[ True, False, False,  True,  True],
  ...
        [ True,  True,  True,  True, False]]]),), value=1}.test_scatter_max _

self = <<cupy_tests.core_tests.test_ndarray_scatter.TestScatterParametrized_param_23_{shape=(3, 4, 5), slices=(array([[[ True...se, False],
        [ True, False, False, False,  True],
        [ True,  True,  True,  True, False]]]),), 'value': 1}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float32'>

    @testing.for_dtypes([numpy.float32, numpy.int32, numpy.uint32,
                         numpy.uint64, numpy.ulonglong, numpy.float64])
    @testing.numpy_cupy_array_equal()
    def test_scatter_max(self, xp, dtype):
        a = xp.zeros(self.shape, dtype)
        if xp is cupy:
>           a.scatter_max(self.slices, self.value)

tests/cupy_tests/core_tests/test_ndarray_scatter.py:135: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/core.pyx:1402: in cupy._core.core.ndarray.scatter_max
    _indexing._ndarray_scatter_max(self, slices, value)
cupy/_core/_routines_indexing.pyx:130: in cupy._core._routines_indexing._ndarray_scatter_max
    _scatter_op(self, slices, value, 'max')
cupy/_core/_routines_indexing.pyx:934: in cupy._core._routines_indexing._scatter_op
    _scatter_op_mask_single(a, mask, value, mask_i, op)
cupy/_core/_routines_indexing.pyx:916: in cupy._core._routines_indexing._scatter_op_mask_single
    _scatter_max_mask_kernel(src, mask, mask_scanned, a)
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4abedf0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/test_ndarray_scatter.py", line 135, in test_scatter_max
E           a.scatter_max(self.slices, self.value)
E         File "cupy/_core/core.pyx", line 1402, in cupy._core.core.ndarray.scatter_max
E           _indexing._ndarray_scatter_max(self, slices, value)
E         File "cupy/_core/_routines_indexing.pyx", line 130, in cupy._core._routines_indexing._ndarray_scatter_max
E           _scatter_op(self, slices, value, 'max')
E         File "cupy/_core/_routines_indexing.pyx", line 934, in cupy._core._routines_indexing._scatter_op
E           _scatter_op_mask_single(a, mask, value, mask_i, op)
E         File "cupy/_core/_routines_indexing.pyx", line 916, in cupy._core._routines_indexing._scatter_op_mask_single
E           _scatter_max_mask_kernel(src, mask, mask_scanned, a)
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
_ TestScatterParametrized_param_23_{shape=(3, 4, 5), slices=(array([[[ True, False, False,  True,  True],
  ...
        [ True,  True,  True,  True, False]]]),), value=1}.test_scatter_min _

self = <<cupy_tests.core_tests.test_ndarray_scatter.TestScatterParametrized_param_23_{shape=(3, 4, 5), slices=(array([[[ True...se, False],
        [ True, False, False, False,  True],
        [ True,  True,  True,  True, False]]]),), 'value': 1}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float32'>

    @testing.for_dtypes([numpy.float32, numpy.int32, numpy.uint32,
                         numpy.uint64, numpy.ulonglong, numpy.float64])
    @testing.numpy_cupy_array_equal()
    def test_scatter_min(self, xp, dtype):
        a = xp.zeros(self.shape, dtype)
        if xp is cupy:
>           a.scatter_min(self.slices, self.value)

tests/cupy_tests/core_tests/test_ndarray_scatter.py:146: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/core.pyx:1411: in cupy._core.core.ndarray.scatter_min
    _indexing._ndarray_scatter_min(self, slices, value)
cupy/_core/_routines_indexing.pyx:134: in cupy._core._routines_indexing._ndarray_scatter_min
    _scatter_op(self, slices, value, 'min')
cupy/_core/_routines_indexing.pyx:934: in cupy._core._routines_indexing._scatter_op
    _scatter_op_mask_single(a, mask, value, mask_i, op)
cupy/_core/_routines_indexing.pyx:918: in cupy._core._routines_indexing._scatter_op_mask_single
    _scatter_min_mask_kernel(src, mask, mask_scanned, a)
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4a56820>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/test_ndarray_scatter.py", line 146, in test_scatter_min
E           a.scatter_min(self.slices, self.value)
E         File "cupy/_core/core.pyx", line 1411, in cupy._core.core.ndarray.scatter_min
E           _indexing._ndarray_scatter_min(self, slices, value)
E         File "cupy/_core/_routines_indexing.pyx", line 134, in cupy._core._routines_indexing._ndarray_scatter_min
E           _scatter_op(self, slices, value, 'min')
E         File "cupy/_core/_routines_indexing.pyx", line 934, in cupy._core._routines_indexing._scatter_op
E           _scatter_op_mask_single(a, mask, value, mask_i, op)
E         File "cupy/_core/_routines_indexing.pyx", line 918, in cupy._core._routines_indexing._scatter_op_mask_single
E           _scatter_min_mask_kernel(src, mask, mask_scanned, a)
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
_ TestScatterParametrized_param_24_{shape=(3, 4, 5), slices=(array([ True, False,  True]),), value=array([[ 0,  1,  2,  3,  4],
       [ 5,  6,  7,...0, 11, 12, 13, 14],
       [15, 16, 17, 18, 19]])}.test_scatter_add _

self = <<cupy_tests.core_tests.test_ndarray_scatter.TestScatterParametrized_param_24_{shape=(3, 4, 5), slices=(array([ True, ... array([[ 0,  1,  2,  3,  4],
       [ 5,  6,  7,  8,  9],
       [10, 11, 12, 13, 14],
       [15, 16, 17, 18, 19]])}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float32'>

    @testing.for_dtypes([numpy.float32, numpy.int32, numpy.uint32,
                         numpy.uint64, numpy.ulonglong, numpy.float16,
                         numpy.float64])
    @testing.numpy_cupy_array_equal()
    def test_scatter_add(self, xp, dtype):
        if cupy.cuda.runtime.is_hip and dtype == numpy.float16:
            pytest.skip('atomicAdd does not support float16 in HIP')
        a = xp.zeros(self.shape, dtype)
        if xp is cupy:
>           a.scatter_add(self.slices, self.value)

tests/cupy_tests/core_tests/test_ndarray_scatter.py:124: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/core.pyx:1393: in cupy._core.core.ndarray.scatter_add
    _indexing._ndarray_scatter_add(self, slices, value)
cupy/_core/_routines_indexing.pyx:126: in cupy._core._routines_indexing._ndarray_scatter_add
    _scatter_op(self, slices, value, 'add')
cupy/_core/_routines_indexing.pyx:934: in cupy._core._routines_indexing._scatter_op
    _scatter_op_mask_single(a, mask, value, mask_i, op)
cupy/_core/_routines_indexing.pyx:914: in cupy._core._routines_indexing._scatter_op_mask_single
    _scatter_add_mask_kernel(src, mask, mask_scanned, a)
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4f53100>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/test_ndarray_scatter.py", line 124, in test_scatter_add
E           a.scatter_add(self.slices, self.value)
E         File "cupy/_core/core.pyx", line 1393, in cupy._core.core.ndarray.scatter_add
E           _indexing._ndarray_scatter_add(self, slices, value)
E         File "cupy/_core/_routines_indexing.pyx", line 126, in cupy._core._routines_indexing._ndarray_scatter_add
E           _scatter_op(self, slices, value, 'add')
E         File "cupy/_core/_routines_indexing.pyx", line 934, in cupy._core._routines_indexing._scatter_op
E           _scatter_op_mask_single(a, mask, value, mask_i, op)
E         File "cupy/_core/_routines_indexing.pyx", line 914, in cupy._core._routines_indexing._scatter_op_mask_single
E           _scatter_add_mask_kernel(src, mask, mask_scanned, a)
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
_ TestScatterParametrized_param_24_{shape=(3, 4, 5), slices=(array([ True, False,  True]),), value=array([[ 0,  1,  2,  3,  4],
       [ 5,  6,  7,...0, 11, 12, 13, 14],
       [15, 16, 17, 18, 19]])}.test_scatter_max _

self = <<cupy_tests.core_tests.test_ndarray_scatter.TestScatterParametrized_param_24_{shape=(3, 4, 5), slices=(array([ True, ... array([[ 0,  1,  2,  3,  4],
       [ 5,  6,  7,  8,  9],
       [10, 11, 12, 13, 14],
       [15, 16, 17, 18, 19]])}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float32'>

    @testing.for_dtypes([numpy.float32, numpy.int32, numpy.uint32,
                         numpy.uint64, numpy.ulonglong, numpy.float64])
    @testing.numpy_cupy_array_equal()
    def test_scatter_max(self, xp, dtype):
        a = xp.zeros(self.shape, dtype)
        if xp is cupy:
>           a.scatter_max(self.slices, self.value)

tests/cupy_tests/core_tests/test_ndarray_scatter.py:135: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/core.pyx:1402: in cupy._core.core.ndarray.scatter_max
    _indexing._ndarray_scatter_max(self, slices, value)
cupy/_core/_routines_indexing.pyx:130: in cupy._core._routines_indexing._ndarray_scatter_max
    _scatter_op(self, slices, value, 'max')
cupy/_core/_routines_indexing.pyx:934: in cupy._core._routines_indexing._scatter_op
    _scatter_op_mask_single(a, mask, value, mask_i, op)
cupy/_core/_routines_indexing.pyx:916: in cupy._core._routines_indexing._scatter_op_mask_single
    _scatter_max_mask_kernel(src, mask, mask_scanned, a)
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03cd5238e0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/test_ndarray_scatter.py", line 135, in test_scatter_max
E           a.scatter_max(self.slices, self.value)
E         File "cupy/_core/core.pyx", line 1402, in cupy._core.core.ndarray.scatter_max
E           _indexing._ndarray_scatter_max(self, slices, value)
E         File "cupy/_core/_routines_indexing.pyx", line 130, in cupy._core._routines_indexing._ndarray_scatter_max
E           _scatter_op(self, slices, value, 'max')
E         File "cupy/_core/_routines_indexing.pyx", line 934, in cupy._core._routines_indexing._scatter_op
E           _scatter_op_mask_single(a, mask, value, mask_i, op)
E         File "cupy/_core/_routines_indexing.pyx", line 916, in cupy._core._routines_indexing._scatter_op_mask_single
E           _scatter_max_mask_kernel(src, mask, mask_scanned, a)
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
_ TestScatterParametrized_param_24_{shape=(3, 4, 5), slices=(array([ True, False,  True]),), value=array([[ 0,  1,  2,  3,  4],
       [ 5,  6,  7,...0, 11, 12, 13, 14],
       [15, 16, 17, 18, 19]])}.test_scatter_min _

self = <<cupy_tests.core_tests.test_ndarray_scatter.TestScatterParametrized_param_24_{shape=(3, 4, 5), slices=(array([ True, ... array([[ 0,  1,  2,  3,  4],
       [ 5,  6,  7,  8,  9],
       [10, 11, 12, 13, 14],
       [15, 16, 17, 18, 19]])}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float32'>

    @testing.for_dtypes([numpy.float32, numpy.int32, numpy.uint32,
                         numpy.uint64, numpy.ulonglong, numpy.float64])
    @testing.numpy_cupy_array_equal()
    def test_scatter_min(self, xp, dtype):
        a = xp.zeros(self.shape, dtype)
        if xp is cupy:
>           a.scatter_min(self.slices, self.value)

tests/cupy_tests/core_tests/test_ndarray_scatter.py:146: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/core.pyx:1411: in cupy._core.core.ndarray.scatter_min
    _indexing._ndarray_scatter_min(self, slices, value)
cupy/_core/_routines_indexing.pyx:134: in cupy._core._routines_indexing._ndarray_scatter_min
    _scatter_op(self, slices, value, 'min')
cupy/_core/_routines_indexing.pyx:934: in cupy._core._routines_indexing._scatter_op
    _scatter_op_mask_single(a, mask, value, mask_i, op)
cupy/_core/_routines_indexing.pyx:918: in cupy._core._routines_indexing._scatter_op_mask_single
    _scatter_min_mask_kernel(src, mask, mask_scanned, a)
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7ef8be62cd90>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/test_ndarray_scatter.py", line 146, in test_scatter_min
E           a.scatter_min(self.slices, self.value)
E         File "cupy/_core/core.pyx", line 1411, in cupy._core.core.ndarray.scatter_min
E           _indexing._ndarray_scatter_min(self, slices, value)
E         File "cupy/_core/_routines_indexing.pyx", line 134, in cupy._core._routines_indexing._ndarray_scatter_min
E           _scatter_op(self, slices, value, 'min')
E         File "cupy/_core/_routines_indexing.pyx", line 934, in cupy._core._routines_indexing._scatter_op
E           _scatter_op_mask_single(a, mask, value, mask_i, op)
E         File "cupy/_core/_routines_indexing.pyx", line 918, in cupy._core._routines_indexing._scatter_op_mask_single
E           _scatter_min_mask_kernel(src, mask, mask_scanned, a)
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
_ TestScatterParametrized_param_25_{shape=(3, 4, 5), slices=(slice(None, None, None), array([ True, False, False,  True])), value=array([[[ 0,  1,  2,  3,  4],
        [ 5,  6,  ... 21, 22, 23, 24],
        [25, 26, 27, 28, 29]]])}.test_scatter_add _

self = <<cupy_tests.core_tests.test_ndarray_scatter.TestScatterParametrized_param_25_{shape=(3, 4, 5), slices=(slice(None, No... [[10, 11, 12, 13, 14],
        [15, 16, 17, 18, 19]],

       [[20, 21, 22, 23, 24],
        [25, 26, 27, 28, 29]]])}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float32'>

    @testing.for_dtypes([numpy.float32, numpy.int32, numpy.uint32,
                         numpy.uint64, numpy.ulonglong, numpy.float16,
                         numpy.float64])
    @testing.numpy_cupy_array_equal()
    def test_scatter_add(self, xp, dtype):
        if cupy.cuda.runtime.is_hip and dtype == numpy.float16:
            pytest.skip('atomicAdd does not support float16 in HIP')
        a = xp.zeros(self.shape, dtype)
        if xp is cupy:
>           a.scatter_add(self.slices, self.value)

tests/cupy_tests/core_tests/test_ndarray_scatter.py:124: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/core.pyx:1393: in cupy._core.core.ndarray.scatter_add
    _indexing._ndarray_scatter_add(self, slices, value)
cupy/_core/_routines_indexing.pyx:126: in cupy._core._routines_indexing._ndarray_scatter_add
    _scatter_op(self, slices, value, 'add')
cupy/_core/_routines_indexing.pyx:934: in cupy._core._routines_indexing._scatter_op
    _scatter_op_mask_single(a, mask, value, mask_i, op)
cupy/_core/_routines_indexing.pyx:914: in cupy._core._routines_indexing._scatter_op_mask_single
    _scatter_add_mask_kernel(src, mask, mask_scanned, a)
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7ef8e0b30910>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/test_ndarray_scatter.py", line 124, in test_scatter_add
E           a.scatter_add(self.slices, self.value)
E         File "cupy/_core/core.pyx", line 1393, in cupy._core.core.ndarray.scatter_add
E           _indexing._ndarray_scatter_add(self, slices, value)
E         File "cupy/_core/_routines_indexing.pyx", line 126, in cupy._core._routines_indexing._ndarray_scatter_add
E           _scatter_op(self, slices, value, 'add')
E         File "cupy/_core/_routines_indexing.pyx", line 934, in cupy._core._routines_indexing._scatter_op
E           _scatter_op_mask_single(a, mask, value, mask_i, op)
E         File "cupy/_core/_routines_indexing.pyx", line 914, in cupy._core._routines_indexing._scatter_op_mask_single
E           _scatter_add_mask_kernel(src, mask, mask_scanned, a)
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
_ TestScatterParametrized_param_25_{shape=(3, 4, 5), slices=(slice(None, None, None), array([ True, False, False,  True])), value=array([[[ 0,  1,  2,  3,  4],
        [ 5,  6,  ... 21, 22, 23, 24],
        [25, 26, 27, 28, 29]]])}.test_scatter_max _

self = <<cupy_tests.core_tests.test_ndarray_scatter.TestScatterParametrized_param_25_{shape=(3, 4, 5), slices=(slice(None, No... [[10, 11, 12, 13, 14],
        [15, 16, 17, 18, 19]],

       [[20, 21, 22, 23, 24],
        [25, 26, 27, 28, 29]]])}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float32'>

    @testing.for_dtypes([numpy.float32, numpy.int32, numpy.uint32,
                         numpy.uint64, numpy.ulonglong, numpy.float64])
    @testing.numpy_cupy_array_equal()
    def test_scatter_max(self, xp, dtype):
        a = xp.zeros(self.shape, dtype)
        if xp is cupy:
>           a.scatter_max(self.slices, self.value)

tests/cupy_tests/core_tests/test_ndarray_scatter.py:135: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/core.pyx:1402: in cupy._core.core.ndarray.scatter_max
    _indexing._ndarray_scatter_max(self, slices, value)
cupy/_core/_routines_indexing.pyx:130: in cupy._core._routines_indexing._ndarray_scatter_max
    _scatter_op(self, slices, value, 'max')
cupy/_core/_routines_indexing.pyx:934: in cupy._core._routines_indexing._scatter_op
    _scatter_op_mask_single(a, mask, value, mask_i, op)
cupy/_core/_routines_indexing.pyx:916: in cupy._core._routines_indexing._scatter_op_mask_single
    _scatter_max_mask_kernel(src, mask, mask_scanned, a)
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4f47f10>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/test_ndarray_scatter.py", line 135, in test_scatter_max
E           a.scatter_max(self.slices, self.value)
E         File "cupy/_core/core.pyx", line 1402, in cupy._core.core.ndarray.scatter_max
E           _indexing._ndarray_scatter_max(self, slices, value)
E         File "cupy/_core/_routines_indexing.pyx", line 130, in cupy._core._routines_indexing._ndarray_scatter_max
E           _scatter_op(self, slices, value, 'max')
E         File "cupy/_core/_routines_indexing.pyx", line 934, in cupy._core._routines_indexing._scatter_op
E           _scatter_op_mask_single(a, mask, value, mask_i, op)
E         File "cupy/_core/_routines_indexing.pyx", line 916, in cupy._core._routines_indexing._scatter_op_mask_single
E           _scatter_max_mask_kernel(src, mask, mask_scanned, a)
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
_ TestScatterParametrized_param_25_{shape=(3, 4, 5), slices=(slice(None, None, None), array([ True, False, False,  True])), value=array([[[ 0,  1,  2,  3,  4],
        [ 5,  6,  ... 21, 22, 23, 24],
        [25, 26, 27, 28, 29]]])}.test_scatter_min _

self = <<cupy_tests.core_tests.test_ndarray_scatter.TestScatterParametrized_param_25_{shape=(3, 4, 5), slices=(slice(None, No... [[10, 11, 12, 13, 14],
        [15, 16, 17, 18, 19]],

       [[20, 21, 22, 23, 24],
        [25, 26, 27, 28, 29]]])}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float32'>

    @testing.for_dtypes([numpy.float32, numpy.int32, numpy.uint32,
                         numpy.uint64, numpy.ulonglong, numpy.float64])
    @testing.numpy_cupy_array_equal()
    def test_scatter_min(self, xp, dtype):
        a = xp.zeros(self.shape, dtype)
        if xp is cupy:
>           a.scatter_min(self.slices, self.value)

tests/cupy_tests/core_tests/test_ndarray_scatter.py:146: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/core.pyx:1411: in cupy._core.core.ndarray.scatter_min
    _indexing._ndarray_scatter_min(self, slices, value)
cupy/_core/_routines_indexing.pyx:134: in cupy._core._routines_indexing._ndarray_scatter_min
    _scatter_op(self, slices, value, 'min')
cupy/_core/_routines_indexing.pyx:934: in cupy._core._routines_indexing._scatter_op
    _scatter_op_mask_single(a, mask, value, mask_i, op)
cupy/_core/_routines_indexing.pyx:918: in cupy._core._routines_indexing._scatter_op_mask_single
    _scatter_min_mask_kernel(src, mask, mask_scanned, a)
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4ee9f70>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/test_ndarray_scatter.py", line 146, in test_scatter_min
E           a.scatter_min(self.slices, self.value)
E         File "cupy/_core/core.pyx", line 1411, in cupy._core.core.ndarray.scatter_min
E           _indexing._ndarray_scatter_min(self, slices, value)
E         File "cupy/_core/_routines_indexing.pyx", line 134, in cupy._core._routines_indexing._ndarray_scatter_min
E           _scatter_op(self, slices, value, 'min')
E         File "cupy/_core/_routines_indexing.pyx", line 934, in cupy._core._routines_indexing._scatter_op
E           _scatter_op_mask_single(a, mask, value, mask_i, op)
E         File "cupy/_core/_routines_indexing.pyx", line 918, in cupy._core._routines_indexing._scatter_op_mask_single
E           _scatter_min_mask_kernel(src, mask, mask_scanned, a)
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
_ TestScatterParametrized_param_41_{shape=(2, 3, 4), slices=[1], value=1}.test_scatter_add _

self = <<cupy_tests.core_tests.test_ndarray_scatter.TestScatterParametrized_param_41_{shape=(2, 3, 4), slices=[1], value=1} testMethod=test_scatter_add>  parameter: {'shape': (2, 3, 4), 'slices': [1], 'value': 1}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float32'>

    @testing.for_dtypes([numpy.float32, numpy.int32, numpy.uint32,
                         numpy.uint64, numpy.ulonglong, numpy.float16,
                         numpy.float64])
    @testing.numpy_cupy_array_equal()
    def test_scatter_add(self, xp, dtype):
        if cupy.cuda.runtime.is_hip and dtype == numpy.float16:
            pytest.skip('atomicAdd does not support float16 in HIP')
        a = xp.zeros(self.shape, dtype)
        if xp is cupy:
>           a.scatter_add(self.slices, self.value)

tests/cupy_tests/core_tests/test_ndarray_scatter.py:124: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/core.pyx:1393: in cupy._core.core.ndarray.scatter_add
    _indexing._ndarray_scatter_add(self, slices, value)
cupy/_core/_routines_indexing.pyx:126: in cupy._core._routines_indexing._ndarray_scatter_add
    _scatter_op(self, slices, value, 'add')
cupy/_core/_routines_indexing.pyx:941: in cupy._core._routines_indexing._scatter_op
    _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
cupy/_core/_routines_indexing.pyx:869: in cupy._core._routines_indexing._scatter_op_single
    _scatter_add_kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03cd521b20>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/test_ndarray_scatter.py", line 124, in test_scatter_add
E           a.scatter_add(self.slices, self.value)
E         File "cupy/_core/core.pyx", line 1393, in cupy._core.core.ndarray.scatter_add
E           _indexing._ndarray_scatter_add(self, slices, value)
E         File "cupy/_core/_routines_indexing.pyx", line 126, in cupy._core._routines_indexing._ndarray_scatter_add
E           _scatter_op(self, slices, value, 'add')
E         File "cupy/_core/_routines_indexing.pyx", line 941, in cupy._core._routines_indexing._scatter_op
E           _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
E         File "cupy/_core/_routines_indexing.pyx", line 869, in cupy._core._routines_indexing._scatter_op_single
E           _scatter_add_kernel(
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
_ TestScatterParametrized_param_41_{shape=(2, 3, 4), slices=[1], value=1}.test_scatter_max _

self = <<cupy_tests.core_tests.test_ndarray_scatter.TestScatterParametrized_param_41_{shape=(2, 3, 4), slices=[1], value=1} testMethod=test_scatter_max>  parameter: {'shape': (2, 3, 4), 'slices': [1], 'value': 1}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float32'>

    @testing.for_dtypes([numpy.float32, numpy.int32, numpy.uint32,
                         numpy.uint64, numpy.ulonglong, numpy.float64])
    @testing.numpy_cupy_array_equal()
    def test_scatter_max(self, xp, dtype):
        a = xp.zeros(self.shape, dtype)
        if xp is cupy:
>           a.scatter_max(self.slices, self.value)

tests/cupy_tests/core_tests/test_ndarray_scatter.py:135: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/core.pyx:1402: in cupy._core.core.ndarray.scatter_max
    _indexing._ndarray_scatter_max(self, slices, value)
cupy/_core/_routines_indexing.pyx:130: in cupy._core._routines_indexing._ndarray_scatter_max
    _scatter_op(self, slices, value, 'max')
cupy/_core/_routines_indexing.pyx:941: in cupy._core._routines_indexing._scatter_op
    _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
cupy/_core/_routines_indexing.pyx:878: in cupy._core._routines_indexing._scatter_op_single
    _scatter_max_kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4ee0dc0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/test_ndarray_scatter.py", line 135, in test_scatter_max
E           a.scatter_max(self.slices, self.value)
E         File "cupy/_core/core.pyx", line 1402, in cupy._core.core.ndarray.scatter_max
E           _indexing._ndarray_scatter_max(self, slices, value)
E         File "cupy/_core/_routines_indexing.pyx", line 130, in cupy._core._routines_indexing._ndarray_scatter_max
E           _scatter_op(self, slices, value, 'max')
E         File "cupy/_core/_routines_indexing.pyx", line 941, in cupy._core._routines_indexing._scatter_op
E           _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
E         File "cupy/_core/_routines_indexing.pyx", line 878, in cupy._core._routines_indexing._scatter_op_single
E           _scatter_max_kernel(
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
_ TestScatterParametrized_param_41_{shape=(2, 3, 4), slices=[1], value=1}.test_scatter_min _

self = <<cupy_tests.core_tests.test_ndarray_scatter.TestScatterParametrized_param_41_{shape=(2, 3, 4), slices=[1], value=1} testMethod=test_scatter_min>  parameter: {'shape': (2, 3, 4), 'slices': [1], 'value': 1}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float32'>

    @testing.for_dtypes([numpy.float32, numpy.int32, numpy.uint32,
                         numpy.uint64, numpy.ulonglong, numpy.float64])
    @testing.numpy_cupy_array_equal()
    def test_scatter_min(self, xp, dtype):
        a = xp.zeros(self.shape, dtype)
        if xp is cupy:
>           a.scatter_min(self.slices, self.value)

tests/cupy_tests/core_tests/test_ndarray_scatter.py:146: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/core.pyx:1411: in cupy._core.core.ndarray.scatter_min
    _indexing._ndarray_scatter_min(self, slices, value)
cupy/_core/_routines_indexing.pyx:134: in cupy._core._routines_indexing._ndarray_scatter_min
    _scatter_op(self, slices, value, 'min')
cupy/_core/_routines_indexing.pyx:941: in cupy._core._routines_indexing._scatter_op
    _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
cupy/_core/_routines_indexing.pyx:887: in cupy._core._routines_indexing._scatter_op_single
    _scatter_min_kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03cd4cf580>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/test_ndarray_scatter.py", line 146, in test_scatter_min
E           a.scatter_min(self.slices, self.value)
E         File "cupy/_core/core.pyx", line 1411, in cupy._core.core.ndarray.scatter_min
E           _indexing._ndarray_scatter_min(self, slices, value)
E         File "cupy/_core/_routines_indexing.pyx", line 134, in cupy._core._routines_indexing._ndarray_scatter_min
E           _scatter_op(self, slices, value, 'min')
E         File "cupy/_core/_routines_indexing.pyx", line 941, in cupy._core._routines_indexing._scatter_op
E           _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
E         File "cupy/_core/_routines_indexing.pyx", line 887, in cupy._core._routines_indexing._scatter_op_single
E           _scatter_min_kernel(
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
_ TestScatterParametrized_param_42_{shape=(2, 3, 4), slices=[1, 1], value=array([[[ 0,  1,  2,  3],
        [ 4,  5,  6,  ...    [16, 17, 18, 19],
        [20, 21, 22, 23]]])}.test_scatter_add _

self = <<cupy_tests.core_tests.test_ndarray_scatter.TestScatterParametrized_param_42_{shape=(2, 3, 4), slices=[1, 1], value=a...  6,  7],
        [ 8,  9, 10, 11]],

       [[12, 13, 14, 15],
        [16, 17, 18, 19],
        [20, 21, 22, 23]]])}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float32'>

    @testing.for_dtypes([numpy.float32, numpy.int32, numpy.uint32,
                         numpy.uint64, numpy.ulonglong, numpy.float16,
                         numpy.float64])
    @testing.numpy_cupy_array_equal()
    def test_scatter_add(self, xp, dtype):
        if cupy.cuda.runtime.is_hip and dtype == numpy.float16:
            pytest.skip('atomicAdd does not support float16 in HIP')
        a = xp.zeros(self.shape, dtype)
        if xp is cupy:
>           a.scatter_add(self.slices, self.value)

tests/cupy_tests/core_tests/test_ndarray_scatter.py:124: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/core.pyx:1393: in cupy._core.core.ndarray.scatter_add
    _indexing._ndarray_scatter_add(self, slices, value)
cupy/_core/_routines_indexing.pyx:126: in cupy._core._routines_indexing._ndarray_scatter_add
    _scatter_op(self, slices, value, 'add')
cupy/_core/_routines_indexing.pyx:941: in cupy._core._routines_indexing._scatter_op
    _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
cupy/_core/_routines_indexing.pyx:869: in cupy._core._routines_indexing._scatter_op_single
    _scatter_add_kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4ee4070>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/test_ndarray_scatter.py", line 124, in test_scatter_add
E           a.scatter_add(self.slices, self.value)
E         File "cupy/_core/core.pyx", line 1393, in cupy._core.core.ndarray.scatter_add
E           _indexing._ndarray_scatter_add(self, slices, value)
E         File "cupy/_core/_routines_indexing.pyx", line 126, in cupy._core._routines_indexing._ndarray_scatter_add
E           _scatter_op(self, slices, value, 'add')
E         File "cupy/_core/_routines_indexing.pyx", line 941, in cupy._core._routines_indexing._scatter_op
E           _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
E         File "cupy/_core/_routines_indexing.pyx", line 869, in cupy._core._routines_indexing._scatter_op_single
E           _scatter_add_kernel(
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
_ TestScatterParametrized_param_42_{shape=(2, 3, 4), slices=[1, 1], value=array([[[ 0,  1,  2,  3],
        [ 4,  5,  6,  ...    [16, 17, 18, 19],
        [20, 21, 22, 23]]])}.test_scatter_max _

self = <<cupy_tests.core_tests.test_ndarray_scatter.TestScatterParametrized_param_42_{shape=(2, 3, 4), slices=[1, 1], value=a...  6,  7],
        [ 8,  9, 10, 11]],

       [[12, 13, 14, 15],
        [16, 17, 18, 19],
        [20, 21, 22, 23]]])}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float32'>

    @testing.for_dtypes([numpy.float32, numpy.int32, numpy.uint32,
                         numpy.uint64, numpy.ulonglong, numpy.float64])
    @testing.numpy_cupy_array_equal()
    def test_scatter_max(self, xp, dtype):
        a = xp.zeros(self.shape, dtype)
        if xp is cupy:
>           a.scatter_max(self.slices, self.value)

tests/cupy_tests/core_tests/test_ndarray_scatter.py:135: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/core.pyx:1402: in cupy._core.core.ndarray.scatter_max
    _indexing._ndarray_scatter_max(self, slices, value)
cupy/_core/_routines_indexing.pyx:130: in cupy._core._routines_indexing._ndarray_scatter_max
    _scatter_op(self, slices, value, 'max')
cupy/_core/_routines_indexing.pyx:941: in cupy._core._routines_indexing._scatter_op
    _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
cupy/_core/_routines_indexing.pyx:878: in cupy._core._routines_indexing._scatter_op_single
    _scatter_max_kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03cd4f3b20>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/test_ndarray_scatter.py", line 135, in test_scatter_max
E           a.scatter_max(self.slices, self.value)
E         File "cupy/_core/core.pyx", line 1402, in cupy._core.core.ndarray.scatter_max
E           _indexing._ndarray_scatter_max(self, slices, value)
E         File "cupy/_core/_routines_indexing.pyx", line 130, in cupy._core._routines_indexing._ndarray_scatter_max
E           _scatter_op(self, slices, value, 'max')
E         File "cupy/_core/_routines_indexing.pyx", line 941, in cupy._core._routines_indexing._scatter_op
E           _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
E         File "cupy/_core/_routines_indexing.pyx", line 878, in cupy._core._routines_indexing._scatter_op_single
E           _scatter_max_kernel(
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
_ TestScatterParametrized_param_42_{shape=(2, 3, 4), slices=[1, 1], value=array([[[ 0,  1,  2,  3],
        [ 4,  5,  6,  ...    [16, 17, 18, 19],
        [20, 21, 22, 23]]])}.test_scatter_min _

self = <<cupy_tests.core_tests.test_ndarray_scatter.TestScatterParametrized_param_42_{shape=(2, 3, 4), slices=[1, 1], value=a...  6,  7],
        [ 8,  9, 10, 11]],

       [[12, 13, 14, 15],
        [16, 17, 18, 19],
        [20, 21, 22, 23]]])}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float32'>

    @testing.for_dtypes([numpy.float32, numpy.int32, numpy.uint32,
                         numpy.uint64, numpy.ulonglong, numpy.float64])
    @testing.numpy_cupy_array_equal()
    def test_scatter_min(self, xp, dtype):
        a = xp.zeros(self.shape, dtype)
        if xp is cupy:
>           a.scatter_min(self.slices, self.value)

tests/cupy_tests/core_tests/test_ndarray_scatter.py:146: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/core.pyx:1411: in cupy._core.core.ndarray.scatter_min
    _indexing._ndarray_scatter_min(self, slices, value)
cupy/_core/_routines_indexing.pyx:134: in cupy._core._routines_indexing._ndarray_scatter_min
    _scatter_op(self, slices, value, 'min')
cupy/_core/_routines_indexing.pyx:941: in cupy._core._routines_indexing._scatter_op
    _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
cupy/_core/_routines_indexing.pyx:887: in cupy._core._routines_indexing._scatter_op_single
    _scatter_min_kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4f01d60>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/test_ndarray_scatter.py", line 146, in test_scatter_min
E           a.scatter_min(self.slices, self.value)
E         File "cupy/_core/core.pyx", line 1411, in cupy._core.core.ndarray.scatter_min
E           _indexing._ndarray_scatter_min(self, slices, value)
E         File "cupy/_core/_routines_indexing.pyx", line 134, in cupy._core._routines_indexing._ndarray_scatter_min
E           _scatter_op(self, slices, value, 'min')
E         File "cupy/_core/_routines_indexing.pyx", line 941, in cupy._core._routines_indexing._scatter_op
E           _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
E         File "cupy/_core/_routines_indexing.pyx", line 887, in cupy._core._routines_indexing._scatter_op_single
E           _scatter_min_kernel(
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
_ TestScatterParametrized_param_43_{shape=(2, 3, 4), slices=([1],), value=1}.test_scatter_add _

self = <<cupy_tests.core_tests.test_ndarray_scatter.TestScatterParametrized_param_43_{shape=(2, 3, 4), slices=([1],), value=1} testMethod=test_scatter_add>  parameter: {'shape': (2, 3, 4), 'slices': ([1],), 'value': 1}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float32'>

    @testing.for_dtypes([numpy.float32, numpy.int32, numpy.uint32,
                         numpy.uint64, numpy.ulonglong, numpy.float16,
                         numpy.float64])
    @testing.numpy_cupy_array_equal()
    def test_scatter_add(self, xp, dtype):
        if cupy.cuda.runtime.is_hip and dtype == numpy.float16:
            pytest.skip('atomicAdd does not support float16 in HIP')
        a = xp.zeros(self.shape, dtype)
        if xp is cupy:
>           a.scatter_add(self.slices, self.value)

tests/cupy_tests/core_tests/test_ndarray_scatter.py:124: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/core.pyx:1393: in cupy._core.core.ndarray.scatter_add
    _indexing._ndarray_scatter_add(self, slices, value)
cupy/_core/_routines_indexing.pyx:126: in cupy._core._routines_indexing._ndarray_scatter_add
    _scatter_op(self, slices, value, 'add')
cupy/_core/_routines_indexing.pyx:941: in cupy._core._routines_indexing._scatter_op
    _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
cupy/_core/_routines_indexing.pyx:869: in cupy._core._routines_indexing._scatter_op_single
    _scatter_add_kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4ea9910>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/test_ndarray_scatter.py", line 124, in test_scatter_add
E           a.scatter_add(self.slices, self.value)
E         File "cupy/_core/core.pyx", line 1393, in cupy._core.core.ndarray.scatter_add
E           _indexing._ndarray_scatter_add(self, slices, value)
E         File "cupy/_core/_routines_indexing.pyx", line 126, in cupy._core._routines_indexing._ndarray_scatter_add
E           _scatter_op(self, slices, value, 'add')
E         File "cupy/_core/_routines_indexing.pyx", line 941, in cupy._core._routines_indexing._scatter_op
E           _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
E         File "cupy/_core/_routines_indexing.pyx", line 869, in cupy._core._routines_indexing._scatter_op_single
E           _scatter_add_kernel(
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
_ TestScatterParametrized_param_43_{shape=(2, 3, 4), slices=([1],), value=1}.test_scatter_max _

self = <<cupy_tests.core_tests.test_ndarray_scatter.TestScatterParametrized_param_43_{shape=(2, 3, 4), slices=([1],), value=1} testMethod=test_scatter_max>  parameter: {'shape': (2, 3, 4), 'slices': ([1],), 'value': 1}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float32'>

    @testing.for_dtypes([numpy.float32, numpy.int32, numpy.uint32,
                         numpy.uint64, numpy.ulonglong, numpy.float64])
    @testing.numpy_cupy_array_equal()
    def test_scatter_max(self, xp, dtype):
        a = xp.zeros(self.shape, dtype)
        if xp is cupy:
>           a.scatter_max(self.slices, self.value)

tests/cupy_tests/core_tests/test_ndarray_scatter.py:135: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/core.pyx:1402: in cupy._core.core.ndarray.scatter_max
    _indexing._ndarray_scatter_max(self, slices, value)
cupy/_core/_routines_indexing.pyx:130: in cupy._core._routines_indexing._ndarray_scatter_max
    _scatter_op(self, slices, value, 'max')
cupy/_core/_routines_indexing.pyx:941: in cupy._core._routines_indexing._scatter_op
    _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
cupy/_core/_routines_indexing.pyx:878: in cupy._core._routines_indexing._scatter_op_single
    _scatter_max_kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03bc0533d0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/test_ndarray_scatter.py", line 135, in test_scatter_max
E           a.scatter_max(self.slices, self.value)
E         File "cupy/_core/core.pyx", line 1402, in cupy._core.core.ndarray.scatter_max
E           _indexing._ndarray_scatter_max(self, slices, value)
E         File "cupy/_core/_routines_indexing.pyx", line 130, in cupy._core._routines_indexing._ndarray_scatter_max
E           _scatter_op(self, slices, value, 'max')
E         File "cupy/_core/_routines_indexing.pyx", line 941, in cupy._core._routines_indexing._scatter_op
E           _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
E         File "cupy/_core/_routines_indexing.pyx", line 878, in cupy._core._routines_indexing._scatter_op_single
E           _scatter_max_kernel(
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
_ TestScatterParametrized_param_43_{shape=(2, 3, 4), slices=([1],), value=1}.test_scatter_min _

self = <<cupy_tests.core_tests.test_ndarray_scatter.TestScatterParametrized_param_43_{shape=(2, 3, 4), slices=([1],), value=1} testMethod=test_scatter_min>  parameter: {'shape': (2, 3, 4), 'slices': ([1],), 'value': 1}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float32'>

    @testing.for_dtypes([numpy.float32, numpy.int32, numpy.uint32,
                         numpy.uint64, numpy.ulonglong, numpy.float64])
    @testing.numpy_cupy_array_equal()
    def test_scatter_min(self, xp, dtype):
        a = xp.zeros(self.shape, dtype)
        if xp is cupy:
>           a.scatter_min(self.slices, self.value)

tests/cupy_tests/core_tests/test_ndarray_scatter.py:146: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/core.pyx:1411: in cupy._core.core.ndarray.scatter_min
    _indexing._ndarray_scatter_min(self, slices, value)
cupy/_core/_routines_indexing.pyx:134: in cupy._core._routines_indexing._ndarray_scatter_min
    _scatter_op(self, slices, value, 'min')
cupy/_core/_routines_indexing.pyx:941: in cupy._core._routines_indexing._scatter_op
    _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
cupy/_core/_routines_indexing.pyx:887: in cupy._core._routines_indexing._scatter_op_single
    _scatter_min_kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4eef9a0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/test_ndarray_scatter.py", line 146, in test_scatter_min
E           a.scatter_min(self.slices, self.value)
E         File "cupy/_core/core.pyx", line 1411, in cupy._core.core.ndarray.scatter_min
E           _indexing._ndarray_scatter_min(self, slices, value)
E         File "cupy/_core/_routines_indexing.pyx", line 134, in cupy._core._routines_indexing._ndarray_scatter_min
E           _scatter_op(self, slices, value, 'min')
E         File "cupy/_core/_routines_indexing.pyx", line 941, in cupy._core._routines_indexing._scatter_op
E           _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
E         File "cupy/_core/_routines_indexing.pyx", line 887, in cupy._core._routines_indexing._scatter_op_single
E           _scatter_min_kernel(
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
_ TestScatterParametrized_param_47_{shape=(2, 3, 4), slices=([1], slice(1, 2, None)), value=1}.test_scatter_add _

self = <<cupy_tests.core_tests.test_ndarray_scatter.TestScatterParametrized_param_47_{shape=(2, 3, 4), slices=([1], slice(1, ...value=1} testMethod=test_scatter_add>  parameter: {'shape': (2, 3, 4), 'slices': ([1], slice(1, 2, None)), 'value': 1}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float32'>

    @testing.for_dtypes([numpy.float32, numpy.int32, numpy.uint32,
                         numpy.uint64, numpy.ulonglong, numpy.float16,
                         numpy.float64])
    @testing.numpy_cupy_array_equal()
    def test_scatter_add(self, xp, dtype):
        if cupy.cuda.runtime.is_hip and dtype == numpy.float16:
            pytest.skip('atomicAdd does not support float16 in HIP')
        a = xp.zeros(self.shape, dtype)
        if xp is cupy:
>           a.scatter_add(self.slices, self.value)

tests/cupy_tests/core_tests/test_ndarray_scatter.py:124: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/core.pyx:1393: in cupy._core.core.ndarray.scatter_add
    _indexing._ndarray_scatter_add(self, slices, value)
cupy/_core/_routines_indexing.pyx:126: in cupy._core._routines_indexing._ndarray_scatter_add
    _scatter_op(self, slices, value, 'add')
cupy/_core/_routines_indexing.pyx:941: in cupy._core._routines_indexing._scatter_op
    _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
cupy/_core/_routines_indexing.pyx:869: in cupy._core._routines_indexing._scatter_op_single
    _scatter_add_kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03cd4f72e0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/test_ndarray_scatter.py", line 124, in test_scatter_add
E           a.scatter_add(self.slices, self.value)
E         File "cupy/_core/core.pyx", line 1393, in cupy._core.core.ndarray.scatter_add
E           _indexing._ndarray_scatter_add(self, slices, value)
E         File "cupy/_core/_routines_indexing.pyx", line 126, in cupy._core._routines_indexing._ndarray_scatter_add
E           _scatter_op(self, slices, value, 'add')
E         File "cupy/_core/_routines_indexing.pyx", line 941, in cupy._core._routines_indexing._scatter_op
E           _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
E         File "cupy/_core/_routines_indexing.pyx", line 869, in cupy._core._routines_indexing._scatter_op_single
E           _scatter_add_kernel(
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
_ TestScatterParametrized_param_47_{shape=(2, 3, 4), slices=([1], slice(1, 2, None)), value=1}.test_scatter_max _

self = <<cupy_tests.core_tests.test_ndarray_scatter.TestScatterParametrized_param_47_{shape=(2, 3, 4), slices=([1], slice(1, ...value=1} testMethod=test_scatter_max>  parameter: {'shape': (2, 3, 4), 'slices': ([1], slice(1, 2, None)), 'value': 1}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float32'>

    @testing.for_dtypes([numpy.float32, numpy.int32, numpy.uint32,
                         numpy.uint64, numpy.ulonglong, numpy.float64])
    @testing.numpy_cupy_array_equal()
    def test_scatter_max(self, xp, dtype):
        a = xp.zeros(self.shape, dtype)
        if xp is cupy:
>           a.scatter_max(self.slices, self.value)

tests/cupy_tests/core_tests/test_ndarray_scatter.py:135: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/core.pyx:1402: in cupy._core.core.ndarray.scatter_max
    _indexing._ndarray_scatter_max(self, slices, value)
cupy/_core/_routines_indexing.pyx:130: in cupy._core._routines_indexing._ndarray_scatter_max
    _scatter_op(self, slices, value, 'max')
cupy/_core/_routines_indexing.pyx:941: in cupy._core._routines_indexing._scatter_op
    _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
cupy/_core/_routines_indexing.pyx:878: in cupy._core._routines_indexing._scatter_op_single
    _scatter_max_kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03bc062970>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/test_ndarray_scatter.py", line 135, in test_scatter_max
E           a.scatter_max(self.slices, self.value)
E         File "cupy/_core/core.pyx", line 1402, in cupy._core.core.ndarray.scatter_max
E           _indexing._ndarray_scatter_max(self, slices, value)
E         File "cupy/_core/_routines_indexing.pyx", line 130, in cupy._core._routines_indexing._ndarray_scatter_max
E           _scatter_op(self, slices, value, 'max')
E         File "cupy/_core/_routines_indexing.pyx", line 941, in cupy._core._routines_indexing._scatter_op
E           _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
E         File "cupy/_core/_routines_indexing.pyx", line 878, in cupy._core._routines_indexing._scatter_op_single
E           _scatter_max_kernel(
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
_ TestScatterParametrized_param_47_{shape=(2, 3, 4), slices=([1], slice(1, 2, None)), value=1}.test_scatter_min _

self = <<cupy_tests.core_tests.test_ndarray_scatter.TestScatterParametrized_param_47_{shape=(2, 3, 4), slices=([1], slice(1, ...value=1} testMethod=test_scatter_min>  parameter: {'shape': (2, 3, 4), 'slices': ([1], slice(1, 2, None)), 'value': 1}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float32'>

    @testing.for_dtypes([numpy.float32, numpy.int32, numpy.uint32,
                         numpy.uint64, numpy.ulonglong, numpy.float64])
    @testing.numpy_cupy_array_equal()
    def test_scatter_min(self, xp, dtype):
        a = xp.zeros(self.shape, dtype)
        if xp is cupy:
>           a.scatter_min(self.slices, self.value)

tests/cupy_tests/core_tests/test_ndarray_scatter.py:146: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/core.pyx:1411: in cupy._core.core.ndarray.scatter_min
    _indexing._ndarray_scatter_min(self, slices, value)
cupy/_core/_routines_indexing.pyx:134: in cupy._core._routines_indexing._ndarray_scatter_min
    _scatter_op(self, slices, value, 'min')
cupy/_core/_routines_indexing.pyx:941: in cupy._core._routines_indexing._scatter_op
    _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
cupy/_core/_routines_indexing.pyx:887: in cupy._core._routines_indexing._scatter_op_single
    _scatter_min_kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4e2c8e0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/test_ndarray_scatter.py", line 146, in test_scatter_min
E           a.scatter_min(self.slices, self.value)
E         File "cupy/_core/core.pyx", line 1411, in cupy._core.core.ndarray.scatter_min
E           _indexing._ndarray_scatter_min(self, slices, value)
E         File "cupy/_core/_routines_indexing.pyx", line 134, in cupy._core._routines_indexing._ndarray_scatter_min
E           _scatter_op(self, slices, value, 'min')
E         File "cupy/_core/_routines_indexing.pyx", line 941, in cupy._core._routines_indexing._scatter_op
E           _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
E         File "cupy/_core/_routines_indexing.pyx", line 887, in cupy._core._routines_indexing._scatter_op_single
E           _scatter_min_kernel(
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
_ TestScatterParametrized_param_48_{shape=(2, 3, 4), slices=([[1]], slice(1, 2, None)), value=1}.test_scatter_add _

self = <<cupy_tests.core_tests.test_ndarray_scatter.TestScatterParametrized_param_48_{shape=(2, 3, 4), slices=([[1]], slice(1...lue=1} testMethod=test_scatter_add>  parameter: {'shape': (2, 3, 4), 'slices': ([[1]], slice(1, 2, None)), 'value': 1}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float32'>

    @testing.for_dtypes([numpy.float32, numpy.int32, numpy.uint32,
                         numpy.uint64, numpy.ulonglong, numpy.float16,
                         numpy.float64])
    @testing.numpy_cupy_array_equal()
    def test_scatter_add(self, xp, dtype):
        if cupy.cuda.runtime.is_hip and dtype == numpy.float16:
            pytest.skip('atomicAdd does not support float16 in HIP')
        a = xp.zeros(self.shape, dtype)
        if xp is cupy:
>           a.scatter_add(self.slices, self.value)

tests/cupy_tests/core_tests/test_ndarray_scatter.py:124: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/core.pyx:1393: in cupy._core.core.ndarray.scatter_add
    _indexing._ndarray_scatter_add(self, slices, value)
cupy/_core/_routines_indexing.pyx:126: in cupy._core._routines_indexing._ndarray_scatter_add
    _scatter_op(self, slices, value, 'add')
cupy/_core/_routines_indexing.pyx:941: in cupy._core._routines_indexing._scatter_op
    _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
cupy/_core/_routines_indexing.pyx:869: in cupy._core._routines_indexing._scatter_op_single
    _scatter_add_kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03cd4cfdf0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/test_ndarray_scatter.py", line 124, in test_scatter_add
E           a.scatter_add(self.slices, self.value)
E         File "cupy/_core/core.pyx", line 1393, in cupy._core.core.ndarray.scatter_add
E           _indexing._ndarray_scatter_add(self, slices, value)
E         File "cupy/_core/_routines_indexing.pyx", line 126, in cupy._core._routines_indexing._ndarray_scatter_add
E           _scatter_op(self, slices, value, 'add')
E         File "cupy/_core/_routines_indexing.pyx", line 941, in cupy._core._routines_indexing._scatter_op
E           _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
E         File "cupy/_core/_routines_indexing.pyx", line 869, in cupy._core._routines_indexing._scatter_op_single
E           _scatter_add_kernel(
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
_ TestScatterParametrized_param_48_{shape=(2, 3, 4), slices=([[1]], slice(1, 2, None)), value=1}.test_scatter_max _

self = <<cupy_tests.core_tests.test_ndarray_scatter.TestScatterParametrized_param_48_{shape=(2, 3, 4), slices=([[1]], slice(1...lue=1} testMethod=test_scatter_max>  parameter: {'shape': (2, 3, 4), 'slices': ([[1]], slice(1, 2, None)), 'value': 1}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float32'>

    @testing.for_dtypes([numpy.float32, numpy.int32, numpy.uint32,
                         numpy.uint64, numpy.ulonglong, numpy.float64])
    @testing.numpy_cupy_array_equal()
    def test_scatter_max(self, xp, dtype):
        a = xp.zeros(self.shape, dtype)
        if xp is cupy:
>           a.scatter_max(self.slices, self.value)

tests/cupy_tests/core_tests/test_ndarray_scatter.py:135: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/core.pyx:1402: in cupy._core.core.ndarray.scatter_max
    _indexing._ndarray_scatter_max(self, slices, value)
cupy/_core/_routines_indexing.pyx:130: in cupy._core._routines_indexing._ndarray_scatter_max
    _scatter_op(self, slices, value, 'max')
cupy/_core/_routines_indexing.pyx:941: in cupy._core._routines_indexing._scatter_op
    _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
cupy/_core/_routines_indexing.pyx:878: in cupy._core._routines_indexing._scatter_op_single
    _scatter_max_kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4ebca00>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/test_ndarray_scatter.py", line 135, in test_scatter_max
E           a.scatter_max(self.slices, self.value)
E         File "cupy/_core/core.pyx", line 1402, in cupy._core.core.ndarray.scatter_max
E           _indexing._ndarray_scatter_max(self, slices, value)
E         File "cupy/_core/_routines_indexing.pyx", line 130, in cupy._core._routines_indexing._ndarray_scatter_max
E           _scatter_op(self, slices, value, 'max')
E         File "cupy/_core/_routines_indexing.pyx", line 941, in cupy._core._routines_indexing._scatter_op
E           _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
E         File "cupy/_core/_routines_indexing.pyx", line 878, in cupy._core._routines_indexing._scatter_op_single
E           _scatter_max_kernel(
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
_ TestScatterParametrized_param_48_{shape=(2, 3, 4), slices=([[1]], slice(1, 2, None)), value=1}.test_scatter_min _

self = <<cupy_tests.core_tests.test_ndarray_scatter.TestScatterParametrized_param_48_{shape=(2, 3, 4), slices=([[1]], slice(1...lue=1} testMethod=test_scatter_min>  parameter: {'shape': (2, 3, 4), 'slices': ([[1]], slice(1, 2, None)), 'value': 1}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float32'>

    @testing.for_dtypes([numpy.float32, numpy.int32, numpy.uint32,
                         numpy.uint64, numpy.ulonglong, numpy.float64])
    @testing.numpy_cupy_array_equal()
    def test_scatter_min(self, xp, dtype):
        a = xp.zeros(self.shape, dtype)
        if xp is cupy:
>           a.scatter_min(self.slices, self.value)

tests/cupy_tests/core_tests/test_ndarray_scatter.py:146: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/core.pyx:1411: in cupy._core.core.ndarray.scatter_min
    _indexing._ndarray_scatter_min(self, slices, value)
cupy/_core/_routines_indexing.pyx:134: in cupy._core._routines_indexing._ndarray_scatter_min
    _scatter_op(self, slices, value, 'min')
cupy/_core/_routines_indexing.pyx:941: in cupy._core._routines_indexing._scatter_op
    _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
cupy/_core/_routines_indexing.pyx:887: in cupy._core._routines_indexing._scatter_op_single
    _scatter_min_kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03cd4db2e0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/test_ndarray_scatter.py", line 146, in test_scatter_min
E           a.scatter_min(self.slices, self.value)
E         File "cupy/_core/core.pyx", line 1411, in cupy._core.core.ndarray.scatter_min
E           _indexing._ndarray_scatter_min(self, slices, value)
E         File "cupy/_core/_routines_indexing.pyx", line 134, in cupy._core._routines_indexing._ndarray_scatter_min
E           _scatter_op(self, slices, value, 'min')
E         File "cupy/_core/_routines_indexing.pyx", line 941, in cupy._core._routines_indexing._scatter_op
E           _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
E         File "cupy/_core/_routines_indexing.pyx", line 887, in cupy._core._routines_indexing._scatter_op_single
E           _scatter_min_kernel(
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
________________ TestScatterAdd.test_scatter_add_cupy_arguments ________________

self = <cupy_tests.core_tests.test_ndarray_scatter.TestScatterAdd testMethod=test_scatter_add_cupy_arguments>
dtype = <class 'numpy.int32'>

    @testing.for_dtypes([numpy.float32, numpy.int32, numpy.uint32,
                         numpy.uint64, numpy.ulonglong, numpy.float16,
                         numpy.float64])
    def test_scatter_add_cupy_arguments(self, dtype):
        if cupy.cuda.runtime.is_hip and dtype == numpy.float16:
            pytest.skip('atomicAdd does not support float16 in HIP')
        shape = (2, 3)
        a = cupy.zeros(shape, dtype)
        slices = (cupy.array([1, 1]), slice(None))
>       a.scatter_add(slices, cupy.array(1.))

tests/cupy_tests/core_tests/test_ndarray_scatter.py:164: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/core.pyx:1393: in cupy._core.core.ndarray.scatter_add
    _indexing._ndarray_scatter_add(self, slices, value)
cupy/_core/_routines_indexing.pyx:126: in cupy._core._routines_indexing._ndarray_scatter_add
    _scatter_op(self, slices, value, 'add')
cupy/_core/_routines_indexing.pyx:941: in cupy._core._routines_indexing._scatter_op
    _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
cupy/_core/_routines_indexing.pyx:835: in cupy._core._routines_indexing._scatter_op_single
    v = v.astype(a.dtype, copy=False)
cupy/_core/core.pyx:394: in cupy._core.core.ndarray.astype
    cpdef ndarray astype(
cupy/_core/core.pyx:466: in cupy._core.core.ndarray.astype
    elementwise_copy(self, newarray)
cupy/_core/_kernel.pyx:1104: in cupy._core._kernel.ufunc.__call__
    kern = self._get_ufunc_kernel(dev_id, op, arginfos)
cupy/_core/_kernel.pyx:1127: in cupy._core._kernel.ufunc._get_ufunc_kernel
    kern = _get_ufunc_kernel(
cupy/_core/_kernel.pyx:901: in cupy._core._kernel._get_ufunc_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b521ae50>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.int32'>
_____________ TestScatterAdd.test_scatter_add_cupy_arguments_mask ______________

self = <cupy_tests.core_tests.test_ndarray_scatter.TestScatterAdd testMethod=test_scatter_add_cupy_arguments_mask>
dtype = <class 'numpy.float32'>

    @testing.for_dtypes([numpy.float32, numpy.int32, numpy.uint32,
                         numpy.uint64, numpy.ulonglong, numpy.float16,
                         numpy.float64])
    def test_scatter_add_cupy_arguments_mask(self, dtype):
        if cupy.cuda.runtime.is_hip and dtype == numpy.float16:
            pytest.skip('atomicAdd does not support float16 in HIP')
        shape = (2, 3)
        a = cupy.zeros(shape, dtype)
        slices = (cupy.array([True, False]), slice(None))
>       a.scatter_add(slices, cupy.array(1.))

tests/cupy_tests/core_tests/test_ndarray_scatter.py:177: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/core.pyx:1393: in cupy._core.core.ndarray.scatter_add
    _indexing._ndarray_scatter_add(self, slices, value)
cupy/_core/_routines_indexing.pyx:126: in cupy._core._routines_indexing._ndarray_scatter_add
    _scatter_op(self, slices, value, 'add')
cupy/_core/_routines_indexing.pyx:934: in cupy._core._routines_indexing._scatter_op
    _scatter_op_mask_single(a, mask, value, mask_i, op)
cupy/_core/_routines_indexing.pyx:914: in cupy._core._routines_indexing._scatter_op_mask_single
    _scatter_add_mask_kernel(src, mask, mask_scanned, a)
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4bd6e80>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
_______________ TestScatterAdd.test_scatter_add_differnt_dtypes ________________

self = <cupy_tests.core_tests.test_ndarray_scatter.TestScatterAdd testMethod=test_scatter_add_differnt_dtypes>
src_dtype = <class 'numpy.ulonglong'>, dst_dtype = <class 'numpy.uint32'>

    @testing.for_dtypes_combination(
        [numpy.float32, numpy.int32, numpy.uint32, numpy.uint64,
         numpy.ulonglong, numpy.float16, numpy.float64],
        names=['src_dtype', 'dst_dtype'])
    def test_scatter_add_differnt_dtypes(self, src_dtype, dst_dtype):
        if (
                cupy.cuda.runtime.is_hip
                and (src_dtype == numpy.float16
                     or dst_dtype == numpy.float16)):
            pytest.skip('atomicAdd does not support float16 in HIP')
        shape = (2, 3)
        a = cupy.zeros(shape, dtype=src_dtype)
        value = cupy.array(1, dtype=dst_dtype)
        slices = ([1, 1], slice(None))
>       a.scatter_add(slices, value)

tests/cupy_tests/core_tests/test_ndarray_scatter.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/core.pyx:1393: in cupy._core.core.ndarray.scatter_add
    _indexing._ndarray_scatter_add(self, slices, value)
cupy/_core/_routines_indexing.pyx:126: in cupy._core._routines_indexing._ndarray_scatter_add
    _scatter_op(self, slices, value, 'add')
cupy/_core/_routines_indexing.pyx:941: in cupy._core._routines_indexing._scatter_op
    _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
cupy/_core/_routines_indexing.pyx:835: in cupy._core._routines_indexing._scatter_op_single
    v = v.astype(a.dtype, copy=False)
cupy/_core/core.pyx:394: in cupy._core.core.ndarray.astype
    cpdef ndarray astype(
cupy/_core/core.pyx:466: in cupy._core.core.ndarray.astype
    elementwise_copy(self, newarray)
cupy/_core/_kernel.pyx:1104: in cupy._core._kernel.ufunc.__call__
    kern = self._get_ufunc_kernel(dev_id, op, arginfos)
cupy/_core/_kernel.pyx:1127: in cupy._core._kernel.ufunc._get_ufunc_kernel
    kern = _get_ufunc_kernel(
cupy/_core/_kernel.pyx:901: in cupy._core._kernel._get_ufunc_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b47cb280>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'src_dtype': <class 'numpy.ulonglong'>, 'dst_dtype': <class 'numpy.uint32'>}
_____________ TestScatterAdd.test_scatter_add_differnt_dtypes_mask _____________

self = <cupy_tests.core_tests.test_ndarray_scatter.TestScatterAdd testMethod=test_scatter_add_differnt_dtypes_mask>
src_dtype = <class 'numpy.ulonglong'>, dst_dtype = <class 'numpy.uint64'>

    @testing.for_dtypes_combination(
        [numpy.float32, numpy.int32, numpy.uint32, numpy.uint64,
         numpy.ulonglong, numpy.float16, numpy.float64],
        names=['src_dtype', 'dst_dtype'])
    def test_scatter_add_differnt_dtypes_mask(self, src_dtype, dst_dtype):
        if (
                cupy.cuda.runtime.is_hip
                and (src_dtype == numpy.float16
                     or dst_dtype == numpy.float16)):
            pytest.skip('atomicAdd does not support float16 in HIP')
        shape = (2, 3)
        a = cupy.zeros(shape, dtype=src_dtype)
        value = cupy.array(1, dtype=dst_dtype)
        slices = (numpy.array([[True, False, False], [False, True, True]]))
>       a.scatter_add(slices, value)

tests/cupy_tests/core_tests/test_ndarray_scatter.py:215: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/core.pyx:1393: in cupy._core.core.ndarray.scatter_add
    _indexing._ndarray_scatter_add(self, slices, value)
cupy/_core/_routines_indexing.pyx:126: in cupy._core._routines_indexing._ndarray_scatter_add
    _scatter_op(self, slices, value, 'add')
cupy/_core/_routines_indexing.pyx:934: in cupy._core._routines_indexing._scatter_op
    _scatter_op_mask_single(a, mask, value, mask_i, op)
cupy/_core/_routines_indexing.pyx:914: in cupy._core._routines_indexing._scatter_op_mask_single
    _scatter_add_mask_kernel(src, mask, mask_scanned, a)
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b47d4370>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'src_dtype': <class 'numpy.ulonglong'>, 'dst_dtype': <class 'numpy.uint64'>}
_____________ TestScatterMinMax.test_scatter_minmax_cupy_arguments _____________

self = <cupy_tests.core_tests.test_ndarray_scatter.TestScatterMinMax testMethod=test_scatter_minmax_cupy_arguments>
dtype = <class 'numpy.int32'>

    @testing.for_dtypes([numpy.float32, numpy.int32, numpy.uint32,
                         numpy.uint64, numpy.ulonglong, numpy.float64])
    def test_scatter_minmax_cupy_arguments(self, dtype):
        shape = (2, 3)
        a = cupy.zeros(shape, dtype)
        slices = (cupy.array([1, 1]), slice(None))
>       a.scatter_max(slices, cupy.array(1.))

tests/cupy_tests/core_tests/test_ndarray_scatter.py:230: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/core.pyx:1402: in cupy._core.core.ndarray.scatter_max
    _indexing._ndarray_scatter_max(self, slices, value)
cupy/_core/_routines_indexing.pyx:130: in cupy._core._routines_indexing._ndarray_scatter_max
    _scatter_op(self, slices, value, 'max')
cupy/_core/_routines_indexing.pyx:941: in cupy._core._routines_indexing._scatter_op
    _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
cupy/_core/_routines_indexing.pyx:835: in cupy._core._routines_indexing._scatter_op_single
    v = v.astype(a.dtype, copy=False)
cupy/_core/core.pyx:394: in cupy._core.core.ndarray.astype
    cpdef ndarray astype(
cupy/_core/core.pyx:466: in cupy._core.core.ndarray.astype
    elementwise_copy(self, newarray)
cupy/_core/_kernel.pyx:1104: in cupy._core._kernel.ufunc.__call__
    kern = self._get_ufunc_kernel(dev_id, op, arginfos)
cupy/_core/_kernel.pyx:1127: in cupy._core._kernel.ufunc._get_ufunc_kernel
    kern = _get_ufunc_kernel(
cupy/_core/_kernel.pyx:901: in cupy._core._kernel._get_ufunc_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4be1c10>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.int32'>
__________ TestScatterMinMax.test_scatter_minmax_cupy_arguments_mask ___________

self = <cupy_tests.core_tests.test_ndarray_scatter.TestScatterMinMax testMethod=test_scatter_minmax_cupy_arguments_mask>
dtype = <class 'numpy.float32'>

    @testing.for_dtypes([numpy.float32, numpy.int32, numpy.uint32,
                         numpy.uint64, numpy.ulonglong, numpy.float64])
    def test_scatter_minmax_cupy_arguments_mask(self, dtype):
        shape = (2, 3)
        a = cupy.zeros(shape, dtype)
        slices = (cupy.array([True, False]), slice(None))
>       a.scatter_max(slices, cupy.array(1.))

tests/cupy_tests/core_tests/test_ndarray_scatter.py:245: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/core.pyx:1402: in cupy._core.core.ndarray.scatter_max
    _indexing._ndarray_scatter_max(self, slices, value)
cupy/_core/_routines_indexing.pyx:130: in cupy._core._routines_indexing._ndarray_scatter_max
    _scatter_op(self, slices, value, 'max')
cupy/_core/_routines_indexing.pyx:934: in cupy._core._routines_indexing._scatter_op
    _scatter_op_mask_single(a, mask, value, mask_i, op)
cupy/_core/_routines_indexing.pyx:916: in cupy._core._routines_indexing._scatter_op_mask_single
    _scatter_max_mask_kernel(src, mask, mask_scanned, a)
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03bc2f55e0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
____________ TestScatterMinMax.test_scatter_minmax_differnt_dtypes _____________

self = <cupy_tests.core_tests.test_ndarray_scatter.TestScatterMinMax testMethod=test_scatter_minmax_differnt_dtypes>
src_dtype = <class 'numpy.float32'>, dst_dtype = <class 'numpy.uint32'>

    @testing.for_dtypes_combination(
        [numpy.float32, numpy.int32, numpy.uint32, numpy.uint64,
         numpy.ulonglong, numpy.float64],
        names=['src_dtype', 'dst_dtype'])
    def test_scatter_minmax_differnt_dtypes(self, src_dtype, dst_dtype):
        shape = (2, 3)
        a = cupy.zeros(shape, dtype=src_dtype)
        value = cupy.array(1, dtype=dst_dtype)
        slices = ([1, 1], slice(None))
>       a.scatter_max(slices, value)

tests/cupy_tests/core_tests/test_ndarray_scatter.py:263: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/core.pyx:1402: in cupy._core.core.ndarray.scatter_max
    _indexing._ndarray_scatter_max(self, slices, value)
cupy/_core/_routines_indexing.pyx:130: in cupy._core._routines_indexing._ndarray_scatter_max
    _scatter_op(self, slices, value, 'max')
cupy/_core/_routines_indexing.pyx:941: in cupy._core._routines_indexing._scatter_op
    _scatter_op_single(a, adv_slices[axis], value, axis, axis, op)
cupy/_core/_routines_indexing.pyx:835: in cupy._core._routines_indexing._scatter_op_single
    v = v.astype(a.dtype, copy=False)
cupy/_core/core.pyx:394: in cupy._core.core.ndarray.astype
    cpdef ndarray astype(
cupy/_core/core.pyx:466: in cupy._core.core.ndarray.astype
    elementwise_copy(self, newarray)
cupy/_core/_kernel.pyx:1104: in cupy._core._kernel.ufunc.__call__
    kern = self._get_ufunc_kernel(dev_id, op, arginfos)
cupy/_core/_kernel.pyx:1127: in cupy._core._kernel.ufunc._get_ufunc_kernel
    kern = _get_ufunc_kernel(
cupy/_core/_kernel.pyx:901: in cupy._core._kernel._get_ufunc_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4e2c880>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'src_dtype': <class 'numpy.float32'>, 'dst_dtype': <class 'numpy.uint32'>}
__________ TestScatterMinMax.test_scatter_minmax_differnt_dtypes_mask __________

self = <cupy_tests.core_tests.test_ndarray_scatter.TestScatterMinMax testMethod=test_scatter_minmax_differnt_dtypes_mask>
src_dtype = <class 'numpy.float64'>, dst_dtype = <class 'numpy.float16'>

    @testing.for_dtypes_combination(
        [numpy.float32, numpy.int32, numpy.uint32, numpy.uint64,
         numpy.ulonglong, numpy.float16, numpy.float64],
        names=['src_dtype', 'dst_dtype'])
    def test_scatter_minmax_differnt_dtypes_mask(self, src_dtype, dst_dtype):
        shape = (2, 3)
        a = cupy.zeros(shape, dtype=src_dtype)
        value = cupy.array(1, dtype=dst_dtype)
        slices = (numpy.array([[True, False, False], [False, True, True]]))
>       a.scatter_max(slices, value)

tests/cupy_tests/core_tests/test_ndarray_scatter.py:284: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/core.pyx:1402: in cupy._core.core.ndarray.scatter_max
    _indexing._ndarray_scatter_max(self, slices, value)
cupy/_core/_routines_indexing.pyx:130: in cupy._core._routines_indexing._ndarray_scatter_max
    _scatter_op(self, slices, value, 'max')
cupy/_core/_routines_indexing.pyx:934: in cupy._core._routines_indexing._scatter_op
    _scatter_op_mask_single(a, mask, value, mask_i, op)
cupy/_core/_routines_indexing.pyx:916: in cupy._core._routines_indexing._scatter_op_mask_single
    _scatter_max_mask_kernel(src, mask, mask_scanned, a)
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4f6caf0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'src_dtype': <class 'numpy.float64'>, 'dst_dtype': <class 'numpy.float16'>}
_________________________ TestArrayUfunc.test_unary_op _________________________

self = <cupy_tests.core_tests.test_ndarray_ufunc.TestArrayUfunc testMethod=test_unary_op>
dtype = <class 'numpy.float64'>

    @testing.for_all_dtypes()
    def test_unary_op(self, dtype):
        a = cupy.array(np.array([0, 1, 2]), dtype=dtype)
>       outa = np.sin(a)

tests/cupy_tests/core_tests/test_ndarray_ufunc.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/core.pyx:1466: in cupy._core.core.ndarray.__array_ufunc__
    return cp_ufunc(*inputs, **kwargs)
cupy/_core/_kernel.pyx:1104: in cupy._core._kernel.ufunc.__call__
    kern = self._get_ufunc_kernel(dev_id, op, arginfos)
cupy/_core/_kernel.pyx:1127: in cupy._core._kernel.ufunc._get_ufunc_kernel
    kern = _get_ufunc_kernel(
cupy/_core/_kernel.pyx:901: in cupy._core._kernel._get_ufunc_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4ba5df0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_______________________ TestArrayUfunc.test_unary_op_out _______________________

self = <cupy_tests.core_tests.test_ndarray_ufunc.TestArrayUfunc testMethod=test_unary_op_out>
dtype = <class 'numpy.float64'>

    @testing.for_all_dtypes()
    def test_unary_op_out(self, dtype):
        a = cupy.array(np.array([0, 1, 2]), dtype=dtype)
        b = a.get()
        outb = np.sin(b)
        # pre-make output with same type as input
        outa = cupy.array(np.array([0, 1, 2]), dtype=outb.dtype)
>       np.sin(a, out=outa)

tests/cupy_tests/core_tests/test_ndarray_ufunc.py:29: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/core.pyx:1466: in cupy._core.core.ndarray.__array_ufunc__
    return cp_ufunc(*inputs, **kwargs)
cupy/_core/_kernel.pyx:1104: in cupy._core._kernel.ufunc.__call__
    kern = self._get_ufunc_kernel(dev_id, op, arginfos)
cupy/_core/_kernel.pyx:1127: in cupy._core._kernel.ufunc._get_ufunc_kernel
    kern = _get_ufunc_kernel(
cupy/_core/_kernel.pyx:901: in cupy._core._kernel._get_ufunc_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4a9dca0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_______________________ TestArrayUnaryOp.test_abs_array ________________________

self = <cupy_tests.core_tests.test_ndarray_unary_op.TestArrayUnaryOp testMethod=test_abs_array>

    def test_abs_array(self):
>       self.check_array_op_full(operator.abs)

tests/cupy_tests/core_tests/test_ndarray_unary_op.py:74: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/testing/_helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/_helper.py:271: in test_func
    _check_cupy_numpy_error(cupy_error,
cupy/testing/_helper.py:179: in _check_cupy_numpy_error
    _fail_test_with_unexpected_errors(
cupy/testing/_helper.py:134: in _fail_test_with_unexpected_errors
    raise AssertionError(msg).with_traceback(tb)
cupy/testing/_helper.py:47: in _call_func
    result = impl(self, *args, **kw)
tests/cupy_tests/core_tests/test_ndarray_unary_op.py:58: in check_array_op_full
    return op(a)
cupy/_core/core.pyx:1061: in cupy._core.core.ndarray.__abs__
    return _math._absolute(self)
cupy/_core/_kernel.pyx:1104: in cupy._core._kernel.ufunc.__call__
    kern = self._get_ufunc_kernel(dev_id, op, arginfos)
cupy/_core/_kernel.pyx:1127: in cupy._core._kernel.ufunc._get_ufunc_kernel
    kern = _get_ufunc_kernel(
cupy/_core/_kernel.pyx:901: in cupy._core._kernel._get_ufunc_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4ee9580>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/test_ndarray_unary_op.py", line 58, in check_array_op_full
E           return op(a)
E         File "cupy/_core/core.pyx", line 1061, in cupy._core.core.ndarray.__abs__
E           return _math._absolute(self)
E         File "cupy/_core/_kernel.pyx", line 1104, in cupy._core._kernel.ufunc.__call__
E           kern = self._get_ufunc_kernel(dev_id, op, arginfos)
E         File "cupy/_core/_kernel.pyx", line 1127, in cupy._core._kernel.ufunc._get_ufunc_kernel
E           kern = _get_ufunc_kernel(
E         File "cupy/_core/_kernel.pyx", line 901, in cupy._core._kernel._get_ufunc_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float16'>
______________________ TestArrayUnaryOp.test_abs_zerodim _______________________

self = <cupy_tests.core_tests.test_ndarray_unary_op.TestArrayUnaryOp testMethod=test_abs_zerodim>

    def test_abs_zerodim(self):
>       self.check_zerodim_op_full(operator.abs)

tests/cupy_tests/core_tests/test_ndarray_unary_op.py:98: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/testing/_helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/_helper.py:271: in test_func
    _check_cupy_numpy_error(cupy_error,
cupy/testing/_helper.py:179: in _check_cupy_numpy_error
    _fail_test_with_unexpected_errors(
cupy/testing/_helper.py:134: in _fail_test_with_unexpected_errors
    raise AssertionError(msg).with_traceback(tb)
cupy/testing/_helper.py:47: in _call_func
    result = impl(self, *args, **kw)
tests/cupy_tests/core_tests/test_ndarray_unary_op.py:86: in check_zerodim_op_full
    return op(a)
cupy/_core/core.pyx:1061: in cupy._core.core.ndarray.__abs__
    return _math._absolute(self)
cupy/_core/_kernel.pyx:1104: in cupy._core._kernel.ufunc.__call__
    kern = self._get_ufunc_kernel(dev_id, op, arginfos)
cupy/_core/_kernel.pyx:1127: in cupy._core._kernel.ufunc._get_ufunc_kernel
    kern = _get_ufunc_kernel(
cupy/_core/_kernel.pyx:901: in cupy._core._kernel._get_ufunc_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b47cbd30>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/test_ndarray_unary_op.py", line 86, in check_zerodim_op_full
E           return op(a)
E         File "cupy/_core/core.pyx", line 1061, in cupy._core.core.ndarray.__abs__
E           return _math._absolute(self)
E         File "cupy/_core/_kernel.pyx", line 1104, in cupy._core._kernel.ufunc.__call__
E           kern = self._get_ufunc_kernel(dev_id, op, arginfos)
E         File "cupy/_core/_kernel.pyx", line 1127, in cupy._core._kernel.ufunc._get_ufunc_kernel
E           kern = _get_ufunc_kernel(
E         File "cupy/_core/_kernel.pyx", line 901, in cupy._core._kernel._get_ufunc_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
____________________ TestArrayUnaryOp.test_abs_zerodim_full ____________________

self = <cupy_tests.core_tests.test_ndarray_unary_op.TestArrayUnaryOp testMethod=test_abs_zerodim_full>

    def test_abs_zerodim_full(self):
>       self.check_zerodim_op_full(operator.abs)

tests/cupy_tests/core_tests/test_ndarray_unary_op.py:101: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/testing/_helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/_helper.py:271: in test_func
    _check_cupy_numpy_error(cupy_error,
cupy/testing/_helper.py:179: in _check_cupy_numpy_error
    _fail_test_with_unexpected_errors(
cupy/testing/_helper.py:134: in _fail_test_with_unexpected_errors
    raise AssertionError(msg).with_traceback(tb)
cupy/testing/_helper.py:47: in _call_func
    result = impl(self, *args, **kw)
tests/cupy_tests/core_tests/test_ndarray_unary_op.py:86: in check_zerodim_op_full
    return op(a)
cupy/_core/core.pyx:1061: in cupy._core.core.ndarray.__abs__
    return _math._absolute(self)
cupy/_core/_kernel.pyx:1104: in cupy._core._kernel.ufunc.__call__
    kern = self._get_ufunc_kernel(dev_id, op, arginfos)
cupy/_core/_kernel.pyx:1127: in cupy._core._kernel.ufunc._get_ufunc_kernel
    kern = _get_ufunc_kernel(
cupy/_core/_kernel.pyx:901: in cupy._core._kernel._get_ufunc_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4a1fb20>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/test_ndarray_unary_op.py", line 86, in check_zerodim_op_full
E           return op(a)
E         File "cupy/_core/core.pyx", line 1061, in cupy._core.core.ndarray.__abs__
E           return _math._absolute(self)
E         File "cupy/_core/_kernel.pyx", line 1104, in cupy._core._kernel.ufunc.__call__
E           kern = self._get_ufunc_kernel(dev_id, op, arginfos)
E         File "cupy/_core/_kernel.pyx", line 1127, in cupy._core._kernel.ufunc._get_ufunc_kernel
E           kern = _get_ufunc_kernel(
E         File "cupy/_core/_kernel.pyx", line 901, in cupy._core._kernel._get_ufunc_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_______________________ TestArrayUnaryOp.test_neg_array ________________________

self = <cupy_tests.core_tests.test_ndarray_unary_op.TestArrayUnaryOp testMethod=test_neg_array>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float64'>

    @testing.for_all_dtypes(no_bool=True)
    @testing.numpy_cupy_allclose()
    def test_neg_array(self, xp, dtype):
        a = testing.shaped_arange((2, 3), xp, dtype)
>       return operator.neg(a)

tests/cupy_tests/core_tests/test_ndarray_unary_op.py:64: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/core.pyx:1055: in cupy._core.core.ndarray.__neg__
    return _math._negative(self)
cupy/_core/_kernel.pyx:1104: in cupy._core._kernel.ufunc.__call__
    kern = self._get_ufunc_kernel(dev_id, op, arginfos)
cupy/_core/_kernel.pyx:1127: in cupy._core._kernel.ufunc._get_ufunc_kernel
    kern = _get_ufunc_kernel(
cupy/_core/_kernel.pyx:901: in cupy._core._kernel._get_ufunc_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4bec880>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/test_ndarray_unary_op.py", line 64, in test_neg_array
E           return operator.neg(a)
E         File "cupy/_core/core.pyx", line 1055, in cupy._core.core.ndarray.__neg__
E           return _math._negative(self)
E         File "cupy/_core/_kernel.pyx", line 1104, in cupy._core._kernel.ufunc.__call__
E           kern = self._get_ufunc_kernel(dev_id, op, arginfos)
E         File "cupy/_core/_kernel.pyx", line 1127, in cupy._core._kernel.ufunc._get_ufunc_kernel
E           kern = _get_ufunc_kernel(
E         File "cupy/_core/_kernel.pyx", line 901, in cupy._core._kernel._get_ufunc_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
______________________ TestArrayUnaryOp.test_neg_zerodim _______________________

self = <cupy_tests.core_tests.test_ndarray_unary_op.TestArrayUnaryOp testMethod=test_neg_zerodim>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float64'>

    @testing.for_all_dtypes(no_bool=True)
    @testing.numpy_cupy_allclose()
    def test_neg_zerodim(self, xp, dtype):
        a = xp.array(-2, dtype)
>       return operator.neg(a)

tests/cupy_tests/core_tests/test_ndarray_unary_op.py:92: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/core.pyx:1055: in cupy._core.core.ndarray.__neg__
    return _math._negative(self)
cupy/_core/_kernel.pyx:1104: in cupy._core._kernel.ufunc.__call__
    kern = self._get_ufunc_kernel(dev_id, op, arginfos)
cupy/_core/_kernel.pyx:1127: in cupy._core._kernel.ufunc._get_ufunc_kernel
    kern = _get_ufunc_kernel(
cupy/_core/_kernel.pyx:901: in cupy._core._kernel._get_ufunc_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4bd6fd0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/test_ndarray_unary_op.py", line 92, in test_neg_zerodim
E           return operator.neg(a)
E         File "cupy/_core/core.pyx", line 1055, in cupy._core.core.ndarray.__neg__
E           return _math._negative(self)
E         File "cupy/_core/_kernel.pyx", line 1104, in cupy._core._kernel.ufunc.__call__
E           kern = self._get_ufunc_kernel(dev_id, op, arginfos)
E         File "cupy/_core/_kernel.pyx", line 1127, in cupy._core._kernel.ufunc._get_ufunc_kernel
E           kern = _get_ufunc_kernel(
E         File "cupy/_core/_kernel.pyx", line 901, in cupy._core._kernel._get_ufunc_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
___________________ TestArrayIntUnaryOp.test_invert_zerodim ____________________

self = <cupy_tests.core_tests.test_ndarray_unary_op.TestArrayIntUnaryOp testMethod=test_invert_zerodim>

    def test_invert_zerodim(self):
>       self.check_zerodim_op(operator.invert)

tests/cupy_tests/core_tests/test_ndarray_unary_op.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/testing/_helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/_helper.py:271: in test_func
    _check_cupy_numpy_error(cupy_error,
cupy/testing/_helper.py:179: in _check_cupy_numpy_error
    _fail_test_with_unexpected_errors(
cupy/testing/_helper.py:134: in _fail_test_with_unexpected_errors
    raise AssertionError(msg).with_traceback(tb)
cupy/testing/_helper.py:47: in _call_func
    result = impl(self, *args, **kw)
tests/cupy_tests/core_tests/test_ndarray_unary_op.py:120: in check_zerodim_op
    return op(a)
cupy/_core/core.pyx:1064: in cupy._core.core.ndarray.__invert__
    return _binary._invert(self)
cupy/_core/_kernel.pyx:1104: in cupy._core._kernel.ufunc.__call__
    kern = self._get_ufunc_kernel(dev_id, op, arginfos)
cupy/_core/_kernel.pyx:1127: in cupy._core._kernel.ufunc._get_ufunc_kernel
    kern = _get_ufunc_kernel(
cupy/_core/_kernel.pyx:901: in cupy._core._kernel._get_ufunc_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b521aeb0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/test_ndarray_unary_op.py", line 120, in check_zerodim_op
E           return op(a)
E         File "cupy/_core/core.pyx", line 1064, in cupy._core.core.ndarray.__invert__
E           return _binary._invert(self)
E         File "cupy/_core/_kernel.pyx", line 1104, in cupy._core._kernel.ufunc.__call__
E           kern = self._get_ufunc_kernel(dev_id, op, arginfos)
E         File "cupy/_core/_kernel.pyx", line 1127, in cupy._core._kernel.ufunc._get_ufunc_kernel
E           kern = _get_ufunc_kernel(
E         File "cupy/_core/_kernel.pyx", line 901, in cupy._core._kernel._get_ufunc_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.int8'>
_ TestSimpleReductionFunctionNonContiguous_param_0_{axis=(0, 1), shape=(2, 4, 3), trans=(2, 1, 0)}.test_noncontiguous _

self = <<cupy_tests.core_tests.test_reduction.TestSimpleReductionFunctionNonContiguous_param_0_{axis=(0, 1), shape=(2, 4, 3), trans=(2, 1, 0)} testMethod=test_noncontiguous>  parameter: {'shape': (2, 4, 3), 'trans': (2, 1, 0), 'axis': (0, 1)}>

    def test_noncontiguous(self):
>       self.check_int8_sum(self.shape, trans=self.trans, axis=self.axis)

tests/cupy_tests/core_tests/test_reduction.py:91: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/testing/_helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/_helper.py:495: in check_func
    _array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([0, 0], dtype=int8), desired = array([69, 64], dtype=int8)
rtol = 1e-07, atol = 0, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=0
E       
E       Mismatched elements: 2 / 2 (100%)
E       Max absolute difference: 69
E       Max relative difference: 1.
E        x: array([0, 0], dtype=int8)
E        y: array([69, 64], dtype=int8)

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 609, in cupy._core._reduction._SimpleReductionKernel._get_function
    return _SimpleReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 622, in cupy._core._reduction._SimpleReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
_ TestSimpleReductionFunctionNonContiguous_param_1_{axis=(1, 2), shape=(2, 4, 5, 3), trans=(3, 2, 1, 0)}.test_noncontiguous _

self = <<cupy_tests.core_tests.test_reduction.TestSimpleReductionFunctionNonContiguous_param_1_{axis=(1, 2), shape=(2, 4, 5, ...3, 2, 1, 0)} testMethod=test_noncontiguous>  parameter: {'shape': (2, 4, 5, 3), 'trans': (3, 2, 1, 0), 'axis': (1, 2)}>

    def test_noncontiguous(self):
>       self.check_int8_sum(self.shape, trans=self.trans, axis=self.axis)

tests/cupy_tests/core_tests/test_reduction.py:91: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/testing/_helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/_helper.py:495: in check_func
    _array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[   1,    0],
       [-128,   63],
       [   0,    0]], dtype=int8)
desired = array([[88, 80],
       [93, 81],
       [99, 91]], dtype=int8)
rtol = 1e-07, atol = 0, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=0
E       
E       Mismatched elements: 6 / 6 (100%)
E       Max absolute difference: 99
E       Max relative difference: 1.
E        x: array([[   1,    0],
E              [-128,   63],
E              [   0,    0]], dtype=int8)
E        y: array([[88, 80],
E              [93, 81],
E              [99, 91]], dtype=int8)

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 609, in cupy._core._reduction._SimpleReductionKernel._get_function
    return _SimpleReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 622, in cupy._core._reduction._SimpleReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
_ TestSimpleReductionFunctionNonContiguous_param_2_{axis=(1, 2), shape=(2, 4, 3), trans=(2, 1, 0)}.test_noncontiguous _

self = <<cupy_tests.core_tests.test_reduction.TestSimpleReductionFunctionNonContiguous_param_2_{axis=(1, 2), shape=(2, 4, 3), trans=(2, 1, 0)} testMethod=test_noncontiguous>  parameter: {'shape': (2, 4, 3), 'trans': (2, 1, 0), 'axis': (1, 2)}>

    def test_noncontiguous(self):
>       self.check_int8_sum(self.shape, trans=self.trans, axis=self.axis)

tests/cupy_tests/core_tests/test_reduction.py:91: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/testing/_helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/_helper.py:495: in check_func
    _array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([0, 0, 0], dtype=int8), desired = array([36, 47, 50], dtype=int8)
rtol = 1e-07, atol = 0, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=0
E       
E       Mismatched elements: 3 / 3 (100%)
E       Max absolute difference: 50
E       Max relative difference: 1.
E        x: array([0, 0, 0], dtype=int8)
E        y: array([36, 47, 50], dtype=int8)

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 609, in cupy._core._reduction._SimpleReductionKernel._get_function
    return _SimpleReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 622, in cupy._core._reduction._SimpleReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
_ TestSimpleReductionFunctionNonContiguous_param_4_{axis=(0, 1, 2), shape=(2, 4, 3), trans=(2, 1, 0)}.test_noncontiguous _

self = <<cupy_tests.core_tests.test_reduction.TestSimpleReductionFunctionNonContiguous_param_4_{axis=(0, 1, 2), shape=(2, 4, ...rans=(2, 1, 0)} testMethod=test_noncontiguous>  parameter: {'shape': (2, 4, 3), 'trans': (2, 1, 0), 'axis': (0, 1, 2)}>

    def test_noncontiguous(self):
>       self.check_int8_sum(self.shape, trans=self.trans, axis=self.axis)

tests/cupy_tests/core_tests/test_reduction.py:91: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/testing/_helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/_helper.py:495: in check_func
    _array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array(0, dtype=int8), desired = -123, rtol = 1e-07, atol = 0
err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=0
E       
E       Mismatched elements: 1 / 1 (100%)
E       Max absolute difference: 123
E       Max relative difference: 1.
E        x: array(0, dtype=int8)
E        y: array(-123, dtype=int8)

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 609, in cupy._core._reduction._SimpleReductionKernel._get_function
    return _SimpleReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 622, in cupy._core._reduction._SimpleReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
__ TestSimpleReductionFunctionComplexWarning_param_0_{backend=[]}.test_warns ___
cupy/testing/_helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/_helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/_helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/_helper.py:495: in check_func
    _array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array(4.73776881e-270), desired = 8.0, rtol = 1e-07, atol = 0
err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=0
E       
E       Mismatched elements: 1 / 1 (100%)
E       Max absolute difference: 8.
E       Max relative difference: 1.
E        x: array(4.737769e-270)
E        y: array(8.)

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
f_dtype is <class 'numpy.float64'>
c_dtype is <class 'numpy.complex64'>
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 609, in cupy._core._reduction._SimpleReductionKernel._get_function
    return _SimpleReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 622, in cupy._core._reduction._SimpleReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
_ TestSimpleReductionFunctionComplexWarning_param_1_{backend=['cub']}.test_warns _
cupy/testing/_helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/_helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/_helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/_helper.py:495: in check_func
    _array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array(0.), desired = 8.0, rtol = 1e-07, atol = 0, err_msg = ''
verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=0
E       
E       Mismatched elements: 1 / 1 (100%)
E       Max absolute difference: 8.
E       Max relative difference: 1.
E        x: array(0.)
E        y: array(8.)

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
f_dtype is <class 'numpy.float64'>
c_dtype is <class 'numpy.complex64'>
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 609, in cupy._core._reduction._SimpleReductionKernel._get_function
    return _SimpleReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 622, in cupy._core._reduction._SimpleReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
_ TestReductionKernelNonContiguous_param_0_{axis=(0, 1), shape=(2, 4, 3), trans=(2, 1, 0)}.test_noncontiguous _

self = <<cupy_tests.core_tests.test_reduction.TestReductionKernelNonContiguous_param_0_{axis=(0, 1), shape=(2, 4, 3), trans=(2, 1, 0)} testMethod=test_noncontiguous>  parameter: {'shape': (2, 4, 3), 'trans': (2, 1, 0), 'axis': (0, 1)}>

    def test_noncontiguous(self):
>       self.check_int8_sum(self.shape, trans=self.trans, axis=self.axis)

tests/cupy_tests/core_tests/test_reduction.py:157: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/testing/_helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/_helper.py:495: in check_func
    _array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([0, 0], dtype=int8), desired = array([69, 64], dtype=int8)
rtol = 1e-07, atol = 0, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=0
E       
E       Mismatched elements: 2 / 2 (100%)
E       Max absolute difference: 69
E       Max relative difference: 1.
E        x: array([0, 0], dtype=int8)
E        y: array([69, 64], dtype=int8)

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 776, in cupy._core._reduction.ReductionKernel._get_function
    return _ReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 804, in cupy._core._reduction._ReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
_ TestReductionKernelNonContiguous_param_1_{axis=(1, 2), shape=(2, 4, 5, 3), trans=(3, 2, 1, 0)}.test_noncontiguous _

self = <<cupy_tests.core_tests.test_reduction.TestReductionKernelNonContiguous_param_1_{axis=(1, 2), shape=(2, 4, 5, 3), trans=(3, 2, 1, 0)} testMethod=test_noncontiguous>  parameter: {'shape': (2, 4, 5, 3), 'trans': (3, 2, 1, 0), 'axis': (1, 2)}>

    def test_noncontiguous(self):
>       self.check_int8_sum(self.shape, trans=self.trans, axis=self.axis)

tests/cupy_tests/core_tests/test_reduction.py:157: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/testing/_helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/_helper.py:495: in check_func
    _array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[0, 0],
       [0, 0],
       [0, 0]], dtype=int8)
desired = array([[88, 80],
       [93, 81],
       [99, 91]], dtype=int8)
rtol = 1e-07, atol = 0, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=0
E       
E       Mismatched elements: 6 / 6 (100%)
E       Max absolute difference: 99
E       Max relative difference: 1.
E        x: array([[0, 0],
E              [0, 0],
E              [0, 0]], dtype=int8)
E        y: array([[88, 80],
E              [93, 81],
E              [99, 91]], dtype=int8)

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 776, in cupy._core._reduction.ReductionKernel._get_function
    return _ReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 804, in cupy._core._reduction._ReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
_ TestReductionKernelNonContiguous_param_2_{axis=(1, 2), shape=(2, 4, 3), trans=(2, 1, 0)}.test_noncontiguous _

self = <<cupy_tests.core_tests.test_reduction.TestReductionKernelNonContiguous_param_2_{axis=(1, 2), shape=(2, 4, 3), trans=(2, 1, 0)} testMethod=test_noncontiguous>  parameter: {'shape': (2, 4, 3), 'trans': (2, 1, 0), 'axis': (1, 2)}>

    def test_noncontiguous(self):
>       self.check_int8_sum(self.shape, trans=self.trans, axis=self.axis)

tests/cupy_tests/core_tests/test_reduction.py:157: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/testing/_helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/_helper.py:495: in check_func
    _array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([5, 7, 6], dtype=int8), desired = array([36, 47, 50], dtype=int8)
rtol = 1e-07, atol = 0, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=0
E       
E       Mismatched elements: 3 / 3 (100%)
E       Max absolute difference: 44
E       Max relative difference: 0.88
E        x: array([5, 7, 6], dtype=int8)
E        y: array([36, 47, 50], dtype=int8)

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 776, in cupy._core._reduction.ReductionKernel._get_function
    return _ReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 804, in cupy._core._reduction._ReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
_ TestReductionKernelNonContiguous_param_4_{axis=(0, 1, 2), shape=(2, 4, 3), trans=(2, 1, 0)}.test_noncontiguous _

self = <<cupy_tests.core_tests.test_reduction.TestReductionKernelNonContiguous_param_4_{axis=(0, 1, 2), shape=(2, 4, 3), trans=(2, 1, 0)} testMethod=test_noncontiguous>  parameter: {'shape': (2, 4, 3), 'trans': (2, 1, 0), 'axis': (0, 1, 2)}>

    def test_noncontiguous(self):
>       self.check_int8_sum(self.shape, trans=self.trans, axis=self.axis)

tests/cupy_tests/core_tests/test_reduction.py:157: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/testing/_helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/_helper.py:495: in check_func
    _array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array(0, dtype=int8), desired = -123, rtol = 1e-07, atol = 0
err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=0
E       
E       Mismatched elements: 1 / 1 (100%)
E       Max absolute difference: 123
E       Max relative difference: 1.
E        x: array(0, dtype=int8)
E        y: array(-123, dtype=int8)

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 776, in cupy._core._reduction.ReductionKernel._get_function
    return _ReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 804, in cupy._core._reduction._ReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
___________________ TestSimpleReductionFunction.test_shape1 ____________________

self = <cupy_tests.core_tests.test_reduction.TestSimpleReductionFunction testMethod=test_shape1>

    def test_shape1(self):
        for i in range(1, 10):
>           self.check_int8_sum((2 ** i,))

tests/cupy_tests/core_tests/test_reduction.py:55: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/testing/_helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/_helper.py:495: in check_func
    _array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array(0, dtype=int8), desired = 12, rtol = 1e-07, atol = 0
err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=0
E       
E       Mismatched elements: 1 / 1 (100%)
E       Max absolute difference: 12
E       Max relative difference: 1.
E        x: array(0, dtype=int8)
E        y: array(12, dtype=int8)

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 609, in cupy._core._reduction._SimpleReductionKernel._get_function
    return _SimpleReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 622, in cupy._core._reduction._SimpleReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
___________________ TestSimpleReductionFunction.test_shape2 ____________________

self = <cupy_tests.core_tests.test_reduction.TestSimpleReductionFunction testMethod=test_shape2>

    def test_shape2(self):
        for i in range(1, 10):
>           self.check_int8_sum((2 ** i, 1000), axis=0)

tests/cupy_tests/core_tests/test_reduction.py:61: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/testing/_helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/_helper.py:495: in check_func
    _array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([   0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    0,   ...-1,  -59,   98,  -12,   17, -119,
         27,   64,  -66,  -66,  -66,  -66,  -66,  -66,  -66,  -66],
      dtype=int8)
desired = array([10,  7, 10, 12,  4, 14,  9,  8, 11, 12, 12,  6,  7, 13,  0,  4,  4,
       10, 12, 15, 11, 13, 10, 16,  8, 14, ... 6,  6,  9,  9,  6, 18, 15,  9, 12, 16,  7,
       11, 11,  8, 16,  1, 11,  2, 11, 11,  7, 12, 13,  8, 11], dtype=int8)
rtol = 1e-07, atol = 0, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=0
E       
E       Mismatched elements: 988 / 1000 (98.8%)
E       Max absolute difference: 127
E       Max relative difference: 104.
E        x: array([   0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
E                 0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
E                 0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,...
E        y: array([10,  7, 10, 12,  4, 14,  9,  8, 11, 12, 12,  6,  7, 13,  0,  4,  4,
E              10, 12, 15, 11, 13, 10, 16,  8, 14,  5, 10, 14,  5,  6,  7, 13, 14,
E               7,  9,  8,  8, 10, 11,  4,  7, 12,  7,  6, 10,  8,  9,  7, 12,  7,...

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 609, in cupy._core._reduction._SimpleReductionKernel._get_function
    return _SimpleReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 622, in cupy._core._reduction._SimpleReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
___________________ TestSimpleReductionFunction.test_shape3 ____________________

self = <cupy_tests.core_tests.test_reduction.TestSimpleReductionFunction testMethod=test_shape3>

    def test_shape3(self):
        for i in range(1, 10):
>           self.check_int8_sum((2 ** i, 1000), axis=1)

tests/cupy_tests/core_tests/test_reduction.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/testing/_helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/_helper.py:495: in check_func
    _array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([0, 0], dtype=int8), desired = array([103,  19], dtype=int8)
rtol = 1e-07, atol = 0, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=0
E       
E       Mismatched elements: 2 / 2 (100%)
E       Max absolute difference: 103
E       Max relative difference: 1.
E        x: array([0, 0], dtype=int8)
E        y: array([103,  19], dtype=int8)

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 609, in cupy._core._reduction._SimpleReductionKernel._get_function
    return _SimpleReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 622, in cupy._core._reduction._SimpleReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
___________________ TestSimpleReductionFunction.test_shape4 ____________________

self = <cupy_tests.core_tests.test_reduction.TestSimpleReductionFunction testMethod=test_shape4>

    def test_shape4(self):
>       self.check_int8_sum((512, 256 * 256), axis=0)

tests/cupy_tests/core_tests/test_reduction.py:72: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/testing/_helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/_helper.py:495: in check_func
    _array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([-2,  1,  9, ...,  6,  9,  1], dtype=int8)
desired = array([  83,   -8, -118, ...,   45,   61,  -47], dtype=int8)
rtol = 1e-07, atol = 0, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=0
E       
E       Mismatched elements: 65147 / 65536 (99.4%)
E       Max absolute difference: 127
E       Max relative difference: 105.
E        x: array([-2,  1,  9, ...,  6,  9,  1], dtype=int8)
E        y: array([  83,   -8, -118, ...,   45,   61,  -47], dtype=int8)

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 609, in cupy._core._reduction._SimpleReductionKernel._get_function
    return _SimpleReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 622, in cupy._core._reduction._SimpleReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
___________________ TestSimpleReductionFunction.test_shape5 ____________________

self = <cupy_tests.core_tests.test_reduction.TestSimpleReductionFunction testMethod=test_shape5>

    def test_shape5(self):
        block_size = 512
        size = ((2 << 32) // block_size)
>       self.check_int8_sum((size, 1), axis=1)

tests/cupy_tests/core_tests/test_reduction.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/testing/_helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/_helper.py:495: in check_func
    _array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([3, 1, 9, ..., 7, 5, 8], dtype=int8)
desired = array([5, 7, 6, ..., 8, 4, 3], dtype=int8), rtol = 1e-07, atol = 0
err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=0
E       
E       Mismatched elements: 15100857 / 16777216 (90%)
E       Max absolute difference: 9
E       Max relative difference: 8.
E        x: array([3, 1, 9, ..., 7, 5, 8], dtype=int8)
E        y: array([5, 7, 6, ..., 8, 4, 3], dtype=int8)

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 609, in cupy._core._reduction._SimpleReductionKernel._get_function
    return _SimpleReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 622, in cupy._core._reduction._SimpleReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
_______________________ TestReductionKernel.test_shape1 ________________________

self = <cupy_tests.core_tests.test_reduction.TestReductionKernel testMethod=test_shape1>

    def test_shape1(self):
        for i in range(1, 10):
>           self.check_int8_sum((2 ** i,))

tests/cupy_tests/core_tests/test_reduction.py:128: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/testing/_helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/_helper.py:495: in check_func
    _array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array(5, dtype=int8), desired = 12, rtol = 1e-07, atol = 0
err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=0
E       
E       Mismatched elements: 1 / 1 (100%)
E       Max absolute difference: 7
E       Max relative difference: 0.58333333
E        x: array(5, dtype=int8)
E        y: array(12, dtype=int8)

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 776, in cupy._core._reduction.ReductionKernel._get_function
    return _ReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 804, in cupy._core._reduction._ReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
_______________________ TestReductionKernel.test_shape2 ________________________

self = <cupy_tests.core_tests.test_reduction.TestReductionKernel testMethod=test_shape2>

    def test_shape2(self):
        for i in range(1, 10):
>           self.check_int8_sum((2 ** i, 1000), axis=0)

tests/cupy_tests/core_tests/test_reduction.py:134: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/testing/_helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/_helper.py:495: in check_func
    _array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([7, 6, 6, 7, 2, 3, 6, 8, 5, 2, 0, 7, 0, 3, 5, 9, 0, 4, 0, 3, 6, 2,
       2, 1, 5, 6, 6, 9, 0, 6, 6, 5, 9, 0, 6,...    0, 2, 0, 9, 6, 9, 5, 8, 3, 3, 3, 6, 3, 9, 9, 0, 1, 1, 0, 2, 4, 8,
       2, 4, 9, 6, 7, 5, 9, 5, 0, 1], dtype=int8)
desired = array([10,  7, 10, 12,  4, 14,  9,  8, 11, 12, 12,  6,  7, 13,  0,  4,  4,
       10, 12, 15, 11, 13, 10, 16,  8, 14, ... 6,  6,  9,  9,  6, 18, 15,  9, 12, 16,  7,
       11, 11,  8, 16,  1, 11,  2, 11, 11,  7, 12, 13,  8, 11], dtype=int8)
rtol = 1e-07, atol = 0, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=0
E       
E       Mismatched elements: 941 / 1000 (94.1%)
E       Max absolute difference: 18
E       Max relative difference: 8.
E        x: array([7, 6, 6, 7, 2, 3, 6, 8, 5, 2, 0, 7, 0, 3, 5, 9, 0, 4, 0, 3, 6, 2,
E              2, 1, 5, 6, 6, 9, 0, 6, 6, 5, 9, 0, 6, 8, 5, 3, 7, 0, 4, 5, 6, 0,
E              2, 4, 6, 8, 6, 1, 9, 8, 5, 9, 5, 9, 8, 9, 9, 0, 1, 3, 9, 3, 1, 8,...
E        y: array([10,  7, 10, 12,  4, 14,  9,  8, 11, 12, 12,  6,  7, 13,  0,  4,  4,
E              10, 12, 15, 11, 13, 10, 16,  8, 14,  5, 10, 14,  5,  6,  7, 13, 14,
E               7,  9,  8,  8, 10, 11,  4,  7, 12,  7,  6, 10,  8,  9,  7, 12,  7,...

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 776, in cupy._core._reduction.ReductionKernel._get_function
    return _ReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 804, in cupy._core._reduction._ReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
_______________________ TestReductionKernel.test_shape3 ________________________

self = <cupy_tests.core_tests.test_reduction.TestReductionKernel testMethod=test_shape3>

    def test_shape3(self):
        for i in range(1, 10):
>           self.check_int8_sum((2 ** i, 1000), axis=1)

tests/cupy_tests/core_tests/test_reduction.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/testing/_helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/_helper.py:495: in check_func
    _array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([7, 9], dtype=int8), desired = array([103,  19], dtype=int8)
rtol = 1e-07, atol = 0, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=0
E       
E       Mismatched elements: 2 / 2 (100%)
E       Max absolute difference: 96
E       Max relative difference: 0.93203883
E        x: array([7, 9], dtype=int8)
E        y: array([103,  19], dtype=int8)

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 776, in cupy._core._reduction.ReductionKernel._get_function
    return _ReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 804, in cupy._core._reduction._ReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
_______________________ TestReductionKernel.test_shape4 ________________________

self = <cupy_tests.core_tests.test_reduction.TestReductionKernel testMethod=test_shape4>

    def test_shape4(self):
>       self.check_int8_sum((512, 256 * 256), axis=0)

tests/cupy_tests/core_tests/test_reduction.py:145: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/testing/_helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/_helper.py:495: in check_func
    _array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([7, 4, 3, ..., 2, 0, 9], dtype=int8)
desired = array([  83,   -8, -118, ...,   45,   61,  -47], dtype=int8)
rtol = 1e-07, atol = 0, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=0
E       
E       Mismatched elements: 65142 / 65536 (99.4%)
E       Max absolute difference: 127
E       Max relative difference: 10.
E        x: array([7, 4, 3, ..., 2, 0, 9], dtype=int8)
E        y: array([  83,   -8, -118, ...,   45,   61,  -47], dtype=int8)

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 776, in cupy._core._reduction.ReductionKernel._get_function
    return _ReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 804, in cupy._core._reduction._ReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
___________ TestLargeMultiDimReduction.test_large_dims_keep_kernels ____________

self = <cupy_tests.core_tests.test_reduction.TestLargeMultiDimReduction testMethod=test_large_dims_keep_kernels>

    def test_large_dims_keep_kernels(self):
        # This test creates a CUDA_ERROR_LAUNCH_OUT_OF_RESOURCES
        # if the output array dims are not reduced
        shape = (4, 3, 2, 4, 3, 2, 2)
        axis = (1, 4, 3, 6)
>       self.check_int8_sum(shape, axis=axis, keepdims=True)

tests/cupy_tests/core_tests/test_reduction.py:178: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/testing/_helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/_helper.py:495: in check_func
    _array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[[[[[[5],
            [7]]]],



         [[[[6],
            [5]]]]]],





       [[[[[[4],
            [6]]]...
            [5]]]]]],





       [[[[[[5],
            [9]]]],



         [[[[0],
            [0]]]]]]], dtype=int8)
desired = array([[[[[[[ 81],
            [ 79]]]],



         [[[[ 77],
            [ 37]]]]]],





       [[[[[[ 37],
       ...   [ 75]]]]]],





       [[[[[[105],
            [ 47]]]],



         [[[[ 52],
            [ 67]]]]]]], dtype=int8)
rtol = 1e-07, atol = 0, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=0
E       
E       Mismatched elements: 16 / 16 (100%)
E       Max absolute difference: 106
E       Max relative difference: 1.
E        x: array([[[[[[[5],
E                   [7]]]],
E       ...
E        y: array([[[[[[[ 81],
E                   [ 79]]]],
E       ...

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 776, in cupy._core._reduction.ReductionKernel._get_function
    return _ReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 804, in cupy._core._reduction._ReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
___________________________ TestScan.test_multi_gpu ____________________________

self = <cupy_tests.core_tests.test_scan.TestScan testMethod=test_multi_gpu>

    @testing.multi_gpu(2)
    def test_multi_gpu(self):
        with cuda.Device(0):
            a = cupy.zeros((10,))
>           scan(a)

tests/cupy_tests/core_tests/test_scan.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/_routines_math.pyx:751: in cupy._core._routines_math._scan_for_test
    return scan(a, scan_op.SCAN_SUM, dtype=None, out=out)
cupy/_core/_routines_math.pyx:499: in cupy._core._routines_math.scan
    scan_kernel(b, a, out, size=size, block_size=chunk_size)
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4f1aac0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
______________________________ TestScan.test_scan ______________________________

self = <cupy_tests.core_tests.test_scan.TestScan testMethod=test_scan>
dtype = <class 'numpy.float64'>

    @testing.for_all_dtypes()
    def test_scan(self, dtype):
        element_num = 10000
    
        if dtype in {cupy.int8, cupy.uint8, cupy.float16}:
            element_num = 100
    
        a = cupy.ones((element_num,), dtype=dtype)
>       prefix_sum = scan(a)

tests/cupy_tests/core_tests/test_scan.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/_routines_math.pyx:751: in cupy._core._routines_math._scan_for_test
    return scan(a, scan_op.SCAN_SUM, dtype=None, out=out)
cupy/_core/_routines_math.pyx:493: in cupy._core._routines_math.scan
    bsum_kernel(a, b, size=size // 2, block_size=chunk_size // 2)
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4a29fd0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
____________________________ TestScan.test_scan_out ____________________________

self = <cupy_tests.core_tests.test_scan.TestScan testMethod=test_scan_out>
dtype = <class 'numpy.float64'>

    @testing.for_all_dtypes()
    def test_scan_out(self, dtype):
        element_num = 10000
    
        if dtype in {cupy.int8, cupy.uint8, cupy.float16}:
            element_num = 100
    
        a = cupy.ones((element_num,), dtype=dtype)
        b = cupy.zeros_like(a)
>       scan(a, b)

tests/cupy_tests/core_tests/test_scan.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/_routines_math.pyx:751: in cupy._core._routines_math._scan_for_test
    return scan(a, scan_op.SCAN_SUM, dtype=None, out=out)
cupy/_core/_routines_math.pyx:493: in cupy._core._routines_math.scan
    bsum_kernel(a, b, size=size // 2, block_size=chunk_size // 2)
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4ac73a0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_____________ TestUserkernelScalar_param_0_{value=-1}.test_scalar ______________

self = <<cupy_tests.core_tests.test_userkernel.TestUserkernelScalar_param_0_{value=-1} testMethod=test_scalar>  parameter: {'value': -1}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float64'>

    @testing.for_all_dtypes()
    @testing.numpy_cupy_array_equal()
    def test_scalar(self, xp, dtype):
        x = testing.shaped_arange((2, 3, 4), xp, dtype)
        if xp is numpy:
            y = numpy.array(self.value).astype(dtype)
            return x + y
        else:
            kernel = cupy.ElementwiseKernel('T x, T y', 'T z', 'z = x + y')
>           return kernel(x, self.value)

tests/cupy_tests/core_tests/test_userkernel.py:228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4eebd90>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/test_userkernel.py", line 228, in test_scalar
E           return kernel(x, self.value)
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_________ TestUserkernelScalar_param_1_{value=4294967296}.test_scalar __________

self = <<cupy_tests.core_tests.test_userkernel.TestUserkernelScalar_param_1_{value=4294967296} testMethod=test_scalar>  parameter: {'value': 4294967296}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float64'>

    @testing.for_all_dtypes()
    @testing.numpy_cupy_array_equal()
    def test_scalar(self, xp, dtype):
        x = testing.shaped_arange((2, 3, 4), xp, dtype)
        if xp is numpy:
            y = numpy.array(self.value).astype(dtype)
            return x + y
        else:
            kernel = cupy.ElementwiseKernel('T x, T y', 'T z', 'z = x + y')
>           return kernel(x, self.value)

tests/cupy_tests/core_tests/test_userkernel.py:228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4bec190>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/test_userkernel.py", line 228, in test_scalar
E           return kernel(x, self.value)
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_____ TestUserkernelScalar_param_2_{value=9223372036854775807}.test_scalar _____

self = <<cupy_tests.core_tests.test_userkernel.TestUserkernelScalar_param_2_{value=9223372036854775807} testMethod=test_scalar>  parameter: {'value': 9223372036854775807}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float64'>

    @testing.for_all_dtypes()
    @testing.numpy_cupy_array_equal()
    def test_scalar(self, xp, dtype):
        x = testing.shaped_arange((2, 3, 4), xp, dtype)
        if xp is numpy:
            y = numpy.array(self.value).astype(dtype)
            return x + y
        else:
            kernel = cupy.ElementwiseKernel('T x, T y', 'T z', 'z = x + y')
>           return kernel(x, self.value)

tests/cupy_tests/core_tests/test_userkernel.py:228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4b94eb0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/test_userkernel.py", line 228, in test_scalar
E           return kernel(x, self.value)
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
____ TestUserkernelScalar_param_3_{value=-9223372036854775808}.test_scalar _____

self = <<cupy_tests.core_tests.test_userkernel.TestUserkernelScalar_param_3_{value=-9223372036854775808} testMethod=test_scalar>  parameter: {'value': -9223372036854775808}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float64'>

    @testing.for_all_dtypes()
    @testing.numpy_cupy_array_equal()
    def test_scalar(self, xp, dtype):
        x = testing.shaped_arange((2, 3, 4), xp, dtype)
        if xp is numpy:
            y = numpy.array(self.value).astype(dtype)
            return x + y
        else:
            kernel = cupy.ElementwiseKernel('T x, T y', 'T z', 'z = x + y')
>           return kernel(x, self.value)

tests/cupy_tests/core_tests/test_userkernel.py:228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03bc32d580>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/test_userkernel.py", line 228, in test_scalar
E           return kernel(x, self.value)
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_____________________ TestUserkernel.test_manual_indexing ______________________

self = <cupy_tests.core_tests.test_userkernel.TestUserkernel testMethod=test_manual_indexing>
n = 100

    def test_manual_indexing(self, n=100):
>       in1 = cupy.random.uniform(-1, 1, n).astype(cupy.float32)

tests/cupy_tests/core_tests/test_userkernel.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/random/_distributions.py:843: in uniform
    return rs.uniform(low, high, size=size, dtype=dtype)
cupy/random/_generator.py:924: in uniform
    return RandomState._scale_kernel(low, high, rand)
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4e3a760>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
_______________________ TestUserkernel.test_numpy_scalar _______________________

self = <cupy_tests.core_tests.test_userkernel.TestUserkernel testMethod=test_numpy_scalar>
dtype = <class 'numpy.float64'>

    @testing.for_all_dtypes()
    def test_numpy_scalar(self, dtype):
        in1_cpu = numpy.random.randint(0, 1, (4, 5)).astype(dtype)
        in1 = cupy.array(in1_cpu)
        scalar_value = dtype(2)
        uesr_kernel_1 = cupy.ElementwiseKernel(
            'T x, T y',
            'T z',
            '''
                z = x + y;
            ''',
            'uesr_kernel_1')
>       out1 = uesr_kernel_1(in1, scalar_value)

tests/cupy_tests/core_tests/test_userkernel.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b46b9dc0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
______________________ TestUserkernel.test_python_scalar _______________________

self = <cupy_tests.core_tests.test_userkernel.TestUserkernel testMethod=test_python_scalar>

    def test_python_scalar(self):
        for typ in (int, float, bool):
            dtype = numpy.dtype(typ).type
            in1_cpu = numpy.random.randint(0, 1, (4, 5)).astype(dtype)
            in1 = cupy.array(in1_cpu)
            scalar_value = typ(2)
            uesr_kernel_1 = cupy.ElementwiseKernel(
                'T x, T y',
                'T z',
                '''
                    z = x + y;
                ''',
                'uesr_kernel_1')
>           out1 = uesr_kernel_1(in1, scalar_value)

tests/cupy_tests/core_tests/test_userkernel.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4ee0fd0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
___________________ TestElementwiseKernelSize.test_all_raws ____________________

self = <cupy_tests.core_tests.test_userkernel.TestElementwiseKernelSize testMethod=test_all_raws>

    def test_all_raws(self):
        # Input arrays are all raw -> size required
        kernel1 = self.create_kernel((True, True), (False,))
>       kernel1(self.arr1, self.arr2, size=2)

tests/cupy_tests/core_tests/test_userkernel.py:108: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4e13430>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
____________ TestElementwiseKernelSize.test_no_input_and_raw_output ____________

self = <cupy_tests.core_tests.test_userkernel.TestElementwiseKernelSize testMethod=test_no_input_and_raw_output>

    def test_no_input_and_raw_output(self):
        # No input and the given output is raw -> size required
        kernel1 = self.create_kernel((), (True,))
>       kernel1(self.arr1, size=2)

tests/cupy_tests/core_tests/test_userkernel.py:209: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b5220610>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
_______________ TestElementwiseKernelSize.test_scalars_and_raws ________________

self = <cupy_tests.core_tests.test_userkernel.TestElementwiseKernelSize testMethod=test_scalars_and_raws>

    def test_scalars_and_raws(self):
        # Combination of scalars and raw arrays -> size required
        kernel1 = self.create_kernel((True, False), (False,))
>       kernel1(self.arr1, 7, size=2)

tests/cupy_tests/core_tests/test_userkernel.py:168: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4a565b0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
___________ TestElementwiseKernelSize.test_size_determined_by_output ___________

self = <cupy_tests.core_tests.test_userkernel.TestElementwiseKernelSize testMethod=test_size_determined_by_output>

    def test_size_determined_by_output(self):
        # All the input args are unsized, but the size can be determined by the
        # output arg. size argument is not allowed.
    
        # Raw input
        kernel1 = self.create_kernel((True,), (False,))
>       kernel1(self.arr1, self.arr2)

tests/cupy_tests/core_tests/test_userkernel.py:190: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4a9d340>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
________________ TestUserkernelManualBlockSize.test_block_size _________________

self = <cupy_tests.core_tests.test_userkernel.TestUserkernelManualBlockSize testMethod=test_block_size>

    def test_block_size(self):
        x = testing.shaped_arange((2, 3, 4), cupy, cupy.float32)
        kernel = cupy.ElementwiseKernel('T x, T y', 'T z', 'z = x + y')
>       y = kernel(x, 1, block_size=1)

tests/cupy_tests/core_tests/test_userkernel.py:242: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4f3eb50>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
_ TestFusionArrayOperator_param_0_{func=<lambda>, left_value='array', name='neg', right_value='array'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOperator_param_0_{func=<lambda>, left_value='array', na...rameter: {'name': 'neg', 'func': <function <lambda> at 0x7f01a6563790>, 'left_value': 'array', 'right_value': 'array'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOp...ameter: {'name': 'neg', 'func': <function <lambda> at 0x7f01a6563790>, 'left_value': 'array', 'right_value': 'array'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[2.7440674+2.8402228j , 3.5759468+4.627983j  ,
        3.0138168+0.3551803j , 2.724416 +0.4356465j ],
       [....6444745+3.9026458j ]], dtype=complex64), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int32))
kwargs_np = {}
args_cp = (array([[2.7440674+2.8402228j , 3.5759468+4.627983j  ,
        3.0138168+0.3551803j , 2.724416 +0.4356465j ],
       [....6444745+3.9026458j ]], dtype=complex64), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int32))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
>       result_cp = call(impl_cp, args_cp, kwargs_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:121: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/testing/_parameterized.py:67: in new_v
    return f(*args, **kwargs)
tests/cupy_tests/core_tests/fusion_tests/test_array.py:34: in <lambda>
    ???
cupy/_core/core.pyx:1055: in cupy._core.core.ndarray.__neg__
    return _math._negative(self)
cupy/_core/_kernel.pyx:1104: in cupy._core._kernel.ufunc.__call__
    kern = self._get_ufunc_kernel(dev_id, op, arginfos)
cupy/_core/_kernel.pyx:1127: in cupy._core._kernel.ufunc._get_ufunc_kernel
    kern = _get_ufunc_kernel(
cupy/_core/_kernel.pyx:901: in cupy._core._kernel._get_ufunc_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03cd523cd0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
_ TestFusionArrayOperator_param_1_{func=<lambda>, left_value='array', name='neg', right_value='scalar'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOperator_param_1_{func=<lambda>, left_value='array', na...ameter: {'name': 'neg', 'func': <function <lambda> at 0x7f01a6563790>, 'left_value': 'array', 'right_value': 'scalar'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOp...meter: {'name': 'neg', 'func': <function <lambda> at 0x7f01a6563790>, 'left_value': 'array', 'right_value': 'scalar'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[2.7440674+2.8402228j , 3.5759468+4.627983j  ,
        3.0138168+0.3551803j , 2.724416 +0.4356465j ],
       [...183136+4.8930917j , 1.9172076+3.9957929j ,
        3.958625 +2.307397j  , 2.6444745+3.9026458j ]], dtype=complex64), 3)
kwargs_np = {}
args_cp = (array([[2.7440674+2.8402228j , 3.5759468+4.627983j  ,
        3.0138168+0.3551803j , 2.724416 +0.4356465j ],
       [...183136+4.8930917j , 1.9172076+3.9957929j ,
        3.958625 +2.307397j  , 2.6444745+3.9026458j ]], dtype=complex64), 3)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
>       result_cp = call(impl_cp, args_cp, kwargs_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:121: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/testing/_parameterized.py:67: in new_v
    return f(*args, **kwargs)
tests/cupy_tests/core_tests/fusion_tests/test_array.py:34: in <lambda>
    ???
cupy/_core/core.pyx:1055: in cupy._core.core.ndarray.__neg__
    return _math._negative(self)
cupy/_core/_kernel.pyx:1104: in cupy._core._kernel.ufunc.__call__
    kern = self._get_ufunc_kernel(dev_id, op, arginfos)
cupy/_core/_kernel.pyx:1127: in cupy._core._kernel.ufunc._get_ufunc_kernel
    kern = _get_ufunc_kernel(
cupy/_core/_kernel.pyx:901: in cupy._core._kernel._get_ufunc_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03c5108250>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
_ TestFusionArrayOperator_param_2_{func=<lambda>, left_value='array', name='neg', right_value='primitive'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOperator_param_2_{func=<lambda>, left_value='array', na...ter: {'name': 'neg', 'func': <function <lambda> at 0x7f01a6563790>, 'left_value': 'array', 'right_value': 'primitive'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOp...er: {'name': 'neg', 'func': <function <lambda> at 0x7f01a6563790>, 'left_value': 'array', 'right_value': 'primitive'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[2.7440674+2.8402228j , 3.5759468+4.627983j  ,
        3.0138168+0.3551803j , 2.724416 +0.4356465j ],
       [...183136+4.8930917j , 1.9172076+3.9957929j ,
        3.958625 +2.307397j  , 2.6444745+3.9026458j ]], dtype=complex64), 3)
kwargs_np = {}
args_cp = (array([[2.7440674+2.8402228j , 3.5759468+4.627983j  ,
        3.0138168+0.3551803j , 2.724416 +0.4356465j ],
       [...183136+4.8930917j , 1.9172076+3.9957929j ,
        3.958625 +2.307397j  , 2.6444745+3.9026458j ]], dtype=complex64), 3)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
>       result_cp = call(impl_cp, args_cp, kwargs_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:121: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/testing/_parameterized.py:67: in new_v
    return f(*args, **kwargs)
tests/cupy_tests/core_tests/fusion_tests/test_array.py:34: in <lambda>
    ???
cupy/_core/core.pyx:1055: in cupy._core.core.ndarray.__neg__
    return _math._negative(self)
cupy/_core/_kernel.pyx:1104: in cupy._core._kernel.ufunc.__call__
    kern = self._get_ufunc_kernel(dev_id, op, arginfos)
cupy/_core/_kernel.pyx:1127: in cupy._core._kernel.ufunc._get_ufunc_kernel
    kern = _get_ufunc_kernel(
cupy/_core/_kernel.pyx:901: in cupy._core._kernel._get_ufunc_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4e2c430>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
_ TestFusionArrayOperator_param_3_{func=<lambda>, left_value='scalar', name='neg', right_value='array'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOperator_param_3_{func=<lambda>, left_value='scalar', n...ameter: {'name': 'neg', 'func': <function <lambda> at 0x7f01a6563790>, 'left_value': 'scalar', 'right_value': 'array'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOp...meter: {'name': 'neg', 'func': <function <lambda> at 0x7f01a6563790>, 'left_value': 'scalar', 'right_value': 'array'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = ((3+0j), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int32))
kwargs_np = {}
args_cp = ((3+0j), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int32))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03bc2f5e50>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
_ TestFusionArrayOperator_param_4_{func=<lambda>, left_value='primitive', name='neg', right_value='array'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOperator_param_4_{func=<lambda>, left_value='primitive'...ter: {'name': 'neg', 'func': <function <lambda> at 0x7f01a6563790>, 'left_value': 'primitive', 'right_value': 'array'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOp...er: {'name': 'neg', 'func': <function <lambda> at 0x7f01a6563790>, 'left_value': 'primitive', 'right_value': 'array'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = ((3+0j), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int32))
kwargs_np = {}
args_cp = ((3+0j), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int32))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4a9df40>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
_ TestFusionArrayOperator_param_5_{func=<lambda>, left_value='array', name='add', right_value='array'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOperator_param_5_{func=<lambda>, left_value='array', na...rameter: {'name': 'add', 'func': <function <lambda> at 0x7f01a65634c0>, 'left_value': 'array', 'right_value': 'array'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOp...ameter: {'name': 'add', 'func': <function <lambda> at 0x7f01a65634c0>, 'left_value': 'array', 'right_value': 'array'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[2.7440674+2.8402228j , 3.5759468+4.627983j  ,
        3.0138168+0.3551803j , 2.724416 +0.4356465j ],
       [....6444745+3.9026458j ]], dtype=complex64), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int32))
kwargs_np = {}
args_cp = (array([[2.7440674+2.8402228j , 3.5759468+4.627983j  ,
        3.0138168+0.3551803j , 2.724416 +0.4356465j ],
       [....6444745+3.9026458j ]], dtype=complex64), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int32))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
>       result_cp = call(impl_cp, args_cp, kwargs_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:121: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/testing/_parameterized.py:67: in new_v
    return f(*args, **kwargs)
tests/cupy_tests/core_tests/fusion_tests/test_array.py:35: in <lambda>
    ???
cupy/_core/core.pyx:1070: in cupy._core.core.ndarray.__add__
    return _math._add(x, y)
cupy/_core/_kernel.pyx:1104: in cupy._core._kernel.ufunc.__call__
    kern = self._get_ufunc_kernel(dev_id, op, arginfos)
cupy/_core/_kernel.pyx:1127: in cupy._core._kernel.ufunc._get_ufunc_kernel
    kern = _get_ufunc_kernel(
cupy/_core/_kernel.pyx:901: in cupy._core._kernel._get_ufunc_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b46f42b0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
_ TestFusionArrayOperator_param_6_{func=<lambda>, left_value='array', name='add', right_value='scalar'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOperator_param_6_{func=<lambda>, left_value='array', na...ameter: {'name': 'add', 'func': <function <lambda> at 0x7f01a65634c0>, 'left_value': 'array', 'right_value': 'scalar'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOp...meter: {'name': 'add', 'func': <function <lambda> at 0x7f01a65634c0>, 'left_value': 'array', 'right_value': 'scalar'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[2.7440674+2.8402228j , 3.5759468+4.627983j  ,
        3.0138168+0.3551803j , 2.724416 +0.4356465j ],
       [...183136+4.8930917j , 1.9172076+3.9957929j ,
        3.958625 +2.307397j  , 2.6444745+3.9026458j ]], dtype=complex64), 3)
kwargs_np = {}
args_cp = (array([[2.7440674+2.8402228j , 3.5759468+4.627983j  ,
        3.0138168+0.3551803j , 2.724416 +0.4356465j ],
       [...183136+4.8930917j , 1.9172076+3.9957929j ,
        3.958625 +2.307397j  , 2.6444745+3.9026458j ]], dtype=complex64), 3)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4a4a370>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
_ TestFusionArrayOperator_param_7_{func=<lambda>, left_value='array', name='add', right_value='primitive'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOperator_param_7_{func=<lambda>, left_value='array', na...ter: {'name': 'add', 'func': <function <lambda> at 0x7f01a65634c0>, 'left_value': 'array', 'right_value': 'primitive'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOp...er: {'name': 'add', 'func': <function <lambda> at 0x7f01a65634c0>, 'left_value': 'array', 'right_value': 'primitive'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[2.7440674+2.8402228j , 3.5759468+4.627983j  ,
        3.0138168+0.3551803j , 2.724416 +0.4356465j ],
       [...183136+4.8930917j , 1.9172076+3.9957929j ,
        3.958625 +2.307397j  , 2.6444745+3.9026458j ]], dtype=complex64), 3)
kwargs_np = {}
args_cp = (array([[2.7440674+2.8402228j , 3.5759468+4.627983j  ,
        3.0138168+0.3551803j , 2.724416 +0.4356465j ],
       [...183136+4.8930917j , 1.9172076+3.9957929j ,
        3.958625 +2.307397j  , 2.6444745+3.9026458j ]], dtype=complex64), 3)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4aac0a0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
_ TestFusionArrayOperator_param_8_{func=<lambda>, left_value='scalar', name='add', right_value='array'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOperator_param_8_{func=<lambda>, left_value='scalar', n...ameter: {'name': 'add', 'func': <function <lambda> at 0x7f01a65634c0>, 'left_value': 'scalar', 'right_value': 'array'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOp...meter: {'name': 'add', 'func': <function <lambda> at 0x7f01a65634c0>, 'left_value': 'scalar', 'right_value': 'array'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = ((3+0j), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int32))
kwargs_np = {}
args_cp = ((3+0j), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int32))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
>       result_cp = call(impl_cp, args_cp, kwargs_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:121: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/testing/_parameterized.py:67: in new_v
    return f(*args, **kwargs)
tests/cupy_tests/core_tests/fusion_tests/test_array.py:35: in <lambda>
    ???
cupy/_core/core.pyx:1466: in cupy._core.core.ndarray.__array_ufunc__
    return cp_ufunc(*inputs, **kwargs)
cupy/_core/_kernel.pyx:1104: in cupy._core._kernel.ufunc.__call__
    kern = self._get_ufunc_kernel(dev_id, op, arginfos)
cupy/_core/_kernel.pyx:1127: in cupy._core._kernel.ufunc._get_ufunc_kernel
    kern = _get_ufunc_kernel(
cupy/_core/_kernel.pyx:901: in cupy._core._kernel._get_ufunc_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b521d550>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
_ TestFusionArrayOperator_param_9_{func=<lambda>, left_value='primitive', name='add', right_value='array'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOperator_param_9_{func=<lambda>, left_value='primitive'...ter: {'name': 'add', 'func': <function <lambda> at 0x7f01a65634c0>, 'left_value': 'primitive', 'right_value': 'array'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOp...er: {'name': 'add', 'func': <function <lambda> at 0x7f01a65634c0>, 'left_value': 'primitive', 'right_value': 'array'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = ((3+0j), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int32))
kwargs_np = {}
args_cp = ((3+0j), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int32))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
>       result_cp = call(impl_cp, args_cp, kwargs_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:121: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/testing/_parameterized.py:67: in new_v
    return f(*args, **kwargs)
tests/cupy_tests/core_tests/fusion_tests/test_array.py:35: in <lambda>
    ???
cupy/_core/core.pyx:1070: in cupy._core.core.ndarray.__add__
    return _math._add(x, y)
cupy/_core/_kernel.pyx:1104: in cupy._core._kernel.ufunc.__call__
    kern = self._get_ufunc_kernel(dev_id, op, arginfos)
cupy/_core/_kernel.pyx:1127: in cupy._core._kernel.ufunc._get_ufunc_kernel
    kern = _get_ufunc_kernel(
cupy/_core/_kernel.pyx:901: in cupy._core._kernel._get_ufunc_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03bc2faf40>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
_ TestFusionArrayOperator_param_10_{func=<lambda>, left_value='array', name='sub', right_value='array'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOperator_param_10_{func=<lambda>, left_value='array', n...rameter: {'name': 'sub', 'func': <function <lambda> at 0x7f01a6563310>, 'left_value': 'array', 'right_value': 'array'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOp...ameter: {'name': 'sub', 'func': <function <lambda> at 0x7f01a6563310>, 'left_value': 'array', 'right_value': 'array'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[2.7440674+2.8402228j , 3.5759468+4.627983j  ,
        3.0138168+0.3551803j , 2.724416 +0.4356465j ],
       [....6444745+3.9026458j ]], dtype=complex64), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int32))
kwargs_np = {}
args_cp = (array([[2.7440674+2.8402228j , 3.5759468+4.627983j  ,
        3.0138168+0.3551803j , 2.724416 +0.4356465j ],
       [....6444745+3.9026458j ]], dtype=complex64), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int32))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
>       result_cp = call(impl_cp, args_cp, kwargs_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:121: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/testing/_parameterized.py:67: in new_v
    return f(*args, **kwargs)
tests/cupy_tests/core_tests/fusion_tests/test_array.py:36: in <lambda>
    ???
cupy/_core/core.pyx:1078: in cupy._core.core.ndarray.__sub__
    return _math._subtract(x, y)
cupy/_core/_kernel.pyx:1104: in cupy._core._kernel.ufunc.__call__
    kern = self._get_ufunc_kernel(dev_id, op, arginfos)
cupy/_core/_kernel.pyx:1127: in cupy._core._kernel.ufunc._get_ufunc_kernel
    kern = _get_ufunc_kernel(
cupy/_core/_kernel.pyx:901: in cupy._core._kernel._get_ufunc_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03bc30a490>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
_ TestFusionArrayOperator_param_11_{func=<lambda>, left_value='array', name='sub', right_value='scalar'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOperator_param_11_{func=<lambda>, left_value='array', n...ameter: {'name': 'sub', 'func': <function <lambda> at 0x7f01a6563310>, 'left_value': 'array', 'right_value': 'scalar'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOp...meter: {'name': 'sub', 'func': <function <lambda> at 0x7f01a6563310>, 'left_value': 'array', 'right_value': 'scalar'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[2.7440674+2.8402228j , 3.5759468+4.627983j  ,
        3.0138168+0.3551803j , 2.724416 +0.4356465j ],
       [...183136+4.8930917j , 1.9172076+3.9957929j ,
        3.958625 +2.307397j  , 2.6444745+3.9026458j ]], dtype=complex64), 3)
kwargs_np = {}
args_cp = (array([[2.7440674+2.8402228j , 3.5759468+4.627983j  ,
        3.0138168+0.3551803j , 2.724416 +0.4356465j ],
       [...183136+4.8930917j , 1.9172076+3.9957929j ,
        3.958625 +2.307397j  , 2.6444745+3.9026458j ]], dtype=complex64), 3)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03c49c7880>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
_ TestFusionArrayOperator_param_12_{func=<lambda>, left_value='array', name='sub', right_value='primitive'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOperator_param_12_{func=<lambda>, left_value='array', n...ter: {'name': 'sub', 'func': <function <lambda> at 0x7f01a6563310>, 'left_value': 'array', 'right_value': 'primitive'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOp...er: {'name': 'sub', 'func': <function <lambda> at 0x7f01a6563310>, 'left_value': 'array', 'right_value': 'primitive'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[2.7440674+2.8402228j , 3.5759468+4.627983j  ,
        3.0138168+0.3551803j , 2.724416 +0.4356465j ],
       [...183136+4.8930917j , 1.9172076+3.9957929j ,
        3.958625 +2.307397j  , 2.6444745+3.9026458j ]], dtype=complex64), 3)
kwargs_np = {}
args_cp = (array([[2.7440674+2.8402228j , 3.5759468+4.627983j  ,
        3.0138168+0.3551803j , 2.724416 +0.4356465j ],
       [...183136+4.8930917j , 1.9172076+3.9957929j ,
        3.958625 +2.307397j  , 2.6444745+3.9026458j ]], dtype=complex64), 3)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03cd526b50>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
_ TestFusionArrayOperator_param_13_{func=<lambda>, left_value='scalar', name='sub', right_value='array'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOperator_param_13_{func=<lambda>, left_value='scalar', ...ameter: {'name': 'sub', 'func': <function <lambda> at 0x7f01a6563310>, 'left_value': 'scalar', 'right_value': 'array'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOp...meter: {'name': 'sub', 'func': <function <lambda> at 0x7f01a6563310>, 'left_value': 'scalar', 'right_value': 'array'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = ((3+0j), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int32))
kwargs_np = {}
args_cp = ((3+0j), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int32))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
>       result_cp = call(impl_cp, args_cp, kwargs_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:121: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/testing/_parameterized.py:67: in new_v
    return f(*args, **kwargs)
tests/cupy_tests/core_tests/fusion_tests/test_array.py:36: in <lambda>
    ???
cupy/_core/core.pyx:1466: in cupy._core.core.ndarray.__array_ufunc__
    return cp_ufunc(*inputs, **kwargs)
cupy/_core/_kernel.pyx:1104: in cupy._core._kernel.ufunc.__call__
    kern = self._get_ufunc_kernel(dev_id, op, arginfos)
cupy/_core/_kernel.pyx:1127: in cupy._core._kernel.ufunc._get_ufunc_kernel
    kern = _get_ufunc_kernel(
cupy/_core/_kernel.pyx:901: in cupy._core._kernel._get_ufunc_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03cd4da370>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
_ TestFusionArrayOperator_param_14_{func=<lambda>, left_value='primitive', name='sub', right_value='array'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOperator_param_14_{func=<lambda>, left_value='primitive...ter: {'name': 'sub', 'func': <function <lambda> at 0x7f01a6563310>, 'left_value': 'primitive', 'right_value': 'array'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOp...er: {'name': 'sub', 'func': <function <lambda> at 0x7f01a6563310>, 'left_value': 'primitive', 'right_value': 'array'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = ((3+0j), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int32))
kwargs_np = {}
args_cp = ((3+0j), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int32))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
>       result_cp = call(impl_cp, args_cp, kwargs_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:121: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/testing/_parameterized.py:67: in new_v
    return f(*args, **kwargs)
tests/cupy_tests/core_tests/fusion_tests/test_array.py:36: in <lambda>
    ???
cupy/_core/core.pyx:1078: in cupy._core.core.ndarray.__sub__
    return _math._subtract(x, y)
cupy/_core/_kernel.pyx:1104: in cupy._core._kernel.ufunc.__call__
    kern = self._get_ufunc_kernel(dev_id, op, arginfos)
cupy/_core/_kernel.pyx:1127: in cupy._core._kernel.ufunc._get_ufunc_kernel
    kern = _get_ufunc_kernel(
cupy/_core/_kernel.pyx:901: in cupy._core._kernel._get_ufunc_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4a3b790>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
_ TestFusionArrayOperator_param_15_{func=<lambda>, left_value='array', name='mul', right_value='array'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOperator_param_15_{func=<lambda>, left_value='array', n...rameter: {'name': 'mul', 'func': <function <lambda> at 0x7f01a65630d0>, 'left_value': 'array', 'right_value': 'array'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOp...ameter: {'name': 'mul', 'func': <function <lambda> at 0x7f01a65630d0>, 'left_value': 'array', 'right_value': 'array'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[2.7440674+2.8402228j , 3.5759468+4.627983j  ,
        3.0138168+0.3551803j , 2.724416 +0.4356465j ],
       [....6444745+3.9026458j ]], dtype=complex64), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int32))
kwargs_np = {}
args_cp = (array([[2.7440674+2.8402228j , 3.5759468+4.627983j  ,
        3.0138168+0.3551803j , 2.724416 +0.4356465j ],
       [....6444745+3.9026458j ]], dtype=complex64), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int32))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
>       result_cp = call(impl_cp, args_cp, kwargs_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:121: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/testing/_parameterized.py:67: in new_v
    return f(*args, **kwargs)
tests/cupy_tests/core_tests/fusion_tests/test_array.py:37: in <lambda>
    ???
cupy/_core/core.pyx:1086: in cupy._core.core.ndarray.__mul__
    return _math._multiply(x, y)
cupy/_core/_kernel.pyx:1104: in cupy._core._kernel.ufunc.__call__
    kern = self._get_ufunc_kernel(dev_id, op, arginfos)
cupy/_core/_kernel.pyx:1127: in cupy._core._kernel.ufunc._get_ufunc_kernel
    kern = _get_ufunc_kernel(
cupy/_core/_kernel.pyx:901: in cupy._core._kernel._get_ufunc_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4eeb490>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
_ TestFusionArrayOperator_param_16_{func=<lambda>, left_value='array', name='mul', right_value='scalar'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOperator_param_16_{func=<lambda>, left_value='array', n...ameter: {'name': 'mul', 'func': <function <lambda> at 0x7f01a65630d0>, 'left_value': 'array', 'right_value': 'scalar'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOp...meter: {'name': 'mul', 'func': <function <lambda> at 0x7f01a65630d0>, 'left_value': 'array', 'right_value': 'scalar'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[2.7440674+2.8402228j , 3.5759468+4.627983j  ,
        3.0138168+0.3551803j , 2.724416 +0.4356465j ],
       [...183136+4.8930917j , 1.9172076+3.9957929j ,
        3.958625 +2.307397j  , 2.6444745+3.9026458j ]], dtype=complex64), 3)
kwargs_np = {}
args_cp = (array([[2.7440674+2.8402228j , 3.5759468+4.627983j  ,
        3.0138168+0.3551803j , 2.724416 +0.4356465j ],
       [...183136+4.8930917j , 1.9172076+3.9957929j ,
        3.958625 +2.307397j  , 2.6444745+3.9026458j ]], dtype=complex64), 3)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4ee42b0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
_ TestFusionArrayOperator_param_17_{func=<lambda>, left_value='array', name='mul', right_value='primitive'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOperator_param_17_{func=<lambda>, left_value='array', n...ter: {'name': 'mul', 'func': <function <lambda> at 0x7f01a65630d0>, 'left_value': 'array', 'right_value': 'primitive'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOp...er: {'name': 'mul', 'func': <function <lambda> at 0x7f01a65630d0>, 'left_value': 'array', 'right_value': 'primitive'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[2.7440674+2.8402228j , 3.5759468+4.627983j  ,
        3.0138168+0.3551803j , 2.724416 +0.4356465j ],
       [...183136+4.8930917j , 1.9172076+3.9957929j ,
        3.958625 +2.307397j  , 2.6444745+3.9026458j ]], dtype=complex64), 3)
kwargs_np = {}
args_cp = (array([[2.7440674+2.8402228j , 3.5759468+4.627983j  ,
        3.0138168+0.3551803j , 2.724416 +0.4356465j ],
       [...183136+4.8930917j , 1.9172076+3.9957929j ,
        3.958625 +2.307397j  , 2.6444745+3.9026458j ]], dtype=complex64), 3)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4f2d3a0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
_ TestFusionArrayOperator_param_18_{func=<lambda>, left_value='scalar', name='mul', right_value='array'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOperator_param_18_{func=<lambda>, left_value='scalar', ...ameter: {'name': 'mul', 'func': <function <lambda> at 0x7f01a65630d0>, 'left_value': 'scalar', 'right_value': 'array'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOp...meter: {'name': 'mul', 'func': <function <lambda> at 0x7f01a65630d0>, 'left_value': 'scalar', 'right_value': 'array'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = ((3+0j), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int32))
kwargs_np = {}
args_cp = ((3+0j), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int32))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
>       result_cp = call(impl_cp, args_cp, kwargs_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:121: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/testing/_parameterized.py:67: in new_v
    return f(*args, **kwargs)
tests/cupy_tests/core_tests/fusion_tests/test_array.py:37: in <lambda>
    ???
cupy/_core/core.pyx:1466: in cupy._core.core.ndarray.__array_ufunc__
    return cp_ufunc(*inputs, **kwargs)
cupy/_core/_kernel.pyx:1104: in cupy._core._kernel.ufunc.__call__
    kern = self._get_ufunc_kernel(dev_id, op, arginfos)
cupy/_core/_kernel.pyx:1127: in cupy._core._kernel.ufunc._get_ufunc_kernel
    kern = _get_ufunc_kernel(
cupy/_core/_kernel.pyx:901: in cupy._core._kernel._get_ufunc_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4a7bc10>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
_ TestFusionArrayOperator_param_19_{func=<lambda>, left_value='primitive', name='mul', right_value='array'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOperator_param_19_{func=<lambda>, left_value='primitive...ter: {'name': 'mul', 'func': <function <lambda> at 0x7f01a65630d0>, 'left_value': 'primitive', 'right_value': 'array'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOp...er: {'name': 'mul', 'func': <function <lambda> at 0x7f01a65630d0>, 'left_value': 'primitive', 'right_value': 'array'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = ((3+0j), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int32))
kwargs_np = {}
args_cp = ((3+0j), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int32))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
>       result_cp = call(impl_cp, args_cp, kwargs_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:121: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/testing/_parameterized.py:67: in new_v
    return f(*args, **kwargs)
tests/cupy_tests/core_tests/fusion_tests/test_array.py:37: in <lambda>
    ???
cupy/_core/core.pyx:1086: in cupy._core.core.ndarray.__mul__
    return _math._multiply(x, y)
cupy/_core/_kernel.pyx:1104: in cupy._core._kernel.ufunc.__call__
    kern = self._get_ufunc_kernel(dev_id, op, arginfos)
cupy/_core/_kernel.pyx:1127: in cupy._core._kernel.ufunc._get_ufunc_kernel
    kern = _get_ufunc_kernel(
cupy/_core/_kernel.pyx:901: in cupy._core._kernel._get_ufunc_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b470fd60>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
_ TestFusionArrayOperator_param_20_{func=<lambda>, left_value='array', name='div', right_value='array'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOperator_param_20_{func=<lambda>, left_value='array', n...rameter: {'name': 'div', 'func': <function <lambda> at 0x7f01a65631f0>, 'left_value': 'array', 'right_value': 'array'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOp...ameter: {'name': 'div', 'func': <function <lambda> at 0x7f01a65631f0>, 'left_value': 'array', 'right_value': 'array'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[2.7440674+2.8402228j , 3.5759468+4.627983j  ,
        3.0138168+0.3551803j , 2.724416 +0.4356465j ],
       [....6444745+3.9026458j ]], dtype=complex64), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int32))
kwargs_np = {}
args_cp = (array([[2.7440674+2.8402228j , 3.5759468+4.627983j  ,
        3.0138168+0.3551803j , 2.724416 +0.4356465j ],
       [....6444745+3.9026458j ]], dtype=complex64), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int32))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
>       result_cp = call(impl_cp, args_cp, kwargs_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:121: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/testing/_parameterized.py:67: in new_v
    return f(*args, **kwargs)
tests/cupy_tests/core_tests/fusion_tests/test_array.py:38: in <lambda>
    ???
cupy/_core/core.pyx:1108: in cupy._core.core.ndarray.__truediv__
    return _math._true_divide(x, y)
cupy/_core/_kernel.pyx:1104: in cupy._core._kernel.ufunc.__call__
    kern = self._get_ufunc_kernel(dev_id, op, arginfos)
cupy/_core/_kernel.pyx:1127: in cupy._core._kernel.ufunc._get_ufunc_kernel
    kern = _get_ufunc_kernel(
cupy/_core/_kernel.pyx:901: in cupy._core._kernel._get_ufunc_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b46c3940>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
_ TestFusionArrayOperator_param_21_{func=<lambda>, left_value='array', name='div', right_value='scalar'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOperator_param_21_{func=<lambda>, left_value='array', n...ameter: {'name': 'div', 'func': <function <lambda> at 0x7f01a65631f0>, 'left_value': 'array', 'right_value': 'scalar'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOp...meter: {'name': 'div', 'func': <function <lambda> at 0x7f01a65631f0>, 'left_value': 'array', 'right_value': 'scalar'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[2.7440674+2.8402228j , 3.5759468+4.627983j  ,
        3.0138168+0.3551803j , 2.724416 +0.4356465j ],
       [...183136+4.8930917j , 1.9172076+3.9957929j ,
        3.958625 +2.307397j  , 2.6444745+3.9026458j ]], dtype=complex64), 3)
kwargs_np = {}
args_cp = (array([[2.7440674+2.8402228j , 3.5759468+4.627983j  ,
        3.0138168+0.3551803j , 2.724416 +0.4356465j ],
       [...183136+4.8930917j , 1.9172076+3.9957929j ,
        3.958625 +2.307397j  , 2.6444745+3.9026458j ]], dtype=complex64), 3)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b471d610>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
_ TestFusionArrayOperator_param_22_{func=<lambda>, left_value='array', name='div', right_value='primitive'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOperator_param_22_{func=<lambda>, left_value='array', n...ter: {'name': 'div', 'func': <function <lambda> at 0x7f01a65631f0>, 'left_value': 'array', 'right_value': 'primitive'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOp...er: {'name': 'div', 'func': <function <lambda> at 0x7f01a65631f0>, 'left_value': 'array', 'right_value': 'primitive'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[2.7440674+2.8402228j , 3.5759468+4.627983j  ,
        3.0138168+0.3551803j , 2.724416 +0.4356465j ],
       [...183136+4.8930917j , 1.9172076+3.9957929j ,
        3.958625 +2.307397j  , 2.6444745+3.9026458j ]], dtype=complex64), 3)
kwargs_np = {}
args_cp = (array([[2.7440674+2.8402228j , 3.5759468+4.627983j  ,
        3.0138168+0.3551803j , 2.724416 +0.4356465j ],
       [...183136+4.8930917j , 1.9172076+3.9957929j ,
        3.958625 +2.307397j  , 2.6444745+3.9026458j ]], dtype=complex64), 3)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b47c2e50>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
_ TestFusionArrayOperator_param_23_{func=<lambda>, left_value='scalar', name='div', right_value='array'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOperator_param_23_{func=<lambda>, left_value='scalar', ...ameter: {'name': 'div', 'func': <function <lambda> at 0x7f01a65631f0>, 'left_value': 'scalar', 'right_value': 'array'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOp...meter: {'name': 'div', 'func': <function <lambda> at 0x7f01a65631f0>, 'left_value': 'scalar', 'right_value': 'array'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = ((3+0j), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int32))
kwargs_np = {}
args_cp = ((3+0j), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int32))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
>       result_cp = call(impl_cp, args_cp, kwargs_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:121: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/testing/_parameterized.py:67: in new_v
    return f(*args, **kwargs)
tests/cupy_tests/core_tests/fusion_tests/test_array.py:38: in <lambda>
    ???
cupy/_core/core.pyx:1466: in cupy._core.core.ndarray.__array_ufunc__
    return cp_ufunc(*inputs, **kwargs)
cupy/_core/_kernel.pyx:1104: in cupy._core._kernel.ufunc.__call__
    kern = self._get_ufunc_kernel(dev_id, op, arginfos)
cupy/_core/_kernel.pyx:1127: in cupy._core._kernel.ufunc._get_ufunc_kernel
    kern = _get_ufunc_kernel(
cupy/_core/_kernel.pyx:901: in cupy._core._kernel._get_ufunc_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4bb46a0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
_ TestFusionArrayOperator_param_24_{func=<lambda>, left_value='primitive', name='div', right_value='array'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOperator_param_24_{func=<lambda>, left_value='primitive...ter: {'name': 'div', 'func': <function <lambda> at 0x7f01a65631f0>, 'left_value': 'primitive', 'right_value': 'array'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOp...er: {'name': 'div', 'func': <function <lambda> at 0x7f01a65631f0>, 'left_value': 'primitive', 'right_value': 'array'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = ((3+0j), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int32))
kwargs_np = {}
args_cp = ((3+0j), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int32))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
>       result_cp = call(impl_cp, args_cp, kwargs_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:121: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/testing/_parameterized.py:67: in new_v
    return f(*args, **kwargs)
tests/cupy_tests/core_tests/fusion_tests/test_array.py:38: in <lambda>
    ???
cupy/_core/core.pyx:1108: in cupy._core.core.ndarray.__truediv__
    return _math._true_divide(x, y)
cupy/_core/_kernel.pyx:1104: in cupy._core._kernel.ufunc.__call__
    kern = self._get_ufunc_kernel(dev_id, op, arginfos)
cupy/_core/_kernel.pyx:1127: in cupy._core._kernel.ufunc._get_ufunc_kernel
    kern = _get_ufunc_kernel(
cupy/_core/_kernel.pyx:901: in cupy._core._kernel._get_ufunc_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4be1970>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
_ TestFusionArrayOperator_param_25_{func=<lambda>, left_value='array', name='pow', right_value='array'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOperator_param_25_{func=<lambda>, left_value='array', n...rameter: {'name': 'pow', 'func': <function <lambda> at 0x7f01a6563280>, 'left_value': 'array', 'right_value': 'array'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOp...ameter: {'name': 'pow', 'func': <function <lambda> at 0x7f01a6563280>, 'left_value': 'array', 'right_value': 'array'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[2.7440674+2.8402228j , 3.5759468+4.627983j  ,
        3.0138168+0.3551803j , 2.724416 +0.4356465j ],
       [....6444745+3.9026458j ]], dtype=complex64), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int32))
kwargs_np = {}
args_cp = (array([[2.7440674+2.8402228j , 3.5759468+4.627983j  ,
        3.0138168+0.3551803j , 2.724416 +0.4356465j ],
       [....6444745+3.9026458j ]], dtype=complex64), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int32))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
>       result_cp = call(impl_cp, args_cp, kwargs_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:121: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/testing/_parameterized.py:67: in new_v
    return f(*args, **kwargs)
tests/cupy_tests/core_tests/fusion_tests/test_array.py:39: in <lambda>
    ???
cupy/_core/core.pyx:1141: in cupy._core.core.ndarray.__pow__
    return _math._power(x, y)
cupy/_core/_kernel.pyx:1104: in cupy._core._kernel.ufunc.__call__
    kern = self._get_ufunc_kernel(dev_id, op, arginfos)
cupy/_core/_kernel.pyx:1127: in cupy._core._kernel.ufunc._get_ufunc_kernel
    kern = _get_ufunc_kernel(
cupy/_core/_kernel.pyx:901: in cupy._core._kernel._get_ufunc_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03bc314c40>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
_ TestFusionArrayOperator_param_26_{func=<lambda>, left_value='array', name='pow', right_value='scalar'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOperator_param_26_{func=<lambda>, left_value='array', n...ameter: {'name': 'pow', 'func': <function <lambda> at 0x7f01a6563280>, 'left_value': 'array', 'right_value': 'scalar'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOp...meter: {'name': 'pow', 'func': <function <lambda> at 0x7f01a6563280>, 'left_value': 'array', 'right_value': 'scalar'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[2.7440674+2.8402228j , 3.5759468+4.627983j  ,
        3.0138168+0.3551803j , 2.724416 +0.4356465j ],
       [...183136+4.8930917j , 1.9172076+3.9957929j ,
        3.958625 +2.307397j  , 2.6444745+3.9026458j ]], dtype=complex64), 3)
kwargs_np = {}
args_cp = (array([[2.7440674+2.8402228j , 3.5759468+4.627983j  ,
        3.0138168+0.3551803j , 2.724416 +0.4356465j ],
       [...183136+4.8930917j , 1.9172076+3.9957929j ,
        3.958625 +2.307397j  , 2.6444745+3.9026458j ]], dtype=complex64), 3)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03d5b511c0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
_ TestFusionArrayOperator_param_27_{func=<lambda>, left_value='array', name='pow', right_value='primitive'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOperator_param_27_{func=<lambda>, left_value='array', n...ter: {'name': 'pow', 'func': <function <lambda> at 0x7f01a6563280>, 'left_value': 'array', 'right_value': 'primitive'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOp...er: {'name': 'pow', 'func': <function <lambda> at 0x7f01a6563280>, 'left_value': 'array', 'right_value': 'primitive'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[2.7440674+2.8402228j , 3.5759468+4.627983j  ,
        3.0138168+0.3551803j , 2.724416 +0.4356465j ],
       [...183136+4.8930917j , 1.9172076+3.9957929j ,
        3.958625 +2.307397j  , 2.6444745+3.9026458j ]], dtype=complex64), 3)
kwargs_np = {}
args_cp = (array([[2.7440674+2.8402228j , 3.5759468+4.627983j  ,
        3.0138168+0.3551803j , 2.724416 +0.4356465j ],
       [...183136+4.8930917j , 1.9172076+3.9957929j ,
        3.958625 +2.307397j  , 2.6444745+3.9026458j ]], dtype=complex64), 3)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4eebe80>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
_ TestFusionArrayOperator_param_28_{func=<lambda>, left_value='scalar', name='pow', right_value='array'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOperator_param_28_{func=<lambda>, left_value='scalar', ...ameter: {'name': 'pow', 'func': <function <lambda> at 0x7f01a6563280>, 'left_value': 'scalar', 'right_value': 'array'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOp...meter: {'name': 'pow', 'func': <function <lambda> at 0x7f01a6563280>, 'left_value': 'scalar', 'right_value': 'array'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = ((3+0j), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int32))
kwargs_np = {}
args_cp = ((3+0j), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int32))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
>       result_cp = call(impl_cp, args_cp, kwargs_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:121: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/testing/_parameterized.py:67: in new_v
    return f(*args, **kwargs)
tests/cupy_tests/core_tests/fusion_tests/test_array.py:39: in <lambda>
    ???
cupy/_core/core.pyx:1466: in cupy._core.core.ndarray.__array_ufunc__
    return cp_ufunc(*inputs, **kwargs)
cupy/_core/_kernel.pyx:1104: in cupy._core._kernel.ufunc.__call__
    kern = self._get_ufunc_kernel(dev_id, op, arginfos)
cupy/_core/_kernel.pyx:1127: in cupy._core._kernel.ufunc._get_ufunc_kernel
    kern = _get_ufunc_kernel(
cupy/_core/_kernel.pyx:901: in cupy._core._kernel._get_ufunc_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b46d78b0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
_ TestFusionArrayOperator_param_29_{func=<lambda>, left_value='primitive', name='pow', right_value='array'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOperator_param_29_{func=<lambda>, left_value='primitive...ter: {'name': 'pow', 'func': <function <lambda> at 0x7f01a6563280>, 'left_value': 'primitive', 'right_value': 'array'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOp...er: {'name': 'pow', 'func': <function <lambda> at 0x7f01a6563280>, 'left_value': 'primitive', 'right_value': 'array'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = ((3+0j), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int32))
kwargs_np = {}
args_cp = ((3+0j), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int32))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
>       result_cp = call(impl_cp, args_cp, kwargs_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:121: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/testing/_parameterized.py:67: in new_v
    return f(*args, **kwargs)
tests/cupy_tests/core_tests/fusion_tests/test_array.py:39: in <lambda>
    ???
cupy/_core/core.pyx:1141: in cupy._core.core.ndarray.__pow__
    return _math._power(x, y)
cupy/_core/_kernel.pyx:1104: in cupy._core._kernel.ufunc.__call__
    kern = self._get_ufunc_kernel(dev_id, op, arginfos)
cupy/_core/_kernel.pyx:1127: in cupy._core._kernel.ufunc._get_ufunc_kernel
    kern = _get_ufunc_kernel(
cupy/_core/_kernel.pyx:901: in cupy._core._kernel._get_ufunc_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03bc328370>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
_ TestFusionArrayOperator_param_30_{func=<lambda>, left_value='array', name='eq', right_value='array'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOperator_param_30_{func=<lambda>, left_value='array', n...arameter: {'name': 'eq', 'func': <function <lambda> at 0x7f01a65639d0>, 'left_value': 'array', 'right_value': 'array'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOp...rameter: {'name': 'eq', 'func': <function <lambda> at 0x7f01a65639d0>, 'left_value': 'array', 'right_value': 'array'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[2.7440674+2.8402228j , 3.5759468+4.627983j  ,
        3.0138168+0.3551803j , 2.724416 +0.4356465j ],
       [....6444745+3.9026458j ]], dtype=complex64), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int32))
kwargs_np = {}
args_cp = (array([[2.7440674+2.8402228j , 3.5759468+4.627983j  ,
        3.0138168+0.3551803j , 2.724416 +0.4356465j ],
       [....6444745+3.9026458j ]], dtype=complex64), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int32))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
>       result_cp = call(impl_cp, args_cp, kwargs_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:121: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/testing/_parameterized.py:67: in new_v
    return f(*args, **kwargs)
tests/cupy_tests/core_tests/fusion_tests/test_array.py:40: in <lambda>
    ???
cupy/_core/core.pyx:1012: in cupy._core.core.ndarray.__richcmp__
    return _logic._ndarray_equal(self, other)
cupy/_core/_routines_logic.pyx:32: in cupy._core._routines_logic._ndarray_equal
    return _equal(self, other)
cupy/_core/_kernel.pyx:1104: in cupy._core._kernel.ufunc.__call__
    kern = self._get_ufunc_kernel(dev_id, op, arginfos)
cupy/_core/_kernel.pyx:1127: in cupy._core._kernel.ufunc._get_ufunc_kernel
    kern = _get_ufunc_kernel(
cupy/_core/_kernel.pyx:901: in cupy._core._kernel._get_ufunc_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4ee4b20>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
_ TestFusionArrayOperator_param_31_{func=<lambda>, left_value='array', name='eq', right_value='scalar'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOperator_param_31_{func=<lambda>, left_value='array', n...rameter: {'name': 'eq', 'func': <function <lambda> at 0x7f01a65639d0>, 'left_value': 'array', 'right_value': 'scalar'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOp...ameter: {'name': 'eq', 'func': <function <lambda> at 0x7f01a65639d0>, 'left_value': 'array', 'right_value': 'scalar'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[2.7440674+2.8402228j , 3.5759468+4.627983j  ,
        3.0138168+0.3551803j , 2.724416 +0.4356465j ],
       [...183136+4.8930917j , 1.9172076+3.9957929j ,
        3.958625 +2.307397j  , 2.6444745+3.9026458j ]], dtype=complex64), 3)
kwargs_np = {}
args_cp = (array([[2.7440674+2.8402228j , 3.5759468+4.627983j  ,
        3.0138168+0.3551803j , 2.724416 +0.4356465j ],
       [...183136+4.8930917j , 1.9172076+3.9957929j ,
        3.958625 +2.307397j  , 2.6444745+3.9026458j ]], dtype=complex64), 3)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b46b09d0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
_ TestFusionArrayOperator_param_32_{func=<lambda>, left_value='array', name='eq', right_value='primitive'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOperator_param_32_{func=<lambda>, left_value='array', n...eter: {'name': 'eq', 'func': <function <lambda> at 0x7f01a65639d0>, 'left_value': 'array', 'right_value': 'primitive'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOp...ter: {'name': 'eq', 'func': <function <lambda> at 0x7f01a65639d0>, 'left_value': 'array', 'right_value': 'primitive'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[2.7440674+2.8402228j , 3.5759468+4.627983j  ,
        3.0138168+0.3551803j , 2.724416 +0.4356465j ],
       [...183136+4.8930917j , 1.9172076+3.9957929j ,
        3.958625 +2.307397j  , 2.6444745+3.9026458j ]], dtype=complex64), 3)
kwargs_np = {}
args_cp = (array([[2.7440674+2.8402228j , 3.5759468+4.627983j  ,
        3.0138168+0.3551803j , 2.724416 +0.4356465j ],
       [...183136+4.8930917j , 1.9172076+3.9957929j ,
        3.958625 +2.307397j  , 2.6444745+3.9026458j ]], dtype=complex64), 3)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4e13f40>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
_ TestFusionArrayOperator_param_33_{func=<lambda>, left_value='scalar', name='eq', right_value='array'}.test_operator _

>   return cp_ufunc(*inputs, **kwargs)

cupy/_core/core.pyx:1466: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   kern = self._get_ufunc_kernel(dev_id, op, arginfos)

cupy/_core/_kernel.pyx:1104: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   kern = _get_ufunc_kernel(

cupy/_core/_kernel.pyx:1127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   return _get_simple_elementwise_kernel(

cupy/_core/_kernel.pyx:901: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   module = compile_with_cache(module_code, options)

cupy/_core/_kernel.pyx:61: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   return cuda.compile_with_cache(

cupy/_core/core.pyx:1995: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '#include <cupy/complex.cuh>\n#include <cupy/carray.cuh>\n#include <cupy/atomics.cuh>\n#include <cupy/math_constants.h...n1(_raw_in1[_ind.get()]);\nout0_type &out0 = _raw_out0[_ind.get()];\nout0 = in0 == in1;\n      }\n      ;\n    }\n    '
options = ('-I/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/_core/include', '-I/home/kmaeh/CuPy_Team/rocm-4.0.1/opt/rocm-4.0.1/include')
arch = None, cache_dir = None
extra_source = '/*  Copyright 2008-2013 NVIDIA Corporation\n *  Copyright 2013 Filipe RNC Maia\n *\n *  Licensed under the Apache Lic...)\n#define CUDART_NAN              __longlong_as_double(0xfff8000000000000ULL)\n\n\n#endif  // CUPY_MATH_CONSTANTS_H\n'
backend = 'hiprtc'

    def compile_with_cache(
            source, options=(), arch=None, cache_dir=None, extra_source=None,
            backend='nvrtc', *, enable_cooperative_groups=False,
            name_expressions=None, log_stream=None, jitify=False):
    
        if enable_cooperative_groups:
            if runtime.is_hip:
                raise ValueError(
                    'Cooperative groups is not supported in HIP.')
    
        if name_expressions is not None and backend != 'nvrtc':
            raise NotImplementedError
    
        # We silently ignore CUPY_CACHE_IN_MEMORY if nvcc/hipcc are in use, because
        # they must dump files to disk.
        cache_in_memory = (
            _get_bool_env_variable('CUPY_CACHE_IN_MEMORY', False)
            and backend == 'nvrtc')
    
        if runtime.is_hip:
            backend = 'hiprtc' if backend == 'nvrtc' else 'hipcc'
>           return _compile_with_cache_hip(
                source, options, arch, cache_dir, extra_source, backend,
                name_expressions, log_stream, cache_in_memory)

cupy/cuda/compiler.py:428: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '#include <hip/hip_runtime.h>\n#include <hip/hip_fp16.h>\n/*  Copyright 2008-2013 NVIDIA Corporation\n *  Copyright 20...n1(_raw_in1[_ind.get()]);\nout0_type &out0 = _raw_out0[_ind.get()];\nout0 = in0 == in1;\n      }\n      ;\n    }\n    '
options = ('-I/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/_core/include', '-I/home/kmaeh/CuPy_Team/rocm-4.0.1/opt/rocm-4.0.1/include', '-fcuda-flush-denormals-to-zero')
arch = '90', cache_dir = '/home/kmaeh/.cupy/kernel_cache'
extra_source = '/*  Copyright 2008-2013 NVIDIA Corporation\n *  Copyright 2013 Filipe RNC Maia\n *\n *  Licensed under the Apache Lic...)\n#define CUDART_NAN              __longlong_as_double(0xfff8000000000000ULL)\n\n\n#endif  // CUPY_MATH_CONSTANTS_H\n'
backend = 'hiprtc', name_expressions = None, log_stream = None
cache_in_memory = False, use_converter = True

    def _compile_with_cache_hip(source, options, arch, cache_dir, extra_source,
                                backend='hiprtc', name_expressions=None,
                                log_stream=None, cache_in_memory=False,
                                use_converter=True):
        global _empty_file_preprocess_cache
    
        # TODO(leofang): this might be possible but is currently undocumented
        if _is_cudadevrt_needed(options):
            raise ValueError('separate compilation is not supported in HIP')
    
        # HIP's equivalent of -ftz=true, see ROCm-Developer-Tools/HIP#2252
        # Notes:
        # - For hipcc, this should just work, as invalid options would cause errors
        #   See https://clang.llvm.org/docs/ClangCommandLineReference.html.
        # - For hiprtc, this is a no-op until the compiler options like -D and -I
        #   are accepted, see ROCm-Developer-Tools/HIP#2182 and
        #   ROCm-Developer-Tools/HIP#2248
        options += ('-fcuda-flush-denormals-to-zero',)
    
        if cache_dir is None:
            cache_dir = get_cache_dir()
        # As of ROCm 3.5.0 hiprtc/hipcc can automatically pick up the
        # right arch without setting HCC_AMDGPU_TARGET, so we don't need
        # to tell the compiler which arch we are targeting. But, we still
        # need to know arch as part of the cache key:
        if arch is None:
            # On HIP, gcnArch is computed from "compute capability":
            # https://github.com/ROCm-Developer-Tools/HIP/blob/rocm-4.0.0/rocclr/hip_device.cpp#L202
            arch = device.Device().compute_capability
        if use_converter:
            source = _convert_to_hip_source(source, extra_source,
                                            is_hiprtc=(backend == 'hiprtc'))
    
        env = (arch, options, _get_nvrtc_version(), backend)
        base = _empty_file_preprocess_cache.get(env, None)
        if base is None:
            # This is for checking HIPRTC/HIPCC compiler internal version
            if backend == 'hiprtc':
                base = _preprocess_hiprtc('', options)
            else:
                base = _preprocess_hipcc('', options)
            _empty_file_preprocess_cache[env] = base
    
        key_src = '%s %s %s %s' % (env, base, source, extra_source)
        key_src = key_src.encode('utf-8')
        name = '%s.hsaco' % hashlib.md5(key_src).hexdigest()
    
        mod = function.Module()
    
        if not cache_in_memory:
            # Read from disk cache
            if not os.path.isdir(cache_dir):
                os.makedirs(cache_dir, exist_ok=True)
    
            # To handle conflicts in concurrent situation, we adopt lock-free
            # method to avoid performance degradation.
            # We force recompiling to retrieve C++ mangled names if so desired.
            path = os.path.join(cache_dir, name)
            if os.path.exists(path) and not name_expressions:
                with open(path, 'rb') as f:
                    data = f.read()
                if len(data) >= 32:
                    hash_value = data[:32]
                    binary = data[32:]
                    binary_hash = hashlib.md5(binary).hexdigest().encode('ascii')
                    if hash_value == binary_hash:
                        mod.load(binary)
                        return mod
        else:
            # Enforce compiling -- the resulting kernel will be cached elsewhere,
            # so we do nothing
            pass
    
        if backend == 'hiprtc':
            # compile_using_nvrtc calls hiprtc for hip builds
            binary, mapping = compile_using_nvrtc(
                source, options, arch, name + '.cu', name_expressions,
                log_stream, cache_in_memory)
            mod._set_mapping(mapping)
        else:
            binary = compile_using_hipcc(source, options, arch, log_stream)
    
        if not cache_in_memory:
            # Write to disk cache
            binary_hash = hashlib.md5(binary).hexdigest().encode('ascii')
    
            # shutil.move is not atomic operation, so it could result in a
            # corrupted file. We detect it by appending md5 hash at the beginning
            # of each cache file. If the file is corrupted, it will be ignored
            # next time it is read.
            with tempfile.NamedTemporaryFile(dir=cache_dir, delete=False) as tf:
                tf.write(binary_hash)
                tf.write(binary)
>               temp_path = tf.name

cupy/cuda/compiler.py:838: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4f29220>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError

The above exception was the direct cause of the following exception:

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOperator_param_33_{func=<lambda>, left_value='scalar', ...rameter: {'name': 'eq', 'func': <function <lambda> at 0x7f01a65639d0>, 'left_value': 'scalar', 'right_value': 'array'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOp...ameter: {'name': 'eq', 'func': <function <lambda> at 0x7f01a65639d0>, 'left_value': 'scalar', 'right_value': 'array'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = ((3+0j), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int32))
kwargs_np = {}
args_cp = ((3+0j), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int32))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
>       result_cp = call(impl_cp, args_cp, kwargs_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:121: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/testing/_parameterized.py:67: in new_v
    return f(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = (3+0j)
y = array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int32)

>   ???
E   DeprecationWarning: elementwise comparison failed; this will raise an error in the future.

tests/cupy_tests/core_tests/fusion_tests/test_array.py:40: DeprecationWarning
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
_ TestFusionArrayOperator_param_34_{func=<lambda>, left_value='primitive', name='eq', right_value='array'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOperator_param_34_{func=<lambda>, left_value='primitive...eter: {'name': 'eq', 'func': <function <lambda> at 0x7f01a65639d0>, 'left_value': 'primitive', 'right_value': 'array'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOp...ter: {'name': 'eq', 'func': <function <lambda> at 0x7f01a65639d0>, 'left_value': 'primitive', 'right_value': 'array'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = ((3+0j), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int32))
kwargs_np = {}
args_cp = ((3+0j), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int32))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
>       result_cp = call(impl_cp, args_cp, kwargs_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:121: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/testing/_parameterized.py:67: in new_v
    return f(*args, **kwargs)
tests/cupy_tests/core_tests/fusion_tests/test_array.py:40: in <lambda>
    ???
cupy/_core/core.pyx:1027: in cupy._core.core.ndarray.__richcmp__
    return numpy.equal(self, other)
cupy/_core/core.pyx:1466: in cupy._core.core.ndarray.__array_ufunc__
    return cp_ufunc(*inputs, **kwargs)
cupy/_core/_kernel.pyx:1104: in cupy._core._kernel.ufunc.__call__
    kern = self._get_ufunc_kernel(dev_id, op, arginfos)
cupy/_core/_kernel.pyx:1127: in cupy._core._kernel.ufunc._get_ufunc_kernel
    kern = _get_ufunc_kernel(
cupy/_core/_kernel.pyx:901: in cupy._core._kernel._get_ufunc_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4bdd100>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
_ TestFusionArrayOperator_param_35_{func=<lambda>, left_value='array', name='ne', right_value='array'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOperator_param_35_{func=<lambda>, left_value='array', n...arameter: {'name': 'ne', 'func': <function <lambda> at 0x7f01a65633a0>, 'left_value': 'array', 'right_value': 'array'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOp...rameter: {'name': 'ne', 'func': <function <lambda> at 0x7f01a65633a0>, 'left_value': 'array', 'right_value': 'array'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[2.7440674+2.8402228j , 3.5759468+4.627983j  ,
        3.0138168+0.3551803j , 2.724416 +0.4356465j ],
       [....6444745+3.9026458j ]], dtype=complex64), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int32))
kwargs_np = {}
args_cp = (array([[2.7440674+2.8402228j , 3.5759468+4.627983j  ,
        3.0138168+0.3551803j , 2.724416 +0.4356465j ],
       [....6444745+3.9026458j ]], dtype=complex64), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int32))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
>       result_cp = call(impl_cp, args_cp, kwargs_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:121: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/testing/_parameterized.py:67: in new_v
    return f(*args, **kwargs)
tests/cupy_tests/core_tests/fusion_tests/test_array.py:41: in <lambda>
    ???
cupy/_core/core.pyx:1014: in cupy._core.core.ndarray.__richcmp__
    return _logic._ndarray_not_equal(self, other)
cupy/_core/_routines_logic.pyx:36: in cupy._core._routines_logic._ndarray_not_equal
    return _not_equal(self, other)
cupy/_core/_kernel.pyx:1104: in cupy._core._kernel.ufunc.__call__
    kern = self._get_ufunc_kernel(dev_id, op, arginfos)
cupy/_core/_kernel.pyx:1127: in cupy._core._kernel.ufunc._get_ufunc_kernel
    kern = _get_ufunc_kernel(
cupy/_core/_kernel.pyx:901: in cupy._core._kernel._get_ufunc_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03cd532d00>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
_ TestFusionArrayOperator_param_36_{func=<lambda>, left_value='array', name='ne', right_value='scalar'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOperator_param_36_{func=<lambda>, left_value='array', n...rameter: {'name': 'ne', 'func': <function <lambda> at 0x7f01a65633a0>, 'left_value': 'array', 'right_value': 'scalar'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOp...ameter: {'name': 'ne', 'func': <function <lambda> at 0x7f01a65633a0>, 'left_value': 'array', 'right_value': 'scalar'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[2.7440674+2.8402228j , 3.5759468+4.627983j  ,
        3.0138168+0.3551803j , 2.724416 +0.4356465j ],
       [...183136+4.8930917j , 1.9172076+3.9957929j ,
        3.958625 +2.307397j  , 2.6444745+3.9026458j ]], dtype=complex64), 3)
kwargs_np = {}
args_cp = (array([[2.7440674+2.8402228j , 3.5759468+4.627983j  ,
        3.0138168+0.3551803j , 2.724416 +0.4356465j ],
       [...183136+4.8930917j , 1.9172076+3.9957929j ,
        3.958625 +2.307397j  , 2.6444745+3.9026458j ]], dtype=complex64), 3)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4a93f40>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
_ TestFusionArrayOperator_param_37_{func=<lambda>, left_value='array', name='ne', right_value='primitive'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOperator_param_37_{func=<lambda>, left_value='array', n...eter: {'name': 'ne', 'func': <function <lambda> at 0x7f01a65633a0>, 'left_value': 'array', 'right_value': 'primitive'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOp...ter: {'name': 'ne', 'func': <function <lambda> at 0x7f01a65633a0>, 'left_value': 'array', 'right_value': 'primitive'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[2.7440674+2.8402228j , 3.5759468+4.627983j  ,
        3.0138168+0.3551803j , 2.724416 +0.4356465j ],
       [...183136+4.8930917j , 1.9172076+3.9957929j ,
        3.958625 +2.307397j  , 2.6444745+3.9026458j ]], dtype=complex64), 3)
kwargs_np = {}
args_cp = (array([[2.7440674+2.8402228j , 3.5759468+4.627983j  ,
        3.0138168+0.3551803j , 2.724416 +0.4356465j ],
       [...183136+4.8930917j , 1.9172076+3.9957929j ,
        3.958625 +2.307397j  , 2.6444745+3.9026458j ]], dtype=complex64), 3)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03d5be0970>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
_ TestFusionArrayOperator_param_38_{func=<lambda>, left_value='scalar', name='ne', right_value='array'}.test_operator _

>   return cp_ufunc(*inputs, **kwargs)

cupy/_core/core.pyx:1466: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   kern = self._get_ufunc_kernel(dev_id, op, arginfos)

cupy/_core/_kernel.pyx:1104: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   kern = _get_ufunc_kernel(

cupy/_core/_kernel.pyx:1127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   return _get_simple_elementwise_kernel(

cupy/_core/_kernel.pyx:901: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   module = compile_with_cache(module_code, options)

cupy/_core/_kernel.pyx:61: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   return cuda.compile_with_cache(

cupy/_core/core.pyx:1995: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '#include <cupy/complex.cuh>\n#include <cupy/carray.cuh>\n#include <cupy/atomics.cuh>\n#include <cupy/math_constants.h...n1(_raw_in1[_ind.get()]);\nout0_type &out0 = _raw_out0[_ind.get()];\nout0 = in0 != in1;\n      }\n      ;\n    }\n    '
options = ('-I/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/_core/include', '-I/home/kmaeh/CuPy_Team/rocm-4.0.1/opt/rocm-4.0.1/include')
arch = None, cache_dir = None
extra_source = '/*  Copyright 2008-2013 NVIDIA Corporation\n *  Copyright 2013 Filipe RNC Maia\n *\n *  Licensed under the Apache Lic...)\n#define CUDART_NAN              __longlong_as_double(0xfff8000000000000ULL)\n\n\n#endif  // CUPY_MATH_CONSTANTS_H\n'
backend = 'hiprtc'

    def compile_with_cache(
            source, options=(), arch=None, cache_dir=None, extra_source=None,
            backend='nvrtc', *, enable_cooperative_groups=False,
            name_expressions=None, log_stream=None, jitify=False):
    
        if enable_cooperative_groups:
            if runtime.is_hip:
                raise ValueError(
                    'Cooperative groups is not supported in HIP.')
    
        if name_expressions is not None and backend != 'nvrtc':
            raise NotImplementedError
    
        # We silently ignore CUPY_CACHE_IN_MEMORY if nvcc/hipcc are in use, because
        # they must dump files to disk.
        cache_in_memory = (
            _get_bool_env_variable('CUPY_CACHE_IN_MEMORY', False)
            and backend == 'nvrtc')
    
        if runtime.is_hip:
            backend = 'hiprtc' if backend == 'nvrtc' else 'hipcc'
>           return _compile_with_cache_hip(
                source, options, arch, cache_dir, extra_source, backend,
                name_expressions, log_stream, cache_in_memory)

cupy/cuda/compiler.py:428: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '#include <hip/hip_runtime.h>\n#include <hip/hip_fp16.h>\n/*  Copyright 2008-2013 NVIDIA Corporation\n *  Copyright 20...n1(_raw_in1[_ind.get()]);\nout0_type &out0 = _raw_out0[_ind.get()];\nout0 = in0 != in1;\n      }\n      ;\n    }\n    '
options = ('-I/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/_core/include', '-I/home/kmaeh/CuPy_Team/rocm-4.0.1/opt/rocm-4.0.1/include', '-fcuda-flush-denormals-to-zero')
arch = '90', cache_dir = '/home/kmaeh/.cupy/kernel_cache'
extra_source = '/*  Copyright 2008-2013 NVIDIA Corporation\n *  Copyright 2013 Filipe RNC Maia\n *\n *  Licensed under the Apache Lic...)\n#define CUDART_NAN              __longlong_as_double(0xfff8000000000000ULL)\n\n\n#endif  // CUPY_MATH_CONSTANTS_H\n'
backend = 'hiprtc', name_expressions = None, log_stream = None
cache_in_memory = False, use_converter = True

    def _compile_with_cache_hip(source, options, arch, cache_dir, extra_source,
                                backend='hiprtc', name_expressions=None,
                                log_stream=None, cache_in_memory=False,
                                use_converter=True):
        global _empty_file_preprocess_cache
    
        # TODO(leofang): this might be possible but is currently undocumented
        if _is_cudadevrt_needed(options):
            raise ValueError('separate compilation is not supported in HIP')
    
        # HIP's equivalent of -ftz=true, see ROCm-Developer-Tools/HIP#2252
        # Notes:
        # - For hipcc, this should just work, as invalid options would cause errors
        #   See https://clang.llvm.org/docs/ClangCommandLineReference.html.
        # - For hiprtc, this is a no-op until the compiler options like -D and -I
        #   are accepted, see ROCm-Developer-Tools/HIP#2182 and
        #   ROCm-Developer-Tools/HIP#2248
        options += ('-fcuda-flush-denormals-to-zero',)
    
        if cache_dir is None:
            cache_dir = get_cache_dir()
        # As of ROCm 3.5.0 hiprtc/hipcc can automatically pick up the
        # right arch without setting HCC_AMDGPU_TARGET, so we don't need
        # to tell the compiler which arch we are targeting. But, we still
        # need to know arch as part of the cache key:
        if arch is None:
            # On HIP, gcnArch is computed from "compute capability":
            # https://github.com/ROCm-Developer-Tools/HIP/blob/rocm-4.0.0/rocclr/hip_device.cpp#L202
            arch = device.Device().compute_capability
        if use_converter:
            source = _convert_to_hip_source(source, extra_source,
                                            is_hiprtc=(backend == 'hiprtc'))
    
        env = (arch, options, _get_nvrtc_version(), backend)
        base = _empty_file_preprocess_cache.get(env, None)
        if base is None:
            # This is for checking HIPRTC/HIPCC compiler internal version
            if backend == 'hiprtc':
                base = _preprocess_hiprtc('', options)
            else:
                base = _preprocess_hipcc('', options)
            _empty_file_preprocess_cache[env] = base
    
        key_src = '%s %s %s %s' % (env, base, source, extra_source)
        key_src = key_src.encode('utf-8')
        name = '%s.hsaco' % hashlib.md5(key_src).hexdigest()
    
        mod = function.Module()
    
        if not cache_in_memory:
            # Read from disk cache
            if not os.path.isdir(cache_dir):
                os.makedirs(cache_dir, exist_ok=True)
    
            # To handle conflicts in concurrent situation, we adopt lock-free
            # method to avoid performance degradation.
            # We force recompiling to retrieve C++ mangled names if so desired.
            path = os.path.join(cache_dir, name)
            if os.path.exists(path) and not name_expressions:
                with open(path, 'rb') as f:
                    data = f.read()
                if len(data) >= 32:
                    hash_value = data[:32]
                    binary = data[32:]
                    binary_hash = hashlib.md5(binary).hexdigest().encode('ascii')
                    if hash_value == binary_hash:
                        mod.load(binary)
                        return mod
        else:
            # Enforce compiling -- the resulting kernel will be cached elsewhere,
            # so we do nothing
            pass
    
        if backend == 'hiprtc':
            # compile_using_nvrtc calls hiprtc for hip builds
            binary, mapping = compile_using_nvrtc(
                source, options, arch, name + '.cu', name_expressions,
                log_stream, cache_in_memory)
            mod._set_mapping(mapping)
        else:
            binary = compile_using_hipcc(source, options, arch, log_stream)
    
        if not cache_in_memory:
            # Write to disk cache
            binary_hash = hashlib.md5(binary).hexdigest().encode('ascii')
    
            # shutil.move is not atomic operation, so it could result in a
            # corrupted file. We detect it by appending md5 hash at the beginning
            # of each cache file. If the file is corrupted, it will be ignored
            # next time it is read.
            with tempfile.NamedTemporaryFile(dir=cache_dir, delete=False) as tf:
                tf.write(binary_hash)
                tf.write(binary)
>               temp_path = tf.name

cupy/cuda/compiler.py:838: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4e020a0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError

The above exception was the direct cause of the following exception:

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOperator_param_38_{func=<lambda>, left_value='scalar', ...rameter: {'name': 'ne', 'func': <function <lambda> at 0x7f01a65633a0>, 'left_value': 'scalar', 'right_value': 'array'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOp...ameter: {'name': 'ne', 'func': <function <lambda> at 0x7f01a65633a0>, 'left_value': 'scalar', 'right_value': 'array'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = ((3+0j), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int32))
kwargs_np = {}
args_cp = ((3+0j), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int32))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
>       result_cp = call(impl_cp, args_cp, kwargs_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:121: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/testing/_parameterized.py:67: in new_v
    return f(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = (3+0j)
y = array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int32)

>   ???
E   DeprecationWarning: elementwise comparison failed; this will raise an error in the future.

tests/cupy_tests/core_tests/fusion_tests/test_array.py:41: DeprecationWarning
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
_ TestFusionArrayOperator_param_39_{func=<lambda>, left_value='primitive', name='ne', right_value='array'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOperator_param_39_{func=<lambda>, left_value='primitive...eter: {'name': 'ne', 'func': <function <lambda> at 0x7f01a65633a0>, 'left_value': 'primitive', 'right_value': 'array'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOp...ter: {'name': 'ne', 'func': <function <lambda> at 0x7f01a65633a0>, 'left_value': 'primitive', 'right_value': 'array'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = ((3+0j), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int32))
kwargs_np = {}
args_cp = ((3+0j), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int32))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
>       result_cp = call(impl_cp, args_cp, kwargs_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:121: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/testing/_parameterized.py:67: in new_v
    return f(*args, **kwargs)
tests/cupy_tests/core_tests/fusion_tests/test_array.py:41: in <lambda>
    ???
cupy/_core/core.pyx:1029: in cupy._core.core.ndarray.__richcmp__
    return numpy.not_equal(self, other)
cupy/_core/core.pyx:1466: in cupy._core.core.ndarray.__array_ufunc__
    return cp_ufunc(*inputs, **kwargs)
cupy/_core/_kernel.pyx:1104: in cupy._core._kernel.ufunc.__call__
    kern = self._get_ufunc_kernel(dev_id, op, arginfos)
cupy/_core/_kernel.pyx:1127: in cupy._core._kernel.ufunc._get_ufunc_kernel
    kern = _get_ufunc_kernel(
cupy/_core/_kernel.pyx:901: in cupy._core._kernel._get_ufunc_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4f44d00>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
_ TestFusionArrayOperator_param_40_{func=<lambda>, left_value='array', name='lt', right_value='array'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOperator_param_40_{func=<lambda>, left_value='array', n...arameter: {'name': 'lt', 'func': <function <lambda> at 0x7f01a6563430>, 'left_value': 'array', 'right_value': 'array'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOp...rameter: {'name': 'lt', 'func': <function <lambda> at 0x7f01a6563430>, 'left_value': 'array', 'right_value': 'array'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[2.7440674+2.8402228j , 3.5759468+4.627983j  ,
        3.0138168+0.3551803j , 2.724416 +0.4356465j ],
       [....6444745+3.9026458j ]], dtype=complex64), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int32))
kwargs_np = {}
args_cp = (array([[2.7440674+2.8402228j , 3.5759468+4.627983j  ,
        3.0138168+0.3551803j , 2.724416 +0.4356465j ],
       [....6444745+3.9026458j ]], dtype=complex64), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int32))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
>       result_cp = call(impl_cp, args_cp, kwargs_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:121: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/testing/_parameterized.py:67: in new_v
    return f(*args, **kwargs)
tests/cupy_tests/core_tests/fusion_tests/test_array.py:42: in <lambda>
    ???
cupy/_core/core.pyx:1008: in cupy._core.core.ndarray.__richcmp__
    return _logic._ndarray_less(self, other)
cupy/_core/_routines_logic.pyx:24: in cupy._core._routines_logic._ndarray_less
    return _less(self, other)
cupy/_core/_kernel.pyx:1104: in cupy._core._kernel.ufunc.__call__
    kern = self._get_ufunc_kernel(dev_id, op, arginfos)
cupy/_core/_kernel.pyx:1127: in cupy._core._kernel.ufunc._get_ufunc_kernel
    kern = _get_ufunc_kernel(
cupy/_core/_kernel.pyx:901: in cupy._core._kernel._get_ufunc_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4eb5580>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
_ TestFusionArrayOperator_param_41_{func=<lambda>, left_value='array', name='lt', right_value='scalar'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOperator_param_41_{func=<lambda>, left_value='array', n...rameter: {'name': 'lt', 'func': <function <lambda> at 0x7f01a6563430>, 'left_value': 'array', 'right_value': 'scalar'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOp...ameter: {'name': 'lt', 'func': <function <lambda> at 0x7f01a6563430>, 'left_value': 'array', 'right_value': 'scalar'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[2.7440674+2.8402228j , 3.5759468+4.627983j  ,
        3.0138168+0.3551803j , 2.724416 +0.4356465j ],
       [...183136+4.8930917j , 1.9172076+3.9957929j ,
        3.958625 +2.307397j  , 2.6444745+3.9026458j ]], dtype=complex64), 3)
kwargs_np = {}
args_cp = (array([[2.7440674+2.8402228j , 3.5759468+4.627983j  ,
        3.0138168+0.3551803j , 2.724416 +0.4356465j ],
       [...183136+4.8930917j , 1.9172076+3.9957929j ,
        3.958625 +2.307397j  , 2.6444745+3.9026458j ]], dtype=complex64), 3)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4e38a90>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
_ TestFusionArrayOperator_param_42_{func=<lambda>, left_value='array', name='lt', right_value='primitive'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOperator_param_42_{func=<lambda>, left_value='array', n...eter: {'name': 'lt', 'func': <function <lambda> at 0x7f01a6563430>, 'left_value': 'array', 'right_value': 'primitive'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOp...ter: {'name': 'lt', 'func': <function <lambda> at 0x7f01a6563430>, 'left_value': 'array', 'right_value': 'primitive'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[2.7440674+2.8402228j , 3.5759468+4.627983j  ,
        3.0138168+0.3551803j , 2.724416 +0.4356465j ],
       [...183136+4.8930917j , 1.9172076+3.9957929j ,
        3.958625 +2.307397j  , 2.6444745+3.9026458j ]], dtype=complex64), 3)
kwargs_np = {}
args_cp = (array([[2.7440674+2.8402228j , 3.5759468+4.627983j  ,
        3.0138168+0.3551803j , 2.724416 +0.4356465j ],
       [...183136+4.8930917j , 1.9172076+3.9957929j ,
        3.958625 +2.307397j  , 2.6444745+3.9026458j ]], dtype=complex64), 3)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4a29b80>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
_ TestFusionArrayOperator_param_43_{func=<lambda>, left_value='scalar', name='lt', right_value='array'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOperator_param_43_{func=<lambda>, left_value='scalar', ...rameter: {'name': 'lt', 'func': <function <lambda> at 0x7f01a6563430>, 'left_value': 'scalar', 'right_value': 'array'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOp...ameter: {'name': 'lt', 'func': <function <lambda> at 0x7f01a6563430>, 'left_value': 'scalar', 'right_value': 'array'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = ((3+0j), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int32))
kwargs_np = {}
args_cp = ((3+0j), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int32))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
>       result_cp = call(impl_cp, args_cp, kwargs_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:121: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/testing/_parameterized.py:67: in new_v
    return f(*args, **kwargs)
tests/cupy_tests/core_tests/fusion_tests/test_array.py:42: in <lambda>
    ???
cupy/_core/core.pyx:1466: in cupy._core.core.ndarray.__array_ufunc__
    return cp_ufunc(*inputs, **kwargs)
cupy/_core/_kernel.pyx:1104: in cupy._core._kernel.ufunc.__call__
    kern = self._get_ufunc_kernel(dev_id, op, arginfos)
cupy/_core/_kernel.pyx:1127: in cupy._core._kernel.ufunc._get_ufunc_kernel
    kern = _get_ufunc_kernel(
cupy/_core/_kernel.pyx:901: in cupy._core._kernel._get_ufunc_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4703820>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
_ TestFusionArrayOperator_param_44_{func=<lambda>, left_value='primitive', name='lt', right_value='array'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOperator_param_44_{func=<lambda>, left_value='primitive...eter: {'name': 'lt', 'func': <function <lambda> at 0x7f01a6563430>, 'left_value': 'primitive', 'right_value': 'array'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOp...ter: {'name': 'lt', 'func': <function <lambda> at 0x7f01a6563430>, 'left_value': 'primitive', 'right_value': 'array'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = ((3+0j), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int32))
kwargs_np = {}
args_cp = ((3+0j), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int32))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
>       result_cp = call(impl_cp, args_cp, kwargs_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:121: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/testing/_parameterized.py:67: in new_v
    return f(*args, **kwargs)
tests/cupy_tests/core_tests/fusion_tests/test_array.py:42: in <lambda>
    ???
cupy/_core/core.pyx:1031: in cupy._core.core.ndarray.__richcmp__
    return numpy.greater(self, other)
cupy/_core/core.pyx:1466: in cupy._core.core.ndarray.__array_ufunc__
    return cp_ufunc(*inputs, **kwargs)
cupy/_core/_kernel.pyx:1104: in cupy._core._kernel.ufunc.__call__
    kern = self._get_ufunc_kernel(dev_id, op, arginfos)
cupy/_core/_kernel.pyx:1127: in cupy._core._kernel.ufunc._get_ufunc_kernel
    kern = _get_ufunc_kernel(
cupy/_core/_kernel.pyx:901: in cupy._core._kernel._get_ufunc_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b47d1460>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
_ TestFusionArrayOperator_param_45_{func=<lambda>, left_value='array', name='le', right_value='array'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOperator_param_45_{func=<lambda>, left_value='array', n...arameter: {'name': 'le', 'func': <function <lambda> at 0x7f01a6563a60>, 'left_value': 'array', 'right_value': 'array'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOp...rameter: {'name': 'le', 'func': <function <lambda> at 0x7f01a6563a60>, 'left_value': 'array', 'right_value': 'array'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[2.7440674+2.8402228j , 3.5759468+4.627983j  ,
        3.0138168+0.3551803j , 2.724416 +0.4356465j ],
       [....6444745+3.9026458j ]], dtype=complex64), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int32))
kwargs_np = {}
args_cp = (array([[2.7440674+2.8402228j , 3.5759468+4.627983j  ,
        3.0138168+0.3551803j , 2.724416 +0.4356465j ],
       [....6444745+3.9026458j ]], dtype=complex64), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int32))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
>       result_cp = call(impl_cp, args_cp, kwargs_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:121: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/testing/_parameterized.py:67: in new_v
    return f(*args, **kwargs)
tests/cupy_tests/core_tests/fusion_tests/test_array.py:43: in <lambda>
    ???
cupy/_core/core.pyx:1010: in cupy._core.core.ndarray.__richcmp__
    return _logic._ndarray_less_equal(self, other)
cupy/_core/_routines_logic.pyx:28: in cupy._core._routines_logic._ndarray_less_equal
    return _less_equal(self, other)
cupy/_core/_kernel.pyx:1104: in cupy._core._kernel.ufunc.__call__
    kern = self._get_ufunc_kernel(dev_id, op, arginfos)
cupy/_core/_kernel.pyx:1127: in cupy._core._kernel.ufunc._get_ufunc_kernel
    kern = _get_ufunc_kernel(
cupy/_core/_kernel.pyx:901: in cupy._core._kernel._get_ufunc_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03bc328a60>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
_ TestFusionArrayOperator_param_46_{func=<lambda>, left_value='array', name='le', right_value='scalar'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOperator_param_46_{func=<lambda>, left_value='array', n...rameter: {'name': 'le', 'func': <function <lambda> at 0x7f01a6563a60>, 'left_value': 'array', 'right_value': 'scalar'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOp...ameter: {'name': 'le', 'func': <function <lambda> at 0x7f01a6563a60>, 'left_value': 'array', 'right_value': 'scalar'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[2.7440674+2.8402228j , 3.5759468+4.627983j  ,
        3.0138168+0.3551803j , 2.724416 +0.4356465j ],
       [...183136+4.8930917j , 1.9172076+3.9957929j ,
        3.958625 +2.307397j  , 2.6444745+3.9026458j ]], dtype=complex64), 3)
kwargs_np = {}
args_cp = (array([[2.7440674+2.8402228j , 3.5759468+4.627983j  ,
        3.0138168+0.3551803j , 2.724416 +0.4356465j ],
       [...183136+4.8930917j , 1.9172076+3.9957929j ,
        3.958625 +2.307397j  , 2.6444745+3.9026458j ]], dtype=complex64), 3)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b470e6d0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
_ TestFusionArrayOperator_param_47_{func=<lambda>, left_value='array', name='le', right_value='primitive'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOperator_param_47_{func=<lambda>, left_value='array', n...eter: {'name': 'le', 'func': <function <lambda> at 0x7f01a6563a60>, 'left_value': 'array', 'right_value': 'primitive'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOp...ter: {'name': 'le', 'func': <function <lambda> at 0x7f01a6563a60>, 'left_value': 'array', 'right_value': 'primitive'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[2.7440674+2.8402228j , 3.5759468+4.627983j  ,
        3.0138168+0.3551803j , 2.724416 +0.4356465j ],
       [...183136+4.8930917j , 1.9172076+3.9957929j ,
        3.958625 +2.307397j  , 2.6444745+3.9026458j ]], dtype=complex64), 3)
kwargs_np = {}
args_cp = (array([[2.7440674+2.8402228j , 3.5759468+4.627983j  ,
        3.0138168+0.3551803j , 2.724416 +0.4356465j ],
       [...183136+4.8930917j , 1.9172076+3.9957929j ,
        3.958625 +2.307397j  , 2.6444745+3.9026458j ]], dtype=complex64), 3)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b477e4f0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
_ TestFusionArrayOperator_param_48_{func=<lambda>, left_value='scalar', name='le', right_value='array'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOperator_param_48_{func=<lambda>, left_value='scalar', ...rameter: {'name': 'le', 'func': <function <lambda> at 0x7f01a6563a60>, 'left_value': 'scalar', 'right_value': 'array'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOp...ameter: {'name': 'le', 'func': <function <lambda> at 0x7f01a6563a60>, 'left_value': 'scalar', 'right_value': 'array'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = ((3+0j), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int32))
kwargs_np = {}
args_cp = ((3+0j), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int32))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
>       result_cp = call(impl_cp, args_cp, kwargs_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:121: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/testing/_parameterized.py:67: in new_v
    return f(*args, **kwargs)
tests/cupy_tests/core_tests/fusion_tests/test_array.py:43: in <lambda>
    ???
cupy/_core/core.pyx:1466: in cupy._core.core.ndarray.__array_ufunc__
    return cp_ufunc(*inputs, **kwargs)
cupy/_core/_kernel.pyx:1104: in cupy._core._kernel.ufunc.__call__
    kern = self._get_ufunc_kernel(dev_id, op, arginfos)
cupy/_core/_kernel.pyx:1127: in cupy._core._kernel.ufunc._get_ufunc_kernel
    kern = _get_ufunc_kernel(
cupy/_core/_kernel.pyx:901: in cupy._core._kernel._get_ufunc_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03d610a040>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
_ TestFusionArrayOperator_param_49_{func=<lambda>, left_value='primitive', name='le', right_value='array'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOperator_param_49_{func=<lambda>, left_value='primitive...eter: {'name': 'le', 'func': <function <lambda> at 0x7f01a6563a60>, 'left_value': 'primitive', 'right_value': 'array'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOp...ter: {'name': 'le', 'func': <function <lambda> at 0x7f01a6563a60>, 'left_value': 'primitive', 'right_value': 'array'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = ((3+0j), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int32))
kwargs_np = {}
args_cp = ((3+0j), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int32))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
>       result_cp = call(impl_cp, args_cp, kwargs_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:121: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/testing/_parameterized.py:67: in new_v
    return f(*args, **kwargs)
tests/cupy_tests/core_tests/fusion_tests/test_array.py:43: in <lambda>
    ???
cupy/_core/core.pyx:1033: in cupy._core.core.ndarray.__richcmp__
    return numpy.greater_equal(self, other)
cupy/_core/core.pyx:1466: in cupy._core.core.ndarray.__array_ufunc__
    return cp_ufunc(*inputs, **kwargs)
cupy/_core/_kernel.pyx:1104: in cupy._core._kernel.ufunc.__call__
    kern = self._get_ufunc_kernel(dev_id, op, arginfos)
cupy/_core/_kernel.pyx:1127: in cupy._core._kernel.ufunc._get_ufunc_kernel
    kern = _get_ufunc_kernel(
cupy/_core/_kernel.pyx:901: in cupy._core._kernel._get_ufunc_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4ab8df0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
_ TestFusionArrayOperator_param_50_{func=<lambda>, left_value='array', name='gt', right_value='array'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOperator_param_50_{func=<lambda>, left_value='array', n...arameter: {'name': 'gt', 'func': <function <lambda> at 0x7f01a6563af0>, 'left_value': 'array', 'right_value': 'array'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOp...rameter: {'name': 'gt', 'func': <function <lambda> at 0x7f01a6563af0>, 'left_value': 'array', 'right_value': 'array'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[2.7440674+2.8402228j , 3.5759468+4.627983j  ,
        3.0138168+0.3551803j , 2.724416 +0.4356465j ],
       [....6444745+3.9026458j ]], dtype=complex64), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int32))
kwargs_np = {}
args_cp = (array([[2.7440674+2.8402228j , 3.5759468+4.627983j  ,
        3.0138168+0.3551803j , 2.724416 +0.4356465j ],
       [....6444745+3.9026458j ]], dtype=complex64), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int32))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
>       result_cp = call(impl_cp, args_cp, kwargs_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:121: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/testing/_parameterized.py:67: in new_v
    return f(*args, **kwargs)
tests/cupy_tests/core_tests/fusion_tests/test_array.py:44: in <lambda>
    ???
cupy/_core/core.pyx:1016: in cupy._core.core.ndarray.__richcmp__
    return _logic._ndarray_greater(self, other)
cupy/_core/_routines_logic.pyx:16: in cupy._core._routines_logic._ndarray_greater
    return _greater(self, other)
cupy/_core/_kernel.pyx:1104: in cupy._core._kernel.ufunc.__call__
    kern = self._get_ufunc_kernel(dev_id, op, arginfos)
cupy/_core/_kernel.pyx:1127: in cupy._core._kernel.ufunc._get_ufunc_kernel
    kern = _get_ufunc_kernel(
cupy/_core/_kernel.pyx:901: in cupy._core._kernel._get_ufunc_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03cd4dc0a0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
_ TestFusionArrayOperator_param_51_{func=<lambda>, left_value='array', name='gt', right_value='scalar'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOperator_param_51_{func=<lambda>, left_value='array', n...rameter: {'name': 'gt', 'func': <function <lambda> at 0x7f01a6563af0>, 'left_value': 'array', 'right_value': 'scalar'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOp...ameter: {'name': 'gt', 'func': <function <lambda> at 0x7f01a6563af0>, 'left_value': 'array', 'right_value': 'scalar'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[2.7440674+2.8402228j , 3.5759468+4.627983j  ,
        3.0138168+0.3551803j , 2.724416 +0.4356465j ],
       [...183136+4.8930917j , 1.9172076+3.9957929j ,
        3.958625 +2.307397j  , 2.6444745+3.9026458j ]], dtype=complex64), 3)
kwargs_np = {}
args_cp = (array([[2.7440674+2.8402228j , 3.5759468+4.627983j  ,
        3.0138168+0.3551803j , 2.724416 +0.4356465j ],
       [...183136+4.8930917j , 1.9172076+3.9957929j ,
        3.958625 +2.307397j  , 2.6444745+3.9026458j ]], dtype=complex64), 3)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03d5b8ad00>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
_ TestFusionArrayOperator_param_52_{func=<lambda>, left_value='array', name='gt', right_value='primitive'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOperator_param_52_{func=<lambda>, left_value='array', n...eter: {'name': 'gt', 'func': <function <lambda> at 0x7f01a6563af0>, 'left_value': 'array', 'right_value': 'primitive'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOp...ter: {'name': 'gt', 'func': <function <lambda> at 0x7f01a6563af0>, 'left_value': 'array', 'right_value': 'primitive'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[2.7440674+2.8402228j , 3.5759468+4.627983j  ,
        3.0138168+0.3551803j , 2.724416 +0.4356465j ],
       [...183136+4.8930917j , 1.9172076+3.9957929j ,
        3.958625 +2.307397j  , 2.6444745+3.9026458j ]], dtype=complex64), 3)
kwargs_np = {}
args_cp = (array([[2.7440674+2.8402228j , 3.5759468+4.627983j  ,
        3.0138168+0.3551803j , 2.724416 +0.4356465j ],
       [...183136+4.8930917j , 1.9172076+3.9957929j ,
        3.958625 +2.307397j  , 2.6444745+3.9026458j ]], dtype=complex64), 3)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03d5b86040>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
_ TestFusionArrayOperator_param_53_{func=<lambda>, left_value='scalar', name='gt', right_value='array'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOperator_param_53_{func=<lambda>, left_value='scalar', ...rameter: {'name': 'gt', 'func': <function <lambda> at 0x7f01a6563af0>, 'left_value': 'scalar', 'right_value': 'array'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOp...ameter: {'name': 'gt', 'func': <function <lambda> at 0x7f01a6563af0>, 'left_value': 'scalar', 'right_value': 'array'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = ((3+0j), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int32))
kwargs_np = {}
args_cp = ((3+0j), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int32))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
>       result_cp = call(impl_cp, args_cp, kwargs_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:121: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/testing/_parameterized.py:67: in new_v
    return f(*args, **kwargs)
tests/cupy_tests/core_tests/fusion_tests/test_array.py:44: in <lambda>
    ???
cupy/_core/core.pyx:1466: in cupy._core.core.ndarray.__array_ufunc__
    return cp_ufunc(*inputs, **kwargs)
cupy/_core/_kernel.pyx:1104: in cupy._core._kernel.ufunc.__call__
    kern = self._get_ufunc_kernel(dev_id, op, arginfos)
cupy/_core/_kernel.pyx:1127: in cupy._core._kernel.ufunc._get_ufunc_kernel
    kern = _get_ufunc_kernel(
cupy/_core/_kernel.pyx:901: in cupy._core._kernel._get_ufunc_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03d5b51ac0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
_ TestFusionArrayOperator_param_54_{func=<lambda>, left_value='primitive', name='gt', right_value='array'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOperator_param_54_{func=<lambda>, left_value='primitive...eter: {'name': 'gt', 'func': <function <lambda> at 0x7f01a6563af0>, 'left_value': 'primitive', 'right_value': 'array'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOp...ter: {'name': 'gt', 'func': <function <lambda> at 0x7f01a6563af0>, 'left_value': 'primitive', 'right_value': 'array'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = ((3+0j), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int32))
kwargs_np = {}
args_cp = ((3+0j), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int32))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
>       result_cp = call(impl_cp, args_cp, kwargs_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:121: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/testing/_parameterized.py:67: in new_v
    return f(*args, **kwargs)
tests/cupy_tests/core_tests/fusion_tests/test_array.py:44: in <lambda>
    ???
cupy/_core/core.pyx:1023: in cupy._core.core.ndarray.__richcmp__
    return numpy.less(self, other)
cupy/_core/core.pyx:1466: in cupy._core.core.ndarray.__array_ufunc__
    return cp_ufunc(*inputs, **kwargs)
cupy/_core/_kernel.pyx:1104: in cupy._core._kernel.ufunc.__call__
    kern = self._get_ufunc_kernel(dev_id, op, arginfos)
cupy/_core/_kernel.pyx:1127: in cupy._core._kernel.ufunc._get_ufunc_kernel
    kern = _get_ufunc_kernel(
cupy/_core/_kernel.pyx:901: in cupy._core._kernel._get_ufunc_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4f44a60>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
_ TestFusionArrayOperator_param_55_{func=<lambda>, left_value='array', name='ge', right_value='array'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOperator_param_55_{func=<lambda>, left_value='array', n...arameter: {'name': 'ge', 'func': <function <lambda> at 0x7f01a6563b80>, 'left_value': 'array', 'right_value': 'array'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOp...rameter: {'name': 'ge', 'func': <function <lambda> at 0x7f01a6563b80>, 'left_value': 'array', 'right_value': 'array'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[2.7440674+2.8402228j , 3.5759468+4.627983j  ,
        3.0138168+0.3551803j , 2.724416 +0.4356465j ],
       [....6444745+3.9026458j ]], dtype=complex64), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int32))
kwargs_np = {}
args_cp = (array([[2.7440674+2.8402228j , 3.5759468+4.627983j  ,
        3.0138168+0.3551803j , 2.724416 +0.4356465j ],
       [....6444745+3.9026458j ]], dtype=complex64), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int32))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
>       result_cp = call(impl_cp, args_cp, kwargs_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:121: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/testing/_parameterized.py:67: in new_v
    return f(*args, **kwargs)
tests/cupy_tests/core_tests/fusion_tests/test_array.py:45: in <lambda>
    ???
cupy/_core/core.pyx:1018: in cupy._core.core.ndarray.__richcmp__
    return _logic._ndarray_greater_equal(self, other)
cupy/_core/_routines_logic.pyx:20: in cupy._core._routines_logic._ndarray_greater_equal
    return _greater_equal(self, other)
cupy/_core/_kernel.pyx:1104: in cupy._core._kernel.ufunc.__call__
    kern = self._get_ufunc_kernel(dev_id, op, arginfos)
cupy/_core/_kernel.pyx:1127: in cupy._core._kernel.ufunc._get_ufunc_kernel
    kern = _get_ufunc_kernel(
cupy/_core/_kernel.pyx:901: in cupy._core._kernel._get_ufunc_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4ba5100>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
_ TestFusionArrayOperator_param_56_{func=<lambda>, left_value='array', name='ge', right_value='scalar'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOperator_param_56_{func=<lambda>, left_value='array', n...rameter: {'name': 'ge', 'func': <function <lambda> at 0x7f01a6563b80>, 'left_value': 'array', 'right_value': 'scalar'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOp...ameter: {'name': 'ge', 'func': <function <lambda> at 0x7f01a6563b80>, 'left_value': 'array', 'right_value': 'scalar'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[2.7440674+2.8402228j , 3.5759468+4.627983j  ,
        3.0138168+0.3551803j , 2.724416 +0.4356465j ],
       [...183136+4.8930917j , 1.9172076+3.9957929j ,
        3.958625 +2.307397j  , 2.6444745+3.9026458j ]], dtype=complex64), 3)
kwargs_np = {}
args_cp = (array([[2.7440674+2.8402228j , 3.5759468+4.627983j  ,
        3.0138168+0.3551803j , 2.724416 +0.4356465j ],
       [...183136+4.8930917j , 1.9172076+3.9957929j ,
        3.958625 +2.307397j  , 2.6444745+3.9026458j ]], dtype=complex64), 3)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4a9dfd0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
_ TestFusionArrayOperator_param_57_{func=<lambda>, left_value='array', name='ge', right_value='primitive'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOperator_param_57_{func=<lambda>, left_value='array', n...eter: {'name': 'ge', 'func': <function <lambda> at 0x7f01a6563b80>, 'left_value': 'array', 'right_value': 'primitive'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOp...ter: {'name': 'ge', 'func': <function <lambda> at 0x7f01a6563b80>, 'left_value': 'array', 'right_value': 'primitive'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[2.7440674+2.8402228j , 3.5759468+4.627983j  ,
        3.0138168+0.3551803j , 2.724416 +0.4356465j ],
       [...183136+4.8930917j , 1.9172076+3.9957929j ,
        3.958625 +2.307397j  , 2.6444745+3.9026458j ]], dtype=complex64), 3)
kwargs_np = {}
args_cp = (array([[2.7440674+2.8402228j , 3.5759468+4.627983j  ,
        3.0138168+0.3551803j , 2.724416 +0.4356465j ],
       [...183136+4.8930917j , 1.9172076+3.9957929j ,
        3.958625 +2.307397j  , 2.6444745+3.9026458j ]], dtype=complex64), 3)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03d5ac34c0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
_ TestFusionArrayOperator_param_58_{func=<lambda>, left_value='scalar', name='ge', right_value='array'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOperator_param_58_{func=<lambda>, left_value='scalar', ...rameter: {'name': 'ge', 'func': <function <lambda> at 0x7f01a6563b80>, 'left_value': 'scalar', 'right_value': 'array'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOp...ameter: {'name': 'ge', 'func': <function <lambda> at 0x7f01a6563b80>, 'left_value': 'scalar', 'right_value': 'array'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = ((3+0j), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int32))
kwargs_np = {}
args_cp = ((3+0j), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int32))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
>       result_cp = call(impl_cp, args_cp, kwargs_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:121: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/testing/_parameterized.py:67: in new_v
    return f(*args, **kwargs)
tests/cupy_tests/core_tests/fusion_tests/test_array.py:45: in <lambda>
    ???
cupy/_core/core.pyx:1466: in cupy._core.core.ndarray.__array_ufunc__
    return cp_ufunc(*inputs, **kwargs)
cupy/_core/_kernel.pyx:1104: in cupy._core._kernel.ufunc.__call__
    kern = self._get_ufunc_kernel(dev_id, op, arginfos)
cupy/_core/_kernel.pyx:1127: in cupy._core._kernel.ufunc._get_ufunc_kernel
    kern = _get_ufunc_kernel(
cupy/_core/_kernel.pyx:901: in cupy._core._kernel._get_ufunc_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b46d7a00>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
_ TestFusionArrayOperator_param_59_{func=<lambda>, left_value='primitive', name='ge', right_value='array'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOperator_param_59_{func=<lambda>, left_value='primitive...eter: {'name': 'ge', 'func': <function <lambda> at 0x7f01a6563b80>, 'left_value': 'primitive', 'right_value': 'array'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayOp...ter: {'name': 'ge', 'func': <function <lambda> at 0x7f01a6563b80>, 'left_value': 'primitive', 'right_value': 'array'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = ((3+0j), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int32))
kwargs_np = {}
args_cp = ((3+0j), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int32))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
>       result_cp = call(impl_cp, args_cp, kwargs_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:121: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/testing/_parameterized.py:67: in new_v
    return f(*args, **kwargs)
tests/cupy_tests/core_tests/fusion_tests/test_array.py:45: in <lambda>
    ???
cupy/_core/core.pyx:1025: in cupy._core.core.ndarray.__richcmp__
    return numpy.less_equal(self, other)
cupy/_core/core.pyx:1466: in cupy._core.core.ndarray.__array_ufunc__
    return cp_ufunc(*inputs, **kwargs)
cupy/_core/_kernel.pyx:1104: in cupy._core._kernel.ufunc.__call__
    kern = self._get_ufunc_kernel(dev_id, op, arginfos)
cupy/_core/_kernel.pyx:1127: in cupy._core._kernel.ufunc._get_ufunc_kernel
    kern = _get_ufunc_kernel(
cupy/_core/_kernel.pyx:901: in cupy._core._kernel._get_ufunc_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4f39610>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.complex64'>, 'dtype2': <class 'numpy.int32'>}
_ TestFusionArrayBitwiseOperator_param_0_{func=<lambda>, left_value='array', name='lshift', right_value='array'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayBitwiseOperator_param_0_{func=<lambda>, left_value='arr...eter: {'name': 'lshift', 'func': <function <lambda> at 0x7f01a6563c10>, 'left_value': 'array', 'right_value': 'array'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.int32'>, 'dtype2': <class 'numpy.uint64'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayBi...ter: {'name': 'lshift', 'func': <function <lambda> at 0x7f01a6563c10>, 'left_value': 'array', 'right_value': 'array'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[2, 3, 3, 2],
       [2, 3, 2, 4],
       [4, 1, 3, 2]], dtype=int32), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=uint64))
kwargs_np = {}
args_cp = (array([[2, 3, 3, 2],
       [2, 3, 2, 4],
       [4, 1, 3, 2]], dtype=int32), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=uint64))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4a91af0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.int32'>, 'dtype2': <class 'numpy.uint64'>}
_ TestFusionArrayBitwiseOperator_param_1_{func=<lambda>, left_value='array', name='lshift', right_value='scalar'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayBitwiseOperator_param_1_{func=<lambda>, left_value='arr...ter: {'name': 'lshift', 'func': <function <lambda> at 0x7f01a6563c10>, 'left_value': 'array', 'right_value': 'scalar'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.int32'>, 'dtype2': <class 'numpy.uint64'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayBi...er: {'name': 'lshift', 'func': <function <lambda> at 0x7f01a6563c10>, 'left_value': 'array', 'right_value': 'scalar'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[2, 3, 3, 2],
       [2, 3, 2, 4],
       [4, 1, 3, 2]], dtype=int32), 3)
kwargs_np = {}
args_cp = (array([[2, 3, 3, 2],
       [2, 3, 2, 4],
       [4, 1, 3, 2]], dtype=int32), 3)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4a8dc10>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.int32'>, 'dtype2': <class 'numpy.uint64'>}
_ TestFusionArrayBitwiseOperator_param_2_{func=<lambda>, left_value='array', name='lshift', right_value='primitive'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayBitwiseOperator_param_2_{func=<lambda>, left_value='arr...: {'name': 'lshift', 'func': <function <lambda> at 0x7f01a6563c10>, 'left_value': 'array', 'right_value': 'primitive'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.int32'>, 'dtype2': <class 'numpy.uint64'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayBi... {'name': 'lshift', 'func': <function <lambda> at 0x7f01a6563c10>, 'left_value': 'array', 'right_value': 'primitive'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[2, 3, 3, 2],
       [2, 3, 2, 4],
       [4, 1, 3, 2]], dtype=int32), 3)
kwargs_np = {}
args_cp = (array([[2, 3, 3, 2],
       [2, 3, 2, 4],
       [4, 1, 3, 2]], dtype=int32), 3)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03d5bb0400>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.int32'>, 'dtype2': <class 'numpy.uint64'>}
_ TestFusionArrayBitwiseOperator_param_3_{func=<lambda>, left_value='scalar', name='lshift', right_value='array'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayBitwiseOperator_param_3_{func=<lambda>, left_value='sca...ter: {'name': 'lshift', 'func': <function <lambda> at 0x7f01a6563c10>, 'left_value': 'scalar', 'right_value': 'array'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.int32'>, 'dtype2': <class 'numpy.uint64'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayBi...er: {'name': 'lshift', 'func': <function <lambda> at 0x7f01a6563c10>, 'left_value': 'scalar', 'right_value': 'array'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (3, array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=uint64))
kwargs_np = {}
args_cp = (3, array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=uint64))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03d5adc460>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.int32'>, 'dtype2': <class 'numpy.uint64'>}
_ TestFusionArrayBitwiseOperator_param_4_{func=<lambda>, left_value='primitive', name='lshift', right_value='array'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayBitwiseOperator_param_4_{func=<lambda>, left_value='pri...: {'name': 'lshift', 'func': <function <lambda> at 0x7f01a6563c10>, 'left_value': 'primitive', 'right_value': 'array'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.int32'>, 'dtype2': <class 'numpy.uint64'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayBi... {'name': 'lshift', 'func': <function <lambda> at 0x7f01a6563c10>, 'left_value': 'primitive', 'right_value': 'array'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (3, array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=uint64))
kwargs_np = {}
args_cp = (3, array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=uint64))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03d5d53430>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.int32'>, 'dtype2': <class 'numpy.uint64'>}
_ TestFusionArrayBitwiseOperator_param_5_{func=<lambda>, left_value='array', name='rshift', right_value='array'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayBitwiseOperator_param_5_{func=<lambda>, left_value='arr...eter: {'name': 'rshift', 'func': <function <lambda> at 0x7f01a6563d30>, 'left_value': 'array', 'right_value': 'array'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.int32'>, 'dtype2': <class 'numpy.uint64'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayBi...ter: {'name': 'rshift', 'func': <function <lambda> at 0x7f01a6563d30>, 'left_value': 'array', 'right_value': 'array'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[2, 3, 3, 2],
       [2, 3, 2, 4],
       [4, 1, 3, 2]], dtype=int32), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=uint64))
kwargs_np = {}
args_cp = (array([[2, 3, 3, 2],
       [2, 3, 2, 4],
       [4, 1, 3, 2]], dtype=int32), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=uint64))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03d5a819a0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.int32'>, 'dtype2': <class 'numpy.uint64'>}
_ TestFusionArrayBitwiseOperator_param_6_{func=<lambda>, left_value='array', name='rshift', right_value='scalar'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayBitwiseOperator_param_6_{func=<lambda>, left_value='arr...ter: {'name': 'rshift', 'func': <function <lambda> at 0x7f01a6563d30>, 'left_value': 'array', 'right_value': 'scalar'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.int32'>, 'dtype2': <class 'numpy.uint64'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayBi...er: {'name': 'rshift', 'func': <function <lambda> at 0x7f01a6563d30>, 'left_value': 'array', 'right_value': 'scalar'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[2, 3, 3, 2],
       [2, 3, 2, 4],
       [4, 1, 3, 2]], dtype=int32), 3)
kwargs_np = {}
args_cp = (array([[2, 3, 3, 2],
       [2, 3, 2, 4],
       [4, 1, 3, 2]], dtype=int32), 3)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4a290a0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.int32'>, 'dtype2': <class 'numpy.uint64'>}
_ TestFusionArrayBitwiseOperator_param_7_{func=<lambda>, left_value='array', name='rshift', right_value='primitive'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayBitwiseOperator_param_7_{func=<lambda>, left_value='arr...: {'name': 'rshift', 'func': <function <lambda> at 0x7f01a6563d30>, 'left_value': 'array', 'right_value': 'primitive'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.int32'>, 'dtype2': <class 'numpy.uint64'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayBi... {'name': 'rshift', 'func': <function <lambda> at 0x7f01a6563d30>, 'left_value': 'array', 'right_value': 'primitive'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[2, 3, 3, 2],
       [2, 3, 2, 4],
       [4, 1, 3, 2]], dtype=int32), 3)
kwargs_np = {}
args_cp = (array([[2, 3, 3, 2],
       [2, 3, 2, 4],
       [4, 1, 3, 2]], dtype=int32), 3)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b46b9f70>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.int32'>, 'dtype2': <class 'numpy.uint64'>}
_ TestFusionArrayBitwiseOperator_param_8_{func=<lambda>, left_value='scalar', name='rshift', right_value='array'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayBitwiseOperator_param_8_{func=<lambda>, left_value='sca...ter: {'name': 'rshift', 'func': <function <lambda> at 0x7f01a6563d30>, 'left_value': 'scalar', 'right_value': 'array'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.int32'>, 'dtype2': <class 'numpy.uint64'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayBi...er: {'name': 'rshift', 'func': <function <lambda> at 0x7f01a6563d30>, 'left_value': 'scalar', 'right_value': 'array'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (3, array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=uint64))
kwargs_np = {}
args_cp = (3, array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=uint64))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03d5b20550>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.int32'>, 'dtype2': <class 'numpy.uint64'>}
_ TestFusionArrayBitwiseOperator_param_9_{func=<lambda>, left_value='primitive', name='rshift', right_value='array'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayBitwiseOperator_param_9_{func=<lambda>, left_value='pri...: {'name': 'rshift', 'func': <function <lambda> at 0x7f01a6563d30>, 'left_value': 'primitive', 'right_value': 'array'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.int32'>, 'dtype2': <class 'numpy.uint64'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayBi... {'name': 'rshift', 'func': <function <lambda> at 0x7f01a6563d30>, 'left_value': 'primitive', 'right_value': 'array'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (3, array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=uint64))
kwargs_np = {}
args_cp = (3, array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=uint64))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03d5ab25b0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.int32'>, 'dtype2': <class 'numpy.uint64'>}
_ TestFusionArrayBitwiseOperator_param_10_{func=<lambda>, left_value='array', name='and', right_value='array'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayBitwiseOperator_param_10_{func=<lambda>, left_value='ar...rameter: {'name': 'and', 'func': <function <lambda> at 0x7f01a6563ca0>, 'left_value': 'array', 'right_value': 'array'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.int32'>, 'dtype2': <class 'numpy.uint64'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayBi...ameter: {'name': 'and', 'func': <function <lambda> at 0x7f01a6563ca0>, 'left_value': 'array', 'right_value': 'array'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[2, 3, 3, 2],
       [2, 3, 2, 4],
       [4, 1, 3, 2]], dtype=int32), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=uint64))
kwargs_np = {}
args_cp = (array([[2, 3, 3, 2],
       [2, 3, 2, 4],
       [4, 1, 3, 2]], dtype=int32), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=uint64))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4a32640>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.int32'>, 'dtype2': <class 'numpy.uint64'>}
_ TestFusionArrayBitwiseOperator_param_11_{func=<lambda>, left_value='array', name='and', right_value='scalar'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayBitwiseOperator_param_11_{func=<lambda>, left_value='ar...ameter: {'name': 'and', 'func': <function <lambda> at 0x7f01a6563ca0>, 'left_value': 'array', 'right_value': 'scalar'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.int32'>, 'dtype2': <class 'numpy.uint64'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayBi...meter: {'name': 'and', 'func': <function <lambda> at 0x7f01a6563ca0>, 'left_value': 'array', 'right_value': 'scalar'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[2, 3, 3, 2],
       [2, 3, 2, 4],
       [4, 1, 3, 2]], dtype=int32), 3)
kwargs_np = {}
args_cp = (array([[2, 3, 3, 2],
       [2, 3, 2, 4],
       [4, 1, 3, 2]], dtype=int32), 3)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03cd52d580>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.int32'>, 'dtype2': <class 'numpy.uint64'>}
_ TestFusionArrayBitwiseOperator_param_12_{func=<lambda>, left_value='array', name='and', right_value='primitive'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayBitwiseOperator_param_12_{func=<lambda>, left_value='ar...ter: {'name': 'and', 'func': <function <lambda> at 0x7f01a6563ca0>, 'left_value': 'array', 'right_value': 'primitive'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.int32'>, 'dtype2': <class 'numpy.uint64'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayBi...er: {'name': 'and', 'func': <function <lambda> at 0x7f01a6563ca0>, 'left_value': 'array', 'right_value': 'primitive'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[2, 3, 3, 2],
       [2, 3, 2, 4],
       [4, 1, 3, 2]], dtype=int32), 3)
kwargs_np = {}
args_cp = (array([[2, 3, 3, 2],
       [2, 3, 2, 4],
       [4, 1, 3, 2]], dtype=int32), 3)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03cd4d4970>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.int32'>, 'dtype2': <class 'numpy.uint64'>}
_ TestFusionArrayBitwiseOperator_param_13_{func=<lambda>, left_value='scalar', name='and', right_value='array'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayBitwiseOperator_param_13_{func=<lambda>, left_value='sc...ameter: {'name': 'and', 'func': <function <lambda> at 0x7f01a6563ca0>, 'left_value': 'scalar', 'right_value': 'array'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.int32'>, 'dtype2': <class 'numpy.uint64'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayBi...meter: {'name': 'and', 'func': <function <lambda> at 0x7f01a6563ca0>, 'left_value': 'scalar', 'right_value': 'array'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (3, array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=uint64))
kwargs_np = {}
args_cp = (3, array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=uint64))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4a168b0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.int32'>, 'dtype2': <class 'numpy.uint64'>}
_ TestFusionArrayBitwiseOperator_param_14_{func=<lambda>, left_value='primitive', name='and', right_value='array'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayBitwiseOperator_param_14_{func=<lambda>, left_value='pr...ter: {'name': 'and', 'func': <function <lambda> at 0x7f01a6563ca0>, 'left_value': 'primitive', 'right_value': 'array'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.int32'>, 'dtype2': <class 'numpy.uint64'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayBi...er: {'name': 'and', 'func': <function <lambda> at 0x7f01a6563ca0>, 'left_value': 'primitive', 'right_value': 'array'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (3, array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=uint64))
kwargs_np = {}
args_cp = (3, array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=uint64))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03d5b17310>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.int32'>, 'dtype2': <class 'numpy.uint64'>}
_ TestFusionArrayBitwiseOperator_param_15_{func=<lambda>, left_value='array', name='or', right_value='array'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayBitwiseOperator_param_15_{func=<lambda>, left_value='ar...arameter: {'name': 'or', 'func': <function <lambda> at 0x7f01a6578550>, 'left_value': 'array', 'right_value': 'array'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.int32'>, 'dtype2': <class 'numpy.uint64'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayBi...rameter: {'name': 'or', 'func': <function <lambda> at 0x7f01a6578550>, 'left_value': 'array', 'right_value': 'array'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[2, 3, 3, 2],
       [2, 3, 2, 4],
       [4, 1, 3, 2]], dtype=int32), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=uint64))
kwargs_np = {}
args_cp = (array([[2, 3, 3, 2],
       [2, 3, 2, 4],
       [4, 1, 3, 2]], dtype=int32), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=uint64))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4700400>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.int32'>, 'dtype2': <class 'numpy.uint64'>}
_ TestFusionArrayBitwiseOperator_param_16_{func=<lambda>, left_value='array', name='or', right_value='scalar'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayBitwiseOperator_param_16_{func=<lambda>, left_value='ar...rameter: {'name': 'or', 'func': <function <lambda> at 0x7f01a6578550>, 'left_value': 'array', 'right_value': 'scalar'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.int32'>, 'dtype2': <class 'numpy.uint64'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayBi...ameter: {'name': 'or', 'func': <function <lambda> at 0x7f01a6578550>, 'left_value': 'array', 'right_value': 'scalar'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[2, 3, 3, 2],
       [2, 3, 2, 4],
       [4, 1, 3, 2]], dtype=int32), 3)
kwargs_np = {}
args_cp = (array([[2, 3, 3, 2],
       [2, 3, 2, 4],
       [4, 1, 3, 2]], dtype=int32), 3)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03d5bfdd60>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.int32'>, 'dtype2': <class 'numpy.uint64'>}
_ TestFusionArrayBitwiseOperator_param_17_{func=<lambda>, left_value='array', name='or', right_value='primitive'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayBitwiseOperator_param_17_{func=<lambda>, left_value='ar...eter: {'name': 'or', 'func': <function <lambda> at 0x7f01a6578550>, 'left_value': 'array', 'right_value': 'primitive'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.int32'>, 'dtype2': <class 'numpy.uint64'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayBi...ter: {'name': 'or', 'func': <function <lambda> at 0x7f01a6578550>, 'left_value': 'array', 'right_value': 'primitive'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[2, 3, 3, 2],
       [2, 3, 2, 4],
       [4, 1, 3, 2]], dtype=int32), 3)
kwargs_np = {}
args_cp = (array([[2, 3, 3, 2],
       [2, 3, 2, 4],
       [4, 1, 3, 2]], dtype=int32), 3)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4e2b070>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.int32'>, 'dtype2': <class 'numpy.uint64'>}
_ TestFusionArrayBitwiseOperator_param_18_{func=<lambda>, left_value='scalar', name='or', right_value='array'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayBitwiseOperator_param_18_{func=<lambda>, left_value='sc...rameter: {'name': 'or', 'func': <function <lambda> at 0x7f01a6578550>, 'left_value': 'scalar', 'right_value': 'array'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.int32'>, 'dtype2': <class 'numpy.uint64'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayBi...ameter: {'name': 'or', 'func': <function <lambda> at 0x7f01a6578550>, 'left_value': 'scalar', 'right_value': 'array'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (3, array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=uint64))
kwargs_np = {}
args_cp = (3, array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=uint64))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4725a60>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.int32'>, 'dtype2': <class 'numpy.uint64'>}
_ TestFusionArrayBitwiseOperator_param_19_{func=<lambda>, left_value='primitive', name='or', right_value='array'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayBitwiseOperator_param_19_{func=<lambda>, left_value='pr...eter: {'name': 'or', 'func': <function <lambda> at 0x7f01a6578550>, 'left_value': 'primitive', 'right_value': 'array'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.int32'>, 'dtype2': <class 'numpy.uint64'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayBi...ter: {'name': 'or', 'func': <function <lambda> at 0x7f01a6578550>, 'left_value': 'primitive', 'right_value': 'array'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (3, array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=uint64))
kwargs_np = {}
args_cp = (3, array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=uint64))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4ee9280>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.int32'>, 'dtype2': <class 'numpy.uint64'>}
_ TestFusionArrayBitwiseOperator_param_20_{func=<lambda>, left_value='array', name='xor', right_value='array'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayBitwiseOperator_param_20_{func=<lambda>, left_value='ar...rameter: {'name': 'xor', 'func': <function <lambda> at 0x7f01a6578430>, 'left_value': 'array', 'right_value': 'array'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.int32'>, 'dtype2': <class 'numpy.uint64'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayBi...ameter: {'name': 'xor', 'func': <function <lambda> at 0x7f01a6578430>, 'left_value': 'array', 'right_value': 'array'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[2, 3, 3, 2],
       [2, 3, 2, 4],
       [4, 1, 3, 2]], dtype=int32), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=uint64))
kwargs_np = {}
args_cp = (array([[2, 3, 3, 2],
       [2, 3, 2, 4],
       [4, 1, 3, 2]], dtype=int32), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=uint64))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03d5bfd340>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.int32'>, 'dtype2': <class 'numpy.uint64'>}
_ TestFusionArrayBitwiseOperator_param_21_{func=<lambda>, left_value='array', name='xor', right_value='scalar'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayBitwiseOperator_param_21_{func=<lambda>, left_value='ar...ameter: {'name': 'xor', 'func': <function <lambda> at 0x7f01a6578430>, 'left_value': 'array', 'right_value': 'scalar'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.int32'>, 'dtype2': <class 'numpy.uint64'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayBi...meter: {'name': 'xor', 'func': <function <lambda> at 0x7f01a6578430>, 'left_value': 'array', 'right_value': 'scalar'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[2, 3, 3, 2],
       [2, 3, 2, 4],
       [4, 1, 3, 2]], dtype=int32), 3)
kwargs_np = {}
args_cp = (array([[2, 3, 3, 2],
       [2, 3, 2, 4],
       [4, 1, 3, 2]], dtype=int32), 3)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4ebc910>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.int32'>, 'dtype2': <class 'numpy.uint64'>}
_ TestFusionArrayBitwiseOperator_param_22_{func=<lambda>, left_value='array', name='xor', right_value='primitive'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayBitwiseOperator_param_22_{func=<lambda>, left_value='ar...ter: {'name': 'xor', 'func': <function <lambda> at 0x7f01a6578430>, 'left_value': 'array', 'right_value': 'primitive'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.int32'>, 'dtype2': <class 'numpy.uint64'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayBi...er: {'name': 'xor', 'func': <function <lambda> at 0x7f01a6578430>, 'left_value': 'array', 'right_value': 'primitive'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[2, 3, 3, 2],
       [2, 3, 2, 4],
       [4, 1, 3, 2]], dtype=int32), 3)
kwargs_np = {}
args_cp = (array([[2, 3, 3, 2],
       [2, 3, 2, 4],
       [4, 1, 3, 2]], dtype=int32), 3)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4748280>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.int32'>, 'dtype2': <class 'numpy.uint64'>}
_ TestFusionArrayBitwiseOperator_param_23_{func=<lambda>, left_value='scalar', name='xor', right_value='array'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayBitwiseOperator_param_23_{func=<lambda>, left_value='sc...ameter: {'name': 'xor', 'func': <function <lambda> at 0x7f01a6578430>, 'left_value': 'scalar', 'right_value': 'array'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.int32'>, 'dtype2': <class 'numpy.uint64'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayBi...meter: {'name': 'xor', 'func': <function <lambda> at 0x7f01a6578430>, 'left_value': 'scalar', 'right_value': 'array'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (3, array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=uint64))
kwargs_np = {}
args_cp = (3, array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=uint64))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b46fa100>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.int32'>, 'dtype2': <class 'numpy.uint64'>}
_ TestFusionArrayBitwiseOperator_param_24_{func=<lambda>, left_value='primitive', name='xor', right_value='array'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayBitwiseOperator_param_24_{func=<lambda>, left_value='pr...ter: {'name': 'xor', 'func': <function <lambda> at 0x7f01a6578430>, 'left_value': 'primitive', 'right_value': 'array'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.int32'>, 'dtype2': <class 'numpy.uint64'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayBi...er: {'name': 'xor', 'func': <function <lambda> at 0x7f01a6578430>, 'left_value': 'primitive', 'right_value': 'array'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (3, array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=uint64))
kwargs_np = {}
args_cp = (3, array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=uint64))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03d5b4b070>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.int32'>, 'dtype2': <class 'numpy.uint64'>}
_ TestFusionArrayBitwiseOperator_param_25_{func=<lambda>, left_value='array', name='invert', right_value='array'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayBitwiseOperator_param_25_{func=<lambda>, left_value='ar...eter: {'name': 'invert', 'func': <function <lambda> at 0x7f01a6578160>, 'left_value': 'array', 'right_value': 'array'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.int32'>, 'dtype2': <class 'numpy.uint64'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayBi...ter: {'name': 'invert', 'func': <function <lambda> at 0x7f01a6578160>, 'left_value': 'array', 'right_value': 'array'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[2, 3, 3, 2],
       [2, 3, 2, 4],
       [4, 1, 3, 2]], dtype=int32), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=uint64))
kwargs_np = {}
args_cp = (array([[2, 3, 3, 2],
       [2, 3, 2, 4],
       [4, 1, 3, 2]], dtype=int32), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=uint64))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b472bcd0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.int32'>, 'dtype2': <class 'numpy.uint64'>}
_ TestFusionArrayBitwiseOperator_param_26_{func=<lambda>, left_value='array', name='invert', right_value='scalar'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayBitwiseOperator_param_26_{func=<lambda>, left_value='ar...ter: {'name': 'invert', 'func': <function <lambda> at 0x7f01a6578160>, 'left_value': 'array', 'right_value': 'scalar'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.int32'>, 'dtype2': <class 'numpy.uint64'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayBi...er: {'name': 'invert', 'func': <function <lambda> at 0x7f01a6578160>, 'left_value': 'array', 'right_value': 'scalar'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[2, 3, 3, 2],
       [2, 3, 2, 4],
       [4, 1, 3, 2]], dtype=int32), 3)
kwargs_np = {}
args_cp = (array([[2, 3, 3, 2],
       [2, 3, 2, 4],
       [4, 1, 3, 2]], dtype=int32), 3)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b477e3a0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.int32'>, 'dtype2': <class 'numpy.uint64'>}
_ TestFusionArrayBitwiseOperator_param_27_{func=<lambda>, left_value='array', name='invert', right_value='primitive'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayBitwiseOperator_param_27_{func=<lambda>, left_value='ar...: {'name': 'invert', 'func': <function <lambda> at 0x7f01a6578160>, 'left_value': 'array', 'right_value': 'primitive'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.int32'>, 'dtype2': <class 'numpy.uint64'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayBi... {'name': 'invert', 'func': <function <lambda> at 0x7f01a6578160>, 'left_value': 'array', 'right_value': 'primitive'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[2, 3, 3, 2],
       [2, 3, 2, 4],
       [4, 1, 3, 2]], dtype=int32), 3)
kwargs_np = {}
args_cp = (array([[2, 3, 3, 2],
       [2, 3, 2, 4],
       [4, 1, 3, 2]], dtype=int32), 3)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03c49cc790>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.int32'>, 'dtype2': <class 'numpy.uint64'>}
_ TestFusionArrayBitwiseOperator_param_28_{func=<lambda>, left_value='scalar', name='invert', right_value='array'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayBitwiseOperator_param_28_{func=<lambda>, left_value='sc...ter: {'name': 'invert', 'func': <function <lambda> at 0x7f01a6578160>, 'left_value': 'scalar', 'right_value': 'array'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.int32'>, 'dtype2': <class 'numpy.uint64'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayBi...er: {'name': 'invert', 'func': <function <lambda> at 0x7f01a6578160>, 'left_value': 'scalar', 'right_value': 'array'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (3, array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=uint64))
kwargs_np = {}
args_cp = (3, array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=uint64))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4742790>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.int32'>, 'dtype2': <class 'numpy.uint64'>}
_ TestFusionArrayBitwiseOperator_param_29_{func=<lambda>, left_value='primitive', name='invert', right_value='array'}.test_operator _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayBitwiseOperator_param_29_{func=<lambda>, left_value='pr...: {'name': 'invert', 'func': <function <lambda> at 0x7f01a6578160>, 'left_value': 'primitive', 'right_value': 'array'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.int32'>, 'dtype2': <class 'numpy.uint64'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayBi... {'name': 'invert', 'func': <function <lambda> at 0x7f01a6578160>, 'left_value': 'primitive', 'right_value': 'array'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (3, array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=uint64))
kwargs_np = {}
args_cp = (3, array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=uint64))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03d5d60b80>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.int32'>, 'dtype2': <class 'numpy.uint64'>}
_ TestFusionArrayFloorDivide_param_0_{left_value='array', right_value='array'}.test_floor_divide _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayFloorDivide_param_0_{left_value='array', right_value='array'} testMethod=test_floor_divide>  parameter: {'left_value': 'array', 'right_value': 'array'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.uint64'>, 'dtype2': <class 'numpy.uint64'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayFl...rray', right_value='array'} testMethod=test_floor_divide>  parameter: {'left_value': 'array', 'right_value': 'array'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[2, 3, 3, 2],
       [2, 3, 2, 4],
       [4, 1, 3, 2]], dtype=uint64), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=uint64))
kwargs_np = {}
args_cp = (array([[2, 3, 3, 2],
       [2, 3, 2, 4],
       [4, 1, 3, 2]], dtype=uint64), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=uint64))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03d5b516a0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.uint64'>, 'dtype2': <class 'numpy.uint64'>}
_ TestFusionArrayFloorDivide_param_1_{left_value='array', right_value='scalar'}.test_floor_divide _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayFloorDivide_param_1_{left_value='array', right_value='scalar'} testMethod=test_floor_divide>  parameter: {'left_value': 'array', 'right_value': 'scalar'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.uint64'>, 'dtype2': <class 'numpy.uint64'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayFl...ay', right_value='scalar'} testMethod=test_floor_divide>  parameter: {'left_value': 'array', 'right_value': 'scalar'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[2, 3, 3, 2],
       [2, 3, 2, 4],
       [4, 1, 3, 2]], dtype=uint64), 3)
kwargs_np = {}
args_cp = (array([[2, 3, 3, 2],
       [2, 3, 2, 4],
       [4, 1, 3, 2]], dtype=uint64), 3)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4ac7310>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.uint64'>, 'dtype2': <class 'numpy.uint64'>}
_ TestFusionArrayFloorDivide_param_2_{left_value='array', right_value='primitive'}.test_floor_divide _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayFloorDivide_param_2_{left_value='array', right_value='primitive'} testMethod=test_floor_divide>  parameter: {'left_value': 'array', 'right_value': 'primitive'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.uint64'>, 'dtype2': <class 'numpy.uint64'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayFl...ight_value='primitive'} testMethod=test_floor_divide>  parameter: {'left_value': 'array', 'right_value': 'primitive'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[2, 3, 3, 2],
       [2, 3, 2, 4],
       [4, 1, 3, 2]], dtype=uint64), 3)
kwargs_np = {}
args_cp = (array([[2, 3, 3, 2],
       [2, 3, 2, 4],
       [4, 1, 3, 2]], dtype=uint64), 3)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03d5b17ac0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.uint64'>, 'dtype2': <class 'numpy.uint64'>}
_ TestFusionArrayFloorDivide_param_3_{left_value='scalar', right_value='array'}.test_floor_divide _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayFloorDivide_param_3_{left_value='scalar', right_value='array'} testMethod=test_floor_divide>  parameter: {'left_value': 'scalar', 'right_value': 'array'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.uint64'>, 'dtype2': <class 'numpy.uint64'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayFl...lar', right_value='array'} testMethod=test_floor_divide>  parameter: {'left_value': 'scalar', 'right_value': 'array'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (3, array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=uint64))
kwargs_np = {}
args_cp = (3, array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=uint64))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03cd4bcf10>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.uint64'>, 'dtype2': <class 'numpy.uint64'>}
_ TestFusionArrayFloorDivide_param_4_{left_value='primitive', right_value='array'}.test_floor_divide _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayFloorDivide_param_4_{left_value='primitive', right_value='array'} testMethod=test_floor_divide>  parameter: {'left_value': 'primitive', 'right_value': 'array'}>
generate_inputs_kwargs = {'dtype1': <class 'numpy.uint64'>, 'dtype2': <class 'numpy.uint64'>}
generate_inputs = <bound method FusionArrayTestBase.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayFl...', right_value='array'} testMethod=test_floor_divide>  parameter: {'left_value': 'primitive', 'right_value': 'array'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (3, array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=uint64))
kwargs_np = {}
args_cp = (3, array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=uint64))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03d5d6b130>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.uint64'>, 'dtype2': <class 'numpy.uint64'>}
_ TestFusionArrayInplaceOperator_param_0_{left_value='array', right_value='array'}.test_iadd _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayInplaceOperator_param_0_{left_value='array', right_value='array'} testMethod=test_iadd>  parameter: {'left_value': 'array', 'right_value': 'array'}>
generate_inputs_kwargs = {'dtype': <class 'numpy.float64'>}
generate_inputs = <bound method TestFusionArrayInplaceOperator.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFu...value='array', right_value='array'} testMethod=test_iadd>  parameter: {'left_value': 'array', 'right_value': 'array'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[4.82917754, 7.1775693 , 3.01438875, 4.23607878],
       [2.85205345, 3.69116354, 3.11923711, 6.18666864],
   ...692974e-01, 9.31301057e-01, 1.72780364e+00],
       [1.98383737e+00, 2.69408367e+00, 2.09597257e+00, 3.42609750e+00]]))
kwargs_np = {}
args_cp = (array([[4.82917754, 7.1775693 , 3.01438875, 4.23607878],
       [2.85205345, 3.69116354, 3.11923711, 6.18666864],
   ...692974e-01, 9.31301057e-01, 1.72780364e+00],
       [1.98383737e+00, 2.69408367e+00, 2.09597257e+00, 3.42609750e+00]]))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b477db50>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestFusionArrayInplaceOperator_param_0_{left_value='array', right_value='array'}.test_iand _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayInplaceOperator_param_0_{left_value='array', right_value='array'} testMethod=test_iand>  parameter: {'left_value': 'array', 'right_value': 'array'}>
generate_inputs_kwargs = {'dtype': <class 'numpy.int8'>}
generate_inputs = <bound method TestFusionArrayInplaceOperator.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFu...value='array', right_value='array'} testMethod=test_iand>  parameter: {'left_value': 'array', 'right_value': 'array'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[2, 3, 1, 0],
       [0, 1, 0, 0],
       [0, 0, 2, 2]], dtype=int8), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int8))
kwargs_np = {}
args_cp = (array([[2, 3, 1, 0],
       [0, 1, 0, 0],
       [0, 0, 2, 2]], dtype=int8), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int8))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4eeba60>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.int8'>
_ TestFusionArrayInplaceOperator_param_0_{left_value='array', right_value='array'}.test_ilshift _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayInplaceOperator_param_0_{left_value='array', right_value='array'} testMethod=test_ilshift>  parameter: {'left_value': 'array', 'right_value': 'array'}>
generate_inputs_kwargs = {'dtype': <class 'numpy.int8'>}
generate_inputs = <bound method TestFusionArrayInplaceOperator.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFu...ue='array', right_value='array'} testMethod=test_ilshift>  parameter: {'left_value': 'array', 'right_value': 'array'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[ 8, 24,  6,  4],
       [ 4,  6,  4,  8],
       [ 8,  4, 12, 16]], dtype=int8), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int8))
kwargs_np = {}
args_cp = (array([[ 8, 24,  6,  4],
       [ 4,  6,  4,  8],
       [ 8,  4, 12, 16]], dtype=int8), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int8))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4ee4970>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.int8'>
_ TestFusionArrayInplaceOperator_param_0_{left_value='array', right_value='array'}.test_imod _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayInplaceOperator_param_0_{left_value='array', right_value='array'} testMethod=test_imod>  parameter: {'left_value': 'array', 'right_value': 'array'}>
generate_inputs_kwargs = {'dtype': <class 'numpy.int8'>}
generate_inputs = <bound method TestFusionArrayInplaceOperator.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFu...value='array', right_value='array'} testMethod=test_imod>  parameter: {'left_value': 'array', 'right_value': 'array'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[0, 0, 0, 0],
       [0, 0, 0, 0],
       [0, 1, 1, 2]], dtype=int8), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int8))
kwargs_np = {}
args_cp = (array([[0, 0, 0, 0],
       [0, 0, 0, 0],
       [0, 1, 1, 2]], dtype=int8), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int8))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03d5bd9340>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.int8'>
_ TestFusionArrayInplaceOperator_param_0_{left_value='array', right_value='array'}.test_imul _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayInplaceOperator_param_0_{left_value='array', right_value='array'} testMethod=test_imul>  parameter: {'left_value': 'array', 'right_value': 'array'}>
generate_inputs_kwargs = {'dtype': <class 'numpy.float64'>}
generate_inputs = <bound method TestFusionArrayInplaceOperator.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFu...value='array', right_value='array'} testMethod=test_imul>  parameter: {'left_value': 'array', 'right_value': 'array'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[5.72168269e+00, 1.28792105e+01, 1.72352378e-03, 4.11839836e+00],
       [1.55434594e+00, 1.49102387e+00, 2.03...692974e-01, 9.31301057e-01, 1.72780364e+00],
       [1.98383737e+00, 2.69408367e+00, 2.09597257e+00, 3.42609750e+00]]))
kwargs_np = {}
args_cp = (array([[5.72168269e+00, 1.28792105e+01, 1.72352378e-03, 4.11839836e+00],
       [1.55434594e+00, 1.49102387e+00, 2.03...692974e-01, 9.31301057e-01, 1.72780364e+00],
       [1.98383737e+00, 2.69408367e+00, 2.09597257e+00, 3.42609750e+00]]))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03d5aa9340>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestFusionArrayInplaceOperator_param_0_{left_value='array', right_value='array'}.test_ior _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayInplaceOperator_param_0_{left_value='array', right_value='array'} testMethod=test_ior>  parameter: {'left_value': 'array', 'right_value': 'array'}>
generate_inputs_kwargs = {'dtype': <class 'numpy.int8'>}
generate_inputs = <bound method TestFusionArrayInplaceOperator.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFu..._value='array', right_value='array'} testMethod=test_ior>  parameter: {'left_value': 'array', 'right_value': 'array'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[2, 3, 3, 3],
       [3, 3, 3, 5],
       [5, 3, 3, 3]], dtype=int8), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int8))
kwargs_np = {}
args_cp = (array([[2, 3, 3, 3],
       [3, 3, 3, 5],
       [5, 3, 3, 3]], dtype=int8), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int8))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b472b7f0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.int8'>
_ TestFusionArrayInplaceOperator_param_0_{left_value='array', right_value='array'}.test_ipow _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayInplaceOperator_param_0_{left_value='array', right_value='array'} testMethod=test_ipow>  parameter: {'left_value': 'array', 'right_value': 'array'}>
generate_inputs_kwargs = {'dtype': <class 'numpy.float64'>}
generate_inputs = <bound method TestFusionArrayInplaceOperator.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFu...value='array', right_value='array'} testMethod=test_ipow>  parameter: {'left_value': 'array', 'right_value': 'array'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[ 8.20543062, 98.42505123,  1.00063109,  4.54974071],
       [ 1.73459861,  1.71815507,  2.07335948, 13.235249...692974e-01, 9.31301057e-01, 1.72780364e+00],
       [1.98383737e+00, 2.69408367e+00, 2.09597257e+00, 3.42609750e+00]]))
kwargs_np = {}
args_cp = (array([[ 8.20543062, 98.42505123,  1.00063109,  4.54974071],
       [ 1.73459861,  1.71815507,  2.07335948, 13.235249...692974e-01, 9.31301057e-01, 1.72780364e+00],
       [1.98383737e+00, 2.69408367e+00, 2.09597257e+00, 3.42609750e+00]]))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03d5acda30>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestFusionArrayInplaceOperator_param_0_{left_value='array', right_value='array'}.test_irshift _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayInplaceOperator_param_0_{left_value='array', right_value='array'} testMethod=test_irshift>  parameter: {'left_value': 'array', 'right_value': 'array'}>
generate_inputs_kwargs = {'dtype': <class 'numpy.int8'>}
generate_inputs = <bound method TestFusionArrayInplaceOperator.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFu...ue='array', right_value='array'} testMethod=test_irshift>  parameter: {'left_value': 'array', 'right_value': 'array'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[0, 0, 1, 1],
       [1, 1, 1, 2],
       [2, 0, 0, 0]], dtype=int8), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int8))
kwargs_np = {}
args_cp = (array([[0, 0, 1, 1],
       [1, 1, 1, 2],
       [2, 0, 0, 0]], dtype=int8), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int8))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b470f6a0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.int8'>
_ TestFusionArrayInplaceOperator_param_0_{left_value='array', right_value='array'}.test_isub _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayInplaceOperator_param_0_{left_value='array', right_value='array'} testMethod=test_isub>  parameter: {'left_value': 'array', 'right_value': 'array'}>
generate_inputs_kwargs = {'dtype': <class 'numpy.float64'>}
generate_inputs = <bound method TestFusionArrayInplaceOperator.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFu...value='array', right_value='array'} testMethod=test_isub>  parameter: {'left_value': 'array', 'right_value': 'array'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[ 0.6589575 , -0.02567564,  3.01324501,  1.21275305],
       [ 1.38449454,  2.76777759,  1.256635  ,  2.731061...692974e-01, 9.31301057e-01, 1.72780364e+00],
       [1.98383737e+00, 2.69408367e+00, 2.09597257e+00, 3.42609750e+00]]))
kwargs_np = {}
args_cp = (array([[ 0.6589575 , -0.02567564,  3.01324501,  1.21275305],
       [ 1.38449454,  2.76777759,  1.256635  ,  2.731061...692974e-01, 9.31301057e-01, 1.72780364e+00],
       [1.98383737e+00, 2.69408367e+00, 2.09597257e+00, 3.42609750e+00]]))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b46f2490>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestFusionArrayInplaceOperator_param_0_{left_value='array', right_value='array'}.test_itruediv_py3 _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayInplaceOperator_param_0_{left_value='array', right_value='array'} testMethod=test_itruediv_py3>  parameter: {'left_value': 'array', 'right_value': 'array'}>
generate_inputs_kwargs = {'dtype': <class 'numpy.float64'>}
generate_inputs = <bound method TestFusionArrayInplaceOperator.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFu...rray', right_value='array'} testMethod=test_itruediv_py3>  parameter: {'left_value': 'array', 'right_value': 'array'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[1.31603008e+00, 9.92871092e-01, 5.27007072e+03, 1.80226424e+00],
       [2.88679928e+00, 6.99484451e+00, 2.34...692974e-01, 9.31301057e-01, 1.72780364e+00],
       [1.98383737e+00, 2.69408367e+00, 2.09597257e+00, 3.42609750e+00]]))
kwargs_np = {}
args_cp = (array([[1.31603008e+00, 9.92871092e-01, 5.27007072e+03, 1.80226424e+00],
       [2.88679928e+00, 6.99484451e+00, 2.34...692974e-01, 9.31301057e-01, 1.72780364e+00],
       [1.98383737e+00, 2.69408367e+00, 2.09597257e+00, 3.42609750e+00]]))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b46d7a60>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestFusionArrayInplaceOperator_param_0_{left_value='array', right_value='array'}.test_ixor _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayInplaceOperator_param_0_{left_value='array', right_value='array'} testMethod=test_ixor>  parameter: {'left_value': 'array', 'right_value': 'array'}>
generate_inputs_kwargs = {'dtype': <class 'numpy.int8'>}
generate_inputs = <bound method TestFusionArrayInplaceOperator.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFu...value='array', right_value='array'} testMethod=test_ixor>  parameter: {'left_value': 'array', 'right_value': 'array'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[0, 0, 2, 3],
       [3, 2, 3, 5],
       [5, 3, 1, 1]], dtype=int8), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int8))
kwargs_np = {}
args_cp = (array([[0, 0, 2, 3],
       [3, 2, 3, 5],
       [5, 3, 1, 1]], dtype=int8), array([[2, 3, 1, 1],
       [1, 1, 1, 1],
       [1, 2, 2, 3]], dtype=int8))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4f47a90>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.int8'>
_ TestFusionArrayInplaceOperator_param_1_{left_value='array', right_value='scalar'}.test_iadd _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayInplaceOperator_param_1_{left_value='array', right_value='scalar'} testMethod=test_iadd>  parameter: {'left_value': 'array', 'right_value': 'scalar'}>
generate_inputs_kwargs = {'dtype': <class 'numpy.float64'>}
generate_inputs = <bound method TestFusionArrayInplaceOperator.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFu...lue='array', right_value='scalar'} testMethod=test_iadd>  parameter: {'left_value': 'array', 'right_value': 'scalar'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[5.74406752, 6.57594683, 6.01381688, 5.72441591],
       [5.118274  , 6.22947057, 5.18793606, 7.458865  ],
       [7.8183138 , 4.91720759, 6.95862519, 5.6444746 ]]), 3.0)
kwargs_np = {}
args_cp = (array([[5.74406752, 6.57594683, 6.01381688, 5.72441591],
       [5.118274  , 6.22947057, 5.18793606, 7.458865  ],
       [7.8183138 , 4.91720759, 6.95862519, 5.6444746 ]]), 3.0)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03d5b5f760>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestFusionArrayInplaceOperator_param_1_{left_value='array', right_value='scalar'}.test_iand _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayInplaceOperator_param_1_{left_value='array', right_value='scalar'} testMethod=test_iand>  parameter: {'left_value': 'array', 'right_value': 'scalar'}>
generate_inputs_kwargs = {'dtype': <class 'numpy.int8'>}
generate_inputs = <bound method TestFusionArrayInplaceOperator.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFu...lue='array', right_value='scalar'} testMethod=test_iand>  parameter: {'left_value': 'array', 'right_value': 'scalar'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[2, 3, 3, 2],
       [2, 3, 2, 0],
       [0, 1, 3, 2]], dtype=int8), 3)
kwargs_np = {}
args_cp = (array([[2, 3, 3, 2],
       [2, 3, 2, 0],
       [0, 1, 3, 2]], dtype=int8), 3)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03d5bd2d30>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.int8'>
_ TestFusionArrayInplaceOperator_param_1_{left_value='array', right_value='scalar'}.test_ilshift _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayInplaceOperator_param_1_{left_value='array', right_value='scalar'} testMethod=test_ilshift>  parameter: {'left_value': 'array', 'right_value': 'scalar'}>
generate_inputs_kwargs = {'dtype': <class 'numpy.int8'>}
generate_inputs = <bound method TestFusionArrayInplaceOperator.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFu...='array', right_value='scalar'} testMethod=test_ilshift>  parameter: {'left_value': 'array', 'right_value': 'scalar'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[16, 24, 24, 16],
       [16, 24, 16, 32],
       [32,  8, 24, 16]], dtype=int8), 3)
kwargs_np = {}
args_cp = (array([[16, 24, 24, 16],
       [16, 24, 16, 32],
       [32,  8, 24, 16]], dtype=int8), 3)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03d5a98970>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.int8'>
_ TestFusionArrayInplaceOperator_param_1_{left_value='array', right_value='scalar'}.test_imod _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayInplaceOperator_param_1_{left_value='array', right_value='scalar'} testMethod=test_imod>  parameter: {'left_value': 'array', 'right_value': 'scalar'}>
generate_inputs_kwargs = {'dtype': <class 'numpy.int8'>}
generate_inputs = <bound method TestFusionArrayInplaceOperator.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFu...lue='array', right_value='scalar'} testMethod=test_imod>  parameter: {'left_value': 'array', 'right_value': 'scalar'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[2, 0, 0, 2],
       [2, 0, 2, 1],
       [1, 1, 0, 2]], dtype=int8), 3)
kwargs_np = {}
args_cp = (array([[2, 0, 0, 2],
       [2, 0, 2, 1],
       [1, 1, 0, 2]], dtype=int8), 3)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4717b80>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.int8'>
_ TestFusionArrayInplaceOperator_param_1_{left_value='array', right_value='scalar'}.test_imul _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayInplaceOperator_param_1_{left_value='array', right_value='scalar'} testMethod=test_imul>  parameter: {'left_value': 'array', 'right_value': 'scalar'}>
generate_inputs_kwargs = {'dtype': <class 'numpy.float64'>}
generate_inputs = <bound method TestFusionArrayInplaceOperator.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFu...lue='array', right_value='scalar'} testMethod=test_imul>  parameter: {'left_value': 'array', 'right_value': 'scalar'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[ 8.23220256, 10.7278405 ,  9.04145064,  8.17324774],
       [ 6.35482199,  9.6884117 ,  6.56380817, 13.37659501],
       [14.45494141,  5.75162278, 11.87587557,  7.9334238 ]]), 3.0)
kwargs_np = {}
args_cp = (array([[ 8.23220256, 10.7278405 ,  9.04145064,  8.17324774],
       [ 6.35482199,  9.6884117 ,  6.56380817, 13.37659501],
       [14.45494141,  5.75162278, 11.87587557,  7.9334238 ]]), 3.0)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03d610a160>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestFusionArrayInplaceOperator_param_1_{left_value='array', right_value='scalar'}.test_ior _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayInplaceOperator_param_1_{left_value='array', right_value='scalar'} testMethod=test_ior>  parameter: {'left_value': 'array', 'right_value': 'scalar'}>
generate_inputs_kwargs = {'dtype': <class 'numpy.int8'>}
generate_inputs = <bound method TestFusionArrayInplaceOperator.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFu...alue='array', right_value='scalar'} testMethod=test_ior>  parameter: {'left_value': 'array', 'right_value': 'scalar'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[3, 3, 3, 3],
       [3, 3, 3, 7],
       [7, 3, 3, 3]], dtype=int8), 3)
kwargs_np = {}
args_cp = (array([[3, 3, 3, 3],
       [3, 3, 3, 7],
       [7, 3, 3, 3]], dtype=int8), 3)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03d5a119a0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.int8'>
_ TestFusionArrayInplaceOperator_param_1_{left_value='array', right_value='scalar'}.test_ipow _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayInplaceOperator_param_1_{left_value='array', right_value='scalar'} testMethod=test_ipow>  parameter: {'left_value': 'array', 'right_value': 'scalar'}>
generate_inputs_kwargs = {'dtype': <class 'numpy.float64'>}
generate_inputs = <bound method TestFusionArrayInplaceOperator.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFu...lue='array', right_value='scalar'} testMethod=test_ipow>  parameter: {'left_value': 'array', 'right_value': 'scalar'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[ 20.662572  ,  45.7270473 ,  27.37477656,  20.22181932],
       [  9.50487489,  33.6816991 ,  10.47379034,  88.64882257],
       [111.86268586,   7.04705112,  62.03448081,  18.49346115]]), 3.0)
kwargs_np = {}
args_cp = (array([[ 20.662572  ,  45.7270473 ,  27.37477656,  20.22181932],
       [  9.50487489,  33.6816991 ,  10.47379034,  88.64882257],
       [111.86268586,   7.04705112,  62.03448081,  18.49346115]]), 3.0)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4aac130>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestFusionArrayInplaceOperator_param_1_{left_value='array', right_value='scalar'}.test_irshift _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayInplaceOperator_param_1_{left_value='array', right_value='scalar'} testMethod=test_irshift>  parameter: {'left_value': 'array', 'right_value': 'scalar'}>
generate_inputs_kwargs = {'dtype': <class 'numpy.int8'>}
generate_inputs = <bound method TestFusionArrayInplaceOperator.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFu...='array', right_value='scalar'} testMethod=test_irshift>  parameter: {'left_value': 'array', 'right_value': 'scalar'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[0, 0, 0, 0],
       [0, 0, 0, 0],
       [0, 0, 0, 0]], dtype=int8), 3)
kwargs_np = {}
args_cp = (array([[0, 0, 0, 0],
       [0, 0, 0, 0],
       [0, 0, 0, 0]], dtype=int8), 3)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03d5a1b9d0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.int8'>
_ TestFusionArrayInplaceOperator_param_1_{left_value='array', right_value='scalar'}.test_isub _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayInplaceOperator_param_1_{left_value='array', right_value='scalar'} testMethod=test_isub>  parameter: {'left_value': 'array', 'right_value': 'scalar'}>
generate_inputs_kwargs = {'dtype': <class 'numpy.float64'>}
generate_inputs = <bound method TestFusionArrayInplaceOperator.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFu...lue='array', right_value='scalar'} testMethod=test_isub>  parameter: {'left_value': 'array', 'right_value': 'scalar'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[-0.25593248,  0.57594683,  0.01381688, -0.27558409],
       [-0.881726  ,  0.22947057, -0.81206394,  1.458865  ],
       [ 1.8183138 , -1.08279241,  0.95862519, -0.3555254 ]]), 3.0)
kwargs_np = {}
args_cp = (array([[-0.25593248,  0.57594683,  0.01381688, -0.27558409],
       [-0.881726  ,  0.22947057, -0.81206394,  1.458865  ],
       [ 1.8183138 , -1.08279241,  0.95862519, -0.3555254 ]]), 3.0)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03d5a580d0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestFusionArrayInplaceOperator_param_1_{left_value='array', right_value='scalar'}.test_itruediv_py3 _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayInplaceOperator_param_1_{left_value='array', right_value='scalar'} testMethod=test_itruediv_py3>  parameter: {'left_value': 'array', 'right_value': 'scalar'}>
generate_inputs_kwargs = {'dtype': <class 'numpy.float64'>}
generate_inputs = <bound method TestFusionArrayInplaceOperator.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFu...ay', right_value='scalar'} testMethod=test_itruediv_py3>  parameter: {'left_value': 'array', 'right_value': 'scalar'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[0.91468917, 1.19198228, 1.00460563, 0.90813864],
       [0.70609133, 1.07649019, 0.72931202, 1.48628833],
       [1.6061046 , 0.6390692 , 1.31954173, 0.88149153]]), 3.0)
kwargs_np = {}
args_cp = (array([[0.91468917, 1.19198228, 1.00460563, 0.90813864],
       [0.70609133, 1.07649019, 0.72931202, 1.48628833],
       [1.6061046 , 0.6390692 , 1.31954173, 0.88149153]]), 3.0)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03d59c0220>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestFusionArrayInplaceOperator_param_1_{left_value='array', right_value='scalar'}.test_ixor _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayInplaceOperator_param_1_{left_value='array', right_value='scalar'} testMethod=test_ixor>  parameter: {'left_value': 'array', 'right_value': 'scalar'}>
generate_inputs_kwargs = {'dtype': <class 'numpy.int8'>}
generate_inputs = <bound method TestFusionArrayInplaceOperator.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFu...lue='array', right_value='scalar'} testMethod=test_ixor>  parameter: {'left_value': 'array', 'right_value': 'scalar'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[1, 0, 0, 1],
       [1, 0, 1, 7],
       [7, 2, 0, 1]], dtype=int8), 3)
kwargs_np = {}
args_cp = (array([[1, 0, 0, 1],
       [1, 0, 1, 7],
       [7, 2, 0, 1]], dtype=int8), 3)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4a7b760>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.int8'>
_ TestFusionArrayInplaceOperator_param_2_{left_value='array', right_value='primitive'}.test_iadd _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayInplaceOperator_param_2_{left_value='array', right_value='primitive'} testMethod=test_iadd>  parameter: {'left_value': 'array', 'right_value': 'primitive'}>
generate_inputs_kwargs = {'dtype': <class 'numpy.float64'>}
generate_inputs = <bound method TestFusionArrayInplaceOperator.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFu...rray', right_value='primitive'} testMethod=test_iadd>  parameter: {'left_value': 'array', 'right_value': 'primitive'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[5.74406752, 6.57594683, 6.01381688, 5.72441591],
       [5.118274  , 6.22947057, 5.18793606, 7.458865  ],
       [7.8183138 , 4.91720759, 6.95862519, 5.6444746 ]]), 3.0)
kwargs_np = {}
args_cp = (array([[5.74406752, 6.57594683, 6.01381688, 5.72441591],
       [5.118274  , 6.22947057, 5.18793606, 7.458865  ],
       [7.8183138 , 4.91720759, 6.95862519, 5.6444746 ]]), 3.0)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03d5a1bdc0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestFusionArrayInplaceOperator_param_2_{left_value='array', right_value='primitive'}.test_iand _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayInplaceOperator_param_2_{left_value='array', right_value='primitive'} testMethod=test_iand>  parameter: {'left_value': 'array', 'right_value': 'primitive'}>
generate_inputs_kwargs = {'dtype': <class 'numpy.int8'>}
generate_inputs = <bound method TestFusionArrayInplaceOperator.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFu...rray', right_value='primitive'} testMethod=test_iand>  parameter: {'left_value': 'array', 'right_value': 'primitive'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[2, 3, 3, 2],
       [2, 3, 2, 0],
       [0, 1, 3, 2]], dtype=int8), 3)
kwargs_np = {}
args_cp = (array([[2, 3, 3, 2],
       [2, 3, 2, 0],
       [0, 1, 3, 2]], dtype=int8), 3)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03d5ba69a0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.int8'>
_ TestFusionArrayInplaceOperator_param_2_{left_value='array', right_value='primitive'}.test_ilshift _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayInplaceOperator_param_2_{left_value='array', right_value='primitive'} testMethod=test_ilshift>  parameter: {'left_value': 'array', 'right_value': 'primitive'}>
generate_inputs_kwargs = {'dtype': <class 'numpy.int8'>}
generate_inputs = <bound method TestFusionArrayInplaceOperator.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFu...y', right_value='primitive'} testMethod=test_ilshift>  parameter: {'left_value': 'array', 'right_value': 'primitive'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[16, 24, 24, 16],
       [16, 24, 16, 32],
       [32,  8, 24, 16]], dtype=int8), 3)
kwargs_np = {}
args_cp = (array([[16, 24, 24, 16],
       [16, 24, 16, 32],
       [32,  8, 24, 16]], dtype=int8), 3)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4ff4a90>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.int8'>
_ TestFusionArrayInplaceOperator_param_2_{left_value='array', right_value='primitive'}.test_imod _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayInplaceOperator_param_2_{left_value='array', right_value='primitive'} testMethod=test_imod>  parameter: {'left_value': 'array', 'right_value': 'primitive'}>
generate_inputs_kwargs = {'dtype': <class 'numpy.int8'>}
generate_inputs = <bound method TestFusionArrayInplaceOperator.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFu...rray', right_value='primitive'} testMethod=test_imod>  parameter: {'left_value': 'array', 'right_value': 'primitive'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[2, 0, 0, 2],
       [2, 0, 2, 1],
       [1, 1, 0, 2]], dtype=int8), 3)
kwargs_np = {}
args_cp = (array([[2, 0, 0, 2],
       [2, 0, 2, 1],
       [1, 1, 0, 2]], dtype=int8), 3)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4f39af0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.int8'>
_ TestFusionArrayInplaceOperator_param_2_{left_value='array', right_value='primitive'}.test_imul _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayInplaceOperator_param_2_{left_value='array', right_value='primitive'} testMethod=test_imul>  parameter: {'left_value': 'array', 'right_value': 'primitive'}>
generate_inputs_kwargs = {'dtype': <class 'numpy.float64'>}
generate_inputs = <bound method TestFusionArrayInplaceOperator.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFu...rray', right_value='primitive'} testMethod=test_imul>  parameter: {'left_value': 'array', 'right_value': 'primitive'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[ 8.23220256, 10.7278405 ,  9.04145064,  8.17324774],
       [ 6.35482199,  9.6884117 ,  6.56380817, 13.37659501],
       [14.45494141,  5.75162278, 11.87587557,  7.9334238 ]]), 3.0)
kwargs_np = {}
args_cp = (array([[ 8.23220256, 10.7278405 ,  9.04145064,  8.17324774],
       [ 6.35482199,  9.6884117 ,  6.56380817, 13.37659501],
       [14.45494141,  5.75162278, 11.87587557,  7.9334238 ]]), 3.0)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03d5a16700>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestFusionArrayInplaceOperator_param_2_{left_value='array', right_value='primitive'}.test_ior _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayInplaceOperator_param_2_{left_value='array', right_value='primitive'} testMethod=test_ior>  parameter: {'left_value': 'array', 'right_value': 'primitive'}>
generate_inputs_kwargs = {'dtype': <class 'numpy.int8'>}
generate_inputs = <bound method TestFusionArrayInplaceOperator.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFu...array', right_value='primitive'} testMethod=test_ior>  parameter: {'left_value': 'array', 'right_value': 'primitive'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[3, 3, 3, 3],
       [3, 3, 3, 7],
       [7, 3, 3, 3]], dtype=int8), 3)
kwargs_np = {}
args_cp = (array([[3, 3, 3, 3],
       [3, 3, 3, 7],
       [7, 3, 3, 3]], dtype=int8), 3)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03d5addf40>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.int8'>
_ TestFusionArrayInplaceOperator_param_2_{left_value='array', right_value='primitive'}.test_ipow _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayInplaceOperator_param_2_{left_value='array', right_value='primitive'} testMethod=test_ipow>  parameter: {'left_value': 'array', 'right_value': 'primitive'}>
generate_inputs_kwargs = {'dtype': <class 'numpy.float64'>}
generate_inputs = <bound method TestFusionArrayInplaceOperator.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFu...rray', right_value='primitive'} testMethod=test_ipow>  parameter: {'left_value': 'array', 'right_value': 'primitive'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[ 20.662572  ,  45.7270473 ,  27.37477656,  20.22181932],
       [  9.50487489,  33.6816991 ,  10.47379034,  88.64882257],
       [111.86268586,   7.04705112,  62.03448081,  18.49346115]]), 3.0)
kwargs_np = {}
args_cp = (array([[ 20.662572  ,  45.7270473 ,  27.37477656,  20.22181932],
       [  9.50487489,  33.6816991 ,  10.47379034,  88.64882257],
       [111.86268586,   7.04705112,  62.03448081,  18.49346115]]), 3.0)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4bd0880>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestFusionArrayInplaceOperator_param_2_{left_value='array', right_value='primitive'}.test_irshift _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayInplaceOperator_param_2_{left_value='array', right_value='primitive'} testMethod=test_irshift>  parameter: {'left_value': 'array', 'right_value': 'primitive'}>
generate_inputs_kwargs = {'dtype': <class 'numpy.int8'>}
generate_inputs = <bound method TestFusionArrayInplaceOperator.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFu...y', right_value='primitive'} testMethod=test_irshift>  parameter: {'left_value': 'array', 'right_value': 'primitive'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[0, 0, 0, 0],
       [0, 0, 0, 0],
       [0, 0, 0, 0]], dtype=int8), 3)
kwargs_np = {}
args_cp = (array([[0, 0, 0, 0],
       [0, 0, 0, 0],
       [0, 0, 0, 0]], dtype=int8), 3)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03d5b385b0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.int8'>
_ TestFusionArrayInplaceOperator_param_2_{left_value='array', right_value='primitive'}.test_isub _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayInplaceOperator_param_2_{left_value='array', right_value='primitive'} testMethod=test_isub>  parameter: {'left_value': 'array', 'right_value': 'primitive'}>
generate_inputs_kwargs = {'dtype': <class 'numpy.float64'>}
generate_inputs = <bound method TestFusionArrayInplaceOperator.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFu...rray', right_value='primitive'} testMethod=test_isub>  parameter: {'left_value': 'array', 'right_value': 'primitive'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[-0.25593248,  0.57594683,  0.01381688, -0.27558409],
       [-0.881726  ,  0.22947057, -0.81206394,  1.458865  ],
       [ 1.8183138 , -1.08279241,  0.95862519, -0.3555254 ]]), 3.0)
kwargs_np = {}
args_cp = (array([[-0.25593248,  0.57594683,  0.01381688, -0.27558409],
       [-0.881726  ,  0.22947057, -0.81206394,  1.458865  ],
       [ 1.8183138 , -1.08279241,  0.95862519, -0.3555254 ]]), 3.0)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03d59aa880>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestFusionArrayInplaceOperator_param_2_{left_value='array', right_value='primitive'}.test_itruediv_py3 _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayInplaceOperator_param_2_{left_value='array', right_value='primitive'} testMethod=test_itruediv_py3>  parameter: {'left_value': 'array', 'right_value': 'primitive'}>
generate_inputs_kwargs = {'dtype': <class 'numpy.float64'>}
generate_inputs = <bound method TestFusionArrayInplaceOperator.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFu...ight_value='primitive'} testMethod=test_itruediv_py3>  parameter: {'left_value': 'array', 'right_value': 'primitive'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[0.91468917, 1.19198228, 1.00460563, 0.90813864],
       [0.70609133, 1.07649019, 0.72931202, 1.48628833],
       [1.6061046 , 0.6390692 , 1.31954173, 0.88149153]]), 3.0)
kwargs_np = {}
args_cp = (array([[0.91468917, 1.19198228, 1.00460563, 0.90813864],
       [0.70609133, 1.07649019, 0.72931202, 1.48628833],
       [1.6061046 , 0.6390692 , 1.31954173, 0.88149153]]), 3.0)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03d5b0b5b0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestFusionArrayInplaceOperator_param_2_{left_value='array', right_value='primitive'}.test_ixor _

self = <<cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayInplaceOperator_param_2_{left_value='array', right_value='primitive'} testMethod=test_ixor>  parameter: {'left_value': 'array', 'right_value': 'primitive'}>
generate_inputs_kwargs = {'dtype': <class 'numpy.int8'>}
generate_inputs = <bound method TestFusionArrayInplaceOperator.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_array.TestFu...rray', right_value='primitive'} testMethod=test_ixor>  parameter: {'left_value': 'array', 'right_value': 'primitive'}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[1, 0, 0, 1],
       [1, 0, 1, 7],
       [7, 2, 0, 1]], dtype=int8), 3)
kwargs_np = {}
args_cp = (array([[1, 0, 0, 1],
       [1, 0, 1, 7],
       [7, 2, 0, 1]], dtype=int8), 3)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03cd4e8a60>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.int8'>
_________________ TestFusionArraySetItem.test_setitem_ellipsis _________________

self = <cupy_tests.core_tests.fusion_tests.test_array.TestFusionArraySetItem testMethod=test_setitem_ellipsis>
generate_inputs_kwargs = {}
generate_inputs = <bound method TestFusionArraySetItem.generate_inputs of <cupy_tests.core_tests.fusion_tests.test_array.TestFusionArraySetItem testMethod=test_setitem_ellipsis>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[5, 7, 6, 5],
       [4, 6, 4, 8],
       [9, 3, 7, 5]], dtype=int32), array([[5, 7, 6, 5],
       [4, 6, 4, 8],
       [9, 3, 7, 5]], dtype=int32))
kwargs_np = {}
args_cp = (array([[5, 7, 6, 5],
       [4, 6, 4, 8],
       [9, 3, 7, 5]], dtype=int32), array([[5, 7, 6, 5],
       [4, 6, 4, 8],
       [9, 3, 7, 5]], dtype=int32))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03d5946250>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
________________ TestFusionArraySetItem.test_setitem_non_slice _________________

self = <cupy_tests.core_tests.fusion_tests.test_array.TestFusionArraySetItem testMethod=test_setitem_non_slice>
generate_inputs_kwargs = {}
generate_inputs = <bound method TestFusionArraySetItem.generate_inputs of <cupy_tests.core_tests.fusion_tests.test_array.TestFusionArraySetItem testMethod=test_setitem_non_slice>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[5, 7, 6, 5],
       [4, 6, 4, 8],
       [9, 3, 7, 5]], dtype=int32), array([[5, 7, 6, 5],
       [4, 6, 4, 8],
       [9, 3, 7, 5]], dtype=int32))
kwargs_np = {}
args_cp = (array([[5, 7, 6, 5],
       [4, 6, 4, 8],
       [9, 3, 7, 5]], dtype=int32), array([[5, 7, 6, 5],
       [4, 6, 4, 8],
       [9, 3, 7, 5]], dtype=int32))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03d5a936d0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
_______________________ TestFusionArrayMethods.test_all ________________________

>   self._memo[key] = history.get_fusion(

cupy/_core/fusion.pyx:903: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   return_value = func(*function_args)

cupy/_core/fusion.pyx:744: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<_FusionVar float64 2-dim array>,), kwargs = {}

    @cupy.fuse()
    def impl_fuse_cp(*args, **kwargs):
>       return impl_cp(*args, **kwargs)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = <_FusionVar float64 2-dim array>

>   return lambda x: x.all()
E   AttributeError: '_FusionVarArray' object has no attribute 'all'

tests/cupy_tests/core_tests/fusion_tests/test_array.py:296: AttributeError

During handling of the above exception, another exception occurred:

self = <cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayMethods testMethod=test_all>
generate_inputs_kwargs = {'dtype': <class 'numpy.float64'>}
generate_inputs = <bound method TestFusionArrayMethods.generate_inputs of <cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayMethods testMethod=test_all>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[5.48813504, 7.15189366, 6.02763376, 5.44883183],
       [4.23654799, 6.45894113, 4.37587211, 8.91773001],
       [9.63662761, 3.83441519, 7.91725038, 5.2889492 ]]),)
kwargs_np = {}
args_cp = (array([[5.48813504, 7.15189366, 6.02763376, 5.44883183],
       [4.23654799, 6.45894113, 4.37587211, 8.91773001],
       [9.63662761, 3.83441519, 7.91725038, 5.2889492 ]]),)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:909: in cupy._core.fusion.Fusion.__call__
    return self.new_fusion(*args)
cupy/_core/new_fusion.pyx:163: in cupy._core.new_fusion.Fusion.__call__
    return kernel.execute(args, shapes)
cupy/_core/_fusion_kernel.pyx:348: in cupy._core._fusion_kernel.FusedKernel.execute
    kern = _cuda_compile(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_fusion_kernel.pyx:52: in cupy._core._fusion_kernel._cuda_compile
    module = compile_with_cache(
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03d5951250>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 609, in cupy._core._reduction._SimpleReductionKernel._get_function
    return _SimpleReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 622, in cupy._core._reduction._SimpleReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
_______________________ TestFusionArrayMethods.test_any ________________________

>   self._memo[key] = history.get_fusion(

cupy/_core/fusion.pyx:903: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   return_value = func(*function_args)

cupy/_core/fusion.pyx:744: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<_FusionVar float64 2-dim array>,), kwargs = {}

    @cupy.fuse()
    def impl_fuse_cp(*args, **kwargs):
>       return impl_cp(*args, **kwargs)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = <_FusionVar float64 2-dim array>

>   return lambda x: x.any()
E   AttributeError: '_FusionVarArray' object has no attribute 'any'

tests/cupy_tests/core_tests/fusion_tests/test_array.py:301: AttributeError

During handling of the above exception, another exception occurred:

self = <cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayMethods testMethod=test_any>
generate_inputs_kwargs = {'dtype': <class 'numpy.float64'>}
generate_inputs = <bound method TestFusionArrayMethods.generate_inputs of <cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayMethods testMethod=test_any>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[5.48813504, 7.15189366, 6.02763376, 5.44883183],
       [4.23654799, 6.45894113, 4.37587211, 8.91773001],
       [9.63662761, 3.83441519, 7.91725038, 5.2889492 ]]),)
kwargs_np = {}
args_cp = (array([[5.48813504, 7.15189366, 6.02763376, 5.44883183],
       [4.23654799, 6.45894113, 4.37587211, 8.91773001],
       [9.63662761, 3.83441519, 7.91725038, 5.2889492 ]]),)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:909: in cupy._core.fusion.Fusion.__call__
    return self.new_fusion(*args)
cupy/_core/new_fusion.pyx:163: in cupy._core.new_fusion.Fusion.__call__
    return kernel.execute(args, shapes)
cupy/_core/_fusion_kernel.pyx:348: in cupy._core._fusion_kernel.FusedKernel.execute
    kern = _cuda_compile(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_fusion_kernel.pyx:52: in cupy._core._fusion_kernel._cuda_compile
    module = compile_with_cache(
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03d5b17eb0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 609, in cupy._core._reduction._SimpleReductionKernel._get_function
    return _SimpleReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 622, in cupy._core._reduction._SimpleReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
_______________________ TestFusionArrayMethods.test_copy _______________________

self = <cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayMethods testMethod=test_copy>
generate_inputs_kwargs = {'dtype': <class 'numpy.float64'>}
generate_inputs = <bound method TestFusionArrayMethods.generate_inputs of <cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayMethods testMethod=test_copy>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[5.48813504, 7.15189366, 6.02763376, 5.44883183],
       [4.23654799, 6.45894113, 4.37587211, 8.91773001],
       [9.63662761, 3.83441519, 7.91725038, 5.2889492 ]]),)
kwargs_np = {}
args_cp = (array([[5.48813504, 7.15189366, 6.02763376, 5.44883183],
       [4.23654799, 6.45894113, 4.37587211, 8.91773001],
       [9.63662761, 3.83441519, 7.91725038, 5.2889492 ]]),)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4a97ee0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_______________________ TestFusionArrayMethods.test_max ________________________

>   self._memo[key] = history.get_fusion(

cupy/_core/fusion.pyx:903: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   return_value = func(*function_args)

cupy/_core/fusion.pyx:744: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<_FusionVar float64 2-dim array>,), kwargs = {}

    @cupy.fuse()
    def impl_fuse_cp(*args, **kwargs):
>       return impl_cp(*args, **kwargs)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = <_FusionVar float64 2-dim array>

>   return lambda x: x.max()
E   AttributeError: '_FusionVarArray' object has no attribute 'max'

tests/cupy_tests/core_tests/fusion_tests/test_array.py:286: AttributeError

During handling of the above exception, another exception occurred:

self = <cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayMethods testMethod=test_max>
generate_inputs_kwargs = {'dtype': <class 'numpy.float64'>}
generate_inputs = <bound method TestFusionArrayMethods.generate_inputs of <cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayMethods testMethod=test_max>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[5.48813504, 7.15189366, 6.02763376, 5.44883183],
       [4.23654799, 6.45894113, 4.37587211, 8.91773001],
       [9.63662761, 3.83441519, 7.91725038, 5.2889492 ]]),)
kwargs_np = {}
args_cp = (array([[5.48813504, 7.15189366, 6.02763376, 5.44883183],
       [4.23654799, 6.45894113, 4.37587211, 8.91773001],
       [9.63662761, 3.83441519, 7.91725038, 5.2889492 ]]),)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:909: in cupy._core.fusion.Fusion.__call__
    return self.new_fusion(*args)
cupy/_core/new_fusion.pyx:163: in cupy._core.new_fusion.Fusion.__call__
    return kernel.execute(args, shapes)
cupy/_core/_fusion_kernel.pyx:348: in cupy._core._fusion_kernel.FusedKernel.execute
    kern = _cuda_compile(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_fusion_kernel.pyx:52: in cupy._core._fusion_kernel._cuda_compile
    module = compile_with_cache(
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03d5bfb430>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_______________________ TestFusionArrayMethods.test_min ________________________

>   self._memo[key] = history.get_fusion(

cupy/_core/fusion.pyx:903: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   return_value = func(*function_args)

cupy/_core/fusion.pyx:744: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<_FusionVar float64 2-dim array>,), kwargs = {}

    @cupy.fuse()
    def impl_fuse_cp(*args, **kwargs):
>       return impl_cp(*args, **kwargs)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = <_FusionVar float64 2-dim array>

>   return lambda x: x.min()
E   AttributeError: '_FusionVarArray' object has no attribute 'min'

tests/cupy_tests/core_tests/fusion_tests/test_array.py:291: AttributeError

During handling of the above exception, another exception occurred:

self = <cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayMethods testMethod=test_min>
generate_inputs_kwargs = {'dtype': <class 'numpy.float64'>}
generate_inputs = <bound method TestFusionArrayMethods.generate_inputs of <cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayMethods testMethod=test_min>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[5.48813504, 7.15189366, 6.02763376, 5.44883183],
       [4.23654799, 6.45894113, 4.37587211, 8.91773001],
       [9.63662761, 3.83441519, 7.91725038, 5.2889492 ]]),)
kwargs_np = {}
args_cp = (array([[5.48813504, 7.15189366, 6.02763376, 5.44883183],
       [4.23654799, 6.45894113, 4.37587211, 8.91773001],
       [9.63662761, 3.83441519, 7.91725038, 5.2889492 ]]),)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:909: in cupy._core.fusion.Fusion.__call__
    return self.new_fusion(*args)
cupy/_core/new_fusion.pyx:163: in cupy._core.new_fusion.Fusion.__call__
    return kernel.execute(args, shapes)
cupy/_core/_fusion_kernel.pyx:348: in cupy._core._fusion_kernel.FusedKernel.execute
    kern = _cuda_compile(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_fusion_kernel.pyx:52: in cupy._core._fusion_kernel._cuda_compile
    module = compile_with_cache(
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03d5a90bb0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_______________________ TestFusionArrayMethods.test_prod _______________________

>   self._memo[key] = history.get_fusion(

cupy/_core/fusion.pyx:903: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   return_value = func(*function_args)

cupy/_core/fusion.pyx:744: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<_FusionVar float64 2-dim array>,), kwargs = {}

    @cupy.fuse()
    def impl_fuse_cp(*args, **kwargs):
>       return impl_cp(*args, **kwargs)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = <_FusionVar float64 2-dim array>

>   return lambda x: x.prod()
E   AttributeError: '_FusionVarArray' object has no attribute 'prod'

tests/cupy_tests/core_tests/fusion_tests/test_array.py:281: AttributeError

During handling of the above exception, another exception occurred:

self = <cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayMethods testMethod=test_prod>
generate_inputs_kwargs = {'dtype': <class 'numpy.float64'>}
generate_inputs = <bound method TestFusionArrayMethods.generate_inputs of <cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayMethods testMethod=test_prod>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[5.48813504, 7.15189366, 6.02763376, 5.44883183],
       [4.23654799, 6.45894113, 4.37587211, 8.91773001],
       [9.63662761, 3.83441519, 7.91725038, 5.2889492 ]]),)
kwargs_np = {}
args_cp = (array([[5.48813504, 7.15189366, 6.02763376, 5.44883183],
       [4.23654799, 6.45894113, 4.37587211, 8.91773001],
       [9.63662761, 3.83441519, 7.91725038, 5.2889492 ]]),)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:909: in cupy._core.fusion.Fusion.__call__
    return self.new_fusion(*args)
cupy/_core/new_fusion.pyx:163: in cupy._core.new_fusion.Fusion.__call__
    return kernel.execute(args, shapes)
cupy/_core/_fusion_kernel.pyx:348: in cupy._core._fusion_kernel.FusedKernel.execute
    kern = _cuda_compile(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_fusion_kernel.pyx:52: in cupy._core._fusion_kernel._cuda_compile
    module = compile_with_cache(
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4717940>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 609, in cupy._core._reduction._SimpleReductionKernel._get_function
    return _SimpleReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 622, in cupy._core._reduction._SimpleReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
_______________________ TestFusionArrayMethods.test_sum ________________________

>   self._memo[key] = history.get_fusion(

cupy/_core/fusion.pyx:903: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   return_value = func(*function_args)

cupy/_core/fusion.pyx:744: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<_FusionVar float64 2-dim array>,), kwargs = {}

    @cupy.fuse()
    def impl_fuse_cp(*args, **kwargs):
>       return impl_cp(*args, **kwargs)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = <_FusionVar float64 2-dim array>

>   return lambda x: x.sum()
E   AttributeError: '_FusionVarArray' object has no attribute 'sum'

tests/cupy_tests/core_tests/fusion_tests/test_array.py:276: AttributeError

During handling of the above exception, another exception occurred:

self = <cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayMethods testMethod=test_sum>
generate_inputs_kwargs = {'dtype': <class 'numpy.float64'>}
generate_inputs = <bound method TestFusionArrayMethods.generate_inputs of <cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayMethods testMethod=test_sum>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[5.48813504, 7.15189366, 6.02763376, 5.44883183],
       [4.23654799, 6.45894113, 4.37587211, 8.91773001],
       [9.63662761, 3.83441519, 7.91725038, 5.2889492 ]]),)
kwargs_np = {}
args_cp = (array([[5.48813504, 7.15189366, 6.02763376, 5.44883183],
       [4.23654799, 6.45894113, 4.37587211, 8.91773001],
       [9.63662761, 3.83441519, 7.91725038, 5.2889492 ]]),)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:909: in cupy._core.fusion.Fusion.__call__
    return self.new_fusion(*args)
cupy/_core/new_fusion.pyx:163: in cupy._core.new_fusion.Fusion.__call__
    return kernel.execute(args, shapes)
cupy/_core/_fusion_kernel.pyx:348: in cupy._core._fusion_kernel.FusedKernel.execute
    kern = _cuda_compile(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_fusion_kernel.pyx:52: in cupy._core._fusion_kernel._cuda_compile
    module = compile_with_cache(
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03d5a857c0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
______________________ TestFusionArrayAsType.test_astype _______________________

self = <cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayAsType testMethod=test_astype>
generate_inputs_kwargs = {'dtype1': <class 'numpy.float64'>, 'dtype2': <class 'numpy.float64'>}
generate_inputs = <bound method TestFusionArrayAsType.generate_inputs of <cupy_tests.core_tests.fusion_tests.test_array.TestFusionArrayAsType testMethod=test_astype>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[5.48813504, 7.15189366, 6.02763376, 5.44883183],
       [4.23654799, 6.45894113, 4.37587211, 8.91773001],
       [9.63662761, 3.83441519, 7.91725038, 5.2889492 ]]),)
kwargs_np = {}
args_cp = (array([[5.48813504, 7.15189366, 6.02763376, 5.44883183],
       [4.23654799, 6.45894113, 4.37587211, 8.91773001],
       [9.63662761, 3.83441519, 7.91725038, 5.2889492 ]]),)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03d610adc0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype2 is <class 'numpy.float64'>
dtype1 is <class 'numpy.float64'>
________ TestIndexing_param_0_{indices=1, shape=(2, 3, 4)}.test_getitem ________

>   self._memo[key] = history.get_fusion(

cupy/_core/fusion.pyx:903: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   return_value = func(*function_args)

cupy/_core/fusion.pyx:744: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<_FusionVar float64 3-dim array>,), kwargs = {}

    @cupy.fuse()
    def impl_fuse_cp(*args, **kwargs):
>       return impl_cp(*args, **kwargs)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = <_FusionVar float64 3-dim array>

>   return lambda x: x[self.indices]
E   TypeError: '_FusionVarArray' object is not subscriptable

tests/cupy_tests/core_tests/fusion_tests/test_indexing.py:45: TypeError

During handling of the above exception, another exception occurred:

self = <<cupy_tests.core_tests.fusion_tests.test_indexing.TestIndexing_param_0_{indices=1, shape=(2, 3, 4)} testMethod=test_getitem>  parameter: {'shape': (2, 3, 4), 'indices': 1}>
generate_inputs_kwargs = {'dtype': <class 'numpy.float64'>}
generate_inputs = <bound method TestIndexing.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_indexing.TestIndexing_param_0_{indices=1, shape=(2, 3, 4)} testMethod=test_getitem>  parameter: {'shape': (2, 3, 4), 'indices': 1}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[[5.48813504, 7.15189366, 6.02763376, 5.44883183],
        [4.23654799, 6.45894113, 4.37587211, 8.91773001],
 ...        [0.20218397, 8.32619846, 7.78156751, 8.70012148],
        [9.78618342, 7.99158564, 4.61479362, 7.80529176]]]),)
kwargs_np = {}
args_cp = (array([[[5.48813504, 7.15189366, 6.02763376, 5.44883183],
        [4.23654799, 6.45894113, 4.37587211, 8.91773001],
 ...        [0.20218397, 8.32619846, 7.78156751, 8.70012148],
        [9.78618342, 7.99158564, 4.61479362, 7.80529176]]]),)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:909: in cupy._core.fusion.Fusion.__call__
    return self.new_fusion(*args)
cupy/_core/new_fusion.pyx:163: in cupy._core.new_fusion.Fusion.__call__
    return kernel.execute(args, shapes)
cupy/_core/_fusion_kernel.pyx:348: in cupy._core._fusion_kernel.FusedKernel.execute
    kern = _cuda_compile(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_fusion_kernel.pyx:52: in cupy._core._fusion_kernel._cuda_compile
    module = compile_with_cache(
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03d59886a0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_______ TestIndexing_param_1_{indices=-1, shape=(2, 3, 4)}.test_getitem ________

>   self._memo[key] = history.get_fusion(

cupy/_core/fusion.pyx:903: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   return_value = func(*function_args)

cupy/_core/fusion.pyx:744: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<_FusionVar float64 3-dim array>,), kwargs = {}

    @cupy.fuse()
    def impl_fuse_cp(*args, **kwargs):
>       return impl_cp(*args, **kwargs)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = <_FusionVar float64 3-dim array>

>   return lambda x: x[self.indices]
E   TypeError: '_FusionVarArray' object is not subscriptable

tests/cupy_tests/core_tests/fusion_tests/test_indexing.py:45: TypeError

During handling of the above exception, another exception occurred:

self = <<cupy_tests.core_tests.fusion_tests.test_indexing.TestIndexing_param_1_{indices=-1, shape=(2, 3, 4)} testMethod=test_getitem>  parameter: {'shape': (2, 3, 4), 'indices': -1}>
generate_inputs_kwargs = {'dtype': <class 'numpy.float64'>}
generate_inputs = <bound method TestIndexing.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_indexing.TestIndexing_param_1_{indices=-1, shape=(2, 3, 4)} testMethod=test_getitem>  parameter: {'shape': (2, 3, 4), 'indices': -1}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[[5.48813504, 7.15189366, 6.02763376, 5.44883183],
        [4.23654799, 6.45894113, 4.37587211, 8.91773001],
 ...        [0.20218397, 8.32619846, 7.78156751, 8.70012148],
        [9.78618342, 7.99158564, 4.61479362, 7.80529176]]]),)
kwargs_np = {}
args_cp = (array([[[5.48813504, 7.15189366, 6.02763376, 5.44883183],
        [4.23654799, 6.45894113, 4.37587211, 8.91773001],
 ...        [0.20218397, 8.32619846, 7.78156751, 8.70012148],
        [9.78618342, 7.99158564, 4.61479362, 7.80529176]]]),)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:909: in cupy._core.fusion.Fusion.__call__
    return self.new_fusion(*args)
cupy/_core/new_fusion.pyx:163: in cupy._core.new_fusion.Fusion.__call__
    return kernel.execute(args, shapes)
cupy/_core/_fusion_kernel.pyx:348: in cupy._core._fusion_kernel.FusedKernel.execute
    kern = _cuda_compile(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_fusion_kernel.pyx:52: in cupy._core._fusion_kernel._cuda_compile
    module = compile_with_cache(
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03d5b073d0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
______ TestIndexing_param_2_{indices=(1,), shape=(2, 3, 4)}.test_getitem _______

>   self._memo[key] = history.get_fusion(

cupy/_core/fusion.pyx:903: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   return_value = func(*function_args)

cupy/_core/fusion.pyx:744: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<_FusionVar float64 3-dim array>,), kwargs = {}

    @cupy.fuse()
    def impl_fuse_cp(*args, **kwargs):
>       return impl_cp(*args, **kwargs)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = <_FusionVar float64 3-dim array>

>   return lambda x: x[self.indices]
E   TypeError: '_FusionVarArray' object is not subscriptable

tests/cupy_tests/core_tests/fusion_tests/test_indexing.py:45: TypeError

During handling of the above exception, another exception occurred:

self = <<cupy_tests.core_tests.fusion_tests.test_indexing.TestIndexing_param_2_{indices=(1,), shape=(2, 3, 4)} testMethod=test_getitem>  parameter: {'shape': (2, 3, 4), 'indices': (1,)}>
generate_inputs_kwargs = {'dtype': <class 'numpy.float64'>}
generate_inputs = <bound method TestIndexing.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_indexing.TestIndexing_param_2_{indices=(1,), shape=(2, 3, 4)} testMethod=test_getitem>  parameter: {'shape': (2, 3, 4), 'indices': (1,)}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[[5.48813504, 7.15189366, 6.02763376, 5.44883183],
        [4.23654799, 6.45894113, 4.37587211, 8.91773001],
 ...        [0.20218397, 8.32619846, 7.78156751, 8.70012148],
        [9.78618342, 7.99158564, 4.61479362, 7.80529176]]]),)
kwargs_np = {}
args_cp = (array([[[5.48813504, 7.15189366, 6.02763376, 5.44883183],
        [4.23654799, 6.45894113, 4.37587211, 8.91773001],
 ...        [0.20218397, 8.32619846, 7.78156751, 8.70012148],
        [9.78618342, 7.99158564, 4.61479362, 7.80529176]]]),)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:909: in cupy._core.fusion.Fusion.__call__
    return self.new_fusion(*args)
cupy/_core/new_fusion.pyx:163: in cupy._core.new_fusion.Fusion.__call__
    return kernel.execute(args, shapes)
cupy/_core/_fusion_kernel.pyx:348: in cupy._core._fusion_kernel.FusedKernel.execute
    kern = _cuda_compile(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_fusion_kernel.pyx:52: in cupy._core._fusion_kernel._cuda_compile
    module = compile_with_cache(
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03c49f1f70>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_____ TestIndexing_param_3_{indices=(1, 0), shape=(2, 3, 4)}.test_getitem ______

>   self._memo[key] = history.get_fusion(

cupy/_core/fusion.pyx:903: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   return_value = func(*function_args)

cupy/_core/fusion.pyx:744: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<_FusionVar float64 3-dim array>,), kwargs = {}

    @cupy.fuse()
    def impl_fuse_cp(*args, **kwargs):
>       return impl_cp(*args, **kwargs)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = <_FusionVar float64 3-dim array>

>   return lambda x: x[self.indices]
E   TypeError: '_FusionVarArray' object is not subscriptable

tests/cupy_tests/core_tests/fusion_tests/test_indexing.py:45: TypeError

During handling of the above exception, another exception occurred:

self = <<cupy_tests.core_tests.fusion_tests.test_indexing.TestIndexing_param_3_{indices=(1, 0), shape=(2, 3, 4)} testMethod=test_getitem>  parameter: {'shape': (2, 3, 4), 'indices': (1, 0)}>
generate_inputs_kwargs = {'dtype': <class 'numpy.float64'>}
generate_inputs = <bound method TestIndexing.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_indexing.TestIndexing_param_3_{indices=(1, 0), shape=(2, 3, 4)} testMethod=test_getitem>  parameter: {'shape': (2, 3, 4), 'indices': (1, 0)}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[[5.48813504, 7.15189366, 6.02763376, 5.44883183],
        [4.23654799, 6.45894113, 4.37587211, 8.91773001],
 ...        [0.20218397, 8.32619846, 7.78156751, 8.70012148],
        [9.78618342, 7.99158564, 4.61479362, 7.80529176]]]),)
kwargs_np = {}
args_cp = (array([[[5.48813504, 7.15189366, 6.02763376, 5.44883183],
        [4.23654799, 6.45894113, 4.37587211, 8.91773001],
 ...        [0.20218397, 8.32619846, 7.78156751, 8.70012148],
        [9.78618342, 7.99158564, 4.61479362, 7.80529176]]]),)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:909: in cupy._core.fusion.Fusion.__call__
    return self.new_fusion(*args)
cupy/_core/new_fusion.pyx:163: in cupy._core.new_fusion.Fusion.__call__
    return kernel.execute(args, shapes)
cupy/_core/_fusion_kernel.pyx:348: in cupy._core._fusion_kernel.FusedKernel.execute
    kern = _cuda_compile(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_fusion_kernel.pyx:52: in cupy._core._fusion_kernel._cuda_compile
    module = compile_with_cache(
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b47c3100>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
____ TestIndexing_param_4_{indices=(1, 0, 2), shape=(2, 3, 4)}.test_getitem ____

>   self._memo[key] = history.get_fusion(

cupy/_core/fusion.pyx:903: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   return_value = func(*function_args)

cupy/_core/fusion.pyx:744: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<_FusionVar float64 3-dim array>,), kwargs = {}

    @cupy.fuse()
    def impl_fuse_cp(*args, **kwargs):
>       return impl_cp(*args, **kwargs)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = <_FusionVar float64 3-dim array>

>   return lambda x: x[self.indices]
E   TypeError: '_FusionVarArray' object is not subscriptable

tests/cupy_tests/core_tests/fusion_tests/test_indexing.py:45: TypeError

During handling of the above exception, another exception occurred:

self = <<cupy_tests.core_tests.fusion_tests.test_indexing.TestIndexing_param_4_{indices=(1, 0, 2), shape=(2, 3, 4)} testMethod=test_getitem>  parameter: {'shape': (2, 3, 4), 'indices': (1, 0, 2)}>
generate_inputs_kwargs = {'dtype': <class 'numpy.float64'>}
generate_inputs = <bound method TestIndexing.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_indexing.TestIndexing_param_4_{indices=(1, 0, 2), shape=(2, 3, 4)} testMethod=test_getitem>  parameter: {'shape': (2, 3, 4), 'indices': (1, 0, 2)}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[[5.48813504, 7.15189366, 6.02763376, 5.44883183],
        [4.23654799, 6.45894113, 4.37587211, 8.91773001],
 ...        [0.20218397, 8.32619846, 7.78156751, 8.70012148],
        [9.78618342, 7.99158564, 4.61479362, 7.80529176]]]),)
kwargs_np = {}
args_cp = (array([[[5.48813504, 7.15189366, 6.02763376, 5.44883183],
        [4.23654799, 6.45894113, 4.37587211, 8.91773001],
 ...        [0.20218397, 8.32619846, 7.78156751, 8.70012148],
        [9.78618342, 7.99158564, 4.61479362, 7.80529176]]]),)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:909: in cupy._core.fusion.Fusion.__call__
    return self.new_fusion(*args)
cupy/_core/new_fusion.pyx:163: in cupy._core.new_fusion.Fusion.__call__
    return kernel.execute(args, shapes)
cupy/_core/_fusion_kernel.pyx:348: in cupy._core._fusion_kernel.FusedKernel.execute
    kern = _cuda_compile(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_fusion_kernel.pyx:52: in cupy._core._fusion_kernel._cuda_compile
    module = compile_with_cache(
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b472b280>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
___ TestIndexing_param_5_{indices=(-1, 0, -2), shape=(2, 3, 4)}.test_getitem ___

>   self._memo[key] = history.get_fusion(

cupy/_core/fusion.pyx:903: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   return_value = func(*function_args)

cupy/_core/fusion.pyx:744: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<_FusionVar float64 3-dim array>,), kwargs = {}

    @cupy.fuse()
    def impl_fuse_cp(*args, **kwargs):
>       return impl_cp(*args, **kwargs)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = <_FusionVar float64 3-dim array>

>   return lambda x: x[self.indices]
E   TypeError: '_FusionVarArray' object is not subscriptable

tests/cupy_tests/core_tests/fusion_tests/test_indexing.py:45: TypeError

During handling of the above exception, another exception occurred:

self = <<cupy_tests.core_tests.fusion_tests.test_indexing.TestIndexing_param_5_{indices=(-1, 0, -2), shape=(2, 3, 4)} testMethod=test_getitem>  parameter: {'shape': (2, 3, 4), 'indices': (-1, 0, -2)}>
generate_inputs_kwargs = {'dtype': <class 'numpy.float64'>}
generate_inputs = <bound method TestIndexing.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_indexing.TestIndexing_param_5_{indices=(-1, 0, -2), shape=(2, 3, 4)} testMethod=test_getitem>  parameter: {'shape': (2, 3, 4), 'indices': (-1, 0, -2)}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[[5.48813504, 7.15189366, 6.02763376, 5.44883183],
        [4.23654799, 6.45894113, 4.37587211, 8.91773001],
 ...        [0.20218397, 8.32619846, 7.78156751, 8.70012148],
        [9.78618342, 7.99158564, 4.61479362, 7.80529176]]]),)
kwargs_np = {}
args_cp = (array([[[5.48813504, 7.15189366, 6.02763376, 5.44883183],
        [4.23654799, 6.45894113, 4.37587211, 8.91773001],
 ...        [0.20218397, 8.32619846, 7.78156751, 8.70012148],
        [9.78618342, 7.99158564, 4.61479362, 7.80529176]]]),)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:909: in cupy._core.fusion.Fusion.__call__
    return self.new_fusion(*args)
cupy/_core/new_fusion.pyx:163: in cupy._core.new_fusion.Fusion.__call__
    return kernel.execute(args, shapes)
cupy/_core/_fusion_kernel.pyx:348: in cupy._core._fusion_kernel.FusedKernel.execute
    kern = _cuda_compile(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_fusion_kernel.pyx:52: in cupy._core._fusion_kernel._cuda_compile
    module = compile_with_cache(
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03d5bb0ca0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestIndexing_param_6_{indices=slice(None, None, None), shape=(2, 3, 4)}.test_getitem _

>   self._memo[key] = history.get_fusion(

cupy/_core/fusion.pyx:903: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   return_value = func(*function_args)

cupy/_core/fusion.pyx:744: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<_FusionVar float64 3-dim array>,), kwargs = {}

    @cupy.fuse()
    def impl_fuse_cp(*args, **kwargs):
>       return impl_cp(*args, **kwargs)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = <_FusionVar float64 3-dim array>

>   return lambda x: x[self.indices]
E   TypeError: '_FusionVarArray' object is not subscriptable

tests/cupy_tests/core_tests/fusion_tests/test_indexing.py:45: TypeError

During handling of the above exception, another exception occurred:

self = <<cupy_tests.core_tests.fusion_tests.test_indexing.TestIndexing_param_6_{indices=slice(None, None, None), shape=(2, 3, 4)} testMethod=test_getitem>  parameter: {'shape': (2, 3, 4), 'indices': slice(None, None, None)}>
generate_inputs_kwargs = {'dtype': <class 'numpy.float64'>}
generate_inputs = <bound method TestIndexing.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_indexing.TestIndexing_param_6_...None), shape=(2, 3, 4)} testMethod=test_getitem>  parameter: {'shape': (2, 3, 4), 'indices': slice(None, None, None)}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[[5.48813504, 7.15189366, 6.02763376, 5.44883183],
        [4.23654799, 6.45894113, 4.37587211, 8.91773001],
 ...        [0.20218397, 8.32619846, 7.78156751, 8.70012148],
        [9.78618342, 7.99158564, 4.61479362, 7.80529176]]]),)
kwargs_np = {}
args_cp = (array([[[5.48813504, 7.15189366, 6.02763376, 5.44883183],
        [4.23654799, 6.45894113, 4.37587211, 8.91773001],
 ...        [0.20218397, 8.32619846, 7.78156751, 8.70012148],
        [9.78618342, 7.99158564, 4.61479362, 7.80529176]]]),)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:909: in cupy._core.fusion.Fusion.__call__
    return self.new_fusion(*args)
cupy/_core/new_fusion.pyx:163: in cupy._core.new_fusion.Fusion.__call__
    return kernel.execute(args, shapes)
cupy/_core/_fusion_kernel.pyx:348: in cupy._core._fusion_kernel.FusedKernel.execute
    kern = _cuda_compile(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_fusion_kernel.pyx:52: in cupy._core._fusion_kernel._cuda_compile
    module = compile_with_cache(
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03d5a939a0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestIndexing_param_7_{indices=slice(None, None, 1), shape=(2, 3, 4)}.test_getitem _

>   self._memo[key] = history.get_fusion(

cupy/_core/fusion.pyx:903: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   return_value = func(*function_args)

cupy/_core/fusion.pyx:744: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<_FusionVar float64 3-dim array>,), kwargs = {}

    @cupy.fuse()
    def impl_fuse_cp(*args, **kwargs):
>       return impl_cp(*args, **kwargs)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = <_FusionVar float64 3-dim array>

>   return lambda x: x[self.indices]
E   TypeError: '_FusionVarArray' object is not subscriptable

tests/cupy_tests/core_tests/fusion_tests/test_indexing.py:45: TypeError

During handling of the above exception, another exception occurred:

self = <<cupy_tests.core_tests.fusion_tests.test_indexing.TestIndexing_param_7_{indices=slice(None, None, 1), shape=(2, 3, 4)} testMethod=test_getitem>  parameter: {'shape': (2, 3, 4), 'indices': slice(None, None, 1)}>
generate_inputs_kwargs = {'dtype': <class 'numpy.float64'>}
generate_inputs = <bound method TestIndexing.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_indexing.TestIndexing_param_7_...None, 1), shape=(2, 3, 4)} testMethod=test_getitem>  parameter: {'shape': (2, 3, 4), 'indices': slice(None, None, 1)}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[[5.48813504, 7.15189366, 6.02763376, 5.44883183],
        [4.23654799, 6.45894113, 4.37587211, 8.91773001],
 ...        [0.20218397, 8.32619846, 7.78156751, 8.70012148],
        [9.78618342, 7.99158564, 4.61479362, 7.80529176]]]),)
kwargs_np = {}
args_cp = (array([[[5.48813504, 7.15189366, 6.02763376, 5.44883183],
        [4.23654799, 6.45894113, 4.37587211, 8.91773001],
 ...        [0.20218397, 8.32619846, 7.78156751, 8.70012148],
        [9.78618342, 7.99158564, 4.61479362, 7.80529176]]]),)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:909: in cupy._core.fusion.Fusion.__call__
    return self.new_fusion(*args)
cupy/_core/new_fusion.pyx:163: in cupy._core.new_fusion.Fusion.__call__
    return kernel.execute(args, shapes)
cupy/_core/_fusion_kernel.pyx:348: in cupy._core._fusion_kernel.FusedKernel.execute
    kern = _cuda_compile(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_fusion_kernel.pyx:52: in cupy._core._fusion_kernel._cuda_compile
    module = compile_with_cache(
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03d59805b0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestIndexing_param_8_{indices=slice(None, None, -1), shape=(2, 3, 4)}.test_getitem _

>   self._memo[key] = history.get_fusion(

cupy/_core/fusion.pyx:903: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   return_value = func(*function_args)

cupy/_core/fusion.pyx:744: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<_FusionVar float64 3-dim array>,), kwargs = {}

    @cupy.fuse()
    def impl_fuse_cp(*args, **kwargs):
>       return impl_cp(*args, **kwargs)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = <_FusionVar float64 3-dim array>

>   return lambda x: x[self.indices]
E   TypeError: '_FusionVarArray' object is not subscriptable

tests/cupy_tests/core_tests/fusion_tests/test_indexing.py:45: TypeError

During handling of the above exception, another exception occurred:

self = <<cupy_tests.core_tests.fusion_tests.test_indexing.TestIndexing_param_8_{indices=slice(None, None, -1), shape=(2, 3, 4)} testMethod=test_getitem>  parameter: {'shape': (2, 3, 4), 'indices': slice(None, None, -1)}>
generate_inputs_kwargs = {'dtype': <class 'numpy.float64'>}
generate_inputs = <bound method TestIndexing.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_indexing.TestIndexing_param_8_...ne, -1), shape=(2, 3, 4)} testMethod=test_getitem>  parameter: {'shape': (2, 3, 4), 'indices': slice(None, None, -1)}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[[5.48813504, 7.15189366, 6.02763376, 5.44883183],
        [4.23654799, 6.45894113, 4.37587211, 8.91773001],
 ...        [0.20218397, 8.32619846, 7.78156751, 8.70012148],
        [9.78618342, 7.99158564, 4.61479362, 7.80529176]]]),)
kwargs_np = {}
args_cp = (array([[[5.48813504, 7.15189366, 6.02763376, 5.44883183],
        [4.23654799, 6.45894113, 4.37587211, 8.91773001],
 ...        [0.20218397, 8.32619846, 7.78156751, 8.70012148],
        [9.78618342, 7.99158564, 4.61479362, 7.80529176]]]),)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:909: in cupy._core.fusion.Fusion.__call__
    return self.new_fusion(*args)
cupy/_core/new_fusion.pyx:163: in cupy._core.new_fusion.Fusion.__call__
    return kernel.execute(args, shapes)
cupy/_core/_fusion_kernel.pyx:348: in cupy._core._fusion_kernel.FusedKernel.execute
    kern = _cuda_compile(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_fusion_kernel.pyx:52: in cupy._core._fusion_kernel._cuda_compile
    module = compile_with_cache(
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03d5b39190>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestIndexing_param_9_{indices=(slice(None, None, None), slice(None, None, -1)), shape=(2, 3, 4)}.test_getitem _

>   self._memo[key] = history.get_fusion(

cupy/_core/fusion.pyx:903: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   return_value = func(*function_args)

cupy/_core/fusion.pyx:744: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<_FusionVar float64 3-dim array>,), kwargs = {}

    @cupy.fuse()
    def impl_fuse_cp(*args, **kwargs):
>       return impl_cp(*args, **kwargs)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = <_FusionVar float64 3-dim array>

>   return lambda x: x[self.indices]
E   TypeError: '_FusionVarArray' object is not subscriptable

tests/cupy_tests/core_tests/fusion_tests/test_indexing.py:45: TypeError

During handling of the above exception, another exception occurred:

self = <<cupy_tests.core_tests.fusion_tests.test_indexing.TestIndexing_param_9_{indices=(slice(None, None, None), slice(None,...testMethod=test_getitem>  parameter: {'shape': (2, 3, 4), 'indices': (slice(None, None, None), slice(None, None, -1))}>
generate_inputs_kwargs = {'dtype': <class 'numpy.float64'>}
generate_inputs = <bound method TestIndexing.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_indexing.TestIndexing_param_9_...estMethod=test_getitem>  parameter: {'shape': (2, 3, 4), 'indices': (slice(None, None, None), slice(None, None, -1))}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[[5.48813504, 7.15189366, 6.02763376, 5.44883183],
        [4.23654799, 6.45894113, 4.37587211, 8.91773001],
 ...        [0.20218397, 8.32619846, 7.78156751, 8.70012148],
        [9.78618342, 7.99158564, 4.61479362, 7.80529176]]]),)
kwargs_np = {}
args_cp = (array([[[5.48813504, 7.15189366, 6.02763376, 5.44883183],
        [4.23654799, 6.45894113, 4.37587211, 8.91773001],
 ...        [0.20218397, 8.32619846, 7.78156751, 8.70012148],
        [9.78618342, 7.99158564, 4.61479362, 7.80529176]]]),)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:909: in cupy._core.fusion.Fusion.__call__
    return self.new_fusion(*args)
cupy/_core/new_fusion.pyx:163: in cupy._core.new_fusion.Fusion.__call__
    return kernel.execute(args, shapes)
cupy/_core/_fusion_kernel.pyx:348: in cupy._core._fusion_kernel.FusedKernel.execute
    kern = _cuda_compile(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_fusion_kernel.pyx:52: in cupy._core._fusion_kernel._cuda_compile
    module = compile_with_cache(
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03d5977df0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
____ TestIndexing_param_10_{indices=Ellipsis, shape=(2, 3, 4)}.test_getitem ____

>   self._memo[key] = history.get_fusion(

cupy/_core/fusion.pyx:903: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   return_value = func(*function_args)

cupy/_core/fusion.pyx:744: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<_FusionVar float64 3-dim array>,), kwargs = {}

    @cupy.fuse()
    def impl_fuse_cp(*args, **kwargs):
>       return impl_cp(*args, **kwargs)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = <_FusionVar float64 3-dim array>

>   return lambda x: x[self.indices]
E   TypeError: '_FusionVarArray' object is not subscriptable

tests/cupy_tests/core_tests/fusion_tests/test_indexing.py:45: TypeError

During handling of the above exception, another exception occurred:

self = <<cupy_tests.core_tests.fusion_tests.test_indexing.TestIndexing_param_10_{indices=Ellipsis, shape=(2, 3, 4)} testMethod=test_getitem>  parameter: {'shape': (2, 3, 4), 'indices': Ellipsis}>
generate_inputs_kwargs = {'dtype': <class 'numpy.float64'>}
generate_inputs = <bound method TestIndexing.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_indexing.TestIndexing_param_10_{indices=Ellipsis, shape=(2, 3, 4)} testMethod=test_getitem>  parameter: {'shape': (2, 3, 4), 'indices': Ellipsis}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[[5.48813504, 7.15189366, 6.02763376, 5.44883183],
        [4.23654799, 6.45894113, 4.37587211, 8.91773001],
 ...        [0.20218397, 8.32619846, 7.78156751, 8.70012148],
        [9.78618342, 7.99158564, 4.61479362, 7.80529176]]]),)
kwargs_np = {}
args_cp = (array([[[5.48813504, 7.15189366, 6.02763376, 5.44883183],
        [4.23654799, 6.45894113, 4.37587211, 8.91773001],
 ...        [0.20218397, 8.32619846, 7.78156751, 8.70012148],
        [9.78618342, 7.99158564, 4.61479362, 7.80529176]]]),)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:909: in cupy._core.fusion.Fusion.__call__
    return self.new_fusion(*args)
cupy/_core/new_fusion.pyx:163: in cupy._core.new_fusion.Fusion.__call__
    return kernel.execute(args, shapes)
cupy/_core/_fusion_kernel.pyx:348: in cupy._core._fusion_kernel.FusedKernel.execute
    kern = _cuda_compile(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_fusion_kernel.pyx:52: in cupy._core._fusion_kernel._cuda_compile
    module = compile_with_cache(
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03d5abf2b0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
__ TestIndexing_param_11_{indices=(Ellipsis,), shape=(2, 3, 4)}.test_getitem ___

>   self._memo[key] = history.get_fusion(

cupy/_core/fusion.pyx:903: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   return_value = func(*function_args)

cupy/_core/fusion.pyx:744: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<_FusionVar float64 3-dim array>,), kwargs = {}

    @cupy.fuse()
    def impl_fuse_cp(*args, **kwargs):
>       return impl_cp(*args, **kwargs)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = <_FusionVar float64 3-dim array>

>   return lambda x: x[self.indices]
E   TypeError: '_FusionVarArray' object is not subscriptable

tests/cupy_tests/core_tests/fusion_tests/test_indexing.py:45: TypeError

During handling of the above exception, another exception occurred:

self = <<cupy_tests.core_tests.fusion_tests.test_indexing.TestIndexing_param_11_{indices=(Ellipsis,), shape=(2, 3, 4)} testMethod=test_getitem>  parameter: {'shape': (2, 3, 4), 'indices': (Ellipsis,)}>
generate_inputs_kwargs = {'dtype': <class 'numpy.float64'>}
generate_inputs = <bound method TestIndexing.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_indexing.TestIndexing_param_11...dices=(Ellipsis,), shape=(2, 3, 4)} testMethod=test_getitem>  parameter: {'shape': (2, 3, 4), 'indices': (Ellipsis,)}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[[5.48813504, 7.15189366, 6.02763376, 5.44883183],
        [4.23654799, 6.45894113, 4.37587211, 8.91773001],
 ...        [0.20218397, 8.32619846, 7.78156751, 8.70012148],
        [9.78618342, 7.99158564, 4.61479362, 7.80529176]]]),)
kwargs_np = {}
args_cp = (array([[[5.48813504, 7.15189366, 6.02763376, 5.44883183],
        [4.23654799, 6.45894113, 4.37587211, 8.91773001],
 ...        [0.20218397, 8.32619846, 7.78156751, 8.70012148],
        [9.78618342, 7.99158564, 4.61479362, 7.80529176]]]),)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:909: in cupy._core.fusion.Fusion.__call__
    return self.new_fusion(*args)
cupy/_core/new_fusion.pyx:163: in cupy._core.new_fusion.Fusion.__call__
    return kernel.execute(args, shapes)
cupy/_core/_fusion_kernel.pyx:348: in cupy._core._fusion_kernel.FusedKernel.execute
    kern = _cuda_compile(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_fusion_kernel.pyx:52: in cupy._core._fusion_kernel._cuda_compile
    module = compile_with_cache(
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03d5bc53a0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
______ TestIndexing_param_12_{indices=None, shape=(2, 3, 4)}.test_getitem ______

>   self._memo[key] = history.get_fusion(

cupy/_core/fusion.pyx:903: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   return_value = func(*function_args)

cupy/_core/fusion.pyx:744: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<_FusionVar float64 3-dim array>,), kwargs = {}

    @cupy.fuse()
    def impl_fuse_cp(*args, **kwargs):
>       return impl_cp(*args, **kwargs)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = <_FusionVar float64 3-dim array>

>   return lambda x: x[self.indices]
E   TypeError: '_FusionVarArray' object is not subscriptable

tests/cupy_tests/core_tests/fusion_tests/test_indexing.py:45: TypeError

During handling of the above exception, another exception occurred:

self = <<cupy_tests.core_tests.fusion_tests.test_indexing.TestIndexing_param_12_{indices=None, shape=(2, 3, 4)} testMethod=test_getitem>  parameter: {'shape': (2, 3, 4), 'indices': None}>
generate_inputs_kwargs = {'dtype': <class 'numpy.float64'>}
generate_inputs = <bound method TestIndexing.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_indexing.TestIndexing_param_12_{indices=None, shape=(2, 3, 4)} testMethod=test_getitem>  parameter: {'shape': (2, 3, 4), 'indices': None}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[[5.48813504, 7.15189366, 6.02763376, 5.44883183],
        [4.23654799, 6.45894113, 4.37587211, 8.91773001],
 ...        [0.20218397, 8.32619846, 7.78156751, 8.70012148],
        [9.78618342, 7.99158564, 4.61479362, 7.80529176]]]),)
kwargs_np = {}
args_cp = (array([[[5.48813504, 7.15189366, 6.02763376, 5.44883183],
        [4.23654799, 6.45894113, 4.37587211, 8.91773001],
 ...        [0.20218397, 8.32619846, 7.78156751, 8.70012148],
        [9.78618342, 7.99158564, 4.61479362, 7.80529176]]]),)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:909: in cupy._core.fusion.Fusion.__call__
    return self.new_fusion(*args)
cupy/_core/new_fusion.pyx:163: in cupy._core.new_fusion.Fusion.__call__
    return kernel.execute(args, shapes)
cupy/_core/_fusion_kernel.pyx:348: in cupy._core._fusion_kernel.FusedKernel.execute
    kern = _cuda_compile(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_fusion_kernel.pyx:52: in cupy._core._fusion_kernel._cuda_compile
    module = compile_with_cache(
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03d59fe940>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
____ TestIndexing_param_13_{indices=(None,), shape=(2, 3, 4)}.test_getitem _____

>   self._memo[key] = history.get_fusion(

cupy/_core/fusion.pyx:903: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   return_value = func(*function_args)

cupy/_core/fusion.pyx:744: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<_FusionVar float64 3-dim array>,), kwargs = {}

    @cupy.fuse()
    def impl_fuse_cp(*args, **kwargs):
>       return impl_cp(*args, **kwargs)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = <_FusionVar float64 3-dim array>

>   return lambda x: x[self.indices]
E   TypeError: '_FusionVarArray' object is not subscriptable

tests/cupy_tests/core_tests/fusion_tests/test_indexing.py:45: TypeError

During handling of the above exception, another exception occurred:

self = <<cupy_tests.core_tests.fusion_tests.test_indexing.TestIndexing_param_13_{indices=(None,), shape=(2, 3, 4)} testMethod=test_getitem>  parameter: {'shape': (2, 3, 4), 'indices': (None,)}>
generate_inputs_kwargs = {'dtype': <class 'numpy.float64'>}
generate_inputs = <bound method TestIndexing.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_indexing.TestIndexing_param_13_{indices=(None,), shape=(2, 3, 4)} testMethod=test_getitem>  parameter: {'shape': (2, 3, 4), 'indices': (None,)}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[[5.48813504, 7.15189366, 6.02763376, 5.44883183],
        [4.23654799, 6.45894113, 4.37587211, 8.91773001],
 ...        [0.20218397, 8.32619846, 7.78156751, 8.70012148],
        [9.78618342, 7.99158564, 4.61479362, 7.80529176]]]),)
kwargs_np = {}
args_cp = (array([[[5.48813504, 7.15189366, 6.02763376, 5.44883183],
        [4.23654799, 6.45894113, 4.37587211, 8.91773001],
 ...        [0.20218397, 8.32619846, 7.78156751, 8.70012148],
        [9.78618342, 7.99158564, 4.61479362, 7.80529176]]]),)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:909: in cupy._core.fusion.Fusion.__call__
    return self.new_fusion(*args)
cupy/_core/new_fusion.pyx:163: in cupy._core.new_fusion.Fusion.__call__
    return kernel.execute(args, shapes)
cupy/_core/_fusion_kernel.pyx:348: in cupy._core._fusion_kernel.FusedKernel.execute
    kern = _cuda_compile(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_fusion_kernel.pyx:52: in cupy._core._fusion_kernel._cuda_compile
    module = compile_with_cache(
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03d59f4cd0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestIndexing_param_14_{indices=(None, None, None), shape=(2, 3, 4)}.test_getitem _

>   self._memo[key] = history.get_fusion(

cupy/_core/fusion.pyx:903: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   return_value = func(*function_args)

cupy/_core/fusion.pyx:744: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<_FusionVar float64 3-dim array>,), kwargs = {}

    @cupy.fuse()
    def impl_fuse_cp(*args, **kwargs):
>       return impl_cp(*args, **kwargs)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = <_FusionVar float64 3-dim array>

>   return lambda x: x[self.indices]
E   TypeError: '_FusionVarArray' object is not subscriptable

tests/cupy_tests/core_tests/fusion_tests/test_indexing.py:45: TypeError

During handling of the above exception, another exception occurred:

self = <<cupy_tests.core_tests.fusion_tests.test_indexing.TestIndexing_param_14_{indices=(None, None, None), shape=(2, 3, 4)} testMethod=test_getitem>  parameter: {'shape': (2, 3, 4), 'indices': (None, None, None)}>
generate_inputs_kwargs = {'dtype': <class 'numpy.float64'>}
generate_inputs = <bound method TestIndexing.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_indexing.TestIndexing_param_14...one, None), shape=(2, 3, 4)} testMethod=test_getitem>  parameter: {'shape': (2, 3, 4), 'indices': (None, None, None)}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[[5.48813504, 7.15189366, 6.02763376, 5.44883183],
        [4.23654799, 6.45894113, 4.37587211, 8.91773001],
 ...        [0.20218397, 8.32619846, 7.78156751, 8.70012148],
        [9.78618342, 7.99158564, 4.61479362, 7.80529176]]]),)
kwargs_np = {}
args_cp = (array([[[5.48813504, 7.15189366, 6.02763376, 5.44883183],
        [4.23654799, 6.45894113, 4.37587211, 8.91773001],
 ...        [0.20218397, 8.32619846, 7.78156751, 8.70012148],
        [9.78618342, 7.99158564, 4.61479362, 7.80529176]]]),)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:909: in cupy._core.fusion.Fusion.__call__
    return self.new_fusion(*args)
cupy/_core/new_fusion.pyx:163: in cupy._core.new_fusion.Fusion.__call__
    return kernel.execute(args, shapes)
cupy/_core/_fusion_kernel.pyx:348: in cupy._core._fusion_kernel.FusedKernel.execute
    kern = _cuda_compile(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_fusion_kernel.pyx:52: in cupy._core._fusion_kernel._cuda_compile
    module = compile_with_cache(
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03d59e0c40>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestIndexing_param_15_{indices=(slice(None, None, None), 0, slice(None, None, -1)), shape=(2, 3, 4)}.test_getitem _

>   self._memo[key] = history.get_fusion(

cupy/_core/fusion.pyx:903: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   return_value = func(*function_args)

cupy/_core/fusion.pyx:744: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<_FusionVar float64 3-dim array>,), kwargs = {}

    @cupy.fuse()
    def impl_fuse_cp(*args, **kwargs):
>       return impl_cp(*args, **kwargs)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = <_FusionVar float64 3-dim array>

>   return lambda x: x[self.indices]
E   TypeError: '_FusionVarArray' object is not subscriptable

tests/cupy_tests/core_tests/fusion_tests/test_indexing.py:45: TypeError

During handling of the above exception, another exception occurred:

self = <<cupy_tests.core_tests.fusion_tests.test_indexing.TestIndexing_param_15_{indices=(slice(None, None, None), 0, slice(N...tMethod=test_getitem>  parameter: {'shape': (2, 3, 4), 'indices': (slice(None, None, None), 0, slice(None, None, -1))}>
generate_inputs_kwargs = {'dtype': <class 'numpy.float64'>}
generate_inputs = <bound method TestIndexing.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_indexing.TestIndexing_param_15...Method=test_getitem>  parameter: {'shape': (2, 3, 4), 'indices': (slice(None, None, None), 0, slice(None, None, -1))}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[[5.48813504, 7.15189366, 6.02763376, 5.44883183],
        [4.23654799, 6.45894113, 4.37587211, 8.91773001],
 ...        [0.20218397, 8.32619846, 7.78156751, 8.70012148],
        [9.78618342, 7.99158564, 4.61479362, 7.80529176]]]),)
kwargs_np = {}
args_cp = (array([[[5.48813504, 7.15189366, 6.02763376, 5.44883183],
        [4.23654799, 6.45894113, 4.37587211, 8.91773001],
 ...        [0.20218397, 8.32619846, 7.78156751, 8.70012148],
        [9.78618342, 7.99158564, 4.61479362, 7.80529176]]]),)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:909: in cupy._core.fusion.Fusion.__call__
    return self.new_fusion(*args)
cupy/_core/new_fusion.pyx:163: in cupy._core.new_fusion.Fusion.__call__
    return kernel.execute(args, shapes)
cupy/_core/_fusion_kernel.pyx:348: in cupy._core._fusion_kernel.FusedKernel.execute
    kern = _cuda_compile(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_fusion_kernel.pyx:52: in cupy._core._fusion_kernel._cuda_compile
    module = compile_with_cache(
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4aaf7c0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestIndexing_param_16_{indices=(1, None, slice(None, None, -1), None, 2), shape=(2, 3, 4)}.test_getitem _

>   self._memo[key] = history.get_fusion(

cupy/_core/fusion.pyx:903: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   return_value = func(*function_args)

cupy/_core/fusion.pyx:744: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<_FusionVar float64 3-dim array>,), kwargs = {}

    @cupy.fuse()
    def impl_fuse_cp(*args, **kwargs):
>       return impl_cp(*args, **kwargs)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = <_FusionVar float64 3-dim array>

>   return lambda x: x[self.indices]
E   TypeError: '_FusionVarArray' object is not subscriptable

tests/cupy_tests/core_tests/fusion_tests/test_indexing.py:45: TypeError

During handling of the above exception, another exception occurred:

self = <<cupy_tests.core_tests.fusion_tests.test_indexing.TestIndexing_param_16_{indices=(1, None, slice(None, None, -1), Non...3, 4)} testMethod=test_getitem>  parameter: {'shape': (2, 3, 4), 'indices': (1, None, slice(None, None, -1), None, 2)}>
generate_inputs_kwargs = {'dtype': <class 'numpy.float64'>}
generate_inputs = <bound method TestIndexing.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_indexing.TestIndexing_param_16..., 4)} testMethod=test_getitem>  parameter: {'shape': (2, 3, 4), 'indices': (1, None, slice(None, None, -1), None, 2)}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[[5.48813504, 7.15189366, 6.02763376, 5.44883183],
        [4.23654799, 6.45894113, 4.37587211, 8.91773001],
 ...        [0.20218397, 8.32619846, 7.78156751, 8.70012148],
        [9.78618342, 7.99158564, 4.61479362, 7.80529176]]]),)
kwargs_np = {}
args_cp = (array([[[5.48813504, 7.15189366, 6.02763376, 5.44883183],
        [4.23654799, 6.45894113, 4.37587211, 8.91773001],
 ...        [0.20218397, 8.32619846, 7.78156751, 8.70012148],
        [9.78618342, 7.99158564, 4.61479362, 7.80529176]]]),)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:909: in cupy._core.fusion.Fusion.__call__
    return self.new_fusion(*args)
cupy/_core/new_fusion.pyx:163: in cupy._core.new_fusion.Fusion.__call__
    return kernel.execute(args, shapes)
cupy/_core/_fusion_kernel.pyx:348: in cupy._core._fusion_kernel.FusedKernel.execute
    kern = _cuda_compile(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_fusion_kernel.pyx:52: in cupy._core._fusion_kernel._cuda_compile
    module = compile_with_cache(
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03d59fe7f0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestIndexing_param_17_{indices=(slice(None, None, None), None), shape=(2,)}.test_getitem _

>   self._memo[key] = history.get_fusion(

cupy/_core/fusion.pyx:903: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   return_value = func(*function_args)

cupy/_core/fusion.pyx:744: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<_FusionVar float64 1-dim array>,), kwargs = {}

    @cupy.fuse()
    def impl_fuse_cp(*args, **kwargs):
>       return impl_cp(*args, **kwargs)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = <_FusionVar float64 1-dim array>

>   return lambda x: x[self.indices]
E   TypeError: '_FusionVarArray' object is not subscriptable

tests/cupy_tests/core_tests/fusion_tests/test_indexing.py:45: TypeError

During handling of the above exception, another exception occurred:

self = <<cupy_tests.core_tests.fusion_tests.test_indexing.TestIndexing_param_17_{indices=(slice(None, None, None), None), shape=(2,)} testMethod=test_getitem>  parameter: {'shape': (2,), 'indices': (slice(None, None, None), None)}>
generate_inputs_kwargs = {'dtype': <class 'numpy.float64'>}
generate_inputs = <bound method TestIndexing.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_indexing.TestIndexing_param_17..., None), shape=(2,)} testMethod=test_getitem>  parameter: {'shape': (2,), 'indices': (slice(None, None, None), None)}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([5.48813504, 7.15189366]),), kwargs_np = {}
args_cp = (array([5.48813504, 7.15189366]),), kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:909: in cupy._core.fusion.Fusion.__call__
    return self.new_fusion(*args)
cupy/_core/new_fusion.pyx:163: in cupy._core.new_fusion.Fusion.__call__
    return kernel.execute(args, shapes)
cupy/_core/_fusion_kernel.pyx:348: in cupy._core._fusion_kernel.FusedKernel.execute
    kern = _cuda_compile(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_fusion_kernel.pyx:52: in cupy._core._fusion_kernel._cuda_compile
    module = compile_with_cache(
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03d59d9430>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestIndexing_param_18_{indices=(Ellipsis, 2), shape=(2, 3, 4)}.test_getitem __

>   self._memo[key] = history.get_fusion(

cupy/_core/fusion.pyx:903: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   return_value = func(*function_args)

cupy/_core/fusion.pyx:744: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<_FusionVar float64 3-dim array>,), kwargs = {}

    @cupy.fuse()
    def impl_fuse_cp(*args, **kwargs):
>       return impl_cp(*args, **kwargs)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = <_FusionVar float64 3-dim array>

>   return lambda x: x[self.indices]
E   TypeError: '_FusionVarArray' object is not subscriptable

tests/cupy_tests/core_tests/fusion_tests/test_indexing.py:45: TypeError

During handling of the above exception, another exception occurred:

self = <<cupy_tests.core_tests.fusion_tests.test_indexing.TestIndexing_param_18_{indices=(Ellipsis, 2), shape=(2, 3, 4)} testMethod=test_getitem>  parameter: {'shape': (2, 3, 4), 'indices': (Ellipsis, 2)}>
generate_inputs_kwargs = {'dtype': <class 'numpy.float64'>}
generate_inputs = <bound method TestIndexing.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_indexing.TestIndexing_param_18...s=(Ellipsis, 2), shape=(2, 3, 4)} testMethod=test_getitem>  parameter: {'shape': (2, 3, 4), 'indices': (Ellipsis, 2)}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[[5.48813504, 7.15189366, 6.02763376, 5.44883183],
        [4.23654799, 6.45894113, 4.37587211, 8.91773001],
 ...        [0.20218397, 8.32619846, 7.78156751, 8.70012148],
        [9.78618342, 7.99158564, 4.61479362, 7.80529176]]]),)
kwargs_np = {}
args_cp = (array([[[5.48813504, 7.15189366, 6.02763376, 5.44883183],
        [4.23654799, 6.45894113, 4.37587211, 8.91773001],
 ...        [0.20218397, 8.32619846, 7.78156751, 8.70012148],
        [9.78618342, 7.99158564, 4.61479362, 7.80529176]]]),)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:909: in cupy._core.fusion.Fusion.__call__
    return self.new_fusion(*args)
cupy/_core/new_fusion.pyx:163: in cupy._core.new_fusion.Fusion.__call__
    return kernel.execute(args, shapes)
cupy/_core/_fusion_kernel.pyx:348: in cupy._core._fusion_kernel.FusedKernel.execute
    kern = _cuda_compile(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_fusion_kernel.pyx:52: in cupy._core._fusion_kernel._cuda_compile
    module = compile_with_cache(
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03d597eb80>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestIndexing_param_19_{indices=(1, Ellipsis), shape=(2, 3, 4)}.test_getitem __

>   self._memo[key] = history.get_fusion(

cupy/_core/fusion.pyx:903: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   return_value = func(*function_args)

cupy/_core/fusion.pyx:744: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<_FusionVar float64 3-dim array>,), kwargs = {}

    @cupy.fuse()
    def impl_fuse_cp(*args, **kwargs):
>       return impl_cp(*args, **kwargs)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = <_FusionVar float64 3-dim array>

>   return lambda x: x[self.indices]
E   TypeError: '_FusionVarArray' object is not subscriptable

tests/cupy_tests/core_tests/fusion_tests/test_indexing.py:45: TypeError

During handling of the above exception, another exception occurred:

self = <<cupy_tests.core_tests.fusion_tests.test_indexing.TestIndexing_param_19_{indices=(1, Ellipsis), shape=(2, 3, 4)} testMethod=test_getitem>  parameter: {'shape': (2, 3, 4), 'indices': (1, Ellipsis)}>
generate_inputs_kwargs = {'dtype': <class 'numpy.float64'>}
generate_inputs = <bound method TestIndexing.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_indexing.TestIndexing_param_19...s=(1, Ellipsis), shape=(2, 3, 4)} testMethod=test_getitem>  parameter: {'shape': (2, 3, 4), 'indices': (1, Ellipsis)}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[[5.48813504, 7.15189366, 6.02763376, 5.44883183],
        [4.23654799, 6.45894113, 4.37587211, 8.91773001],
 ...        [0.20218397, 8.32619846, 7.78156751, 8.70012148],
        [9.78618342, 7.99158564, 4.61479362, 7.80529176]]]),)
kwargs_np = {}
args_cp = (array([[[5.48813504, 7.15189366, 6.02763376, 5.44883183],
        [4.23654799, 6.45894113, 4.37587211, 8.91773001],
 ...        [0.20218397, 8.32619846, 7.78156751, 8.70012148],
        [9.78618342, 7.99158564, 4.61479362, 7.80529176]]]),)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:909: in cupy._core.fusion.Fusion.__call__
    return self.new_fusion(*args)
cupy/_core/new_fusion.pyx:163: in cupy._core.new_fusion.Fusion.__call__
    return kernel.execute(args, shapes)
cupy/_core/_fusion_kernel.pyx:348: in cupy._core._fusion_kernel.FusedKernel.execute
    kern = _cuda_compile(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_fusion_kernel.pyx:52: in cupy._core._fusion_kernel._cuda_compile
    module = compile_with_cache(
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03d5bea520>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestIndexing_param_20_{indices=(1, Ellipsis, 3), shape=(2, 3, 4, 5)}.test_getitem _

>   self._memo[key] = history.get_fusion(

cupy/_core/fusion.pyx:903: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   return_value = func(*function_args)

cupy/_core/fusion.pyx:744: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<_FusionVar float64 4-dim array>,), kwargs = {}

    @cupy.fuse()
    def impl_fuse_cp(*args, **kwargs):
>       return impl_cp(*args, **kwargs)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = <_FusionVar float64 4-dim array>

>   return lambda x: x[self.indices]
E   TypeError: '_FusionVarArray' object is not subscriptable

tests/cupy_tests/core_tests/fusion_tests/test_indexing.py:45: TypeError

During handling of the above exception, another exception occurred:

self = <<cupy_tests.core_tests.fusion_tests.test_indexing.TestIndexing_param_20_{indices=(1, Ellipsis, 3), shape=(2, 3, 4, 5)} testMethod=test_getitem>  parameter: {'shape': (2, 3, 4, 5), 'indices': (1, Ellipsis, 3)}>
generate_inputs_kwargs = {'dtype': <class 'numpy.float64'>}
generate_inputs = <bound method TestIndexing.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_indexing.TestIndexing_param_20...is, 3), shape=(2, 3, 4, 5)} testMethod=test_getitem>  parameter: {'shape': (2, 3, 4, 5), 'indices': (1, Ellipsis, 3)}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[[[5.48813504, 7.15189366, 6.02763376, 5.44883183, 4.23654799],
         [6.45894113, 4.37587211, 8.91773001, ...08672, 6.99479275, 2.97436951, 8.1379782 ],
         [3.96505741, 8.81103197, 5.81272873, 8.81735362, 6.9253159 ]]]]),)
kwargs_np = {}
args_cp = (array([[[[5.48813504, 7.15189366, 6.02763376, 5.44883183, 4.23654799],
         [6.45894113, 4.37587211, 8.91773001, ...08672, 6.99479275, 2.97436951, 8.1379782 ],
         [3.96505741, 8.81103197, 5.81272873, 8.81735362, 6.9253159 ]]]]),)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:909: in cupy._core.fusion.Fusion.__call__
    return self.new_fusion(*args)
cupy/_core/new_fusion.pyx:163: in cupy._core.new_fusion.Fusion.__call__
    return kernel.execute(args, shapes)
cupy/_core/_fusion_kernel.pyx:348: in cupy._core._fusion_kernel.FusedKernel.execute
    kern = _cuda_compile(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_fusion_kernel.pyx:52: in cupy._core._fusion_kernel._cuda_compile
    module = compile_with_cache(
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03cd928250>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_______________ TestIndexingCombination.test_indexing_and_add_1 ________________

self = <cupy_tests.core_tests.fusion_tests.test_indexing.TestIndexingCombination testMethod=test_indexing_and_add_1>
generate_inputs_kwargs = {'dtype1': <class 'numpy.uint16'>, 'dtype2': <class 'numpy.int16'>}
generate_inputs = <bound method TestIndexingCombination.generate_inputs of <cupy_tests.core_tests.fusion_tests.test_indexing.TestIndexingCombination testMethod=test_indexing_and_add_1>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[5, 7, 6, 5],
       [4, 6, 4, 8],
       [9, 3, 7, 5]], dtype=uint16), array([4, 7, 0, 3], dtype=int16), array([4], dtype=uint16))
kwargs_np = {}
args_cp = (array([[5, 7, 6, 5],
       [4, 6, 4, 8],
       [9, 3, 7, 5]], dtype=uint16), array([4, 7, 0, 3], dtype=int16), array([4], dtype=uint16))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
>       result_cp = call(impl_cp, args_cp, kwargs_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:121: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
tests/cupy_tests/core_tests/fusion_tests/test_indexing.py:81: in <lambda>
    return lambda x, y, z: x + y[1]
cupy/_core/core.pyx:1070: in cupy._core.core.ndarray.__add__
    return _math._add(x, y)
cupy/_core/_kernel.pyx:1104: in cupy._core._kernel.ufunc.__call__
    kern = self._get_ufunc_kernel(dev_id, op, arginfos)
cupy/_core/_kernel.pyx:1127: in cupy._core._kernel.ufunc._get_ufunc_kernel
    kern = _get_ufunc_kernel(
cupy/_core/_kernel.pyx:901: in cupy._core._kernel._get_ufunc_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03d5b7c9d0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.uint16'>, 'dtype2': <class 'numpy.int16'>}
_______________ TestIndexingCombination.test_indexing_and_add_2 ________________

self = <cupy_tests.core_tests.fusion_tests.test_indexing.TestIndexingCombination testMethod=test_indexing_and_add_2>
generate_inputs_kwargs = {'dtype1': <class 'numpy.float16'>, 'dtype2': <class 'numpy.int32'>}
generate_inputs = <bound method TestIndexingCombination.generate_inputs of <cupy_tests.core_tests.fusion_tests.test_indexing.TestIndexingCombination testMethod=test_indexing_and_add_2>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[5.49 , 7.152, 6.027, 5.45 ],
       [4.24 , 6.457, 4.375, 8.914],
       [9.63 , 3.834, 7.918, 5.29 ]], dtype=float16), array([4, 7, 0, 3], dtype=int32), array([4.36], dtype=float16))
kwargs_np = {}
args_cp = (array([[5.49 , 7.152, 6.027, 5.45 ],
       [4.24 , 6.457, 4.375, 8.914],
       [9.63 , 3.834, 7.918, 5.29 ]], dtype=float16), array([4, 7, 0, 3], dtype=int32), array([4.36], dtype=float16))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
>       result_cp = call(impl_cp, args_cp, kwargs_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:121: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
tests/cupy_tests/core_tests/fusion_tests/test_indexing.py:87: in <lambda>
    return lambda x, y, z: x + z[0] + y
cupy/_core/core.pyx:1070: in cupy._core.core.ndarray.__add__
    return _math._add(x, y)
cupy/_core/_kernel.pyx:1104: in cupy._core._kernel.ufunc.__call__
    kern = self._get_ufunc_kernel(dev_id, op, arginfos)
cupy/_core/_kernel.pyx:1127: in cupy._core._kernel.ufunc._get_ufunc_kernel
    kern = _get_ufunc_kernel(
cupy/_core/_kernel.pyx:901: in cupy._core._kernel._get_ufunc_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03d59faa30>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.float16'>, 'dtype2': <class 'numpy.int32'>}
_______________ TestIndexingCombination.test_indexing_and_add_3 ________________

>   self._memo[key] = history.get_fusion(

cupy/_core/fusion.pyx:903: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   return_value = func(*function_args)

cupy/_core/fusion.pyx:744: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<_FusionVar uint64 2-dim array>, <_FusionVar uint8 1-dim array>, <_FusionVar uint64 1-dim array>)
kwargs = {}

    @cupy.fuse()
    def impl_fuse_cp(*args, **kwargs):
>       return impl_cp(*args, **kwargs)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = <_FusionVar uint64 2-dim array>, y = <_FusionVar uint8 1-dim array>
z = <_FusionVar uint64 1-dim array>

>   return lambda x, y, z: x + x[0] + x[1]
E   TypeError: '_FusionVarArray' object is not subscriptable

tests/cupy_tests/core_tests/fusion_tests/test_indexing.py:93: TypeError

During handling of the above exception, another exception occurred:

self = <cupy_tests.core_tests.fusion_tests.test_indexing.TestIndexingCombination testMethod=test_indexing_and_add_3>
generate_inputs_kwargs = {'dtype1': <class 'numpy.ulonglong'>, 'dtype2': <class 'numpy.uint8'>}
generate_inputs = <bound method TestIndexingCombination.generate_inputs of <cupy_tests.core_tests.fusion_tests.test_indexing.TestIndexingCombination testMethod=test_indexing_and_add_3>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[5, 7, 6, 5],
       [4, 6, 4, 8],
       [9, 3, 7, 5]], dtype=uint64), array([4, 7, 0, 3], dtype=uint8), array([4], dtype=uint64))
kwargs_np = {}
args_cp = (array([[5, 7, 6, 5],
       [4, 6, 4, 8],
       [9, 3, 7, 5]], dtype=uint64), array([4, 7, 0, 3], dtype=uint8), array([4], dtype=uint64))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:909: in cupy._core.fusion.Fusion.__call__
    return self.new_fusion(*args)
cupy/_core/new_fusion.pyx:163: in cupy._core.new_fusion.Fusion.__call__
    return kernel.execute(args, shapes)
cupy/_core/_fusion_kernel.pyx:348: in cupy._core._fusion_kernel.FusedKernel.execute
    kern = _cuda_compile(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_fusion_kernel.pyx:52: in cupy._core._fusion_kernel._cuda_compile
    module = compile_with_cache(
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03d5b5fdc0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.ulonglong'>, 'dtype2': <class 'numpy.uint8'>}
_______________ TestIndexingCombination.test_indexing_and_add_4 ________________

>   self._memo[key] = history.get_fusion(

cupy/_core/fusion.pyx:903: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   return_value = func(*function_args)

cupy/_core/fusion.pyx:744: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<_FusionVar uint64 2-dim array>, <_FusionVar uint64 1-dim array>, <_FusionVar uint64 1-dim array>)
kwargs = {}

    @cupy.fuse()
    def impl_fuse_cp(*args, **kwargs):
>       return impl_cp(*args, **kwargs)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = <_FusionVar uint64 2-dim array>, y = <_FusionVar uint64 1-dim array>
z = <_FusionVar uint64 1-dim array>

>   return lambda x, y, z: x + x[0, 1] + x[1] + x + x[2, 1]
E   TypeError: '_FusionVarArray' object is not subscriptable

tests/cupy_tests/core_tests/fusion_tests/test_indexing.py:99: TypeError

During handling of the above exception, another exception occurred:

self = <cupy_tests.core_tests.fusion_tests.test_indexing.TestIndexingCombination testMethod=test_indexing_and_add_4>
generate_inputs_kwargs = {'dtype1': <class 'numpy.uint64'>, 'dtype2': <class 'numpy.uint64'>}
generate_inputs = <bound method TestIndexingCombination.generate_inputs of <cupy_tests.core_tests.fusion_tests.test_indexing.TestIndexingCombination testMethod=test_indexing_and_add_4>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[5, 7, 6, 5],
       [4, 6, 4, 8],
       [9, 3, 7, 5]], dtype=uint64), array([4, 7, 0, 3], dtype=uint64), array([4], dtype=uint64))
kwargs_np = {}
args_cp = (array([[5, 7, 6, 5],
       [4, 6, 4, 8],
       [9, 3, 7, 5]], dtype=uint64), array([4, 7, 0, 3], dtype=uint64), array([4], dtype=uint64))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:909: in cupy._core.fusion.Fusion.__call__
    return self.new_fusion(*args)
cupy/_core/new_fusion.pyx:163: in cupy._core.new_fusion.Fusion.__call__
    return kernel.execute(args, shapes)
cupy/_core/_fusion_kernel.pyx:348: in cupy._core._fusion_kernel.FusedKernel.execute
    kern = _cuda_compile(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_fusion_kernel.pyx:52: in cupy._core._fusion_kernel._cuda_compile
    module = compile_with_cache(
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4e02490>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.uint64'>, 'dtype2': <class 'numpy.uint64'>}
________________ TestIndexingCombination.test_indexing_twice_1 _________________

>   self._memo[key] = history.get_fusion(

cupy/_core/fusion.pyx:903: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   return_value = func(*function_args)

cupy/_core/fusion.pyx:744: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<_FusionVar int8 2-dim array>, <_FusionVar uint8 1-dim array>, <_FusionVar int8 1-dim array>)
kwargs = {}

    @cupy.fuse()
    def impl_fuse_cp(*args, **kwargs):
>       return impl_cp(*args, **kwargs)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = <_FusionVar int8 2-dim array>, y = <_FusionVar uint8 1-dim array>
z = <_FusionVar int8 1-dim array>

>   return lambda x, y, z: x[0][1]
E   TypeError: '_FusionVarArray' object is not subscriptable

tests/cupy_tests/core_tests/fusion_tests/test_indexing.py:105: TypeError

During handling of the above exception, another exception occurred:

self = <cupy_tests.core_tests.fusion_tests.test_indexing.TestIndexingCombination testMethod=test_indexing_twice_1>
generate_inputs_kwargs = {'dtype1': <class 'numpy.int8'>, 'dtype2': <class 'numpy.uint8'>}
generate_inputs = <bound method TestIndexingCombination.generate_inputs of <cupy_tests.core_tests.fusion_tests.test_indexing.TestIndexingCombination testMethod=test_indexing_twice_1>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[5, 7, 6, 5],
       [4, 6, 4, 8],
       [9, 3, 7, 5]], dtype=int8), array([4, 7, 0, 3], dtype=uint8), array([4], dtype=int8))
kwargs_np = {}
args_cp = (array([[5, 7, 6, 5],
       [4, 6, 4, 8],
       [9, 3, 7, 5]], dtype=int8), array([4, 7, 0, 3], dtype=uint8), array([4], dtype=int8))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:909: in cupy._core.fusion.Fusion.__call__
    return self.new_fusion(*args)
cupy/_core/new_fusion.pyx:163: in cupy._core.new_fusion.Fusion.__call__
    return kernel.execute(args, shapes)
cupy/_core/_fusion_kernel.pyx:348: in cupy._core._fusion_kernel.FusedKernel.execute
    kern = _cuda_compile(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_fusion_kernel.pyx:52: in cupy._core._fusion_kernel._cuda_compile
    module = compile_with_cache(
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03d59e9a60>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.int8'>, 'dtype2': <class 'numpy.uint8'>}
________________ TestIndexingCombination.test_indexing_twice_2 _________________

self = <cupy_tests.core_tests.fusion_tests.test_indexing.TestIndexingCombination testMethod=test_indexing_twice_2>
generate_inputs_kwargs = {'dtype1': <class 'numpy.uint32'>, 'dtype2': <class 'numpy.float32'>}
generate_inputs = <bound method TestIndexingCombination.generate_inputs of <cupy_tests.core_tests.fusion_tests.test_indexing.TestIndexingCombination testMethod=test_indexing_twice_2>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[5, 7, 6, 5],
       [4, 6, 4, 8],
       [9, 3, 7, 5]], dtype=uint32), array([4.1702199e+00, 7.2032452e+00, 1.1437482e-03, 3.0233257e+00],
      dtype=float32), array([4], dtype=uint32))
kwargs_np = {}
args_cp = (array([[5, 7, 6, 5],
       [4, 6, 4, 8],
       [9, 3, 7, 5]], dtype=uint32), array([4.1702199e+00, 7.2032452e+00, 1.1437482e-03, 3.0233257e+00],
      dtype=float32), array([4], dtype=uint32))
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
>       result_cp = call(impl_cp, args_cp, kwargs_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:121: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
tests/cupy_tests/core_tests/fusion_tests/test_indexing.py:111: in <lambda>
    return lambda x, y, z: x[0][1] + x[1][0]
cupy/_core/core.pyx:1070: in cupy._core.core.ndarray.__add__
    return _math._add(x, y)
cupy/_core/_kernel.pyx:1104: in cupy._core._kernel.ufunc.__call__
    kern = self._get_ufunc_kernel(dev_id, op, arginfos)
cupy/_core/_kernel.pyx:1127: in cupy._core._kernel.ufunc._get_ufunc_kernel
    kern = _get_ufunc_kernel(
cupy/_core/_kernel.pyx:901: in cupy._core._kernel._get_ufunc_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03cd9322b0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
{'dtype1': <class 'numpy.uint32'>, 'dtype2': <class 'numpy.float32'>}
___________________ TestFusionCache.test_dtype_combinations ____________________

self = <cupy_tests.core_tests.fusion_tests.test_kernel_cache.TestFusionCache testMethod=test_dtype_combinations>

    def new_impl(self):
        target = 'cupy._core._fusion_trace.TraceImpl'
        with mock.patch(target, CreateMock(target)) as m:
            numpy_result = impl(self, numpy, m)
        with mock.patch(target, CreateMock(target)) as m:
>           cupy_result = impl(self, cupy, m)

tests/cupy_tests/core_tests/fusion_tests/test_kernel_cache.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/test_kernel_cache.py:76: in test_dtype_combinations
    result.append(f(x, y))
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03cd930f70>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
________________ TestFusionCache.test_memoryspace_combinations _________________

self = <cupy_tests.core_tests.fusion_tests.test_kernel_cache.TestFusionCache testMethod=test_memoryspace_combinations>

    def new_impl(self):
        target = 'cupy._core._fusion_trace.TraceImpl'
        with mock.patch(target, CreateMock(target)) as m:
            numpy_result = impl(self, numpy, m)
        with mock.patch(target, CreateMock(target)) as m:
>           cupy_result = impl(self, cupy, m)

tests/cupy_tests/core_tests/fusion_tests/test_kernel_cache.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/test_kernel_cache.py:159: in test_memoryspace_combinations
    result.append(f(x, y))
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03d5a74760>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
_______________________ TestFusionCache.test_same_array ________________________

self = <cupy_tests.core_tests.fusion_tests.test_kernel_cache.TestFusionCache testMethod=test_same_array>

    def new_impl(self):
        target = 'cupy._core._fusion_trace.TraceImpl'
        with mock.patch(target, CreateMock(target)) as m:
            numpy_result = impl(self, numpy, m)
        with mock.patch(target, CreateMock(target)) as m:
>           cupy_result = impl(self, cupy, m)

tests/cupy_tests/core_tests/fusion_tests/test_kernel_cache.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/test_kernel_cache.py:57: in test_same_array
    result.append(f(x, y))
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4714850>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
___________________ TestFusionCache.test_shape_combinations ____________________

self = <cupy_tests.core_tests.fusion_tests.test_kernel_cache.TestFusionCache testMethod=test_shape_combinations>

    def new_impl(self):
        target = 'cupy._core._fusion_trace.TraceImpl'
        with mock.patch(target, CreateMock(target)) as m:
            numpy_result = impl(self, numpy, m)
        with mock.patch(target, CreateMock(target)) as m:
>           cupy_result = impl(self, cupy, m)

tests/cupy_tests/core_tests/fusion_tests/test_kernel_cache.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/test_kernel_cache.py:112: in test_shape_combinations
    result.append(f(x, y))
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03d5980bb0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
_______________ TestFusionInplaceUpdate.test_iadd_multiple_times _______________

self = <cupy_tests.core_tests.fusion_tests.test_misc.TestFusionInplaceUpdate testMethod=test_iadd_multiple_times>
generate_inputs_kwargs = {'dtype': <class 'numpy.float64'>}
generate_inputs = <bound method FusionTestBase.generate_inputs of <cupy_tests.core_tests.fusion_tests.test_misc.TestFusionInplaceUpdate testMethod=test_iadd_multiple_times>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = [array([[17.99879518, 28.76162847,  6.03106501, 14.51880901],
       [ 8.63922472,  9.22909897,  9.96367845, 19.284551...385948e-01, 1.86260211e+00, 3.45560727e+00],
       [3.96767474e+00, 5.38816734e+00, 4.19194514e+00, 6.85219500e+00]])]
kwargs_np = {}
args_cp = [array([[17.99879518, 28.76162847,  6.03106501, 14.51880901],
       [ 8.63922472,  9.22909897,  9.96367845, 19.284551...385948e-01, 1.86260211e+00, 3.45560727e+00],
       [3.96767474e+00, 5.38816734e+00, 4.19194514e+00, 6.85219500e+00]])]
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03d5b49b50>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
__________________ TestFusionInplaceUpdate.test_outarg_mixed ___________________

self = <cupy_tests.core_tests.fusion_tests.test_misc.TestFusionInplaceUpdate testMethod=test_outarg_mixed>
generate_inputs_kwargs = {'dtype': <class 'numpy.float64'>}
generate_inputs = <bound method FusionTestBase.generate_inputs of <cupy_tests.core_tests.fusion_tests.test_misc.TestFusionInplaceUpdate testMethod=test_outarg_mixed>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = [array([[5.48813504, 7.15189366, 6.02763376, 5.44883183],
       [4.23654799, 6.45894113, 4.37587211, 8.91773001],
   ...16572265,  47.68201601,  27.29876539, 110.34208114],
       [131.09959555,  35.36321052,  95.87153288,  64.21389488]])]
kwargs_np = {}
args_cp = [array([[5.48813504, 7.15189366, 6.02763376, 5.44883183],
       [4.23654799, 6.45894113, 4.37587211, 8.91773001],
   ...16572265,  47.68201601,  27.29876539, 110.34208114],
       [131.09959555,  35.36321052,  95.87153288,  64.21389488]])]
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4742f40>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
________ TestFusionTuple.test_multiple_outputdifferent_type_same_ufunc _________

self = <cupy_tests.core_tests.fusion_tests.test_misc.TestFusionTuple testMethod=test_multiple_outputdifferent_type_same_ufunc>
generate_inputs_kwargs = {'dtype': <class 'numpy.float64'>}
generate_inputs = <bound method FusionTestBase.generate_inputs of <cupy_tests.core_tests.fusion_tests.test_misc.TestFusionTuple testMethod=test_multiple_outputdifferent_type_same_ufunc>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = [array([[5.48813504, 7.15189366, 6.02763376, 5.44883183],
       [4.23654799, 6.45894113, 4.37587211, 8.91773001],
   ...3],
       [4.20367802, 3.30334821, 2.04648634, 6.19270966],
       [2.99654674, 2.66827275, 6.21133833, 5.29142094]])]
kwargs_np = {}
args_cp = [array([[5.48813504, 7.15189366, 6.02763376, 5.44883183],
       [4.23654799, 6.45894113, 4.37587211, 8.91773001],
   ...3],
       [4.20367802, 3.30334821, 2.04648634, 6.19270966],
       [2.99654674, 2.66827275, 6.21133833, 5.29142094]])]
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
>       result_cp = call(impl_cp, args_cp, kwargs_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:121: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
tests/cupy_tests/core_tests/fusion_tests/test_misc.py:75: in func
    x = x.astype('int32')
cupy/_core/core.pyx:394: in cupy._core.core.ndarray.astype
    cpdef ndarray astype(
cupy/_core/core.pyx:466: in cupy._core.core.ndarray.astype
    elementwise_copy(self, newarray)
cupy/_core/_kernel.pyx:1104: in cupy._core._kernel.ufunc.__call__
    kern = self._get_ufunc_kernel(dev_id, op, arginfos)
cupy/_core/_kernel.pyx:1127: in cupy._core._kernel.ufunc._get_ufunc_kernel
    kern = _get_ufunc_kernel(
cupy/_core/_kernel.pyx:901: in cupy._core._kernel._get_ufunc_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03d598f670>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
___________________ TestFusionTuple.test_return_empty_tuple ____________________

self = <cupy_tests.core_tests.fusion_tests.test_misc.TestFusionTuple testMethod=test_return_empty_tuple>
generate_inputs_kwargs = {'dtype': <class 'numpy.float64'>}
generate_inputs = <bound method FusionTestBase.generate_inputs of <cupy_tests.core_tests.fusion_tests.test_misc.TestFusionTuple testMethod=test_return_empty_tuple>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = [array([[5.48813504, 7.15189366, 6.02763376, 5.44883183],
       [4.23654799, 6.45894113, 4.37587211, 8.91773001],
       [9.63662761, 3.83441519, 7.91725038, 5.2889492 ]])]
kwargs_np = {}
args_cp = [array([[5.48813504, 7.15189366, 6.02763376, 5.44883183],
       [4.23654799, 6.45894113, 4.37587211, 8.91773001],
       [9.63662761, 3.83441519, 7.91725038, 5.2889492 ]])]
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4aafb20>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_________________ TestFusionTuple.test_return_singleton_tuple __________________

self = <cupy_tests.core_tests.fusion_tests.test_misc.TestFusionTuple testMethod=test_return_singleton_tuple>
generate_inputs_kwargs = {'dtype': <class 'numpy.float64'>}
generate_inputs = <bound method FusionTestBase.generate_inputs of <cupy_tests.core_tests.fusion_tests.test_misc.TestFusionTuple testMethod=test_return_singleton_tuple>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = [array([[5.48813504, 7.15189366, 6.02763376, 5.44883183],
       [4.23654799, 6.45894113, 4.37587211, 8.91773001],
       [9.63662761, 3.83441519, 7.91725038, 5.2889492 ]])]
kwargs_np = {}
args_cp = [array([[5.48813504, 7.15189366, 6.02763376, 5.44883183],
       [4.23654799, 6.45894113, 4.37587211, 8.91773001],
       [9.63662761, 3.83441519, 7.91725038, 5.2889492 ]])]
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03d59c2280>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
______________________ TestFusionTuple.test_return_tuple _______________________

self = <cupy_tests.core_tests.fusion_tests.test_misc.TestFusionTuple testMethod=test_return_tuple>
generate_inputs_kwargs = {'dtype': <class 'numpy.float64'>}
generate_inputs = <bound method FusionTestBase.generate_inputs of <cupy_tests.core_tests.fusion_tests.test_misc.TestFusionTuple testMethod=test_return_tuple>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = [array([[5.48813504, 7.15189366, 6.02763376, 5.44883183],
       [4.23654799, 6.45894113, 4.37587211, 8.91773001],
   ...3],
       [4.20367802, 3.30334821, 2.04648634, 6.19270966],
       [2.99654674, 2.66827275, 6.21133833, 5.29142094]])]
kwargs_np = {}
args_cp = [array([[5.48813504, 7.15189366, 6.02763376, 5.44883183],
       [4.23654799, 6.45894113, 4.37587211, 8.91773001],
   ...3],
       [4.20367802, 3.30334821, 2.04648634, 6.19270966],
       [2.99654674, 2.66827275, 6.21133833, 5.29142094]])]
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4a933d0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
__________________________ TestFusionTuple.test_tuple __________________________

self = <cupy_tests.core_tests.fusion_tests.test_misc.TestFusionTuple testMethod=test_tuple>
generate_inputs_kwargs = {'dtype': <class 'numpy.float64'>}
generate_inputs = <bound method FusionTestBase.generate_inputs of <cupy_tests.core_tests.fusion_tests.test_misc.TestFusionTuple testMethod=test_tuple>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = [array([[5.48813504, 7.15189366, 6.02763376, 5.44883183],
       [4.23654799, 6.45894113, 4.37587211, 8.91773001],
   ...3],
       [4.20367802, 3.30334821, 2.04648634, 6.19270966],
       [2.99654674, 2.66827275, 6.21133833, 5.29142094]])]
kwargs_np = {}
args_cp = [array([[5.48813504, 7.15189366, 6.02763376, 5.44883183],
       [4.23654799, 6.45894113, 4.37587211, 8.91773001],
   ...3],
       [4.20367802, 3.30334821, 2.04648634, 6.19270966],
       [2.99654674, 2.66827275, 6.21133833, 5.29142094]])]
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03cd85e190>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
________________________ TestReturnNone.test_iadd_once _________________________

self = <cupy_tests.core_tests.fusion_tests.test_misc.TestReturnNone testMethod=test_iadd_once>
generate_inputs_kwargs = {'dtype': <class 'numpy.float64'>}
generate_inputs = <bound method FusionTestBase.generate_inputs of <cupy_tests.core_tests.fusion_tests.test_misc.TestReturnNone testMethod=test_iadd_once>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = [array([[ 7.48813504,  9.15189366,  8.02763376,  7.44883183],
       [ 6.23654799,  8.45894113,  6.37587211, 10.91773001],
       [11.63662761,  5.83441519,  9.91725038,  7.2889492 ]])]
kwargs_np = {}
args_cp = [array([[ 7.48813504,  9.15189366,  8.02763376,  7.44883183],
       [ 6.23654799,  8.45894113,  6.37587211, 10.91773001],
       [11.63662761,  5.83441519,  9.91725038,  7.2889492 ]])]
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4be1fa0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
________________________ TestReturnNone.test_iadd_twice ________________________

self = <cupy_tests.core_tests.fusion_tests.test_misc.TestReturnNone testMethod=test_iadd_twice>
generate_inputs_kwargs = {'dtype': <class 'numpy.float64'>}
generate_inputs = <bound method FusionTestBase.generate_inputs of <cupy_tests.core_tests.fusion_tests.test_misc.TestReturnNone testMethod=test_iadd_twice>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = [array([[21.95254016, 28.60757465, 24.11053504, 21.79532732],
       [16.94619197, 25.83576452, 17.50348845, 35.67092003],
       [38.54651042, 15.33766075, 31.66900152, 21.15579679]])]
kwargs_np = {}
args_cp = [array([[21.95254016, 28.60757465, 24.11053504, 21.79532732],
       [16.94619197, 25.83576452, 17.50348845, 35.67092003],
       [38.54651042, 15.33766075, 31.66900152, 21.15579679]])]
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03cd8e27c0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_______________ TestFusionNoneParams.test_python_none_parameter ________________

self = <cupy_tests.core_tests.fusion_tests.test_misc.TestFusionNoneParams testMethod=test_python_none_parameter>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float64'>

    @testing.for_all_dtypes()
    @testing.numpy_cupy_array_equal()
    def test_python_none_parameter(self, xp, dtype):
        @cupy.fuse()
        def f(x, y, z):
            if y is None:
                return x * z
            return x + y + z
    
        x = testing.shaped_arange((10,), xp, dtype)
        y = testing.shaped_arange((10,), xp, dtype)
        z = testing.shaped_arange((10,), xp, dtype)
>       return f(x, None, z) + f(x, y, z)

tests/cupy_tests/core_tests/fusion_tests/test_misc.py:153: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03d5b0bc10>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/fusion_tests/test_misc.py", line 153, in test_python_none_parameter
E           return f(x, None, z) + f(x, y, z)
E         File "cupy/_core/fusion.pyx", line 915, in cupy._core.fusion.Fusion.__call__
E           return kernel(
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
____________________ TestFusionKernelName.test_elementwise _____________________

self = <cupy_tests.core_tests.fusion_tests.test_misc.TestFusionKernelName testMethod=test_elementwise>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>

    @testing.numpy_cupy_allclose(atol=1e-5)
    def test_elementwise(self, xp):
        def func(a, b, c):
            @cupy.fuse()
            def func_a1(x, y, z):
                return (x + y) * z
    
            return func_a1(a, b, c)
    
>       return self.check(xp, func, 'func_a1', True)

tests/cupy_tests/core_tests/fusion_tests/test_misc.py:209: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/test_misc.py:192: in check
    func(a, b, c)
tests/cupy_tests/core_tests/fusion_tests/test_misc.py:207: in func
    return func_a1(a, b, c)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03d59beeb0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/fusion_tests/test_misc.py", line 209, in test_elementwise
E           return self.check(xp, func, 'func_a1', True)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/fusion_tests/test_misc.py", line 192, in check
E           func(a, b, c)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/fusion_tests/test_misc.py", line 207, in func
E           return func_a1(a, b, c)
E         File "cupy/_core/fusion.pyx", line 915, in cupy._core.fusion.Fusion.__call__
E           return kernel(
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
_______________ TestFusionKernelName.test_elementwise_with_name ________________

self = <cupy_tests.core_tests.fusion_tests.test_misc.TestFusionKernelName testMethod=test_elementwise_with_name>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>

    @testing.numpy_cupy_allclose(atol=1e-5)
    def test_elementwise_with_name(self, xp):
        def func(a, b, c):
            @cupy.fuse(kernel_name='abc')
            def func_a1(x, y, z):
                return (x + y) * z
    
            return func_a1(a, b, c)
    
>       return self.check(xp, func, 'abc', True)

tests/cupy_tests/core_tests/fusion_tests/test_misc.py:220: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/test_misc.py:192: in check
    func(a, b, c)
tests/cupy_tests/core_tests/fusion_tests/test_misc.py:218: in func
    return func_a1(a, b, c)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03c49f4e80>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/fusion_tests/test_misc.py", line 220, in test_elementwise_with_name
E           return self.check(xp, func, 'abc', True)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/fusion_tests/test_misc.py", line 192, in check
E           func(a, b, c)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/fusion_tests/test_misc.py", line 218, in func
E           return func_a1(a, b, c)
E         File "cupy/_core/fusion.pyx", line 915, in cupy._core.fusion.Fusion.__call__
E           return kernel(
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
____________________ TestFusionKernelName.test_reduction_01 ____________________
cupy/testing/_helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/_helper.py:495: in check_func
    _array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([1., 1., 1.])
desired = array([  8800.22357671,  39273.84288556, 111762.34757287])
rtol = 1e-07, atol = 1e-05, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=1e-05
E       
E       Mismatched elements: 3 / 3 (100%)
E       Max absolute difference: 111761.34757287
E       Max relative difference: 0.99999105
E        x: array([1., 1., 1.])
E        y: array([  8800.223577,  39273.842886, 111762.347573])

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 776, in cupy._core._reduction.ReductionKernel._get_function
    return _ReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 804, in cupy._core._reduction._ReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 776, in cupy._core._reduction.ReductionKernel._get_function
    return _ReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 804, in cupy._core._reduction._ReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
_________________ TestFusionKernelName.test_reduction_postmap __________________
cupy/testing/_helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/_helper.py:495: in check_func
    _array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array(1.), desired = 8.717797887081348, rtol = 1e-07, atol = 1e-05
err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=1e-05
E       
E       Mismatched elements: 1 / 1 (100%)
E       Max absolute difference: 7.71779789
E       Max relative difference: 0.88529213
E        x: array(1.)
E        y: array(8.717798)

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 776, in cupy._core._reduction.ReductionKernel._get_function
    return _ReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 804, in cupy._core._reduction._ReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 776, in cupy._core._reduction.ReductionKernel._get_function
    return _ReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 804, in cupy._core._reduction._ReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
__________________ TestFusionKernelName.test_reduction_premap __________________
cupy/testing/_helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/_helper.py:495: in check_func
    _array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array(1.), desired = 3838.0, rtol = 1e-07, atol = 1e-05, err_msg = ''
verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=1e-05
E       
E       Mismatched elements: 1 / 1 (100%)
E       Max absolute difference: 3837.
E       Max relative difference: 0.99973945
E        x: array(1.)
E        y: array(3838.)

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 776, in cupy._core._reduction.ReductionKernel._get_function
    return _ReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 804, in cupy._core._reduction._ReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 776, in cupy._core._reduction.ReductionKernel._get_function
    return _ReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 804, in cupy._core._reduction._ReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
________________ TestFusionKernelName.test_reduction_with_name _________________
cupy/testing/_helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/_helper.py:495: in check_func
    _array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array(1.), desired = 3838.0, rtol = 1e-07, atol = 1e-05, err_msg = ''
verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=1e-05
E       
E       Mismatched elements: 1 / 1 (100%)
E       Max absolute difference: 3837.
E       Max relative difference: 0.99973945
E        x: array(1.)
E        y: array(3838.)

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 776, in cupy._core._reduction.ReductionKernel._get_function
    return _ReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 804, in cupy._core._reduction._ReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 776, in cupy._core._reduction.ReductionKernel._get_function
    return _ReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 804, in cupy._core._reduction._ReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
____________________ TestFusionComposition.test_composition ____________________

self = <cupy_tests.core_tests.fusion_tests.test_misc.TestFusionComposition testMethod=test_composition>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float64'>

    @testing.for_all_dtypes(no_bool=True)
    @testing.numpy_cupy_array_equal()
    def test_composition(self, xp, dtype):
        @cupy.fuse()
        def f(x, y):
            return x - y * 2, x + y
    
        @cupy.fuse()
        def g(x, y, z):
            a, b = f(x + z, z - x * 3)
            c, d = f(x - y, y - z)
            return a + b * c - d
    
        @cupy.fuse()
        def h(x, y):
            a, b = f(x + y * 2, y * 3)
            return a - b * g(x - 2, x - 3, -y)
    
        x = testing.shaped_arange((3, 3), xp, dtype)
        y = testing.shaped_arange((3, 3), xp, dtype)
>       return h(x, y)

tests/cupy_tests/core_tests/fusion_tests/test_misc.py:289: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03d595feb0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/fusion_tests/test_misc.py", line 289, in test_composition
E           return h(x, y)
E         File "cupy/_core/fusion.pyx", line 915, in cupy._core.fusion.Fusion.__call__
E           return kernel(
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
______________________ TestFusionCompile.test_clear_cache ______________________

self = <cupy_tests.core_tests.fusion_tests.test_misc.TestFusionCompile testMethod=test_clear_cache>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>
dtype = <class 'numpy.float64'>

    @testing.for_all_dtypes(no_bool=True)
    @testing.numpy_cupy_array_equal()
    def test_clear_cache(self, xp, dtype):
        @cupy.fuse()
        def f(x, y):
            return x - y * 2
    
        x = testing.shaped_arange((3, 3), xp, dtype)
        y = testing.shaped_arange((3, 3), xp, dtype)
        f.clear_cache()
>       return f(x, y)

tests/cupy_tests/core_tests/fusion_tests/test_misc.py:304: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03d59812b0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/fusion_tests/test_misc.py", line 304, in test_clear_cache
E           return f(x, y)
E         File "cupy/_core/fusion.pyx", line 915, in cupy._core.fusion.Fusion.__call__
E           return kernel(
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
________________ TestFusionGetArrayModule.test_get_array_module ________________

self = <cupy_tests.core_tests.fusion_tests.test_misc.TestFusionGetArrayModule testMethod=test_get_array_module>
generate_inputs_kwargs = {'dtype': <class 'numpy.float64'>}
generate_inputs = <bound method FusionTestBase.generate_inputs of <cupy_tests.core_tests.fusion_tests.test_misc.TestFusionGetArrayModule testMethod=test_get_array_module>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = [array([[5.48813504, 7.15189366, 6.02763376, 5.44883183],
       [4.23654799, 6.45894113, 4.37587211, 8.91773001],
       [9.63662761, 3.83441519, 7.91725038, 5.2889492 ]])]
kwargs_np = {}
args_cp = [array([[5.48813504, 7.15189366, 6.02763376, 5.44883183],
       [4.23654799, 6.45894113, 4.37587211, 8.91773001],
       [9.63662761, 3.83441519, 7.91725038, 5.2889492 ]])]
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
>       result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03d5a16820>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_________________________ TestFusionThread.test_thread _________________________

self = <cupy_tests.core_tests.fusion_tests.test_misc.TestFusionThread testMethod=test_thread>

    def test_thread(self):
        x = testing.shaped_arange((3, 3), cupy, cupy.int64)
        y = testing.shaped_arange((3, 3), cupy, cupy.int64)
        out = [None]
    
        @cupy.fuse()
        def f(x, y):
            return x + y * 2
    
        def _target(x, y):
            cupy.cuda.Device(0).use()
            out[0] = f(x, y)
    
        t = threading.Thread(target=_target, args=(x, y))
        t.daemon = True
        t.start()
        t.join()
>       assert (out[0] == f(x, y)).all()

tests/cupy_tests/core_tests/fusion_tests/test_misc.py:339: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03cd9197c0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
_________________ TestFusionThread.test_thread_multiple_dtypes _________________

self = <cupy_tests.core_tests.fusion_tests.test_misc.TestFusionThread testMethod=test_thread_multiple_dtypes>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>

    @testing.numpy_cupy_array_equal()
    def test_thread_multiple_dtypes(self, xp):
        x1 = testing.shaped_arange((3, 3), xp, xp.int64)
        y1 = testing.shaped_arange((3, 3), xp, xp.int64)
        x2 = x1.astype(xp.float64)
        y2 = y1.astype(xp.float64)
        threads = [None] * 100
        out = [None] * 100
    
        @cupy.fuse()
        def f(x, y):
            return x + y * 2
    
        def _target(tid, x, y):
            if xp is cupy:
                xp.cuda.Device(0).use()
            out[tid] = f(x, y).astype(xp.int64)
    
        def run_thread(tid):
            x, y = (x1, y1) if tid % 2 == 0 else (x2, y2)
            t = threading.Thread(target=_target, args=(tid, x, y))
            threads[tid] = t
            t.daemon = True
            t.start()
    
        for tid in range(0, 50):
            run_thread(tid)
    
        for tid in range(0, 50):
            threads[tid].join()
    
        for tid in range(50, 100):
            run_thread(tid)
    
        for tid in range(50, 100):
            threads[tid].join()
    
>       return xp.concatenate(out)

tests/cupy_tests/core_tests/fusion_tests/test_misc.py:378: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_manipulation/join.py:55: in concatenate
    return _core.concatenate_method(tup, axis, out)
cupy/_core/_routines_manipulation.pyx:538: in cupy._core._routines_manipulation.concatenate_method
    cpdef ndarray concatenate_method(tup, int axis, ndarray out=None):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise TypeError('Only cupy arrays can be concatenated')
E   AssertionError: Only cupy raises error
E   
E   Traceback (most recent call last):
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E       result = impl(self, *args, **kw)
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/fusion_tests/test_misc.py", line 378, in test_thread_multiple_dtypes
E       return xp.concatenate(out)
E     File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/_manipulation/join.py", line 55, in concatenate
E       return _core.concatenate_method(tup, axis, out)
E     File "cupy/_core/_routines_manipulation.pyx", line 538, in cupy._core._routines_manipulation.concatenate_method
E       cpdef ndarray concatenate_method(tup, int axis, ndarray out=None):
E     File "cupy/_core/_routines_manipulation.pyx", line 551, in cupy._core._routines_manipulation.concatenate_method
E       raise TypeError('Only cupy arrays can be concatenated')
E   TypeError: Only cupy arrays can be concatenated

cupy/_core/_routines_manipulation.pyx:551: AssertionError
___________________ TestFusionMultiDevice.test_multi_device ____________________

self = <cupy_tests.core_tests.fusion_tests.test_misc.TestFusionMultiDevice testMethod=test_multi_device>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>

    @testing.multi_gpu(2)
    @testing.numpy_cupy_array_equal()
    def test_multi_device(self, xp):
    
        @cupy.fuse()
        def f(x, y):
            return x + y * 2
    
        with cupy.cuda.Device(0):
            x1 = testing.shaped_random((3, 3), xp, xp.int64, seed=0)
            y1 = testing.shaped_random((3, 3), xp, xp.int64, seed=1)
>           out1 = f(x1, y1)

tests/cupy_tests/core_tests/fusion_tests/test_misc.py:395: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03cd8e0970>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       AssertionError: Only cupy raises error
E       
E       Traceback (most recent call last):
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E           result = impl(self, *args, **kw)
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/core_tests/fusion_tests/test_misc.py", line 395, in test_multi_device
E           out1 = f(x1, y1)
E         File "cupy/_core/fusion.pyx", line 915, in cupy._core.fusion.Fusion.__call__
E           return kernel(
E         File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E           kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E         File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E           kern = _get_elementwise_kernel(
E         File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E           result = f(*args, **kwargs)
E         File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E           return _get_simple_elementwise_kernel(
E         File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E           module = compile_with_cache(module_code, options)
E         File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E           return cuda.compile_with_cache(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E           return _compile_with_cache_hip(
E         File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
E           temp_path = tf.name
E         File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
E           result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: AssertionError
___________________ TestOptimizations.test_different_shapes ____________________

self = <cupy_tests.core_tests.fusion_tests.test_optimization.TestOptimizations testMethod=test_different_shapes>
args = (), kwargs = {}, target = 'cupy._core._fusion_trace.TraceImpl'
m = <cupy_tests.core_tests.fusion_tests.test_optimization.CreateMock object at 0x7f03bc04ef40>

    def new_impl(self, *args, **kwargs):
        target = 'cupy._core._fusion_trace.TraceImpl'
        with mock.patch(target, CreateMock(target)) as m:
>           result = test_method(self, *args, **kwargs)

tests/cupy_tests/core_tests/fusion_tests/test_optimization.py:49: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:121: in wrapper
    result_cp = call(impl_cp, args_cp, kwargs_cp)
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
tests/cupy_tests/core_tests/fusion_tests/test_optimization.py:133: in impl
    r2 = x + y
cupy/_core/core.pyx:1070: in cupy._core.core.ndarray.__add__
    return _math._add(x, y)
cupy/_core/_kernel.pyx:1104: in cupy._core._kernel.ufunc.__call__
    kern = self._get_ufunc_kernel(dev_id, op, arginfos)
cupy/_core/_kernel.pyx:1127: in cupy._core._kernel.ufunc._get_ufunc_kernel
    kern = _get_ufunc_kernel(
cupy/_core/_kernel.pyx:901: in cupy._core._kernel._get_ufunc_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03d5b4bac0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
_________________ TestOptimizations.test_fuse_elementwise_op_1 _________________

self = <cupy_tests.core_tests.fusion_tests.test_optimization.TestOptimizations testMethod=test_fuse_elementwise_op_1>
args = (), kwargs = {}, target = 'cupy._core._fusion_trace.TraceImpl'
m = <cupy_tests.core_tests.fusion_tests.test_optimization.CreateMock object at 0x7f03d5a7eb20>

    def new_impl(self, *args, **kwargs):
        target = 'cupy._core._fusion_trace.TraceImpl'
        with mock.patch(target, CreateMock(target)) as m:
>           result = test_method(self, *args, **kwargs)

tests/cupy_tests/core_tests/fusion_tests/test_optimization.py:49: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: in wrapper
    result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03d5a7e3a0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
_________________ TestOptimizations.test_fuse_elementwise_op_2 _________________

self = <cupy_tests.core_tests.fusion_tests.test_optimization.TestOptimizations testMethod=test_fuse_elementwise_op_2>
args = (), kwargs = {}, target = 'cupy._core._fusion_trace.TraceImpl'
m = <cupy_tests.core_tests.fusion_tests.test_optimization.CreateMock object at 0x7f03d5a747f0>

    def new_impl(self, *args, **kwargs):
        target = 'cupy._core._fusion_trace.TraceImpl'
        with mock.patch(target, CreateMock(target)) as m:
>           result = test_method(self, *args, **kwargs)

tests/cupy_tests/core_tests/fusion_tests/test_optimization.py:49: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: in wrapper
    result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03d5a74f10>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
________________ TestOptimizations.test_fuse_elementwise_ops_4 _________________

self = <cupy_tests.core_tests.fusion_tests.test_optimization.TestOptimizations testMethod=test_fuse_elementwise_ops_4>
args = (), kwargs = {}, target = 'cupy._core._fusion_trace.TraceImpl'
m = <cupy_tests.core_tests.fusion_tests.test_optimization.CreateMock object at 0x7f03d5ba25b0>

    def new_impl(self, *args, **kwargs):
        target = 'cupy._core._fusion_trace.TraceImpl'
        with mock.patch(target, CreateMock(target)) as m:
>           result = test_method(self, *args, **kwargs)

tests/cupy_tests/core_tests/fusion_tests/test_optimization.py:49: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: in wrapper
    result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4f53c40>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
_______________________ TestOptimizations.test_ignore_op _______________________

self = <cupy_tests.core_tests.fusion_tests.test_optimization.TestOptimizations testMethod=test_ignore_op>
args = (), kwargs = {}, target = 'cupy._core._fusion_trace.TraceImpl'
m = <cupy_tests.core_tests.fusion_tests.test_optimization.CreateMock object at 0x7f03cd85e4c0>

    def new_impl(self, *args, **kwargs):
        target = 'cupy._core._fusion_trace.TraceImpl'
        with mock.patch(target, CreateMock(target)) as m:
>           result = test_method(self, *args, **kwargs)

tests/cupy_tests/core_tests/fusion_tests/test_optimization.py:49: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: in wrapper
    result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03cd85e6d0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
_________________ TestOptimizations.test_inplace_elementwise_1 _________________

self = <cupy_tests.core_tests.fusion_tests.test_optimization.TestOptimizations testMethod=test_inplace_elementwise_1>
args = (), kwargs = {}, target = 'cupy._core._fusion_trace.TraceImpl'
m = <cupy_tests.core_tests.fusion_tests.test_optimization.CreateMock object at 0x7f03d5bd2ca0>

    def new_impl(self, *args, **kwargs):
        target = 'cupy._core._fusion_trace.TraceImpl'
        with mock.patch(target, CreateMock(target)) as m:
>           result = test_method(self, *args, **kwargs)

tests/cupy_tests/core_tests/fusion_tests/test_optimization.py:49: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: in wrapper
    result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03d5bd2fd0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
_________________ TestOptimizations.test_inplace_elementwise_2 _________________

self = <cupy_tests.core_tests.fusion_tests.test_optimization.TestOptimizations testMethod=test_inplace_elementwise_2>
args = (), kwargs = {}, target = 'cupy._core._fusion_trace.TraceImpl'
m = <cupy_tests.core_tests.fusion_tests.test_optimization.CreateMock object at 0x7f03d59e0b20>

    def new_impl(self, *args, **kwargs):
        target = 'cupy._core._fusion_trace.TraceImpl'
        with mock.patch(target, CreateMock(target)) as m:
>           result = test_method(self, *args, **kwargs)

tests/cupy_tests/core_tests/fusion_tests/test_optimization.py:49: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: in wrapper
    result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4aaf280>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
_______________ TestOptimizations.test_inplace_same_memory_space _______________

self = <cupy_tests.core_tests.fusion_tests.test_optimization.TestOptimizations testMethod=test_inplace_same_memory_space>
args = (), kwargs = {}, target = 'cupy._core._fusion_trace.TraceImpl'
m = <cupy_tests.core_tests.fusion_tests.test_optimization.CreateMock object at 0x7f03d5b49c40>

    def new_impl(self, *args, **kwargs):
        target = 'cupy._core._fusion_trace.TraceImpl'
        with mock.patch(target, CreateMock(target)) as m:
>           result = test_method(self, *args, **kwargs)

tests/cupy_tests/core_tests/fusion_tests/test_optimization.py:49: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: in wrapper
    result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03cd9102e0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
_________________ TestOptimizations.test_inplace_same_variable _________________

self = <cupy_tests.core_tests.fusion_tests.test_optimization.TestOptimizations testMethod=test_inplace_same_variable>
args = (), kwargs = {}, target = 'cupy._core._fusion_trace.TraceImpl'
m = <cupy_tests.core_tests.fusion_tests.test_optimization.CreateMock object at 0x7f03cd928a30>

    def new_impl(self, *args, **kwargs):
        target = 'cupy._core._fusion_trace.TraceImpl'
        with mock.patch(target, CreateMock(target)) as m:
>           result = test_method(self, *args, **kwargs)

tests/cupy_tests/core_tests/fusion_tests/test_optimization.py:49: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: in wrapper
    result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03cd9282b0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
__________________ TestOptimizations.test_one_elementwise_op ___________________

self = <cupy_tests.core_tests.fusion_tests.test_optimization.TestOptimizations testMethod=test_one_elementwise_op>
args = (), kwargs = {}, target = 'cupy._core._fusion_trace.TraceImpl'
m = <cupy_tests.core_tests.fusion_tests.test_optimization.CreateMock object at 0x7f03d5a7ebe0>

    def new_impl(self, *args, **kwargs):
        target = 'cupy._core._fusion_trace.TraceImpl'
        with mock.patch(target, CreateMock(target)) as m:
>           result = test_method(self, *args, **kwargs)

tests/cupy_tests/core_tests/fusion_tests/test_optimization.py:49: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: in wrapper
    result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03b4700ca0>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
_______________ TestOptimizations.test_one_fuse_reduction_premap _______________

self = <cupy_tests.core_tests.fusion_tests.test_optimization.TestOptimizations testMethod=test_one_fuse_reduction_premap>
args = (), kwargs = {}, target = 'cupy._core._fusion_trace.TraceImpl'
m = <cupy_tests.core_tests.fusion_tests.test_optimization.CreateMock object at 0x7f03d5a75310>

    def new_impl(self, *args, **kwargs):
        target = 'cupy._core._fusion_trace.TraceImpl'
        with mock.patch(target, CreateMock(target)) as m:
>           result = test_method(self, *args, **kwargs)

tests/cupy_tests/core_tests/fusion_tests/test_optimization.py:49: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:125: in wrapper
    check_result(cupy, result_cp, result_np)
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:87: in check_result
    check(xp, ret_a, ret_e)
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:48: in check
    check_array(actual, expected, **check_array_kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([4617865109156845394, 4619738334837123328,                   0,
                         0])
desired = array([26, 28, 22, 30]), rtol = 0.003, atol = 0.003, err_msg = ''
verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=0.003, atol=0.003
E       
E       Mismatched elements: 4 / 4 (100%)
E       Max absolute difference: 4619738334837123300
E       Max relative difference: 1.77610197e+17
E        x: array([4617865109156845394, 4619738334837123328,                   0,
E                                0])
E        y: array([26, 28, 22, 30])

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 609, in cupy._core._reduction._SimpleReductionKernel._get_function
    return _SimpleReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 622, in cupy._core._reduction._SimpleReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 776, in cupy._core._reduction.ReductionKernel._get_function
    return _ReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 804, in cupy._core._reduction._ReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
___________________ TestOptimizations.test_one_reduction_op ____________________

self = <cupy_tests.core_tests.fusion_tests.test_optimization.TestOptimizations testMethod=test_one_reduction_op>
args = (), kwargs = {}, target = 'cupy._core._fusion_trace.TraceImpl'
m = <cupy_tests.core_tests.fusion_tests.test_optimization.CreateMock object at 0x7f03d5a984c0>

    def new_impl(self, *args, **kwargs):
        target = 'cupy._core._fusion_trace.TraceImpl'
        with mock.patch(target, CreateMock(target)) as m:
>           result = test_method(self, *args, **kwargs)

tests/cupy_tests/core_tests/fusion_tests/test_optimization.py:49: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:125: in wrapper
    check_result(cupy, result_cp, result_np)
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:87: in check_result
    check(xp, ret_a, ret_e)
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:48: in check
    check_array(actual, expected, **check_array_kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([4617865109156845394, 4619738334837123328, 4618472530717059998,
       4617820857677151090])
desired = array([18, 16, 17, 18]), rtol = 0.003, atol = 0.003, err_msg = ''
verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=0.003, atol=0.003
E       
E       Mismatched elements: 4 / 4 (100%)
E       Max absolute difference: 4619738334837123312
E       Max relative difference: 2.88733646e+17
E        x: array([4617865109156845394, 4619738334837123328, 4618472530717059998,
E              4617820857677151090])
E        y: array([18, 16, 17, 18])

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 609, in cupy._core._reduction._SimpleReductionKernel._get_function
    return _SimpleReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 622, in cupy._core._reduction._SimpleReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 776, in cupy._core._reduction.ReductionKernel._get_function
    return _ReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 804, in cupy._core._reduction._ReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
________________ TestOptimizations.test_one_reduction_op_rotate ________________

self = <cupy_tests.core_tests.fusion_tests.test_optimization.TestOptimizations testMethod=test_one_reduction_op_rotate>
args = (), kwargs = {}, target = 'cupy._core._fusion_trace.TraceImpl'
m = <cupy_tests.core_tests.fusion_tests.test_optimization.CreateMock object at 0x7f03b4703820>

    def new_impl(self, *args, **kwargs):
        target = 'cupy._core._fusion_trace.TraceImpl'
        with mock.patch(target, CreateMock(target)) as m:
>           result = test_method(self, *args, **kwargs)

tests/cupy_tests/core_tests/fusion_tests/test_optimization.py:49: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:125: in wrapper
    check_result(cupy, result_cp, result_np)
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:87: in check_result
    check(xp, ret_a, ret_e)
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:48: in check
    check_array(actual, expected, **check_array_kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([5, 7, 6]), desired = array([23, 22, 24]), rtol = 0.003
atol = 0.003, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=0.003, atol=0.003
E       
E       Mismatched elements: 3 / 3 (100%)
E       Max absolute difference: 18
E       Max relative difference: 0.7826087
E        x: array([5, 7, 6])
E        y: array([23, 22, 24])

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 609, in cupy._core._reduction._SimpleReductionKernel._get_function
    return _SimpleReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 622, in cupy._core._reduction._SimpleReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 776, in cupy._core._reduction.ReductionKernel._get_function
    return _ReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 804, in cupy._core._reduction._ReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
_____________________ TestOptimizations.test_returns_tuple _____________________

self = <cupy_tests.core_tests.fusion_tests.test_optimization.TestOptimizations testMethod=test_returns_tuple>
args = (), kwargs = {}, target = 'cupy._core._fusion_trace.TraceImpl'
m = <cupy_tests.core_tests.fusion_tests.test_optimization.CreateMock object at 0x7f03d5bb0190>

    def new_impl(self, *args, **kwargs):
        target = 'cupy._core._fusion_trace.TraceImpl'
        with mock.patch(target, CreateMock(target)) as m:
>           result = test_method(self, *args, **kwargs)

tests/cupy_tests/core_tests/fusion_tests/test_optimization.py:49: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:123: in wrapper
    result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:70: in call
    ret = func(*args, **kwargs)
cupy/_core/fusion.pyx:915: in cupy._core.fusion.Fusion.__call__
    return kernel(
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:838: in _compile_with_cache_hip
    temp_path = tf.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tempfile._TemporaryFileWrapper object at 0x7f03d5b7c040>, exc = None
value = None, tb = None

    def __exit__(self, exc, value, tb):
>       result = self.file.__exit__(exc, value, tb)
E       OSError: [Errno 28] No space left on device

/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py:491: OSError
___ TestFusionReductionAxis_param_6_{axis=-3, shape=(2, 1, 4)}.test_sum_axis ___

self = <<cupy_tests.core_tests.fusion_tests.test_reduction.TestFusionReductionAxis_param_6_{axis=-3, shape=(2, 1, 4)} testMethod=test_sum_axis>  parameter: {'axis': -3, 'shape': (2, 1, 4)}>
generate_inputs_kwargs = {}
generate_inputs = <bound method TestFusionReductionAxis.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_reduction.TestFusionReductionAxis_param_6_{axis=-3, shape=(2, 1, 4)} testMethod=test_sum_axis>  parameter: {'axis': -3, 'shape': (2, 1, 4)}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[[5, 7, 6, 5]],

       [[4, 6, 4, 8]]]),), kwargs_np = {}
args_cp = (array([[[5, 7, 6, 5]],

       [[4, 6, 4, 8]]]),), kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
        result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)
    
>       check_result(cupy, result_cp, result_np)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:125: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:87: in check_result
    check(xp, ret_a, ret_e)
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:48: in check
    check_array(actual, expected, **check_array_kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[5, 7, 6, 5]]), desired = array([[ 9, 13, 10, 13]])
rtol = 0.003, atol = 0.003, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=0.003, atol=0.003
E       
E       Mismatched elements: 4 / 4 (100%)
E       Max absolute difference: 8
E       Max relative difference: 0.61538462
E        x: array([[5, 7, 6, 5]])
E        y: array([[ 9, 13, 10, 13]])

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 609, in cupy._core._reduction._SimpleReductionKernel._get_function
    return _SimpleReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 622, in cupy._core._reduction._SimpleReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 776, in cupy._core._reduction.ReductionKernel._get_function
    return _ReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 804, in cupy._core._reduction._ReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
_ TestFusionReductionAxis_param_6_{axis=-3, shape=(2, 1, 4)}.test_sum_kwargs_axis _

self = <<cupy_tests.core_tests.fusion_tests.test_reduction.TestFusionReductionAxis_param_6_{axis=-3, shape=(2, 1, 4)} testMethod=test_sum_kwargs_axis>  parameter: {'axis': -3, 'shape': (2, 1, 4)}>
generate_inputs_kwargs = {}
generate_inputs = <bound method TestFusionReductionAxis.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_reduction.TestFusio...Axis_param_6_{axis=-3, shape=(2, 1, 4)} testMethod=test_sum_kwargs_axis>  parameter: {'axis': -3, 'shape': (2, 1, 4)}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[[5, 7, 6, 5]],

       [[4, 6, 4, 8]]]),), kwargs_np = {}
args_cp = (array([[[5, 7, 6, 5]],

       [[4, 6, 4, 8]]]),), kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
        result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)
    
>       check_result(cupy, result_cp, result_np)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:125: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:87: in check_result
    check(xp, ret_a, ret_e)
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:48: in check
    check_array(actual, expected, **check_array_kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[5, 7, 6, 5]]), desired = array([[ 9, 13, 10, 13]])
rtol = 0.003, atol = 0.003, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=0.003, atol=0.003
E       
E       Mismatched elements: 4 / 4 (100%)
E       Max absolute difference: 8
E       Max relative difference: 0.61538462
E        x: array([[5, 7, 6, 5]])
E        y: array([[ 9, 13, 10, 13]])

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 609, in cupy._core._reduction._SimpleReductionKernel._get_function
    return _SimpleReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 622, in cupy._core._reduction._SimpleReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 776, in cupy._core._reduction.ReductionKernel._get_function
    return _ReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 804, in cupy._core._reduction._ReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
____ TestFusionReductionAxis_param_9_{axis=-2, shape=(3, 4)}.test_sum_axis _____

self = <<cupy_tests.core_tests.fusion_tests.test_reduction.TestFusionReductionAxis_param_9_{axis=-2, shape=(3, 4)} testMethod=test_sum_axis>  parameter: {'axis': -2, 'shape': (3, 4)}>
generate_inputs_kwargs = {}
generate_inputs = <bound method TestFusionReductionAxis.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_reduction.TestFusionReductionAxis_param_9_{axis=-2, shape=(3, 4)} testMethod=test_sum_axis>  parameter: {'axis': -2, 'shape': (3, 4)}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[5, 7, 6, 5],
       [4, 6, 4, 8],
       [9, 3, 7, 5]]),)
kwargs_np = {}
args_cp = (array([[5, 7, 6, 5],
       [4, 6, 4, 8],
       [9, 3, 7, 5]]),)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
        result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)
    
>       check_result(cupy, result_cp, result_np)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:125: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:87: in check_result
    check(xp, ret_a, ret_e)
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:48: in check
    check_array(actual, expected, **check_array_kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([30064771077, 21474836486, 25769803780, 34359738372])
desired = array([18, 16, 17, 18]), rtol = 0.003, atol = 0.003, err_msg = ''
verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=0.003, atol=0.003
E       
E       Mismatched elements: 4 / 4 (100%)
E       Max absolute difference: 34359738354
E       Max relative difference: 1.90887435e+09
E        x: array([30064771077, 21474836486, 25769803780, 34359738372])
E        y: array([18, 16, 17, 18])

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 609, in cupy._core._reduction._SimpleReductionKernel._get_function
    return _SimpleReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 622, in cupy._core._reduction._SimpleReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 776, in cupy._core._reduction.ReductionKernel._get_function
    return _ReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 804, in cupy._core._reduction._ReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
_ TestFusionReductionAxis_param_9_{axis=-2, shape=(3, 4)}.test_sum_kwargs_axis _

self = <<cupy_tests.core_tests.fusion_tests.test_reduction.TestFusionReductionAxis_param_9_{axis=-2, shape=(3, 4)} testMethod=test_sum_kwargs_axis>  parameter: {'axis': -2, 'shape': (3, 4)}>
generate_inputs_kwargs = {}
generate_inputs = <bound method TestFusionReductionAxis.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_reduction.TestFusio...uctionAxis_param_9_{axis=-2, shape=(3, 4)} testMethod=test_sum_kwargs_axis>  parameter: {'axis': -2, 'shape': (3, 4)}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[5, 7, 6, 5],
       [4, 6, 4, 8],
       [9, 3, 7, 5]]),)
kwargs_np = {}
args_cp = (array([[5, 7, 6, 5],
       [4, 6, 4, 8],
       [9, 3, 7, 5]]),)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
        result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)
    
>       check_result(cupy, result_cp, result_np)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:125: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:87: in check_result
    check(xp, ret_a, ret_e)
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:48: in check
    check_array(actual, expected, **check_array_kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([5, 7, 6, 5]), desired = array([18, 16, 17, 18]), rtol = 0.003
atol = 0.003, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=0.003, atol=0.003
E       
E       Mismatched elements: 4 / 4 (100%)
E       Max absolute difference: 13
E       Max relative difference: 0.72222222
E        x: array([5, 7, 6, 5])
E        y: array([18, 16, 17, 18])

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 609, in cupy._core._reduction._SimpleReductionKernel._get_function
    return _SimpleReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 622, in cupy._core._reduction._SimpleReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 776, in cupy._core._reduction.ReductionKernel._get_function
    return _ReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 804, in cupy._core._reduction._ReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
__ TestFusionReductionAxis_param_11_{axis=-2, shape=(2, 0, 3)}.test_sum_axis ___

self = <<cupy_tests.core_tests.fusion_tests.test_reduction.TestFusionReductionAxis_param_11_{axis=-2, shape=(2, 0, 3)} testMethod=test_sum_axis>  parameter: {'axis': -2, 'shape': (2, 0, 3)}>
generate_inputs_kwargs = {}
generate_inputs = <bound method TestFusionReductionAxis.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_reduction.TestFusio...uctionAxis_param_11_{axis=-2, shape=(2, 0, 3)} testMethod=test_sum_axis>  parameter: {'axis': -2, 'shape': (2, 0, 3)}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([], shape=(2, 0, 3), dtype=int64),), kwargs_np = {}
args_cp = (array([], shape=(2, 0, 3), dtype=int64),), kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
        result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)
    
>       check_result(cupy, result_cp, result_np)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:125: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:87: in check_result
    check(xp, ret_a, ret_e)
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:48: in check
    check_array(actual, expected, **check_array_kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[5, 7, 6],
       [5, 4, 6]])
desired = array([[0, 0, 0],
       [0, 0, 0]]), rtol = 0.003, atol = 0.003
err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=0.003, atol=0.003
E       
E       Mismatched elements: 6 / 6 (100%)
E       Max absolute difference: 7
E       Max relative difference: inf
E        x: array([[5, 7, 6],
E              [5, 4, 6]])
E        y: array([[0, 0, 0],
E              [0, 0, 0]])

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 609, in cupy._core._reduction._SimpleReductionKernel._get_function
    return _SimpleReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 622, in cupy._core._reduction._SimpleReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 776, in cupy._core._reduction.ReductionKernel._get_function
    return _ReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 804, in cupy._core._reduction._ReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
_ TestFusionReductionAxis_param_11_{axis=-2, shape=(2, 0, 3)}.test_sum_kwargs_axis _

self = <<cupy_tests.core_tests.fusion_tests.test_reduction.TestFusionReductionAxis_param_11_{axis=-2, shape=(2, 0, 3)} testMethod=test_sum_kwargs_axis>  parameter: {'axis': -2, 'shape': (2, 0, 3)}>
generate_inputs_kwargs = {}
generate_inputs = <bound method TestFusionReductionAxis.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_reduction.TestFusio...xis_param_11_{axis=-2, shape=(2, 0, 3)} testMethod=test_sum_kwargs_axis>  parameter: {'axis': -2, 'shape': (2, 0, 3)}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([], shape=(2, 0, 3), dtype=int64),), kwargs_np = {}
args_cp = (array([], shape=(2, 0, 3), dtype=int64),), kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
        result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)
    
>       check_result(cupy, result_cp, result_np)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:125: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:87: in check_result
    check(xp, ret_a, ret_e)
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:48: in check
    check_array(actual, expected, **check_array_kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[5, 7, 6],
       [5, 4, 6]])
desired = array([[0, 0, 0],
       [0, 0, 0]]), rtol = 0.003, atol = 0.003
err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=0.003, atol=0.003
E       
E       Mismatched elements: 6 / 6 (100%)
E       Max absolute difference: 7
E       Max relative difference: inf
E        x: array([[5, 7, 6],
E              [5, 4, 6]])
E        y: array([[0, 0, 0],
E              [0, 0, 0]])

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 609, in cupy._core._reduction._SimpleReductionKernel._get_function
    return _SimpleReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 622, in cupy._core._reduction._SimpleReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 776, in cupy._core._reduction.ReductionKernel._get_function
    return _ReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 804, in cupy._core._reduction._ReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
____ TestFusionReductionAxis_param_13_{axis=-1, shape=(3, 4)}.test_sum_axis ____

self = <<cupy_tests.core_tests.fusion_tests.test_reduction.TestFusionReductionAxis_param_13_{axis=-1, shape=(3, 4)} testMethod=test_sum_axis>  parameter: {'axis': -1, 'shape': (3, 4)}>
generate_inputs_kwargs = {}
generate_inputs = <bound method TestFusionReductionAxis.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_reduction.TestFusionReductionAxis_param_13_{axis=-1, shape=(3, 4)} testMethod=test_sum_axis>  parameter: {'axis': -1, 'shape': (3, 4)}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[5, 7, 6, 5],
       [4, 6, 4, 8],
       [9, 3, 7, 5]]),)
kwargs_np = {}
args_cp = (array([[5, 7, 6, 5],
       [4, 6, 4, 8],
       [9, 3, 7, 5]]),)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
        result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)
    
>       check_result(cupy, result_cp, result_np)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:125: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:87: in check_result
    check(xp, ret_a, ret_e)
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:48: in check
    check_array(actual, expected, **check_array_kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([5, 2, 3]), desired = array([23, 22, 24]), rtol = 0.003
atol = 0.003, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=0.003, atol=0.003
E       
E       Mismatched elements: 3 / 3 (100%)
E       Max absolute difference: 21
E       Max relative difference: 0.90909091
E        x: array([5, 2, 3])
E        y: array([23, 22, 24])

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 609, in cupy._core._reduction._SimpleReductionKernel._get_function
    return _SimpleReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 622, in cupy._core._reduction._SimpleReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 776, in cupy._core._reduction.ReductionKernel._get_function
    return _ReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 804, in cupy._core._reduction._ReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
_ TestFusionReductionAxis_param_13_{axis=-1, shape=(3, 4)}.test_sum_kwargs_axis _

self = <<cupy_tests.core_tests.fusion_tests.test_reduction.TestFusionReductionAxis_param_13_{axis=-1, shape=(3, 4)} testMethod=test_sum_kwargs_axis>  parameter: {'axis': -1, 'shape': (3, 4)}>
generate_inputs_kwargs = {}
generate_inputs = <bound method TestFusionReductionAxis.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_reduction.TestFusio...ctionAxis_param_13_{axis=-1, shape=(3, 4)} testMethod=test_sum_kwargs_axis>  parameter: {'axis': -1, 'shape': (3, 4)}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[5, 7, 6, 5],
       [4, 6, 4, 8],
       [9, 3, 7, 5]]),)
kwargs_np = {}
args_cp = (array([[5, 7, 6, 5],
       [4, 6, 4, 8],
       [9, 3, 7, 5]]),)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
        result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)
    
>       check_result(cupy, result_cp, result_np)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:125: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:87: in check_result
    check(xp, ret_a, ret_e)
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:48: in check
    check_array(actual, expected, **check_array_kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([30064771076, 12884901888,           1])
desired = array([23, 22, 24]), rtol = 0.003, atol = 0.003, err_msg = ''
verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=0.003, atol=0.003
E       
E       Mismatched elements: 3 / 3 (100%)
E       Max absolute difference: 30064771053
E       Max relative difference: 1.30716396e+09
E        x: array([30064771076, 12884901888,           1])
E        y: array([23, 22, 24])

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 609, in cupy._core._reduction._SimpleReductionKernel._get_function
    return _SimpleReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 622, in cupy._core._reduction._SimpleReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 776, in cupy._core._reduction.ReductionKernel._get_function
    return _ReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 804, in cupy._core._reduction._ReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
__ TestFusionReductionAxis_param_14_{axis=-1, shape=(2, 1, 4)}.test_sum_axis ___

self = <<cupy_tests.core_tests.fusion_tests.test_reduction.TestFusionReductionAxis_param_14_{axis=-1, shape=(2, 1, 4)} testMethod=test_sum_axis>  parameter: {'axis': -1, 'shape': (2, 1, 4)}>
generate_inputs_kwargs = {}
generate_inputs = <bound method TestFusionReductionAxis.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_reduction.TestFusio...uctionAxis_param_14_{axis=-1, shape=(2, 1, 4)} testMethod=test_sum_axis>  parameter: {'axis': -1, 'shape': (2, 1, 4)}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[[5, 7, 6, 5]],

       [[4, 6, 4, 8]]]),), kwargs_np = {}
args_cp = (array([[[5, 7, 6, 5]],

       [[4, 6, 4, 8]]]),), kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
        result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)
    
>       check_result(cupy, result_cp, result_np)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:125: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:87: in check_result
    check(xp, ret_a, ret_e)
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:48: in check
    check_array(actual, expected, **check_array_kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[5],
       [7]]), desired = array([[23],
       [22]])
rtol = 0.003, atol = 0.003, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=0.003, atol=0.003
E       
E       Mismatched elements: 2 / 2 (100%)
E       Max absolute difference: 18
E       Max relative difference: 0.7826087
E        x: array([[5],
E              [7]])
E        y: array([[23],
E              [22]])

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 609, in cupy._core._reduction._SimpleReductionKernel._get_function
    return _SimpleReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 622, in cupy._core._reduction._SimpleReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 776, in cupy._core._reduction.ReductionKernel._get_function
    return _ReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 804, in cupy._core._reduction._ReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
_ TestFusionReductionAxis_param_14_{axis=-1, shape=(2, 1, 4)}.test_sum_kwargs_axis _

self = <<cupy_tests.core_tests.fusion_tests.test_reduction.TestFusionReductionAxis_param_14_{axis=-1, shape=(2, 1, 4)} testMethod=test_sum_kwargs_axis>  parameter: {'axis': -1, 'shape': (2, 1, 4)}>
generate_inputs_kwargs = {}
generate_inputs = <bound method TestFusionReductionAxis.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_reduction.TestFusio...xis_param_14_{axis=-1, shape=(2, 1, 4)} testMethod=test_sum_kwargs_axis>  parameter: {'axis': -1, 'shape': (2, 1, 4)}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[[5, 7, 6, 5]],

       [[4, 6, 4, 8]]]),), kwargs_np = {}
args_cp = (array([[[5, 7, 6, 5]],

       [[4, 6, 4, 8]]]),), kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
        result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)
    
>       check_result(cupy, result_cp, result_np)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:125: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:87: in check_result
    check(xp, ret_a, ret_e)
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:48: in check
    check_array(actual, expected, **check_array_kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[5],
       [7]]), desired = array([[23],
       [22]])
rtol = 0.003, atol = 0.003, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=0.003, atol=0.003
E       
E       Mismatched elements: 2 / 2 (100%)
E       Max absolute difference: 18
E       Max relative difference: 0.7826087
E        x: array([[5],
E              [7]])
E        y: array([[23],
E              [22]])

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 609, in cupy._core._reduction._SimpleReductionKernel._get_function
    return _SimpleReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 622, in cupy._core._reduction._SimpleReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 776, in cupy._core._reduction.ReductionKernel._get_function
    return _ReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 804, in cupy._core._reduction._ReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
____ TestFusionReductionAxis_param_17_{axis=0, shape=(3, 4)}.test_sum_axis _____

self = <<cupy_tests.core_tests.fusion_tests.test_reduction.TestFusionReductionAxis_param_17_{axis=0, shape=(3, 4)} testMethod=test_sum_axis>  parameter: {'axis': 0, 'shape': (3, 4)}>
generate_inputs_kwargs = {}
generate_inputs = <bound method TestFusionReductionAxis.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_reduction.TestFusionReductionAxis_param_17_{axis=0, shape=(3, 4)} testMethod=test_sum_axis>  parameter: {'axis': 0, 'shape': (3, 4)}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[5, 7, 6, 5],
       [4, 6, 4, 8],
       [9, 3, 7, 5]]),)
kwargs_np = {}
args_cp = (array([[5, 7, 6, 5],
       [4, 6, 4, 8],
       [9, 3, 7, 5]]),)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
        result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)
    
>       check_result(cupy, result_cp, result_np)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:125: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:87: in check_result
    check(xp, ret_a, ret_e)
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:48: in check
    check_array(actual, expected, **check_array_kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([5, 2, 3, 4]), desired = array([18, 16, 17, 18]), rtol = 0.003
atol = 0.003, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=0.003, atol=0.003
E       
E       Mismatched elements: 4 / 4 (100%)
E       Max absolute difference: 14
E       Max relative difference: 0.875
E        x: array([5, 2, 3, 4])
E        y: array([18, 16, 17, 18])

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 609, in cupy._core._reduction._SimpleReductionKernel._get_function
    return _SimpleReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 622, in cupy._core._reduction._SimpleReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 776, in cupy._core._reduction.ReductionKernel._get_function
    return _ReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 804, in cupy._core._reduction._ReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
_ TestFusionReductionAxis_param_17_{axis=0, shape=(3, 4)}.test_sum_kwargs_axis _

self = <<cupy_tests.core_tests.fusion_tests.test_reduction.TestFusionReductionAxis_param_17_{axis=0, shape=(3, 4)} testMethod=test_sum_kwargs_axis>  parameter: {'axis': 0, 'shape': (3, 4)}>
generate_inputs_kwargs = {}
generate_inputs = <bound method TestFusionReductionAxis.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_reduction.TestFusionReductionAxis_param_17_{axis=0, shape=(3, 4)} testMethod=test_sum_kwargs_axis>  parameter: {'axis': 0, 'shape': (3, 4)}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[5, 7, 6, 5],
       [4, 6, 4, 8],
       [9, 3, 7, 5]]),)
kwargs_np = {}
args_cp = (array([[5, 7, 6, 5],
       [4, 6, 4, 8],
       [9, 3, 7, 5]]),)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
        result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)
    
>       check_result(cupy, result_cp, result_np)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:125: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:87: in check_result
    check(xp, ret_a, ret_e)
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:48: in check
    check_array(actual, expected, **check_array_kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([4616381268789847428, 4619796151228017765, 4562917430359037952,
       4613990343107250993])
desired = array([18, 16, 17, 18]), rtol = 0.003, atol = 0.003, err_msg = ''
verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=0.003, atol=0.003
E       
E       Mismatched elements: 4 / 4 (100%)
E       Max absolute difference: 4619796151228017749
E       Max relative difference: 2.88737259e+17
E        x: array([4616381268789847428, 4619796151228017765, 4562917430359037952,
E              4613990343107250993])
E        y: array([18, 16, 17, 18])

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 609, in cupy._core._reduction._SimpleReductionKernel._get_function
    return _SimpleReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 622, in cupy._core._reduction._SimpleReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 776, in cupy._core._reduction.ReductionKernel._get_function
    return _ReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 804, in cupy._core._reduction._ReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
___ TestFusionReductionAxis_param_18_{axis=0, shape=(2, 1, 4)}.test_sum_axis ___

self = <<cupy_tests.core_tests.fusion_tests.test_reduction.TestFusionReductionAxis_param_18_{axis=0, shape=(2, 1, 4)} testMethod=test_sum_axis>  parameter: {'axis': 0, 'shape': (2, 1, 4)}>
generate_inputs_kwargs = {}
generate_inputs = <bound method TestFusionReductionAxis.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_reduction.TestFusionReductionAxis_param_18_{axis=0, shape=(2, 1, 4)} testMethod=test_sum_axis>  parameter: {'axis': 0, 'shape': (2, 1, 4)}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[[5, 7, 6, 5]],

       [[4, 6, 4, 8]]]),), kwargs_np = {}
args_cp = (array([[[5, 7, 6, 5]],

       [[4, 6, 4, 8]]]),), kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
        result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)
    
>       check_result(cupy, result_cp, result_np)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:125: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:87: in check_result
    check(xp, ret_a, ret_e)
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:48: in check
    check_array(actual, expected, **check_array_kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[4616381268789847428, 4619796151228017765, 4562917430359037952,
        4613990343107250993]])
desired = array([[ 9, 13, 10, 13]]), rtol = 0.003, atol = 0.003, err_msg = ''
verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=0.003, atol=0.003
E       
E       Mismatched elements: 4 / 4 (100%)
E       Max absolute difference: 4619796151228017752
E       Max relative difference: 5.12931252e+17
E        x: array([[4616381268789847428, 4619796151228017765, 4562917430359037952,
E               4613990343107250993]])
E        y: array([[ 9, 13, 10, 13]])

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 609, in cupy._core._reduction._SimpleReductionKernel._get_function
    return _SimpleReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 622, in cupy._core._reduction._SimpleReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 776, in cupy._core._reduction.ReductionKernel._get_function
    return _ReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 804, in cupy._core._reduction._ReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
_ TestFusionReductionAxis_param_18_{axis=0, shape=(2, 1, 4)}.test_sum_kwargs_axis _

self = <<cupy_tests.core_tests.fusion_tests.test_reduction.TestFusionReductionAxis_param_18_{axis=0, shape=(2, 1, 4)} testMethod=test_sum_kwargs_axis>  parameter: {'axis': 0, 'shape': (2, 1, 4)}>
generate_inputs_kwargs = {}
generate_inputs = <bound method TestFusionReductionAxis.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_reduction.TestFusio...nAxis_param_18_{axis=0, shape=(2, 1, 4)} testMethod=test_sum_kwargs_axis>  parameter: {'axis': 0, 'shape': (2, 1, 4)}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[[5, 7, 6, 5]],

       [[4, 6, 4, 8]]]),), kwargs_np = {}
args_cp = (array([[[5, 7, 6, 5]],

       [[4, 6, 4, 8]]]),), kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
        result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)
    
>       check_result(cupy, result_cp, result_np)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:125: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:87: in check_result
    check(xp, ret_a, ret_e)
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:48: in check
    check_array(actual, expected, **check_array_kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[    844424930590724, 4607182418800017408, 4611686018427387904,
        4611686018427387904]])
desired = array([[ 9, 13, 10, 13]]), rtol = 0.003, atol = 0.003, err_msg = ''
verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=0.003, atol=0.003
E       
E       Mismatched elements: 4 / 4 (100%)
E       Max absolute difference: 4611686018427387894
E       Max relative difference: 4.61168602e+17
E        x: array([[    844424930590724, 4607182418800017408, 4611686018427387904,
E               4611686018427387904]])
E        y: array([[ 9, 13, 10, 13]])

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 609, in cupy._core._reduction._SimpleReductionKernel._get_function
    return _SimpleReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 622, in cupy._core._reduction._SimpleReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 776, in cupy._core._reduction.ReductionKernel._get_function
    return _ReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 804, in cupy._core._reduction._ReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
____ TestFusionReductionAxis_param_21_{axis=1, shape=(3, 4)}.test_sum_axis _____

self = <<cupy_tests.core_tests.fusion_tests.test_reduction.TestFusionReductionAxis_param_21_{axis=1, shape=(3, 4)} testMethod=test_sum_axis>  parameter: {'axis': 1, 'shape': (3, 4)}>
generate_inputs_kwargs = {}
generate_inputs = <bound method TestFusionReductionAxis.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_reduction.TestFusionReductionAxis_param_21_{axis=1, shape=(3, 4)} testMethod=test_sum_axis>  parameter: {'axis': 1, 'shape': (3, 4)}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[5, 7, 6, 5],
       [4, 6, 4, 8],
       [9, 3, 7, 5]]),)
kwargs_np = {}
args_cp = (array([[5, 7, 6, 5],
       [4, 6, 4, 8],
       [9, 3, 7, 5]]),)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
        result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)
    
>       check_result(cupy, result_cp, result_np)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:125: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:87: in check_result
    check(xp, ret_a, ret_e)
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:48: in check
    check_array(actual, expected, **check_array_kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([5, 7, 6]), desired = array([23, 22, 24]), rtol = 0.003
atol = 0.003, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=0.003, atol=0.003
E       
E       Mismatched elements: 3 / 3 (100%)
E       Max absolute difference: 18
E       Max relative difference: 0.7826087
E        x: array([5, 7, 6])
E        y: array([23, 22, 24])

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 609, in cupy._core._reduction._SimpleReductionKernel._get_function
    return _SimpleReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 622, in cupy._core._reduction._SimpleReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 776, in cupy._core._reduction.ReductionKernel._get_function
    return _ReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 804, in cupy._core._reduction._ReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
_ TestFusionReductionAxis_param_21_{axis=1, shape=(3, 4)}.test_sum_kwargs_axis _

self = <<cupy_tests.core_tests.fusion_tests.test_reduction.TestFusionReductionAxis_param_21_{axis=1, shape=(3, 4)} testMethod=test_sum_kwargs_axis>  parameter: {'axis': 1, 'shape': (3, 4)}>
generate_inputs_kwargs = {}
generate_inputs = <bound method TestFusionReductionAxis.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_reduction.TestFusionReductionAxis_param_21_{axis=1, shape=(3, 4)} testMethod=test_sum_kwargs_axis>  parameter: {'axis': 1, 'shape': (3, 4)}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[5, 7, 6, 5],
       [4, 6, 4, 8],
       [9, 3, 7, 5]]),)
kwargs_np = {}
args_cp = (array([[5, 7, 6, 5],
       [4, 6, 4, 8],
       [9, 3, 7, 5]]),)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
        result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)
    
>       check_result(cupy, result_cp, result_np)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:125: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:87: in check_result
    check(xp, ret_a, ret_e)
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:48: in check
    check_array(actual, expected, **check_array_kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([5, 7, 6]), desired = array([23, 22, 24]), rtol = 0.003
atol = 0.003, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=0.003, atol=0.003
E       
E       Mismatched elements: 3 / 3 (100%)
E       Max absolute difference: 18
E       Max relative difference: 0.7826087
E        x: array([5, 7, 6])
E        y: array([23, 22, 24])

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 609, in cupy._core._reduction._SimpleReductionKernel._get_function
    return _SimpleReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 622, in cupy._core._reduction._SimpleReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 776, in cupy._core._reduction.ReductionKernel._get_function
    return _ReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 804, in cupy._core._reduction._ReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
___ TestFusionReductionAxis_param_22_{axis=1, shape=(2, 1, 4)}.test_sum_axis ___

self = <<cupy_tests.core_tests.fusion_tests.test_reduction.TestFusionReductionAxis_param_22_{axis=1, shape=(2, 1, 4)} testMethod=test_sum_axis>  parameter: {'axis': 1, 'shape': (2, 1, 4)}>
generate_inputs_kwargs = {}
generate_inputs = <bound method TestFusionReductionAxis.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_reduction.TestFusionReductionAxis_param_22_{axis=1, shape=(2, 1, 4)} testMethod=test_sum_axis>  parameter: {'axis': 1, 'shape': (2, 1, 4)}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[[5, 7, 6, 5]],

       [[4, 6, 4, 8]]]),), kwargs_np = {}
args_cp = (array([[[5, 7, 6, 5]],

       [[4, 6, 4, 8]]]),), kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
        result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)
    
>       check_result(cupy, result_cp, result_np)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:125: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:87: in check_result
    check(xp, ret_a, ret_e)
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:48: in check
    check_array(actual, expected, **check_array_kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[5, 2, 3, 4],
       [5, 6, 7, 8]])
desired = array([[5, 7, 6, 5],
       [4, 6, 4, 8]]), rtol = 0.003, atol = 0.003
err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=0.003, atol=0.003
E       
E       Mismatched elements: 5 / 8 (62.5%)
E       Max absolute difference: 5
E       Max relative difference: 0.75
E        x: array([[5, 2, 3, 4],
E              [5, 6, 7, 8]])
E        y: array([[5, 7, 6, 5],
E              [4, 6, 4, 8]])

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 609, in cupy._core._reduction._SimpleReductionKernel._get_function
    return _SimpleReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 622, in cupy._core._reduction._SimpleReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 776, in cupy._core._reduction.ReductionKernel._get_function
    return _ReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 804, in cupy._core._reduction._ReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
_ TestFusionReductionAxis_param_22_{axis=1, shape=(2, 1, 4)}.test_sum_kwargs_axis _

self = <<cupy_tests.core_tests.fusion_tests.test_reduction.TestFusionReductionAxis_param_22_{axis=1, shape=(2, 1, 4)} testMethod=test_sum_kwargs_axis>  parameter: {'axis': 1, 'shape': (2, 1, 4)}>
generate_inputs_kwargs = {}
generate_inputs = <bound method TestFusionReductionAxis.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_reduction.TestFusio...nAxis_param_22_{axis=1, shape=(2, 1, 4)} testMethod=test_sum_kwargs_axis>  parameter: {'axis': 1, 'shape': (2, 1, 4)}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[[5, 7, 6, 5]],

       [[4, 6, 4, 8]]]),), kwargs_np = {}
args_cp = (array([[[5, 7, 6, 5]],

       [[4, 6, 4, 8]]]),), kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
        result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)
    
>       check_result(cupy, result_cp, result_np)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:125: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:87: in check_result
    check(xp, ret_a, ret_e)
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:48: in check
    check_array(actual, expected, **check_array_kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[4616381268789847428, 4619796151228017765, 4562917430359037952,
        4613990343107250993],
       [4609288116924630667, 4606492340765129876, 4611067233358191197,
        4614963754607742146]])
desired = array([[5, 7, 6, 5],
       [4, 6, 4, 8]]), rtol = 0.003, atol = 0.003
err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=0.003, atol=0.003
E       
E       Mismatched elements: 8 / 8 (100%)
E       Max absolute difference: 4619796151228017758
E       Max relative difference: 1.15276681e+18
E        x: array([[4616381268789847428, 4619796151228017765, 4562917430359037952,
E               4613990343107250993],
E              [4609288116924630667, 4606492340765129876, 4611067233358191197,
E               4614963754607742146]])
E        y: array([[5, 7, 6, 5],
E              [4, 6, 4, 8]])

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 609, in cupy._core._reduction._SimpleReductionKernel._get_function
    return _SimpleReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 622, in cupy._core._reduction._SimpleReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 776, in cupy._core._reduction.ReductionKernel._get_function
    return _ReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 804, in cupy._core._reduction._ReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
___ TestFusionReductionAxis_param_23_{axis=1, shape=(2, 0, 3)}.test_sum_axis ___

self = <<cupy_tests.core_tests.fusion_tests.test_reduction.TestFusionReductionAxis_param_23_{axis=1, shape=(2, 0, 3)} testMethod=test_sum_axis>  parameter: {'axis': 1, 'shape': (2, 0, 3)}>
generate_inputs_kwargs = {}
generate_inputs = <bound method TestFusionReductionAxis.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_reduction.TestFusionReductionAxis_param_23_{axis=1, shape=(2, 0, 3)} testMethod=test_sum_axis>  parameter: {'axis': 1, 'shape': (2, 0, 3)}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([], shape=(2, 0, 3), dtype=int64),), kwargs_np = {}
args_cp = (array([], shape=(2, 0, 3), dtype=int64),), kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
        result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)
    
>       check_result(cupy, result_cp, result_np)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:125: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:87: in check_result
    check(xp, ret_a, ret_e)
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:48: in check
    check_array(actual, expected, **check_array_kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[5, 7, 6],
       [5, 4, 6]])
desired = array([[0, 0, 0],
       [0, 0, 0]]), rtol = 0.003, atol = 0.003
err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=0.003, atol=0.003
E       
E       Mismatched elements: 6 / 6 (100%)
E       Max absolute difference: 7
E       Max relative difference: inf
E        x: array([[5, 7, 6],
E              [5, 4, 6]])
E        y: array([[0, 0, 0],
E              [0, 0, 0]])

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 609, in cupy._core._reduction._SimpleReductionKernel._get_function
    return _SimpleReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 622, in cupy._core._reduction._SimpleReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 776, in cupy._core._reduction.ReductionKernel._get_function
    return _ReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 804, in cupy._core._reduction._ReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
_ TestFusionReductionAxis_param_23_{axis=1, shape=(2, 0, 3)}.test_sum_kwargs_axis _

self = <<cupy_tests.core_tests.fusion_tests.test_reduction.TestFusionReductionAxis_param_23_{axis=1, shape=(2, 0, 3)} testMethod=test_sum_kwargs_axis>  parameter: {'axis': 1, 'shape': (2, 0, 3)}>
generate_inputs_kwargs = {}
generate_inputs = <bound method TestFusionReductionAxis.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_reduction.TestFusio...nAxis_param_23_{axis=1, shape=(2, 0, 3)} testMethod=test_sum_kwargs_axis>  parameter: {'axis': 1, 'shape': (2, 0, 3)}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([], shape=(2, 0, 3), dtype=int64),), kwargs_np = {}
args_cp = (array([], shape=(2, 0, 3), dtype=int64),), kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
        result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)
    
>       check_result(cupy, result_cp, result_np)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:125: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:87: in check_result
    check(xp, ret_a, ret_e)
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:48: in check
    check_array(actual, expected, **check_array_kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[4616381268789847428, 4619796151228017765, 4562917430359037952],
       [4613990343107250993, 4609288116924630667, 4606492340765129876]])
desired = array([[0, 0, 0],
       [0, 0, 0]]), rtol = 0.003, atol = 0.003
err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=0.003, atol=0.003
E       
E       Mismatched elements: 6 / 6 (100%)
E       Max absolute difference: 4619796151228017765
E       Max relative difference: inf
E        x: array([[4616381268789847428, 4619796151228017765, 4562917430359037952],
E              [4613990343107250993, 4609288116924630667, 4606492340765129876]])
E        y: array([[0, 0, 0],
E              [0, 0, 0]])

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 609, in cupy._core._reduction._SimpleReductionKernel._get_function
    return _SimpleReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 622, in cupy._core._reduction._SimpleReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 776, in cupy._core._reduction.ReductionKernel._get_function
    return _ReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 804, in cupy._core._reduction._ReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
___ TestFusionReductionAxis_param_26_{axis=2, shape=(2, 1, 4)}.test_sum_axis ___

self = <<cupy_tests.core_tests.fusion_tests.test_reduction.TestFusionReductionAxis_param_26_{axis=2, shape=(2, 1, 4)} testMethod=test_sum_axis>  parameter: {'axis': 2, 'shape': (2, 1, 4)}>
generate_inputs_kwargs = {}
generate_inputs = <bound method TestFusionReductionAxis.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_reduction.TestFusionReductionAxis_param_26_{axis=2, shape=(2, 1, 4)} testMethod=test_sum_axis>  parameter: {'axis': 2, 'shape': (2, 1, 4)}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[[5, 7, 6, 5]],

       [[4, 6, 4, 8]]]),), kwargs_np = {}
args_cp = (array([[[5, 7, 6, 5]],

       [[4, 6, 4, 8]]]),), kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
        result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)
    
>       check_result(cupy, result_cp, result_np)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:125: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:87: in check_result
    check(xp, ret_a, ret_e)
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:48: in check
    check_array(actual, expected, **check_array_kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[5],
       [7]]), desired = array([[23],
       [22]])
rtol = 0.003, atol = 0.003, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=0.003, atol=0.003
E       
E       Mismatched elements: 2 / 2 (100%)
E       Max absolute difference: 18
E       Max relative difference: 0.7826087
E        x: array([[5],
E              [7]])
E        y: array([[23],
E              [22]])

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 609, in cupy._core._reduction._SimpleReductionKernel._get_function
    return _SimpleReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 622, in cupy._core._reduction._SimpleReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 776, in cupy._core._reduction.ReductionKernel._get_function
    return _ReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 804, in cupy._core._reduction._ReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
_ TestFusionReductionAxis_param_26_{axis=2, shape=(2, 1, 4)}.test_sum_kwargs_axis _

self = <<cupy_tests.core_tests.fusion_tests.test_reduction.TestFusionReductionAxis_param_26_{axis=2, shape=(2, 1, 4)} testMethod=test_sum_kwargs_axis>  parameter: {'axis': 2, 'shape': (2, 1, 4)}>
generate_inputs_kwargs = {}
generate_inputs = <bound method TestFusionReductionAxis.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_reduction.TestFusio...nAxis_param_26_{axis=2, shape=(2, 1, 4)} testMethod=test_sum_kwargs_axis>  parameter: {'axis': 2, 'shape': (2, 1, 4)}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[[5, 7, 6, 5]],

       [[4, 6, 4, 8]]]),), kwargs_np = {}
args_cp = (array([[[5, 7, 6, 5]],

       [[4, 6, 4, 8]]]),), kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
        result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)
    
>       check_result(cupy, result_cp, result_np)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:125: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:87: in check_result
    check(xp, ret_a, ret_e)
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:48: in check
    check_array(actual, expected, **check_array_kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[5],
       [7]]), desired = array([[23],
       [22]])
rtol = 0.003, atol = 0.003, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=0.003, atol=0.003
E       
E       Mismatched elements: 2 / 2 (100%)
E       Max absolute difference: 18
E       Max relative difference: 0.7826087
E        x: array([[5],
E              [7]])
E        y: array([[23],
E              [22]])

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 609, in cupy._core._reduction._SimpleReductionKernel._get_function
    return _SimpleReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 622, in cupy._core._reduction._SimpleReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 776, in cupy._core._reduction.ReductionKernel._get_function
    return _ReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 804, in cupy._core._reduction._ReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
_ TestFusionReductionMultiAxis_param_1_{axis=None, shape=(3, 4)}.test_sum_axis _

self = <<cupy_tests.core_tests.fusion_tests.test_reduction.TestFusionReductionMultiAxis_param_1_{axis=None, shape=(3, 4)} testMethod=test_sum_axis>  parameter: {'axis': None, 'shape': (3, 4)}>
generate_inputs_kwargs = {}
generate_inputs = <bound method TestFusionReductionMultiAxis.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_reduction.Test...tionMultiAxis_param_1_{axis=None, shape=(3, 4)} testMethod=test_sum_axis>  parameter: {'axis': None, 'shape': (3, 4)}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[5, 7, 6, 5],
       [4, 6, 4, 8],
       [9, 3, 7, 5]]),)
kwargs_np = {}
args_cp = (array([[5, 7, 6, 5],
       [4, 6, 4, 8],
       [9, 3, 7, 5]]),)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
        result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)
    
>       check_result(cupy, result_cp, result_np)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:125: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:87: in check_result
    check(xp, ret_a, ret_e)
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:48: in check
    check_array(actual, expected, **check_array_kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array(5), desired = 69, rtol = 0.003, atol = 0.003, err_msg = ''
verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=0.003, atol=0.003
E       
E       Mismatched elements: 1 / 1 (100%)
E       Max absolute difference: 64
E       Max relative difference: 0.92753623
E        x: array(5)
E        y: array(69)

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 609, in cupy._core._reduction._SimpleReductionKernel._get_function
    return _SimpleReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 622, in cupy._core._reduction._SimpleReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 776, in cupy._core._reduction.ReductionKernel._get_function
    return _ReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 804, in cupy._core._reduction._ReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
_ TestFusionReductionMultiAxis_param_1_{axis=None, shape=(3, 4)}.test_sum_kwargs_axis _

self = <<cupy_tests.core_tests.fusion_tests.test_reduction.TestFusionReductionMultiAxis_param_1_{axis=None, shape=(3, 4)} testMethod=test_sum_kwargs_axis>  parameter: {'axis': None, 'shape': (3, 4)}>
generate_inputs_kwargs = {}
generate_inputs = <bound method TestFusionReductionMultiAxis.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_reduction.Test...tiAxis_param_1_{axis=None, shape=(3, 4)} testMethod=test_sum_kwargs_axis>  parameter: {'axis': None, 'shape': (3, 4)}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[5, 7, 6, 5],
       [4, 6, 4, 8],
       [9, 3, 7, 5]]),)
kwargs_np = {}
args_cp = (array([[5, 7, 6, 5],
       [4, 6, 4, 8],
       [9, 3, 7, 5]]),)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
        result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)
    
>       check_result(cupy, result_cp, result_np)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:125: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:87: in check_result
    check(xp, ret_a, ret_e)
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:48: in check
    check_array(actual, expected, **check_array_kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array(5), desired = 69, rtol = 0.003, atol = 0.003, err_msg = ''
verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=0.003, atol=0.003
E       
E       Mismatched elements: 1 / 1 (100%)
E       Max absolute difference: 64
E       Max relative difference: 0.92753623
E        x: array(5)
E        y: array(69)

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 609, in cupy._core._reduction._SimpleReductionKernel._get_function
    return _SimpleReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 622, in cupy._core._reduction._SimpleReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 776, in cupy._core._reduction.ReductionKernel._get_function
    return _ReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 804, in cupy._core._reduction._ReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
_ TestFusionReductionMultiAxis_param_2_{axis=None, shape=(2, 1, 4)}.test_sum_axis _

self = <<cupy_tests.core_tests.fusion_tests.test_reduction.TestFusionReductionMultiAxis_param_2_{axis=None, shape=(2, 1, 4)} testMethod=test_sum_axis>  parameter: {'axis': None, 'shape': (2, 1, 4)}>
generate_inputs_kwargs = {}
generate_inputs = <bound method TestFusionReductionMultiAxis.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_reduction.Test...ltiAxis_param_2_{axis=None, shape=(2, 1, 4)} testMethod=test_sum_axis>  parameter: {'axis': None, 'shape': (2, 1, 4)}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[[5, 7, 6, 5]],

       [[4, 6, 4, 8]]]),), kwargs_np = {}
args_cp = (array([[[5, 7, 6, 5]],

       [[4, 6, 4, 8]]]),), kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
        result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)
    
>       check_result(cupy, result_cp, result_np)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:125: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:87: in check_result
    check(xp, ret_a, ret_e)
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:48: in check
    check_array(actual, expected, **check_array_kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array(5), desired = 45, rtol = 0.003, atol = 0.003, err_msg = ''
verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=0.003, atol=0.003
E       
E       Mismatched elements: 1 / 1 (100%)
E       Max absolute difference: 40
E       Max relative difference: 0.88888889
E        x: array(5)
E        y: array(45)

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 609, in cupy._core._reduction._SimpleReductionKernel._get_function
    return _SimpleReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 622, in cupy._core._reduction._SimpleReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 776, in cupy._core._reduction.ReductionKernel._get_function
    return _ReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 804, in cupy._core._reduction._ReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
_ TestFusionReductionMultiAxis_param_2_{axis=None, shape=(2, 1, 4)}.test_sum_kwargs_axis _

self = <<cupy_tests.core_tests.fusion_tests.test_reduction.TestFusionReductionMultiAxis_param_2_{axis=None, shape=(2, 1, 4)} testMethod=test_sum_kwargs_axis>  parameter: {'axis': None, 'shape': (2, 1, 4)}>
generate_inputs_kwargs = {}
generate_inputs = <bound method TestFusionReductionMultiAxis.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_reduction.Test..._param_2_{axis=None, shape=(2, 1, 4)} testMethod=test_sum_kwargs_axis>  parameter: {'axis': None, 'shape': (2, 1, 4)}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[[5, 7, 6, 5]],

       [[4, 6, 4, 8]]]),), kwargs_np = {}
args_cp = (array([[[5, 7, 6, 5]],

       [[4, 6, 4, 8]]]),), kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
        result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)
    
>       check_result(cupy, result_cp, result_np)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:125: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:87: in check_result
    check(xp, ret_a, ret_e)
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:48: in check
    check_array(actual, expected, **check_array_kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array(5), desired = 45, rtol = 0.003, atol = 0.003, err_msg = ''
verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=0.003, atol=0.003
E       
E       Mismatched elements: 1 / 1 (100%)
E       Max absolute difference: 40
E       Max relative difference: 0.88888889
E        x: array(5)
E        y: array(45)

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 609, in cupy._core._reduction._SimpleReductionKernel._get_function
    return _SimpleReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 622, in cupy._core._reduction._SimpleReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 776, in cupy._core._reduction.ReductionKernel._get_function
    return _ReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 804, in cupy._core._reduction._ReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
_ TestFusionReductionMultiAxis_param_3_{axis=None, shape=(2, 0, 3)}.test_sum_axis _

self = <<cupy_tests.core_tests.fusion_tests.test_reduction.TestFusionReductionMultiAxis_param_3_{axis=None, shape=(2, 0, 3)} testMethod=test_sum_axis>  parameter: {'axis': None, 'shape': (2, 0, 3)}>
generate_inputs_kwargs = {}
generate_inputs = <bound method TestFusionReductionMultiAxis.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_reduction.Test...ltiAxis_param_3_{axis=None, shape=(2, 0, 3)} testMethod=test_sum_axis>  parameter: {'axis': None, 'shape': (2, 0, 3)}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([], shape=(2, 0, 3), dtype=int64),), kwargs_np = {}
args_cp = (array([], shape=(2, 0, 3), dtype=int64),), kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
        result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)
    
>       check_result(cupy, result_cp, result_np)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:125: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:87: in check_result
    check(xp, ret_a, ret_e)
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:48: in check
    check_array(actual, expected, **check_array_kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array(5), desired = 0, rtol = 0.003, atol = 0.003, err_msg = ''
verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=0.003, atol=0.003
E       
E       Mismatched elements: 1 / 1 (100%)
E       Max absolute difference: 5
E       Max relative difference: inf
E        x: array(5)
E        y: array(0)

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 609, in cupy._core._reduction._SimpleReductionKernel._get_function
    return _SimpleReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 622, in cupy._core._reduction._SimpleReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 776, in cupy._core._reduction.ReductionKernel._get_function
    return _ReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 804, in cupy._core._reduction._ReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
_ TestFusionReductionMultiAxis_param_3_{axis=None, shape=(2, 0, 3)}.test_sum_kwargs_axis _

self = <<cupy_tests.core_tests.fusion_tests.test_reduction.TestFusionReductionMultiAxis_param_3_{axis=None, shape=(2, 0, 3)} testMethod=test_sum_kwargs_axis>  parameter: {'axis': None, 'shape': (2, 0, 3)}>
generate_inputs_kwargs = {}
generate_inputs = <bound method TestFusionReductionMultiAxis.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_reduction.Test..._param_3_{axis=None, shape=(2, 0, 3)} testMethod=test_sum_kwargs_axis>  parameter: {'axis': None, 'shape': (2, 0, 3)}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([], shape=(2, 0, 3), dtype=int64),), kwargs_np = {}
args_cp = (array([], shape=(2, 0, 3), dtype=int64),), kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
        result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)
    
>       check_result(cupy, result_cp, result_np)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:125: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:87: in check_result
    check(xp, ret_a, ret_e)
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:48: in check
    check_array(actual, expected, **check_array_kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array(5), desired = 0, rtol = 0.003, atol = 0.003, err_msg = ''
verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=0.003, atol=0.003
E       
E       Mismatched elements: 1 / 1 (100%)
E       Max absolute difference: 5
E       Max relative difference: inf
E        x: array(5)
E        y: array(0)

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 609, in cupy._core._reduction._SimpleReductionKernel._get_function
    return _SimpleReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 622, in cupy._core._reduction._SimpleReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 776, in cupy._core._reduction.ReductionKernel._get_function
    return _ReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 804, in cupy._core._reduction._ReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
_ TestFusionReductionMultiAxis_param_4_{axis=None, shape=(2, 3, 2, 2, 3)}.test_sum_axis _

self = <<cupy_tests.core_tests.fusion_tests.test_reduction.TestFusionReductionMultiAxis_param_4_{axis=None, shape=(2, 3, 2, 2, 3)} testMethod=test_sum_axis>  parameter: {'axis': None, 'shape': (2, 3, 2, 2, 3)}>
generate_inputs_kwargs = {}
generate_inputs = <bound method TestFusionReductionMultiAxis.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_reduction.Test...m_4_{axis=None, shape=(2, 3, 2, 2, 3)} testMethod=test_sum_axis>  parameter: {'axis': None, 'shape': (2, 3, 2, 2, 3)}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[[[[5, 7, 6],
          [5, 4, 6]],

         [[4, 8, 9],
          [3, 7, 5]]],


        [[[5, 9, 0],
      ...],
          [2, 4, 2]]],


        [[[1, 1, 6],
          [1, 1, 3]],

         [[8, 0, 8],
          [0, 9, 4]]]]]),)
kwargs_np = {}
args_cp = (array([[[[[5, 7, 6],
          [5, 4, 6]],

         [[4, 8, 9],
          [3, 7, 5]]],


        [[[5, 9, 0],
      ...],
          [2, 4, 2]]],


        [[[1, 1, 6],
          [1, 1, 3]],

         [[8, 0, 8],
          [0, 9, 4]]]]]),)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
        result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)
    
>       check_result(cupy, result_cp, result_np)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:125: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:87: in check_result
    check(xp, ret_a, ret_e)
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:48: in check
    check_array(actual, expected, **check_array_kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array(30064788572), desired = 322, rtol = 0.003, atol = 0.003
err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=0.003, atol=0.003
E       
E       Mismatched elements: 1 / 1 (100%)
E       Max absolute difference: 30064788250
E       Max relative difference: 93368907.60869566
E        x: array(30064788572)
E        y: array(322)

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 609, in cupy._core._reduction._SimpleReductionKernel._get_function
    return _SimpleReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 622, in cupy._core._reduction._SimpleReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 776, in cupy._core._reduction.ReductionKernel._get_function
    return _ReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 804, in cupy._core._reduction._ReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
_ TestFusionReductionMultiAxis_param_4_{axis=None, shape=(2, 3, 2, 2, 3)}.test_sum_kwargs_axis _

self = <<cupy_tests.core_tests.fusion_tests.test_reduction.TestFusionReductionMultiAxis_param_4_{axis=None, shape=(2, 3, 2, 2, 3)} testMethod=test_sum_kwargs_axis>  parameter: {'axis': None, 'shape': (2, 3, 2, 2, 3)}>
generate_inputs_kwargs = {}
generate_inputs = <bound method TestFusionReductionMultiAxis.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_reduction.Test...is=None, shape=(2, 3, 2, 2, 3)} testMethod=test_sum_kwargs_axis>  parameter: {'axis': None, 'shape': (2, 3, 2, 2, 3)}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[[[[5, 7, 6],
          [5, 4, 6]],

         [[4, 8, 9],
          [3, 7, 5]]],


        [[[5, 9, 0],
      ...],
          [2, 4, 2]]],


        [[[1, 1, 6],
          [1, 1, 3]],

         [[8, 0, 8],
          [0, 9, 4]]]]]),)
kwargs_np = {}
args_cp = (array([[[[[5, 7, 6],
          [5, 4, 6]],

         [[4, 8, 9],
          [3, 7, 5]]],


        [[[5, 9, 0],
      ...],
          [2, 4, 2]]],


        [[[1, 1, 6],
          [1, 1, 3]],

         [[8, 0, 8],
          [0, 9, 4]]]]]),)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
        result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)
    
>       check_result(cupy, result_cp, result_np)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:125: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:87: in check_result
    check(xp, ret_a, ret_e)
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:48: in check
    check_array(actual, expected, **check_array_kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array(5), desired = 322, rtol = 0.003, atol = 0.003, err_msg = ''
verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=0.003, atol=0.003
E       
E       Mismatched elements: 1 / 1 (100%)
E       Max absolute difference: 317
E       Max relative difference: 0.98447205
E        x: array(5)
E        y: array(322)

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 609, in cupy._core._reduction._SimpleReductionKernel._get_function
    return _SimpleReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 622, in cupy._core._reduction._SimpleReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 776, in cupy._core._reduction.ReductionKernel._get_function
    return _ReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 804, in cupy._core._reduction._ReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
_ TestFusionReductionMultiAxis_param_6_{axis=(0,), shape=(3, 4)}.test_sum_axis _

self = <<cupy_tests.core_tests.fusion_tests.test_reduction.TestFusionReductionMultiAxis_param_6_{axis=(0,), shape=(3, 4)} testMethod=test_sum_axis>  parameter: {'axis': (0,), 'shape': (3, 4)}>
generate_inputs_kwargs = {}
generate_inputs = <bound method TestFusionReductionMultiAxis.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_reduction.Test...tionMultiAxis_param_6_{axis=(0,), shape=(3, 4)} testMethod=test_sum_axis>  parameter: {'axis': (0,), 'shape': (3, 4)}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[5, 7, 6, 5],
       [4, 6, 4, 8],
       [9, 3, 7, 5]]),)
kwargs_np = {}
args_cp = (array([[5, 7, 6, 5],
       [4, 6, 4, 8],
       [9, 3, 7, 5]]),)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
        result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)
    
>       check_result(cupy, result_cp, result_np)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:125: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:87: in check_result
    check(xp, ret_a, ret_e)
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:48: in check
    check_array(actual, expected, **check_array_kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([5, 7, 6, 5]), desired = array([18, 16, 17, 18]), rtol = 0.003
atol = 0.003, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=0.003, atol=0.003
E       
E       Mismatched elements: 4 / 4 (100%)
E       Max absolute difference: 13
E       Max relative difference: 0.72222222
E        x: array([5, 7, 6, 5])
E        y: array([18, 16, 17, 18])

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 609, in cupy._core._reduction._SimpleReductionKernel._get_function
    return _SimpleReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 622, in cupy._core._reduction._SimpleReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 776, in cupy._core._reduction.ReductionKernel._get_function
    return _ReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 804, in cupy._core._reduction._ReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
_ TestFusionReductionMultiAxis_param_6_{axis=(0,), shape=(3, 4)}.test_sum_kwargs_axis _

self = <<cupy_tests.core_tests.fusion_tests.test_reduction.TestFusionReductionMultiAxis_param_6_{axis=(0,), shape=(3, 4)} testMethod=test_sum_kwargs_axis>  parameter: {'axis': (0,), 'shape': (3, 4)}>
generate_inputs_kwargs = {}
generate_inputs = <bound method TestFusionReductionMultiAxis.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_reduction.Test...tiAxis_param_6_{axis=(0,), shape=(3, 4)} testMethod=test_sum_kwargs_axis>  parameter: {'axis': (0,), 'shape': (3, 4)}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[5, 7, 6, 5],
       [4, 6, 4, 8],
       [9, 3, 7, 5]]),)
kwargs_np = {}
args_cp = (array([[5, 7, 6, 5],
       [4, 6, 4, 8],
       [9, 3, 7, 5]]),)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
        result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)
    
>       check_result(cupy, result_cp, result_np)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:125: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:87: in check_result
    check(xp, ret_a, ret_e)
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:48: in check
    check_array(actual, expected, **check_array_kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([5, 7, 6, 5]), desired = array([18, 16, 17, 18]), rtol = 0.003
atol = 0.003, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=0.003, atol=0.003
E       
E       Mismatched elements: 4 / 4 (100%)
E       Max absolute difference: 13
E       Max relative difference: 0.72222222
E        x: array([5, 7, 6, 5])
E        y: array([18, 16, 17, 18])

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 609, in cupy._core._reduction._SimpleReductionKernel._get_function
    return _SimpleReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 622, in cupy._core._reduction._SimpleReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 776, in cupy._core._reduction.ReductionKernel._get_function
    return _ReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 804, in cupy._core._reduction._ReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
_ TestFusionReductionMultiAxis_param_7_{axis=(0,), shape=(2, 1, 4)}.test_sum_axis _

self = <<cupy_tests.core_tests.fusion_tests.test_reduction.TestFusionReductionMultiAxis_param_7_{axis=(0,), shape=(2, 1, 4)} testMethod=test_sum_axis>  parameter: {'axis': (0,), 'shape': (2, 1, 4)}>
generate_inputs_kwargs = {}
generate_inputs = <bound method TestFusionReductionMultiAxis.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_reduction.Test...ltiAxis_param_7_{axis=(0,), shape=(2, 1, 4)} testMethod=test_sum_axis>  parameter: {'axis': (0,), 'shape': (2, 1, 4)}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[[5, 7, 6, 5]],

       [[4, 6, 4, 8]]]),), kwargs_np = {}
args_cp = (array([[[5, 7, 6, 5]],

       [[4, 6, 4, 8]]]),), kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
        result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)
    
>       check_result(cupy, result_cp, result_np)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:125: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:87: in check_result
    check(xp, ret_a, ret_e)
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:48: in check
    check_array(actual, expected, **check_array_kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[30064771076, 12884901888,           0,           0]])
desired = array([[ 9, 13, 10, 13]]), rtol = 0.003, atol = 0.003, err_msg = ''
verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=0.003, atol=0.003
E       
E       Mismatched elements: 4 / 4 (100%)
E       Max absolute difference: 30064771067
E       Max relative difference: 3.34053012e+09
E        x: array([[30064771076, 12884901888,           0,           0]])
E        y: array([[ 9, 13, 10, 13]])

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 609, in cupy._core._reduction._SimpleReductionKernel._get_function
    return _SimpleReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 622, in cupy._core._reduction._SimpleReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 776, in cupy._core._reduction.ReductionKernel._get_function
    return _ReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 804, in cupy._core._reduction._ReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
_ TestFusionReductionMultiAxis_param_7_{axis=(0,), shape=(2, 1, 4)}.test_sum_kwargs_axis _

self = <<cupy_tests.core_tests.fusion_tests.test_reduction.TestFusionReductionMultiAxis_param_7_{axis=(0,), shape=(2, 1, 4)} testMethod=test_sum_kwargs_axis>  parameter: {'axis': (0,), 'shape': (2, 1, 4)}>
generate_inputs_kwargs = {}
generate_inputs = <bound method TestFusionReductionMultiAxis.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_reduction.Test..._param_7_{axis=(0,), shape=(2, 1, 4)} testMethod=test_sum_kwargs_axis>  parameter: {'axis': (0,), 'shape': (2, 1, 4)}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[[5, 7, 6, 5]],

       [[4, 6, 4, 8]]]),), kwargs_np = {}
args_cp = (array([[[5, 7, 6, 5]],

       [[4, 6, 4, 8]]]),), kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
        result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)
    
>       check_result(cupy, result_cp, result_np)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:125: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:87: in check_result
    check(xp, ret_a, ret_e)
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:48: in check
    check_array(actual, expected, **check_array_kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[          4, 21474836486, 25769803780, 34359738372]])
desired = array([[ 9, 13, 10, 13]]), rtol = 0.003, atol = 0.003, err_msg = ''
verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=0.003, atol=0.003
E       
E       Mismatched elements: 4 / 4 (100%)
E       Max absolute difference: 34359738359
E       Max relative difference: 2.6430568e+09
E        x: array([[          4, 21474836486, 25769803780, 34359738372]])
E        y: array([[ 9, 13, 10, 13]])

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 609, in cupy._core._reduction._SimpleReductionKernel._get_function
    return _SimpleReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 622, in cupy._core._reduction._SimpleReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 776, in cupy._core._reduction.ReductionKernel._get_function
    return _ReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 804, in cupy._core._reduction._ReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
_ TestFusionReductionMultiAxis_param_9_{axis=(0,), shape=(2, 3, 2, 2, 3)}.test_sum_axis _

self = <<cupy_tests.core_tests.fusion_tests.test_reduction.TestFusionReductionMultiAxis_param_9_{axis=(0,), shape=(2, 3, 2, 2, 3)} testMethod=test_sum_axis>  parameter: {'axis': (0,), 'shape': (2, 3, 2, 2, 3)}>
generate_inputs_kwargs = {}
generate_inputs = <bound method TestFusionReductionMultiAxis.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_reduction.Test...m_9_{axis=(0,), shape=(2, 3, 2, 2, 3)} testMethod=test_sum_axis>  parameter: {'axis': (0,), 'shape': (2, 3, 2, 2, 3)}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[[[[5, 7, 6],
          [5, 4, 6]],

         [[4, 8, 9],
          [3, 7, 5]]],


        [[[5, 9, 0],
      ...],
          [2, 4, 2]]],


        [[[1, 1, 6],
          [1, 1, 3]],

         [[8, 0, 8],
          [0, 9, 4]]]]]),)
kwargs_np = {}
args_cp = (array([[[[[5, 7, 6],
          [5, 4, 6]],

         [[4, 8, 9],
          [3, 7, 5]]],


        [[[5, 9, 0],
      ...],
          [2, 4, 2]]],


        [[[1, 1, 6],
          [1, 1, 3]],

         [[8, 0, 8],
          [0, 9, 4]]]]]),)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
        result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)
    
>       check_result(cupy, result_cp, result_np)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:125: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:87: in check_result
    check(xp, ret_a, ret_e)
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:48: in check
    check_array(actual, expected, **check_array_kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[[[                  4,                   7,
                            0],
         [                  3, 461...
          4607182418800017408],
         [4607182418800017408, 4607182418800017408,
          4607182418800017408]]]])
desired = array([[[[11, 13, 15],
         [11,  7, 10]],

        [[10,  8, 15],
         [ 9,  9,  6]]],


       [[[ 8, 12,  5...     [ 9,  8,  9]]],


       [[[ 2,  7,  7],
         [10,  6,  7]],

        [[10,  7, 12],
         [ 5,  9, 10]]]])
rtol = 0.003, atol = 0.003, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=0.003, atol=0.003
E       
E       Mismatched elements: 36 / 36 (100%)
E       Max absolute difference: 4621614557116137459
E       Max relative difference: 2.30359121e+18
E        x: array([[[[                  4,                   7,
E                                   0],
E                [                  3, 4616455947418478938,...
E        y: array([[[[11, 13, 15],
E                [11,  7, 10]],
E       ...

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 609, in cupy._core._reduction._SimpleReductionKernel._get_function
    return _SimpleReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 622, in cupy._core._reduction._SimpleReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 776, in cupy._core._reduction.ReductionKernel._get_function
    return _ReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 804, in cupy._core._reduction._ReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
_ TestFusionReductionMultiAxis_param_9_{axis=(0,), shape=(2, 3, 2, 2, 3)}.test_sum_kwargs_axis _

self = <<cupy_tests.core_tests.fusion_tests.test_reduction.TestFusionReductionMultiAxis_param_9_{axis=(0,), shape=(2, 3, 2, 2, 3)} testMethod=test_sum_kwargs_axis>  parameter: {'axis': (0,), 'shape': (2, 3, 2, 2, 3)}>
generate_inputs_kwargs = {}
generate_inputs = <bound method TestFusionReductionMultiAxis.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_reduction.Test...is=(0,), shape=(2, 3, 2, 2, 3)} testMethod=test_sum_kwargs_axis>  parameter: {'axis': (0,), 'shape': (2, 3, 2, 2, 3)}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[[[[5, 7, 6],
          [5, 4, 6]],

         [[4, 8, 9],
          [3, 7, 5]]],


        [[[5, 9, 0],
      ...],
          [2, 4, 2]]],


        [[[1, 1, 6],
          [1, 1, 3]],

         [[8, 0, 8],
          [0, 9, 4]]]]]),)
kwargs_np = {}
args_cp = (array([[[[[5, 7, 6],
          [5, 4, 6]],

         [[4, 8, 9],
          [3, 7, 5]]],


        [[[5, 9, 0],
      ...],
          [2, 4, 2]]],


        [[[1, 1, 6],
          [1, 1, 3]],

         [[8, 0, 8],
          [0, 9, 4]]]]]),)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
        result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)
    
>       check_result(cupy, result_cp, result_np)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:125: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:87: in check_result
    check(xp, ret_a, ret_e)
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:48: in check
    check_array(actual, expected, **check_array_kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[[[                  5,                   7,
                            6],
         [                  5,    ...
          4607182418800017408],
         [4607182418800017408, 4607182418800017408,
          4607182418800017408]]]])
desired = array([[[[11, 13, 15],
         [11,  7, 10]],

        [[10,  8, 15],
         [ 9,  9,  6]]],


       [[[ 8, 12,  5...     [ 9,  8,  9]]],


       [[[ 2,  7,  7],
         [10,  6,  7]],

        [[10,  7, 12],
         [ 5,  9, 10]]]])
rtol = 0.003, atol = 0.003, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=0.003, atol=0.003
E       
E       Mismatched elements: 35 / 36 (97.2%)
E       Max absolute difference: 4627448617123184631
E       Max relative difference: 2.30359121e+18
E        x: array([[[[                  5,                   7,
E                                   6],
E                [                  5,                   4,...
E        y: array([[[[11, 13, 15],
E                [11,  7, 10]],
E       ...

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 609, in cupy._core._reduction._SimpleReductionKernel._get_function
    return _SimpleReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 622, in cupy._core._reduction._SimpleReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 776, in cupy._core._reduction.ReductionKernel._get_function
    return _ReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 804, in cupy._core._reduction._ReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
_ TestFusionReductionMultiAxis_param_11_{axis=(1,), shape=(3, 4)}.test_sum_axis _

self = <<cupy_tests.core_tests.fusion_tests.test_reduction.TestFusionReductionMultiAxis_param_11_{axis=(1,), shape=(3, 4)} testMethod=test_sum_axis>  parameter: {'axis': (1,), 'shape': (3, 4)}>
generate_inputs_kwargs = {}
generate_inputs = <bound method TestFusionReductionMultiAxis.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_reduction.Test...ionMultiAxis_param_11_{axis=(1,), shape=(3, 4)} testMethod=test_sum_axis>  parameter: {'axis': (1,), 'shape': (3, 4)}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[5, 7, 6, 5],
       [4, 6, 4, 8],
       [9, 3, 7, 5]]),)
kwargs_np = {}
args_cp = (array([[5, 7, 6, 5],
       [4, 6, 4, 8],
       [9, 3, 7, 5]]),)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
        result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)
    
>       check_result(cupy, result_cp, result_np)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:125: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:87: in check_result
    check(xp, ret_a, ret_e)
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:48: in check
    check_array(actual, expected, **check_array_kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([5, 7, 6]), desired = array([23, 22, 24]), rtol = 0.003
atol = 0.003, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=0.003, atol=0.003
E       
E       Mismatched elements: 3 / 3 (100%)
E       Max absolute difference: 18
E       Max relative difference: 0.7826087
E        x: array([5, 7, 6])
E        y: array([23, 22, 24])

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 609, in cupy._core._reduction._SimpleReductionKernel._get_function
    return _SimpleReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 622, in cupy._core._reduction._SimpleReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 776, in cupy._core._reduction.ReductionKernel._get_function
    return _ReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 804, in cupy._core._reduction._ReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
_ TestFusionReductionMultiAxis_param_11_{axis=(1,), shape=(3, 4)}.test_sum_kwargs_axis _

self = <<cupy_tests.core_tests.fusion_tests.test_reduction.TestFusionReductionMultiAxis_param_11_{axis=(1,), shape=(3, 4)} testMethod=test_sum_kwargs_axis>  parameter: {'axis': (1,), 'shape': (3, 4)}>
generate_inputs_kwargs = {}
generate_inputs = <bound method TestFusionReductionMultiAxis.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_reduction.Test...iAxis_param_11_{axis=(1,), shape=(3, 4)} testMethod=test_sum_kwargs_axis>  parameter: {'axis': (1,), 'shape': (3, 4)}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[5, 7, 6, 5],
       [4, 6, 4, 8],
       [9, 3, 7, 5]]),)
kwargs_np = {}
args_cp = (array([[5, 7, 6, 5],
       [4, 6, 4, 8],
       [9, 3, 7, 5]]),)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
        result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)
    
>       check_result(cupy, result_cp, result_np)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:125: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:87: in check_result
    check(xp, ret_a, ret_e)
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:48: in check
    check_array(actual, expected, **check_array_kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([5, 7, 6]), desired = array([23, 22, 24]), rtol = 0.003
atol = 0.003, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=0.003, atol=0.003
E       
E       Mismatched elements: 3 / 3 (100%)
E       Max absolute difference: 18
E       Max relative difference: 0.7826087
E        x: array([5, 7, 6])
E        y: array([23, 22, 24])

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 609, in cupy._core._reduction._SimpleReductionKernel._get_function
    return _SimpleReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 622, in cupy._core._reduction._SimpleReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 776, in cupy._core._reduction.ReductionKernel._get_function
    return _ReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 804, in cupy._core._reduction._ReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
_ TestFusionReductionMultiAxis_param_12_{axis=(1,), shape=(2, 1, 4)}.test_sum_axis _

self = <<cupy_tests.core_tests.fusion_tests.test_reduction.TestFusionReductionMultiAxis_param_12_{axis=(1,), shape=(2, 1, 4)} testMethod=test_sum_axis>  parameter: {'axis': (1,), 'shape': (2, 1, 4)}>
generate_inputs_kwargs = {}
generate_inputs = <bound method TestFusionReductionMultiAxis.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_reduction.Test...tiAxis_param_12_{axis=(1,), shape=(2, 1, 4)} testMethod=test_sum_axis>  parameter: {'axis': (1,), 'shape': (2, 1, 4)}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[[5, 7, 6, 5]],

       [[4, 6, 4, 8]]]),), kwargs_np = {}
args_cp = (array([[[5, 7, 6, 5]],

       [[4, 6, 4, 8]]]),), kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
        result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)
    
>       check_result(cupy, result_cp, result_np)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:125: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:87: in check_result
    check(xp, ret_a, ret_e)
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:48: in check
    check_array(actual, expected, **check_array_kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[        30064771076,         12884901888,                   0,
                          0],
       [                  0,                   0, 4607182418800017408,
        4607182418800017408]])
desired = array([[5, 7, 6, 5],
       [4, 6, 4, 8]]), rtol = 0.003, atol = 0.003
err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=0.003, atol=0.003
E       
E       Mismatched elements: 8 / 8 (100%)
E       Max absolute difference: 4607182418800017404
E       Max relative difference: 1.1517956e+18
E        x: array([[        30064771076,         12884901888,                   0,
E                                 0],
E              [                  0,                   0, 4607182418800017408,
E               4607182418800017408]])
E        y: array([[5, 7, 6, 5],
E              [4, 6, 4, 8]])

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 609, in cupy._core._reduction._SimpleReductionKernel._get_function
    return _SimpleReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 622, in cupy._core._reduction._SimpleReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 776, in cupy._core._reduction.ReductionKernel._get_function
    return _ReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 804, in cupy._core._reduction._ReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
_ TestFusionReductionMultiAxis_param_12_{axis=(1,), shape=(2, 1, 4)}.test_sum_kwargs_axis _

self = <<cupy_tests.core_tests.fusion_tests.test_reduction.TestFusionReductionMultiAxis_param_12_{axis=(1,), shape=(2, 1, 4)} testMethod=test_sum_kwargs_axis>  parameter: {'axis': (1,), 'shape': (2, 1, 4)}>
generate_inputs_kwargs = {}
generate_inputs = <bound method TestFusionReductionMultiAxis.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_reduction.Test...param_12_{axis=(1,), shape=(2, 1, 4)} testMethod=test_sum_kwargs_axis>  parameter: {'axis': (1,), 'shape': (2, 1, 4)}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[[5, 7, 6, 5]],

       [[4, 6, 4, 8]]]),), kwargs_np = {}
args_cp = (array([[[5, 7, 6, 5]],

       [[4, 6, 4, 8]]]),), kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
        result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)
    
>       check_result(cupy, result_cp, result_np)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:125: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:87: in check_result
    check(xp, ret_a, ret_e)
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:48: in check
    check_array(actual, expected, **check_array_kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[                  4,         21474836486,         25769803780,
                34359738372],
       [        12884901897,         21474836487, 4607182418800017408,
        4607182418800017408]])
desired = array([[5, 7, 6, 5],
       [4, 6, 4, 8]]), rtol = 0.003, atol = 0.003
err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=0.003, atol=0.003
E       
E       Mismatched elements: 8 / 8 (100%)
E       Max absolute difference: 4607182418800017404
E       Max relative difference: 1.1517956e+18
E        x: array([[                  4,         21474836486,         25769803780,
E                       34359738372],
E              [        12884901897,         21474836487, 4607182418800017408,
E               4607182418800017408]])
E        y: array([[5, 7, 6, 5],
E              [4, 6, 4, 8]])

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 609, in cupy._core._reduction._SimpleReductionKernel._get_function
    return _SimpleReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 622, in cupy._core._reduction._SimpleReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 776, in cupy._core._reduction.ReductionKernel._get_function
    return _ReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 804, in cupy._core._reduction._ReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
_ TestFusionReductionMultiAxis_param_13_{axis=(1,), shape=(2, 0, 3)}.test_sum_axis _

self = <<cupy_tests.core_tests.fusion_tests.test_reduction.TestFusionReductionMultiAxis_param_13_{axis=(1,), shape=(2, 0, 3)} testMethod=test_sum_axis>  parameter: {'axis': (1,), 'shape': (2, 0, 3)}>
generate_inputs_kwargs = {}
generate_inputs = <bound method TestFusionReductionMultiAxis.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_reduction.Test...tiAxis_param_13_{axis=(1,), shape=(2, 0, 3)} testMethod=test_sum_axis>  parameter: {'axis': (1,), 'shape': (2, 0, 3)}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([], shape=(2, 0, 3), dtype=int64),), kwargs_np = {}
args_cp = (array([], shape=(2, 0, 3), dtype=int64),), kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
        result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)
    
>       check_result(cupy, result_cp, result_np)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:125: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:87: in check_result
    check(xp, ret_a, ret_e)
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:48: in check
    check_array(actual, expected, **check_array_kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[5, 7, 6],
       [5, 4, 6]])
desired = array([[0, 0, 0],
       [0, 0, 0]]), rtol = 0.003, atol = 0.003
err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=0.003, atol=0.003
E       
E       Mismatched elements: 6 / 6 (100%)
E       Max absolute difference: 7
E       Max relative difference: inf
E        x: array([[5, 7, 6],
E              [5, 4, 6]])
E        y: array([[0, 0, 0],
E              [0, 0, 0]])

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 609, in cupy._core._reduction._SimpleReductionKernel._get_function
    return _SimpleReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 622, in cupy._core._reduction._SimpleReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 776, in cupy._core._reduction.ReductionKernel._get_function
    return _ReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 804, in cupy._core._reduction._ReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
_ TestFusionReductionMultiAxis_param_13_{axis=(1,), shape=(2, 0, 3)}.test_sum_kwargs_axis _

self = <<cupy_tests.core_tests.fusion_tests.test_reduction.TestFusionReductionMultiAxis_param_13_{axis=(1,), shape=(2, 0, 3)} testMethod=test_sum_kwargs_axis>  parameter: {'axis': (1,), 'shape': (2, 0, 3)}>
generate_inputs_kwargs = {}
generate_inputs = <bound method TestFusionReductionMultiAxis.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_reduction.Test...param_13_{axis=(1,), shape=(2, 0, 3)} testMethod=test_sum_kwargs_axis>  parameter: {'axis': (1,), 'shape': (2, 0, 3)}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([], shape=(2, 0, 3), dtype=int64),), kwargs_np = {}
args_cp = (array([], shape=(2, 0, 3), dtype=int64),), kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
        result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)
    
>       check_result(cupy, result_cp, result_np)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:125: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:87: in check_result
    check(xp, ret_a, ret_e)
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:48: in check
    check_array(actual, expected, **check_array_kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[5, 7, 6],
       [5, 4, 6]])
desired = array([[0, 0, 0],
       [0, 0, 0]]), rtol = 0.003, atol = 0.003
err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=0.003, atol=0.003
E       
E       Mismatched elements: 6 / 6 (100%)
E       Max absolute difference: 7
E       Max relative difference: inf
E        x: array([[5, 7, 6],
E              [5, 4, 6]])
E        y: array([[0, 0, 0],
E              [0, 0, 0]])

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 609, in cupy._core._reduction._SimpleReductionKernel._get_function
    return _SimpleReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 622, in cupy._core._reduction._SimpleReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 776, in cupy._core._reduction.ReductionKernel._get_function
    return _ReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 804, in cupy._core._reduction._ReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
_ TestFusionReductionMultiAxis_param_14_{axis=(1,), shape=(2, 3, 2, 2, 3)}.test_sum_axis _

self = <<cupy_tests.core_tests.fusion_tests.test_reduction.TestFusionReductionMultiAxis_param_14_{axis=(1,), shape=(2, 3, 2, 2, 3)} testMethod=test_sum_axis>  parameter: {'axis': (1,), 'shape': (2, 3, 2, 2, 3)}>
generate_inputs_kwargs = {}
generate_inputs = <bound method TestFusionReductionMultiAxis.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_reduction.Test..._14_{axis=(1,), shape=(2, 3, 2, 2, 3)} testMethod=test_sum_axis>  parameter: {'axis': (1,), 'shape': (2, 3, 2, 2, 3)}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[[[[5, 7, 6],
          [5, 4, 6]],

         [[4, 8, 9],
          [3, 7, 5]]],


        [[[5, 9, 0],
      ...],
          [2, 4, 2]]],


        [[[1, 1, 6],
          [1, 1, 3]],

         [[8, 0, 8],
          [0, 9, 4]]]]]),)
kwargs_np = {}
args_cp = (array([[[[[5, 7, 6],
          [5, 4, 6]],

         [[4, 8, 9],
          [3, 7, 5]]],


        [[[5, 9, 0],
      ...],
          [2, 4, 2]]],


        [[[1, 1, 6],
          [1, 1, 3]],

         [[8, 0, 8],
          [0, 9, 4]]]]]),)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
        result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)
    
>       check_result(cupy, result_cp, result_np)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:125: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:87: in check_result
    check(xp, ret_a, ret_e)
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:48: in check
    check_array(actual, expected, **check_array_kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[[[                  5,                   7,
                            6],
         [                  5,    ...
          4607182418800017408],
         [4607182418800017408, 4607182418800017408,
          4607182418800017408]]]])
desired = array([[[[11, 22,  7],
         [14,  9, 18]],

        [[13, 23, 22],
         [15, 11, 18]]],


       [[[10, 10, 20],
         [11, 13,  8]],

        [[16,  1, 20],
         [ 8, 15,  7]]]])
rtol = 0.003, atol = 0.003, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=0.003, atol=0.003
E       
E       Mismatched elements: 24 / 24 (100%)
E       Max absolute difference: 4607182418800017407
E       Max relative difference: 4.60718242e+18
E        x: array([[[[                  5,                   7,
E                                   6],
E                [                  5,                   4,...
E        y: array([[[[11, 22,  7],
E                [14,  9, 18]],
E       ...

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 609, in cupy._core._reduction._SimpleReductionKernel._get_function
    return _SimpleReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 622, in cupy._core._reduction._SimpleReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 776, in cupy._core._reduction.ReductionKernel._get_function
    return _ReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 804, in cupy._core._reduction._ReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
_ TestFusionReductionMultiAxis_param_14_{axis=(1,), shape=(2, 3, 2, 2, 3)}.test_sum_kwargs_axis _

self = <<cupy_tests.core_tests.fusion_tests.test_reduction.TestFusionReductionMultiAxis_param_14_{axis=(1,), shape=(2, 3, 2, 2, 3)} testMethod=test_sum_kwargs_axis>  parameter: {'axis': (1,), 'shape': (2, 3, 2, 2, 3)}>
generate_inputs_kwargs = {}
generate_inputs = <bound method TestFusionReductionMultiAxis.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_reduction.Test...is=(1,), shape=(2, 3, 2, 2, 3)} testMethod=test_sum_kwargs_axis>  parameter: {'axis': (1,), 'shape': (2, 3, 2, 2, 3)}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[[[[5, 7, 6],
          [5, 4, 6]],

         [[4, 8, 9],
          [3, 7, 5]]],


        [[[5, 9, 0],
      ...],
          [2, 4, 2]]],


        [[[1, 1, 6],
          [1, 1, 3]],

         [[8, 0, 8],
          [0, 9, 4]]]]]),)
kwargs_np = {}
args_cp = (array([[[[[5, 7, 6],
          [5, 4, 6]],

         [[4, 8, 9],
          [3, 7, 5]]],


        [[[5, 9, 0],
      ...],
          [2, 4, 2]]],


        [[[1, 1, 6],
          [1, 1, 3]],

         [[8, 0, 8],
          [0, 9, 4]]]]]),)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
        result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)
    
>       check_result(cupy, result_cp, result_np)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:125: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:87: in check_result
    check(xp, ret_a, ret_e)
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:48: in check
    check_array(actual, expected, **check_array_kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[[[ 5,  7,  6],
         [ 5,  4,  6]],

        [[ 4,  8,  9],
         [ 3,  7,  5]]],


       [[[13, 14, 15],
         [16, 17, 18]],

        [[19, 20, 21],
         [22, 23, 24]]]])
desired = array([[[[11, 22,  7],
         [14,  9, 18]],

        [[13, 23, 22],
         [15, 11, 18]]],


       [[[10, 10, 20],
         [11, 13,  8]],

        [[16,  1, 20],
         [ 8, 15,  7]]]])
rtol = 0.003, atol = 0.003, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=0.003, atol=0.003
E       
E       Mismatched elements: 24 / 24 (100%)
E       Max absolute difference: 19
E       Max relative difference: 19.
E        x: array([[[[ 5,  7,  6],
E                [ 5,  4,  6]],
E       ...
E        y: array([[[[11, 22,  7],
E                [14,  9, 18]],
E       ...

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 609, in cupy._core._reduction._SimpleReductionKernel._get_function
    return _SimpleReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 622, in cupy._core._reduction._SimpleReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 776, in cupy._core._reduction.ReductionKernel._get_function
    return _ReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 804, in cupy._core._reduction._ReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
_ TestFusionReductionMultiAxis_param_16_{axis=(0, 1), shape=(3, 4)}.test_sum_axis _

self = <<cupy_tests.core_tests.fusion_tests.test_reduction.TestFusionReductionMultiAxis_param_16_{axis=(0, 1), shape=(3, 4)} testMethod=test_sum_axis>  parameter: {'axis': (0, 1), 'shape': (3, 4)}>
generate_inputs_kwargs = {}
generate_inputs = <bound method TestFusionReductionMultiAxis.generate_inputs of <<cupy_tests.core_tests.fusion_tests.test_reduction.Test...ultiAxis_param_16_{axis=(0, 1), shape=(3, 4)} testMethod=test_sum_axis>  parameter: {'axis': (0, 1), 'shape': (3, 4)}>>
impl_fuse_np = <Fusion 'impl_fuse_np'>, impl_fuse_cp = <Fusion 'impl_fuse_cp'>
args_np = (array([[5, 7, 6, 5],
       [4, 6, 4, 8],
       [9, 3, 7, 5]]),)
kwargs_np = {}
args_cp = (array([[5, 7, 6, 5],
       [4, 6, 4, 8],
       [9, 3, 7, 5]]),)
kwargs_cp = {}

    def wrapper(self, **generate_inputs_kwargs):
        generate_inputs = getattr(self, generate_inputs_name)
    
        impl_np = func(self, numpy, **generate_inputs_kwargs)
        impl_cp = func(self, cupy, **generate_inputs_kwargs)
    
        # TODO(imanishi): Fix these workaround after `cupy.fuse`
        # supports lambda function.
        # If `cupy.fuse` supports lambda function, these lines can be
        # written more simply (as `impl_fuse_np = cupy.fuse(impl_np)`).
        @cupy.fuse()
        def impl_fuse_np(*args, **kwargs):
            return impl_np(*args, **kwargs)
    
        @cupy.fuse()
        def impl_fuse_cp(*args, **kwargs):
            return impl_cp(*args, **kwargs)
    
        args_np, kwargs_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_cp, kwargs_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_np, kwargs_fuse_np = generate_inputs(
            numpy, *generate_inputs_args, **generate_inputs_kwargs)
        args_fuse_cp, kwargs_fuse_cp = generate_inputs(
            cupy, *generate_inputs_args, **generate_inputs_kwargs)
    
        result_np = call(impl_np, args_np, kwargs_np)
        result_cp = call(impl_cp, args_cp, kwargs_cp)
        result_fuse_np = call(impl_fuse_np, args_fuse_np, kwargs_fuse_np)
        result_fuse_cp = call(impl_fuse_cp, args_fuse_cp, kwargs_fuse_cp)
    
>       check_result(cupy, result_cp, result_np)

tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:125: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:87: in check_result
    check(xp, ret_a, ret_e)
tests/cupy_tests/core_tests/fusion_tests/fusion_utils.py:48: in check
    check_array(actual, expected, **check_array_kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array(4), desired = 69, rtol = 0.003, atol = 0.003, err_msg = ''
verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=0.003, atol=0.003
E       
E       Mismatched elements: 1 / 1 (100%)
E       Max absolute difference: 65
E       Max relative difference: 0.94202899
E        x: array(4)
E        y: array(69)

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 609, in cupy._core._reduction._SimpleReductionKernel._get_function
    return _SimpleReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 622, in cupy._core._reduction._SimpleReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
Traceback (most recent call last):
  File "cupy/_core/_reduction.pyx", line 776, in cupy._core._reduction.ReductionKernel._get_function
    return _ReductionKernel_get_cached_function(
  File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
  File "cupy/_core/_reduction.pyx", line 804, in cupy._core._reduction._ReductionKernel_get_cached_function
    return _create_reduction_function(
  File "cupy/_core/_reduction.pyx", line 123, in cupy._core._reduction._create_reduction_function
    module = compile_with_cache(module_code, options)
  File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
    return _compile_with_cache_hip(
  File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 838, in _compile_with_cache_hip
    temp_path = tf.name
  File "/home/kmaeh/.pyenv/versions/3.8.7/lib/python3.8/tempfile.py", line 491, in __exit__
    result = self.file.__exit__(exc, value, tb)
OSError: [Errno 28] No space left on device
______________ TestFromData.test_array_from_list_of_numpy_scalar _______________
cupy/testing/_helper.py:1175: in test_func
    impl(self, *args, **kw)
cupy/testing/_helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/_helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/_helper.py:648: in check_func
    _array.assert_array_equal(x, y, err_msg, verbose, strides_check)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([0, 1], dtype=int32), y = array([0, 1], dtype=int32), err_msg = ''
verbose = True, strides_check = True

    def assert_array_equal(x, y, err_msg='', verbose=True, strides_check=False):
        """Raises an AssertionError if two array_like objects are not equal.
    
        Args:
             x(numpy.ndarray or cupy.ndarray): The actual object to check.
             y(numpy.ndarray or cupy.ndarray): The desired, expected object.
             strides_check(bool): If ``True``, consistency of strides is also
                 checked.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting values
                 are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_array_equal`
        """
>       numpy.testing.assert_array_equal(
            cupy.asnumpy(x), cupy.asnumpy(y), err_msg=err_msg,
            verbose=verbose)
E       AssertionError: 
E       Arrays are not equal
E       
E       Mismatched elements: 1 / 2 (50%)
E       Max absolute difference: 1065353215
E       Max relative difference: 1.06535322e+09
E        x: array([         0, 1065353216], dtype=int32)
E        y: array([0, 1], dtype=int32)

cupy/testing/_array.py:91: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.int32'>
order is C
_____________________ TestVectorizeStmts.test_return_tuple _____________________

self = <cupy_tests.functional_tests.test_vectorize.TestVectorizeStmts testMethod=test_return_tuple>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>

    @testing.numpy_cupy_array_equal()
    def test_return_tuple(self, xp):
        def func_tuple(x, y):
            return x + y, x / y
    
        f = xp.vectorize(func_tuple)
        x = xp.array([0, 1, 2, 3, 4])
        y = xp.array([5, 6, 7, 8, 9])
>       return f(x, y)

tests/cupy_tests/functional_tests/test_vectorize.py:502: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_functional/vectorize.py:98: in __call__
    return kern(*args)
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:820: in _compile_with_cache_hip
    binary, mapping = compile_using_nvrtc(
cupy/cuda/compiler.py:271: in compile_using_nvrtc
    return _compile(source, options, cu_path,
cupy/cuda/compiler.py:255: in _compile
    ptx, mapping = prog.compile(options, log_stream)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <cupy.cuda.compiler._NVRTCProgram object at 0x7ef9577c82b0>
options = ('-D CUPY_JIT_MODE', '-I/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/_core/include', '-I/home/kmaeh/CuPy_Team/rocm-4.0.1/opt/rocm-4.0.1/include', '-fcuda-flush-denormals-to-zero')
log_stream = None

    def compile(self, options=(), log_stream=None):
        try:
            if self.name_expressions:
                for ker in self.name_expressions:
                    nvrtc.addAddNameExpression(self.ptr, ker)
            nvrtc.compileProgram(self.ptr, options)
            mapping = None
            if self.name_expressions:
                mapping = {}
                for ker in self.name_expressions:
                    mapping[ker] = nvrtc.getLoweredName(self.ptr, ker)
            if log_stream is not None:
                log_stream.write(nvrtc.getProgramLog(self.ptr))
            # TODO(leofang): use getCUBIN() for _cuda_version >= 11010?
            return nvrtc.getPTX(self.ptr), mapping
        except nvrtc.NVRTCError:
            log = nvrtc.getProgramLog(self.ptr)
>           raise CompileException(log, self.src, self.name, options,
                                   'nvrtc' if not runtime.is_hip else 'hiprtc')
E           AssertionError: Only cupy raises error
E           
E           Traceback (most recent call last):
E             File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 623, in compile
E               nvrtc.compileProgram(self.ptr, options)
E             File "cupy_backends/cuda/libs/nvrtc.pyx", line 133, in cupy_backends.cuda.libs.nvrtc.compileProgram
E               cpdef compileProgram(intptr_t prog, options):
E             File "cupy_backends/cuda/libs/nvrtc.pyx", line 145, in cupy_backends.cuda.libs.nvrtc.compileProgram
E               check_status(status)
E             File "cupy_backends/cuda/libs/nvrtc.pyx", line 64, in cupy_backends.cuda.libs.nvrtc.check_status
E               raise NVRTCError(status)
E           cupy_backends.cuda.libs.nvrtc.NVRTCError: HIPRTC_ERROR_COMPILATION (6)
E           
E           During handling of the above exception, another exception occurred:
E           
E           Traceback (most recent call last):
E             File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E               result = impl(self, *args, **kw)
E             File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/functional_tests/test_vectorize.py", line 502, in test_return_tuple
E               return f(x, y)
E             File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/_functional/vectorize.py", line 98, in __call__
E               return kern(*args)
E             File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E               kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E             File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E               kern = _get_elementwise_kernel(
E             File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E               result = f(*args, **kwargs)
E             File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E               return _get_simple_elementwise_kernel(
E             File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E               module = compile_with_cache(module_code, options)
E             File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E               return cuda.compile_with_cache(
E             File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E               return _compile_with_cache_hip(
E             File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 820, in _compile_with_cache_hip
E               binary, mapping = compile_using_nvrtc(
E             File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 271, in compile_using_nvrtc
E               return _compile(source, options, cu_path,
E             File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 255, in _compile
E               ptx, mapping = prog.compile(options, log_stream)
E             File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 635, in compile
E               raise CompileException(log, self.src, self.name, options,
E           cupy.cuda.compiler.CompileException: /tmp/comgr-18a100/input/CompileSource:5400:12: error: no template named 'tuple' in namespace 'thrust'; did you mean 'std::tuple'?
E           __device__ thrust::tuple<long long, double> func_tuple(long long x, long long y) {
E                      ^~~~~~~~~~~~~
E                      std::tuple
E           /usr/lib/gcc/x86_64-linux-gnu/7.5.0/../../../../include/c++/7.5.0/tuple:556:11: note: 'std::tuple' declared here
E               class tuple : public _Tuple_impl<0, _Elements...>
E                     ^
E           /tmp/comgr-18a100/input/CompileSource:5401:10: error: no member named 'make_tuple' in namespace 'thrust'; did you mean 'std::make_tuple'?
E             return thrust::make_tuple((x + y), ((double)x / (double)y));
E                    ^~~~~~~~~~~~~~~~~~
E                    std::make_tuple
E           /usr/lib/gcc/x86_64-linux-gnu/7.5.0/../../../../include/c++/7.5.0/tuple:1448:5: note: 'std::make_tuple' declared here
E               make_tuple(_Elements&&... __args)
E               ^
E           /tmp/comgr-18a100/input/CompileSource:5411:9: error: no member named 'tie' in namespace 'thrust'
E           thrust::tie(out0, out1) = func_tuple(in0, in1);
E           ~~~~~~~~^
E           3 errors generated when compiling for gfx906.
E           Error: Failed to compile opencl source (from CL or HIP source to LLVM IR).

cupy/cuda/compiler.py:635: AssertionError
________________________ TestVectorizeStmts.test_tuple _________________________

self = <cupy_tests.functional_tests.test_vectorize.TestVectorizeStmts testMethod=test_tuple>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>

    @testing.numpy_cupy_array_equal()
    def test_tuple(self, xp):
        def func_tuple(x, y):
            x, y = y, x
            z = x, y
            a, b = z
            return a * a + b
    
        f = xp.vectorize(func_tuple)
        x = xp.array([0, 1, 2, 3, 4])
        y = xp.array([5, 6, 7, 8, 9])
>       return f(x, y)

tests/cupy_tests/functional_tests/test_vectorize.py:492: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/_functional/vectorize.py:98: in __call__
    return kern(*args)
cupy/_core/_kernel.pyx:841: in cupy._core._kernel.ElementwiseKernel.__call__
    kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
cupy/_core/_kernel.pyx:866: in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
    kern = _get_elementwise_kernel(
cupy/_util.pyx:59: in cupy._util.memoize.decorator.ret
    result = f(*args, **kwargs)
cupy/_core/_kernel.pyx:653: in cupy._core._kernel._get_elementwise_kernel
    return _get_simple_elementwise_kernel(
cupy/_core/_kernel.pyx:61: in cupy._core._kernel._get_simple_elementwise_kernel
    module = compile_with_cache(module_code, options)
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:820: in _compile_with_cache_hip
    binary, mapping = compile_using_nvrtc(
cupy/cuda/compiler.py:271: in compile_using_nvrtc
    return _compile(source, options, cu_path,
cupy/cuda/compiler.py:255: in _compile
    ptx, mapping = prog.compile(options, log_stream)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <cupy.cuda.compiler._NVRTCProgram object at 0x7ef96eb3b910>
options = ('-D CUPY_JIT_MODE', '-I/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/_core/include', '-I/home/kmaeh/CuPy_Team/rocm-4.0.1/opt/rocm-4.0.1/include', '-fcuda-flush-denormals-to-zero')
log_stream = None

    def compile(self, options=(), log_stream=None):
        try:
            if self.name_expressions:
                for ker in self.name_expressions:
                    nvrtc.addAddNameExpression(self.ptr, ker)
            nvrtc.compileProgram(self.ptr, options)
            mapping = None
            if self.name_expressions:
                mapping = {}
                for ker in self.name_expressions:
                    mapping[ker] = nvrtc.getLoweredName(self.ptr, ker)
            if log_stream is not None:
                log_stream.write(nvrtc.getProgramLog(self.ptr))
            # TODO(leofang): use getCUBIN() for _cuda_version >= 11010?
            return nvrtc.getPTX(self.ptr), mapping
        except nvrtc.NVRTCError:
            log = nvrtc.getProgramLog(self.ptr)
>           raise CompileException(log, self.src, self.name, options,
                                   'nvrtc' if not runtime.is_hip else 'hiprtc')
E           AssertionError: Only cupy raises error
E           
E           Traceback (most recent call last):
E             File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 623, in compile
E               nvrtc.compileProgram(self.ptr, options)
E             File "cupy_backends/cuda/libs/nvrtc.pyx", line 133, in cupy_backends.cuda.libs.nvrtc.compileProgram
E               cpdef compileProgram(intptr_t prog, options):
E             File "cupy_backends/cuda/libs/nvrtc.pyx", line 145, in cupy_backends.cuda.libs.nvrtc.compileProgram
E               check_status(status)
E             File "cupy_backends/cuda/libs/nvrtc.pyx", line 64, in cupy_backends.cuda.libs.nvrtc.check_status
E               raise NVRTCError(status)
E           cupy_backends.cuda.libs.nvrtc.NVRTCError: HIPRTC_ERROR_COMPILATION (6)
E           
E           During handling of the above exception, another exception occurred:
E           
E           Traceback (most recent call last):
E             File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E               result = impl(self, *args, **kw)
E             File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/functional_tests/test_vectorize.py", line 492, in test_tuple
E               return f(x, y)
E             File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/_functional/vectorize.py", line 98, in __call__
E               return kern(*args)
E             File "cupy/_core/_kernel.pyx", line 841, in cupy._core._kernel.ElementwiseKernel.__call__
E               kern = self._get_elementwise_kernel(dev_id, arginfos, type_map)
E             File "cupy/_core/_kernel.pyx", line 866, in cupy._core._kernel.ElementwiseKernel._get_elementwise_kernel
E               kern = _get_elementwise_kernel(
E             File "cupy/_util.pyx", line 59, in cupy._util.memoize.decorator.ret
E               result = f(*args, **kwargs)
E             File "cupy/_core/_kernel.pyx", line 653, in cupy._core._kernel._get_elementwise_kernel
E               return _get_simple_elementwise_kernel(
E             File "cupy/_core/_kernel.pyx", line 61, in cupy._core._kernel._get_simple_elementwise_kernel
E               module = compile_with_cache(module_code, options)
E             File "cupy/_core/core.pyx", line 1995, in cupy._core.core.compile_with_cache
E               return cuda.compile_with_cache(
E             File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 428, in compile_with_cache
E               return _compile_with_cache_hip(
E             File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 820, in _compile_with_cache_hip
E               binary, mapping = compile_using_nvrtc(
E             File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 271, in compile_using_nvrtc
E               return _compile(source, options, cu_path,
E             File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 255, in _compile
E               ptx, mapping = prog.compile(options, log_stream)
E             File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/cuda/compiler.py", line 635, in compile
E               raise CompileException(log, self.src, self.name, options,
E           cupy.cuda.compiler.CompileException: /tmp/comgr-41ed6e/input/CompileSource:5401:3: error: no template named 'tuple' in namespace 'thrust'; did you mean 'std::tuple'?
E             thrust::tuple<long long, long long> z;
E             ^~~~~~~~~~~~~
E             std::tuple
E           /usr/lib/gcc/x86_64-linux-gnu/7.5.0/../../../../include/c++/7.5.0/tuple:556:11: note: 'std::tuple' declared here
E               class tuple : public _Tuple_impl<0, _Elements...>
E                     ^
E           /tmp/comgr-41ed6e/input/CompileSource:5404:11: error: no member named 'tie' in namespace 'thrust'
E             thrust::tie(x, y) = thrust::make_tuple(y, x);
E             ~~~~~~~~^
E           /tmp/comgr-41ed6e/input/CompileSource:5404:31: error: no member named 'make_tuple' in namespace 'thrust'
E             thrust::tie(x, y) = thrust::make_tuple(y, x);
E                                 ~~~~~~~~^
E           /tmp/comgr-41ed6e/input/CompileSource:5405:15: error: no member named 'make_tuple' in namespace 'thrust'
E             z = thrust::make_tuple(x, y);
E                 ~~~~~~~~^
E           /tmp/comgr-41ed6e/input/CompileSource:5406:11: error: no member named 'tie' in namespace 'thrust'
E             thrust::tie(a, b) = z;
E             ~~~~~~~~^
E           5 errors generated when compiling for gfx906.
E           Error: Failed to compile opencl source (from CL or HIP source to LLVM IR).

cupy/cuda/compiler.py:635: AssertionError
_ TestDistributionsGamma_param_0_{dtype=float64, scale_shape=(), shape=(4, 3, 2), shape_shape=()}.test_gamma_generator _

self = <<cupy_tests.random_tests.test_distributions.TestDistributionsGamma_param_0_{dtype=float64, scale_shape=(), shape=(4, ...ma_generator>  parameter: {'dtype': <class 'numpy.float64'>, 'scale_shape': (), 'shape': (4, 3, 2), 'shape_shape': ()}>
shape_dtype = <class 'numpy.float32'>, scale_dtype = <class 'numpy.float32'>

    @cupy.testing.for_dtypes_combination(
        _float_dtypes, names=['shape_dtype', 'scale_dtype'])
    def test_gamma_generator(self, shape_dtype, scale_dtype):
>       self.check_distribution(cupy.random.default_rng().gamma,
                                shape_dtype, scale_dtype)

tests/cupy_tests/random_tests/test_distributions.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

seed = None

    def default_rng(seed=None):  # NOQA  avoid redefinition of seed
        """Construct a new Generator with the default BitGenerator (XORWOW).
    
        Args:
            seed (None, int, array_like[ints], numpy.random.SeedSequence, cupy.random.BitGenerator, cupy.random.Generator, optional):
                A seed to initialize the :class:`cupy.random.BitGenerator`. If an
                ``int`` or ``array_like[ints]`` or None is passed, then it will be
                passed to :class:`numpy.random.SeedSequence` to detive the initial
                :class:`BitGenerator` state. One may also pass in a `SeedSequence
                instance. Adiditionally, when passed :class:`BitGenerator`, it will
                be wrapped by :class:`Generator`. If passed a :class:`Generator`,
                it will be returned unaltered.
    
        Returns:
            Generator: The initialized generator object.
        """  # NOQA, list of types need to be in one line for sphinx
        if runtime.is_hip:
>           raise RuntimeError('Generator API not supported in HIP,'
                               ' please use the legacy one.')
E           RuntimeError: Generator API not supported in HIP, please use the legacy one.

cupy/random/__init__.py:36: RuntimeError
----------------------------- Captured stdout call -----------------------------
{'shape_dtype': <class 'numpy.float32'>, 'scale_dtype': <class 'numpy.float32'>}
_ TestDistributionsGamma_param_1_{dtype=float64, scale_shape=(), shape=(4, 3, 2), shape_shape=(3, 2)}.test_gamma_generator _

self = <<cupy_tests.random_tests.test_distributions.TestDistributionsGamma_param_1_{dtype=float64, scale_shape=(), shape=(4, ...enerator>  parameter: {'dtype': <class 'numpy.float64'>, 'scale_shape': (), 'shape': (4, 3, 2), 'shape_shape': (3, 2)}>
shape_dtype = <class 'numpy.float32'>, scale_dtype = <class 'numpy.float32'>

    @cupy.testing.for_dtypes_combination(
        _float_dtypes, names=['shape_dtype', 'scale_dtype'])
    def test_gamma_generator(self, shape_dtype, scale_dtype):
>       self.check_distribution(cupy.random.default_rng().gamma,
                                shape_dtype, scale_dtype)

tests/cupy_tests/random_tests/test_distributions.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

seed = None

    def default_rng(seed=None):  # NOQA  avoid redefinition of seed
        """Construct a new Generator with the default BitGenerator (XORWOW).
    
        Args:
            seed (None, int, array_like[ints], numpy.random.SeedSequence, cupy.random.BitGenerator, cupy.random.Generator, optional):
                A seed to initialize the :class:`cupy.random.BitGenerator`. If an
                ``int`` or ``array_like[ints]`` or None is passed, then it will be
                passed to :class:`numpy.random.SeedSequence` to detive the initial
                :class:`BitGenerator` state. One may also pass in a `SeedSequence
                instance. Adiditionally, when passed :class:`BitGenerator`, it will
                be wrapped by :class:`Generator`. If passed a :class:`Generator`,
                it will be returned unaltered.
    
        Returns:
            Generator: The initialized generator object.
        """  # NOQA, list of types need to be in one line for sphinx
        if runtime.is_hip:
>           raise RuntimeError('Generator API not supported in HIP,'
                               ' please use the legacy one.')
E           RuntimeError: Generator API not supported in HIP, please use the legacy one.

cupy/random/__init__.py:36: RuntimeError
----------------------------- Captured stdout call -----------------------------
{'shape_dtype': <class 'numpy.float32'>, 'scale_dtype': <class 'numpy.float32'>}
_ TestDistributionsGamma_param_2_{dtype=float64, scale_shape=(), shape=(3, 2), shape_shape=()}.test_gamma_generator _

self = <<cupy_tests.random_tests.test_distributions.TestDistributionsGamma_param_2_{dtype=float64, scale_shape=(), shape=(3, ...gamma_generator>  parameter: {'dtype': <class 'numpy.float64'>, 'scale_shape': (), 'shape': (3, 2), 'shape_shape': ()}>
shape_dtype = <class 'numpy.float32'>, scale_dtype = <class 'numpy.float32'>

    @cupy.testing.for_dtypes_combination(
        _float_dtypes, names=['shape_dtype', 'scale_dtype'])
    def test_gamma_generator(self, shape_dtype, scale_dtype):
>       self.check_distribution(cupy.random.default_rng().gamma,
                                shape_dtype, scale_dtype)

tests/cupy_tests/random_tests/test_distributions.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

seed = None

    def default_rng(seed=None):  # NOQA  avoid redefinition of seed
        """Construct a new Generator with the default BitGenerator (XORWOW).
    
        Args:
            seed (None, int, array_like[ints], numpy.random.SeedSequence, cupy.random.BitGenerator, cupy.random.Generator, optional):
                A seed to initialize the :class:`cupy.random.BitGenerator`. If an
                ``int`` or ``array_like[ints]`` or None is passed, then it will be
                passed to :class:`numpy.random.SeedSequence` to detive the initial
                :class:`BitGenerator` state. One may also pass in a `SeedSequence
                instance. Adiditionally, when passed :class:`BitGenerator`, it will
                be wrapped by :class:`Generator`. If passed a :class:`Generator`,
                it will be returned unaltered.
    
        Returns:
            Generator: The initialized generator object.
        """  # NOQA, list of types need to be in one line for sphinx
        if runtime.is_hip:
>           raise RuntimeError('Generator API not supported in HIP,'
                               ' please use the legacy one.')
E           RuntimeError: Generator API not supported in HIP, please use the legacy one.

cupy/random/__init__.py:36: RuntimeError
----------------------------- Captured stdout call -----------------------------
{'shape_dtype': <class 'numpy.float32'>, 'scale_dtype': <class 'numpy.float32'>}
_ TestDistributionsGamma_param_3_{dtype=float64, scale_shape=(), shape=(3, 2), shape_shape=(3, 2)}.test_gamma_generator _

self = <<cupy_tests.random_tests.test_distributions.TestDistributionsGamma_param_3_{dtype=float64, scale_shape=(), shape=(3, ...a_generator>  parameter: {'dtype': <class 'numpy.float64'>, 'scale_shape': (), 'shape': (3, 2), 'shape_shape': (3, 2)}>
shape_dtype = <class 'numpy.float32'>, scale_dtype = <class 'numpy.float32'>

    @cupy.testing.for_dtypes_combination(
        _float_dtypes, names=['shape_dtype', 'scale_dtype'])
    def test_gamma_generator(self, shape_dtype, scale_dtype):
>       self.check_distribution(cupy.random.default_rng().gamma,
                                shape_dtype, scale_dtype)

tests/cupy_tests/random_tests/test_distributions.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

seed = None

    def default_rng(seed=None):  # NOQA  avoid redefinition of seed
        """Construct a new Generator with the default BitGenerator (XORWOW).
    
        Args:
            seed (None, int, array_like[ints], numpy.random.SeedSequence, cupy.random.BitGenerator, cupy.random.Generator, optional):
                A seed to initialize the :class:`cupy.random.BitGenerator`. If an
                ``int`` or ``array_like[ints]`` or None is passed, then it will be
                passed to :class:`numpy.random.SeedSequence` to detive the initial
                :class:`BitGenerator` state. One may also pass in a `SeedSequence
                instance. Adiditionally, when passed :class:`BitGenerator`, it will
                be wrapped by :class:`Generator`. If passed a :class:`Generator`,
                it will be returned unaltered.
    
        Returns:
            Generator: The initialized generator object.
        """  # NOQA, list of types need to be in one line for sphinx
        if runtime.is_hip:
>           raise RuntimeError('Generator API not supported in HIP,'
                               ' please use the legacy one.')
E           RuntimeError: Generator API not supported in HIP, please use the legacy one.

cupy/random/__init__.py:36: RuntimeError
----------------------------- Captured stdout call -----------------------------
{'shape_dtype': <class 'numpy.float32'>, 'scale_dtype': <class 'numpy.float32'>}
_ TestDistributionsGamma_param_4_{dtype=float64, scale_shape=(3, 2), shape=(4, 3, 2), shape_shape=()}.test_gamma_generator _

self = <<cupy_tests.random_tests.test_distributions.TestDistributionsGamma_param_4_{dtype=float64, scale_shape=(3, 2), shape=...enerator>  parameter: {'dtype': <class 'numpy.float64'>, 'scale_shape': (3, 2), 'shape': (4, 3, 2), 'shape_shape': ()}>
shape_dtype = <class 'numpy.float32'>, scale_dtype = <class 'numpy.float32'>

    @cupy.testing.for_dtypes_combination(
        _float_dtypes, names=['shape_dtype', 'scale_dtype'])
    def test_gamma_generator(self, shape_dtype, scale_dtype):
>       self.check_distribution(cupy.random.default_rng().gamma,
                                shape_dtype, scale_dtype)

tests/cupy_tests/random_tests/test_distributions.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

seed = None

    def default_rng(seed=None):  # NOQA  avoid redefinition of seed
        """Construct a new Generator with the default BitGenerator (XORWOW).
    
        Args:
            seed (None, int, array_like[ints], numpy.random.SeedSequence, cupy.random.BitGenerator, cupy.random.Generator, optional):
                A seed to initialize the :class:`cupy.random.BitGenerator`. If an
                ``int`` or ``array_like[ints]`` or None is passed, then it will be
                passed to :class:`numpy.random.SeedSequence` to detive the initial
                :class:`BitGenerator` state. One may also pass in a `SeedSequence
                instance. Adiditionally, when passed :class:`BitGenerator`, it will
                be wrapped by :class:`Generator`. If passed a :class:`Generator`,
                it will be returned unaltered.
    
        Returns:
            Generator: The initialized generator object.
        """  # NOQA, list of types need to be in one line for sphinx
        if runtime.is_hip:
>           raise RuntimeError('Generator API not supported in HIP,'
                               ' please use the legacy one.')
E           RuntimeError: Generator API not supported in HIP, please use the legacy one.

cupy/random/__init__.py:36: RuntimeError
----------------------------- Captured stdout call -----------------------------
{'shape_dtype': <class 'numpy.float32'>, 'scale_dtype': <class 'numpy.float32'>}
_ TestDistributionsGamma_param_5_{dtype=float64, scale_shape=(3, 2), shape=(4, 3, 2), shape_shape=(3, 2)}.test_gamma_generator _

self = <<cupy_tests.random_tests.test_distributions.TestDistributionsGamma_param_5_{dtype=float64, scale_shape=(3, 2), shape=...ator>  parameter: {'dtype': <class 'numpy.float64'>, 'scale_shape': (3, 2), 'shape': (4, 3, 2), 'shape_shape': (3, 2)}>
shape_dtype = <class 'numpy.float32'>, scale_dtype = <class 'numpy.float32'>

    @cupy.testing.for_dtypes_combination(
        _float_dtypes, names=['shape_dtype', 'scale_dtype'])
    def test_gamma_generator(self, shape_dtype, scale_dtype):
>       self.check_distribution(cupy.random.default_rng().gamma,
                                shape_dtype, scale_dtype)

tests/cupy_tests/random_tests/test_distributions.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

seed = None

    def default_rng(seed=None):  # NOQA  avoid redefinition of seed
        """Construct a new Generator with the default BitGenerator (XORWOW).
    
        Args:
            seed (None, int, array_like[ints], numpy.random.SeedSequence, cupy.random.BitGenerator, cupy.random.Generator, optional):
                A seed to initialize the :class:`cupy.random.BitGenerator`. If an
                ``int`` or ``array_like[ints]`` or None is passed, then it will be
                passed to :class:`numpy.random.SeedSequence` to detive the initial
                :class:`BitGenerator` state. One may also pass in a `SeedSequence
                instance. Adiditionally, when passed :class:`BitGenerator`, it will
                be wrapped by :class:`Generator`. If passed a :class:`Generator`,
                it will be returned unaltered.
    
        Returns:
            Generator: The initialized generator object.
        """  # NOQA, list of types need to be in one line for sphinx
        if runtime.is_hip:
>           raise RuntimeError('Generator API not supported in HIP,'
                               ' please use the legacy one.')
E           RuntimeError: Generator API not supported in HIP, please use the legacy one.

cupy/random/__init__.py:36: RuntimeError
----------------------------- Captured stdout call -----------------------------
{'shape_dtype': <class 'numpy.float32'>, 'scale_dtype': <class 'numpy.float32'>}
_ TestDistributionsGamma_param_6_{dtype=float64, scale_shape=(3, 2), shape=(3, 2), shape_shape=()}.test_gamma_generator _

self = <<cupy_tests.random_tests.test_distributions.TestDistributionsGamma_param_6_{dtype=float64, scale_shape=(3, 2), shape=...a_generator>  parameter: {'dtype': <class 'numpy.float64'>, 'scale_shape': (3, 2), 'shape': (3, 2), 'shape_shape': ()}>
shape_dtype = <class 'numpy.float32'>, scale_dtype = <class 'numpy.float32'>

    @cupy.testing.for_dtypes_combination(
        _float_dtypes, names=['shape_dtype', 'scale_dtype'])
    def test_gamma_generator(self, shape_dtype, scale_dtype):
>       self.check_distribution(cupy.random.default_rng().gamma,
                                shape_dtype, scale_dtype)

tests/cupy_tests/random_tests/test_distributions.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

seed = None

    def default_rng(seed=None):  # NOQA  avoid redefinition of seed
        """Construct a new Generator with the default BitGenerator (XORWOW).
    
        Args:
            seed (None, int, array_like[ints], numpy.random.SeedSequence, cupy.random.BitGenerator, cupy.random.Generator, optional):
                A seed to initialize the :class:`cupy.random.BitGenerator`. If an
                ``int`` or ``array_like[ints]`` or None is passed, then it will be
                passed to :class:`numpy.random.SeedSequence` to detive the initial
                :class:`BitGenerator` state. One may also pass in a `SeedSequence
                instance. Adiditionally, when passed :class:`BitGenerator`, it will
                be wrapped by :class:`Generator`. If passed a :class:`Generator`,
                it will be returned unaltered.
    
        Returns:
            Generator: The initialized generator object.
        """  # NOQA, list of types need to be in one line for sphinx
        if runtime.is_hip:
>           raise RuntimeError('Generator API not supported in HIP,'
                               ' please use the legacy one.')
E           RuntimeError: Generator API not supported in HIP, please use the legacy one.

cupy/random/__init__.py:36: RuntimeError
----------------------------- Captured stdout call -----------------------------
{'shape_dtype': <class 'numpy.float32'>, 'scale_dtype': <class 'numpy.float32'>}
_ TestDistributionsGamma_param_7_{dtype=float64, scale_shape=(3, 2), shape=(3, 2), shape_shape=(3, 2)}.test_gamma_generator _

self = <<cupy_tests.random_tests.test_distributions.TestDistributionsGamma_param_7_{dtype=float64, scale_shape=(3, 2), shape=...nerator>  parameter: {'dtype': <class 'numpy.float64'>, 'scale_shape': (3, 2), 'shape': (3, 2), 'shape_shape': (3, 2)}>
shape_dtype = <class 'numpy.float32'>, scale_dtype = <class 'numpy.float32'>

    @cupy.testing.for_dtypes_combination(
        _float_dtypes, names=['shape_dtype', 'scale_dtype'])
    def test_gamma_generator(self, shape_dtype, scale_dtype):
>       self.check_distribution(cupy.random.default_rng().gamma,
                                shape_dtype, scale_dtype)

tests/cupy_tests/random_tests/test_distributions.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

seed = None

    def default_rng(seed=None):  # NOQA  avoid redefinition of seed
        """Construct a new Generator with the default BitGenerator (XORWOW).
    
        Args:
            seed (None, int, array_like[ints], numpy.random.SeedSequence, cupy.random.BitGenerator, cupy.random.Generator, optional):
                A seed to initialize the :class:`cupy.random.BitGenerator`. If an
                ``int`` or ``array_like[ints]`` or None is passed, then it will be
                passed to :class:`numpy.random.SeedSequence` to detive the initial
                :class:`BitGenerator` state. One may also pass in a `SeedSequence
                instance. Adiditionally, when passed :class:`BitGenerator`, it will
                be wrapped by :class:`Generator`. If passed a :class:`Generator`,
                it will be returned unaltered.
    
        Returns:
            Generator: The initialized generator object.
        """  # NOQA, list of types need to be in one line for sphinx
        if runtime.is_hip:
>           raise RuntimeError('Generator API not supported in HIP,'
                               ' please use the legacy one.')
E           RuntimeError: Generator API not supported in HIP, please use the legacy one.

cupy/random/__init__.py:36: RuntimeError
----------------------------- Captured stdout call -----------------------------
{'shape_dtype': <class 'numpy.float32'>, 'scale_dtype': <class 'numpy.float32'>}
_ TestDistributionsGamma_param_8_{dtype=float32, scale_shape=(), shape=(4, 3, 2), shape_shape=()}.test_gamma_generator _

self = <<cupy_tests.random_tests.test_distributions.TestDistributionsGamma_param_8_{dtype=float32, scale_shape=(), shape=(4, ...ma_generator>  parameter: {'dtype': <class 'numpy.float32'>, 'scale_shape': (), 'shape': (4, 3, 2), 'shape_shape': ()}>
shape_dtype = <class 'numpy.float32'>, scale_dtype = <class 'numpy.float32'>

    @cupy.testing.for_dtypes_combination(
        _float_dtypes, names=['shape_dtype', 'scale_dtype'])
    def test_gamma_generator(self, shape_dtype, scale_dtype):
>       self.check_distribution(cupy.random.default_rng().gamma,
                                shape_dtype, scale_dtype)

tests/cupy_tests/random_tests/test_distributions.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

seed = None

    def default_rng(seed=None):  # NOQA  avoid redefinition of seed
        """Construct a new Generator with the default BitGenerator (XORWOW).
    
        Args:
            seed (None, int, array_like[ints], numpy.random.SeedSequence, cupy.random.BitGenerator, cupy.random.Generator, optional):
                A seed to initialize the :class:`cupy.random.BitGenerator`. If an
                ``int`` or ``array_like[ints]`` or None is passed, then it will be
                passed to :class:`numpy.random.SeedSequence` to detive the initial
                :class:`BitGenerator` state. One may also pass in a `SeedSequence
                instance. Adiditionally, when passed :class:`BitGenerator`, it will
                be wrapped by :class:`Generator`. If passed a :class:`Generator`,
                it will be returned unaltered.
    
        Returns:
            Generator: The initialized generator object.
        """  # NOQA, list of types need to be in one line for sphinx
        if runtime.is_hip:
>           raise RuntimeError('Generator API not supported in HIP,'
                               ' please use the legacy one.')
E           RuntimeError: Generator API not supported in HIP, please use the legacy one.

cupy/random/__init__.py:36: RuntimeError
----------------------------- Captured stdout call -----------------------------
{'shape_dtype': <class 'numpy.float32'>, 'scale_dtype': <class 'numpy.float32'>}
_ TestDistributionsGamma_param_9_{dtype=float32, scale_shape=(), shape=(4, 3, 2), shape_shape=(3, 2)}.test_gamma_generator _

self = <<cupy_tests.random_tests.test_distributions.TestDistributionsGamma_param_9_{dtype=float32, scale_shape=(), shape=(4, ...enerator>  parameter: {'dtype': <class 'numpy.float32'>, 'scale_shape': (), 'shape': (4, 3, 2), 'shape_shape': (3, 2)}>
shape_dtype = <class 'numpy.float32'>, scale_dtype = <class 'numpy.float32'>

    @cupy.testing.for_dtypes_combination(
        _float_dtypes, names=['shape_dtype', 'scale_dtype'])
    def test_gamma_generator(self, shape_dtype, scale_dtype):
>       self.check_distribution(cupy.random.default_rng().gamma,
                                shape_dtype, scale_dtype)

tests/cupy_tests/random_tests/test_distributions.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

seed = None

    def default_rng(seed=None):  # NOQA  avoid redefinition of seed
        """Construct a new Generator with the default BitGenerator (XORWOW).
    
        Args:
            seed (None, int, array_like[ints], numpy.random.SeedSequence, cupy.random.BitGenerator, cupy.random.Generator, optional):
                A seed to initialize the :class:`cupy.random.BitGenerator`. If an
                ``int`` or ``array_like[ints]`` or None is passed, then it will be
                passed to :class:`numpy.random.SeedSequence` to detive the initial
                :class:`BitGenerator` state. One may also pass in a `SeedSequence
                instance. Adiditionally, when passed :class:`BitGenerator`, it will
                be wrapped by :class:`Generator`. If passed a :class:`Generator`,
                it will be returned unaltered.
    
        Returns:
            Generator: The initialized generator object.
        """  # NOQA, list of types need to be in one line for sphinx
        if runtime.is_hip:
>           raise RuntimeError('Generator API not supported in HIP,'
                               ' please use the legacy one.')
E           RuntimeError: Generator API not supported in HIP, please use the legacy one.

cupy/random/__init__.py:36: RuntimeError
----------------------------- Captured stdout call -----------------------------
{'shape_dtype': <class 'numpy.float32'>, 'scale_dtype': <class 'numpy.float32'>}
_ TestDistributionsGamma_param_10_{dtype=float32, scale_shape=(), shape=(3, 2), shape_shape=()}.test_gamma_generator _

self = <<cupy_tests.random_tests.test_distributions.TestDistributionsGamma_param_10_{dtype=float32, scale_shape=(), shape=(3,...gamma_generator>  parameter: {'dtype': <class 'numpy.float32'>, 'scale_shape': (), 'shape': (3, 2), 'shape_shape': ()}>
shape_dtype = <class 'numpy.float32'>, scale_dtype = <class 'numpy.float32'>

    @cupy.testing.for_dtypes_combination(
        _float_dtypes, names=['shape_dtype', 'scale_dtype'])
    def test_gamma_generator(self, shape_dtype, scale_dtype):
>       self.check_distribution(cupy.random.default_rng().gamma,
                                shape_dtype, scale_dtype)

tests/cupy_tests/random_tests/test_distributions.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

seed = None

    def default_rng(seed=None):  # NOQA  avoid redefinition of seed
        """Construct a new Generator with the default BitGenerator (XORWOW).
    
        Args:
            seed (None, int, array_like[ints], numpy.random.SeedSequence, cupy.random.BitGenerator, cupy.random.Generator, optional):
                A seed to initialize the :class:`cupy.random.BitGenerator`. If an
                ``int`` or ``array_like[ints]`` or None is passed, then it will be
                passed to :class:`numpy.random.SeedSequence` to detive the initial
                :class:`BitGenerator` state. One may also pass in a `SeedSequence
                instance. Adiditionally, when passed :class:`BitGenerator`, it will
                be wrapped by :class:`Generator`. If passed a :class:`Generator`,
                it will be returned unaltered.
    
        Returns:
            Generator: The initialized generator object.
        """  # NOQA, list of types need to be in one line for sphinx
        if runtime.is_hip:
>           raise RuntimeError('Generator API not supported in HIP,'
                               ' please use the legacy one.')
E           RuntimeError: Generator API not supported in HIP, please use the legacy one.

cupy/random/__init__.py:36: RuntimeError
----------------------------- Captured stdout call -----------------------------
{'shape_dtype': <class 'numpy.float32'>, 'scale_dtype': <class 'numpy.float32'>}
_ TestDistributionsGamma_param_11_{dtype=float32, scale_shape=(), shape=(3, 2), shape_shape=(3, 2)}.test_gamma_generator _

self = <<cupy_tests.random_tests.test_distributions.TestDistributionsGamma_param_11_{dtype=float32, scale_shape=(), shape=(3,...a_generator>  parameter: {'dtype': <class 'numpy.float32'>, 'scale_shape': (), 'shape': (3, 2), 'shape_shape': (3, 2)}>
shape_dtype = <class 'numpy.float32'>, scale_dtype = <class 'numpy.float32'>

    @cupy.testing.for_dtypes_combination(
        _float_dtypes, names=['shape_dtype', 'scale_dtype'])
    def test_gamma_generator(self, shape_dtype, scale_dtype):
>       self.check_distribution(cupy.random.default_rng().gamma,
                                shape_dtype, scale_dtype)

tests/cupy_tests/random_tests/test_distributions.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

seed = None

    def default_rng(seed=None):  # NOQA  avoid redefinition of seed
        """Construct a new Generator with the default BitGenerator (XORWOW).
    
        Args:
            seed (None, int, array_like[ints], numpy.random.SeedSequence, cupy.random.BitGenerator, cupy.random.Generator, optional):
                A seed to initialize the :class:`cupy.random.BitGenerator`. If an
                ``int`` or ``array_like[ints]`` or None is passed, then it will be
                passed to :class:`numpy.random.SeedSequence` to detive the initial
                :class:`BitGenerator` state. One may also pass in a `SeedSequence
                instance. Adiditionally, when passed :class:`BitGenerator`, it will
                be wrapped by :class:`Generator`. If passed a :class:`Generator`,
                it will be returned unaltered.
    
        Returns:
            Generator: The initialized generator object.
        """  # NOQA, list of types need to be in one line for sphinx
        if runtime.is_hip:
>           raise RuntimeError('Generator API not supported in HIP,'
                               ' please use the legacy one.')
E           RuntimeError: Generator API not supported in HIP, please use the legacy one.

cupy/random/__init__.py:36: RuntimeError
----------------------------- Captured stdout call -----------------------------
{'shape_dtype': <class 'numpy.float32'>, 'scale_dtype': <class 'numpy.float32'>}
_ TestDistributionsGamma_param_12_{dtype=float32, scale_shape=(3, 2), shape=(4, 3, 2), shape_shape=()}.test_gamma_generator _

self = <<cupy_tests.random_tests.test_distributions.TestDistributionsGamma_param_12_{dtype=float32, scale_shape=(3, 2), shape...enerator>  parameter: {'dtype': <class 'numpy.float32'>, 'scale_shape': (3, 2), 'shape': (4, 3, 2), 'shape_shape': ()}>
shape_dtype = <class 'numpy.float32'>, scale_dtype = <class 'numpy.float32'>

    @cupy.testing.for_dtypes_combination(
        _float_dtypes, names=['shape_dtype', 'scale_dtype'])
    def test_gamma_generator(self, shape_dtype, scale_dtype):
>       self.check_distribution(cupy.random.default_rng().gamma,
                                shape_dtype, scale_dtype)

tests/cupy_tests/random_tests/test_distributions.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

seed = None

    def default_rng(seed=None):  # NOQA  avoid redefinition of seed
        """Construct a new Generator with the default BitGenerator (XORWOW).
    
        Args:
            seed (None, int, array_like[ints], numpy.random.SeedSequence, cupy.random.BitGenerator, cupy.random.Generator, optional):
                A seed to initialize the :class:`cupy.random.BitGenerator`. If an
                ``int`` or ``array_like[ints]`` or None is passed, then it will be
                passed to :class:`numpy.random.SeedSequence` to detive the initial
                :class:`BitGenerator` state. One may also pass in a `SeedSequence
                instance. Adiditionally, when passed :class:`BitGenerator`, it will
                be wrapped by :class:`Generator`. If passed a :class:`Generator`,
                it will be returned unaltered.
    
        Returns:
            Generator: The initialized generator object.
        """  # NOQA, list of types need to be in one line for sphinx
        if runtime.is_hip:
>           raise RuntimeError('Generator API not supported in HIP,'
                               ' please use the legacy one.')
E           RuntimeError: Generator API not supported in HIP, please use the legacy one.

cupy/random/__init__.py:36: RuntimeError
----------------------------- Captured stdout call -----------------------------
{'shape_dtype': <class 'numpy.float32'>, 'scale_dtype': <class 'numpy.float32'>}
_ TestDistributionsGamma_param_13_{dtype=float32, scale_shape=(3, 2), shape=(4, 3, 2), shape_shape=(3, 2)}.test_gamma_generator _

self = <<cupy_tests.random_tests.test_distributions.TestDistributionsGamma_param_13_{dtype=float32, scale_shape=(3, 2), shape...ator>  parameter: {'dtype': <class 'numpy.float32'>, 'scale_shape': (3, 2), 'shape': (4, 3, 2), 'shape_shape': (3, 2)}>
shape_dtype = <class 'numpy.float32'>, scale_dtype = <class 'numpy.float32'>

    @cupy.testing.for_dtypes_combination(
        _float_dtypes, names=['shape_dtype', 'scale_dtype'])
    def test_gamma_generator(self, shape_dtype, scale_dtype):
>       self.check_distribution(cupy.random.default_rng().gamma,
                                shape_dtype, scale_dtype)

tests/cupy_tests/random_tests/test_distributions.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

seed = None

    def default_rng(seed=None):  # NOQA  avoid redefinition of seed
        """Construct a new Generator with the default BitGenerator (XORWOW).
    
        Args:
            seed (None, int, array_like[ints], numpy.random.SeedSequence, cupy.random.BitGenerator, cupy.random.Generator, optional):
                A seed to initialize the :class:`cupy.random.BitGenerator`. If an
                ``int`` or ``array_like[ints]`` or None is passed, then it will be
                passed to :class:`numpy.random.SeedSequence` to detive the initial
                :class:`BitGenerator` state. One may also pass in a `SeedSequence
                instance. Adiditionally, when passed :class:`BitGenerator`, it will
                be wrapped by :class:`Generator`. If passed a :class:`Generator`,
                it will be returned unaltered.
    
        Returns:
            Generator: The initialized generator object.
        """  # NOQA, list of types need to be in one line for sphinx
        if runtime.is_hip:
>           raise RuntimeError('Generator API not supported in HIP,'
                               ' please use the legacy one.')
E           RuntimeError: Generator API not supported in HIP, please use the legacy one.

cupy/random/__init__.py:36: RuntimeError
----------------------------- Captured stdout call -----------------------------
{'shape_dtype': <class 'numpy.float32'>, 'scale_dtype': <class 'numpy.float32'>}
_ TestDistributionsGamma_param_14_{dtype=float32, scale_shape=(3, 2), shape=(3, 2), shape_shape=()}.test_gamma_generator _

self = <<cupy_tests.random_tests.test_distributions.TestDistributionsGamma_param_14_{dtype=float32, scale_shape=(3, 2), shape...a_generator>  parameter: {'dtype': <class 'numpy.float32'>, 'scale_shape': (3, 2), 'shape': (3, 2), 'shape_shape': ()}>
shape_dtype = <class 'numpy.float32'>, scale_dtype = <class 'numpy.float32'>

    @cupy.testing.for_dtypes_combination(
        _float_dtypes, names=['shape_dtype', 'scale_dtype'])
    def test_gamma_generator(self, shape_dtype, scale_dtype):
>       self.check_distribution(cupy.random.default_rng().gamma,
                                shape_dtype, scale_dtype)

tests/cupy_tests/random_tests/test_distributions.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

seed = None

    def default_rng(seed=None):  # NOQA  avoid redefinition of seed
        """Construct a new Generator with the default BitGenerator (XORWOW).
    
        Args:
            seed (None, int, array_like[ints], numpy.random.SeedSequence, cupy.random.BitGenerator, cupy.random.Generator, optional):
                A seed to initialize the :class:`cupy.random.BitGenerator`. If an
                ``int`` or ``array_like[ints]`` or None is passed, then it will be
                passed to :class:`numpy.random.SeedSequence` to detive the initial
                :class:`BitGenerator` state. One may also pass in a `SeedSequence
                instance. Adiditionally, when passed :class:`BitGenerator`, it will
                be wrapped by :class:`Generator`. If passed a :class:`Generator`,
                it will be returned unaltered.
    
        Returns:
            Generator: The initialized generator object.
        """  # NOQA, list of types need to be in one line for sphinx
        if runtime.is_hip:
>           raise RuntimeError('Generator API not supported in HIP,'
                               ' please use the legacy one.')
E           RuntimeError: Generator API not supported in HIP, please use the legacy one.

cupy/random/__init__.py:36: RuntimeError
----------------------------- Captured stdout call -----------------------------
{'shape_dtype': <class 'numpy.float32'>, 'scale_dtype': <class 'numpy.float32'>}
_ TestDistributionsGamma_param_15_{dtype=float32, scale_shape=(3, 2), shape=(3, 2), shape_shape=(3, 2)}.test_gamma_generator _

self = <<cupy_tests.random_tests.test_distributions.TestDistributionsGamma_param_15_{dtype=float32, scale_shape=(3, 2), shape...nerator>  parameter: {'dtype': <class 'numpy.float32'>, 'scale_shape': (3, 2), 'shape': (3, 2), 'shape_shape': (3, 2)}>
shape_dtype = <class 'numpy.float32'>, scale_dtype = <class 'numpy.float32'>

    @cupy.testing.for_dtypes_combination(
        _float_dtypes, names=['shape_dtype', 'scale_dtype'])
    def test_gamma_generator(self, shape_dtype, scale_dtype):
>       self.check_distribution(cupy.random.default_rng().gamma,
                                shape_dtype, scale_dtype)

tests/cupy_tests/random_tests/test_distributions.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

seed = None

    def default_rng(seed=None):  # NOQA  avoid redefinition of seed
        """Construct a new Generator with the default BitGenerator (XORWOW).
    
        Args:
            seed (None, int, array_like[ints], numpy.random.SeedSequence, cupy.random.BitGenerator, cupy.random.Generator, optional):
                A seed to initialize the :class:`cupy.random.BitGenerator`. If an
                ``int`` or ``array_like[ints]`` or None is passed, then it will be
                passed to :class:`numpy.random.SeedSequence` to detive the initial
                :class:`BitGenerator` state. One may also pass in a `SeedSequence
                instance. Adiditionally, when passed :class:`BitGenerator`, it will
                be wrapped by :class:`Generator`. If passed a :class:`Generator`,
                it will be returned unaltered.
    
        Returns:
            Generator: The initialized generator object.
        """  # NOQA, list of types need to be in one line for sphinx
        if runtime.is_hip:
>           raise RuntimeError('Generator API not supported in HIP,'
                               ' please use the legacy one.')
E           RuntimeError: Generator API not supported in HIP, please use the legacy one.

cupy/random/__init__.py:36: RuntimeError
----------------------------- Captured stdout call -----------------------------
{'shape_dtype': <class 'numpy.float32'>, 'scale_dtype': <class 'numpy.float32'>}
_ TestDistributionsGamma_param_16_{dtype=float16, scale_shape=(), shape=(4, 3, 2), shape_shape=()}.test_gamma_generator _

self = <<cupy_tests.random_tests.test_distributions.TestDistributionsGamma_param_16_{dtype=float16, scale_shape=(), shape=(4,...ma_generator>  parameter: {'dtype': <class 'numpy.float16'>, 'scale_shape': (), 'shape': (4, 3, 2), 'shape_shape': ()}>
shape_dtype = <class 'numpy.float32'>, scale_dtype = <class 'numpy.float32'>

    @cupy.testing.for_dtypes_combination(
        _float_dtypes, names=['shape_dtype', 'scale_dtype'])
    def test_gamma_generator(self, shape_dtype, scale_dtype):
>       self.check_distribution(cupy.random.default_rng().gamma,
                                shape_dtype, scale_dtype)

tests/cupy_tests/random_tests/test_distributions.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

seed = None

    def default_rng(seed=None):  # NOQA  avoid redefinition of seed
        """Construct a new Generator with the default BitGenerator (XORWOW).
    
        Args:
            seed (None, int, array_like[ints], numpy.random.SeedSequence, cupy.random.BitGenerator, cupy.random.Generator, optional):
                A seed to initialize the :class:`cupy.random.BitGenerator`. If an
                ``int`` or ``array_like[ints]`` or None is passed, then it will be
                passed to :class:`numpy.random.SeedSequence` to detive the initial
                :class:`BitGenerator` state. One may also pass in a `SeedSequence
                instance. Adiditionally, when passed :class:`BitGenerator`, it will
                be wrapped by :class:`Generator`. If passed a :class:`Generator`,
                it will be returned unaltered.
    
        Returns:
            Generator: The initialized generator object.
        """  # NOQA, list of types need to be in one line for sphinx
        if runtime.is_hip:
>           raise RuntimeError('Generator API not supported in HIP,'
                               ' please use the legacy one.')
E           RuntimeError: Generator API not supported in HIP, please use the legacy one.

cupy/random/__init__.py:36: RuntimeError
----------------------------- Captured stdout call -----------------------------
{'shape_dtype': <class 'numpy.float32'>, 'scale_dtype': <class 'numpy.float32'>}
_ TestDistributionsGamma_param_17_{dtype=float16, scale_shape=(), shape=(4, 3, 2), shape_shape=(3, 2)}.test_gamma_generator _

self = <<cupy_tests.random_tests.test_distributions.TestDistributionsGamma_param_17_{dtype=float16, scale_shape=(), shape=(4,...enerator>  parameter: {'dtype': <class 'numpy.float16'>, 'scale_shape': (), 'shape': (4, 3, 2), 'shape_shape': (3, 2)}>
shape_dtype = <class 'numpy.float32'>, scale_dtype = <class 'numpy.float32'>

    @cupy.testing.for_dtypes_combination(
        _float_dtypes, names=['shape_dtype', 'scale_dtype'])
    def test_gamma_generator(self, shape_dtype, scale_dtype):
>       self.check_distribution(cupy.random.default_rng().gamma,
                                shape_dtype, scale_dtype)

tests/cupy_tests/random_tests/test_distributions.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

seed = None

    def default_rng(seed=None):  # NOQA  avoid redefinition of seed
        """Construct a new Generator with the default BitGenerator (XORWOW).
    
        Args:
            seed (None, int, array_like[ints], numpy.random.SeedSequence, cupy.random.BitGenerator, cupy.random.Generator, optional):
                A seed to initialize the :class:`cupy.random.BitGenerator`. If an
                ``int`` or ``array_like[ints]`` or None is passed, then it will be
                passed to :class:`numpy.random.SeedSequence` to detive the initial
                :class:`BitGenerator` state. One may also pass in a `SeedSequence
                instance. Adiditionally, when passed :class:`BitGenerator`, it will
                be wrapped by :class:`Generator`. If passed a :class:`Generator`,
                it will be returned unaltered.
    
        Returns:
            Generator: The initialized generator object.
        """  # NOQA, list of types need to be in one line for sphinx
        if runtime.is_hip:
>           raise RuntimeError('Generator API not supported in HIP,'
                               ' please use the legacy one.')
E           RuntimeError: Generator API not supported in HIP, please use the legacy one.

cupy/random/__init__.py:36: RuntimeError
----------------------------- Captured stdout call -----------------------------
{'shape_dtype': <class 'numpy.float32'>, 'scale_dtype': <class 'numpy.float32'>}
_ TestDistributionsGamma_param_18_{dtype=float16, scale_shape=(), shape=(3, 2), shape_shape=()}.test_gamma_generator _

self = <<cupy_tests.random_tests.test_distributions.TestDistributionsGamma_param_18_{dtype=float16, scale_shape=(), shape=(3,...gamma_generator>  parameter: {'dtype': <class 'numpy.float16'>, 'scale_shape': (), 'shape': (3, 2), 'shape_shape': ()}>
shape_dtype = <class 'numpy.float32'>, scale_dtype = <class 'numpy.float32'>

    @cupy.testing.for_dtypes_combination(
        _float_dtypes, names=['shape_dtype', 'scale_dtype'])
    def test_gamma_generator(self, shape_dtype, scale_dtype):
>       self.check_distribution(cupy.random.default_rng().gamma,
                                shape_dtype, scale_dtype)

tests/cupy_tests/random_tests/test_distributions.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

seed = None

    def default_rng(seed=None):  # NOQA  avoid redefinition of seed
        """Construct a new Generator with the default BitGenerator (XORWOW).
    
        Args:
            seed (None, int, array_like[ints], numpy.random.SeedSequence, cupy.random.BitGenerator, cupy.random.Generator, optional):
                A seed to initialize the :class:`cupy.random.BitGenerator`. If an
                ``int`` or ``array_like[ints]`` or None is passed, then it will be
                passed to :class:`numpy.random.SeedSequence` to detive the initial
                :class:`BitGenerator` state. One may also pass in a `SeedSequence
                instance. Adiditionally, when passed :class:`BitGenerator`, it will
                be wrapped by :class:`Generator`. If passed a :class:`Generator`,
                it will be returned unaltered.
    
        Returns:
            Generator: The initialized generator object.
        """  # NOQA, list of types need to be in one line for sphinx
        if runtime.is_hip:
>           raise RuntimeError('Generator API not supported in HIP,'
                               ' please use the legacy one.')
E           RuntimeError: Generator API not supported in HIP, please use the legacy one.

cupy/random/__init__.py:36: RuntimeError
----------------------------- Captured stdout call -----------------------------
{'shape_dtype': <class 'numpy.float32'>, 'scale_dtype': <class 'numpy.float32'>}
_ TestDistributionsGamma_param_19_{dtype=float16, scale_shape=(), shape=(3, 2), shape_shape=(3, 2)}.test_gamma_generator _

self = <<cupy_tests.random_tests.test_distributions.TestDistributionsGamma_param_19_{dtype=float16, scale_shape=(), shape=(3,...a_generator>  parameter: {'dtype': <class 'numpy.float16'>, 'scale_shape': (), 'shape': (3, 2), 'shape_shape': (3, 2)}>
shape_dtype = <class 'numpy.float32'>, scale_dtype = <class 'numpy.float32'>

    @cupy.testing.for_dtypes_combination(
        _float_dtypes, names=['shape_dtype', 'scale_dtype'])
    def test_gamma_generator(self, shape_dtype, scale_dtype):
>       self.check_distribution(cupy.random.default_rng().gamma,
                                shape_dtype, scale_dtype)

tests/cupy_tests/random_tests/test_distributions.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

seed = None

    def default_rng(seed=None):  # NOQA  avoid redefinition of seed
        """Construct a new Generator with the default BitGenerator (XORWOW).
    
        Args:
            seed (None, int, array_like[ints], numpy.random.SeedSequence, cupy.random.BitGenerator, cupy.random.Generator, optional):
                A seed to initialize the :class:`cupy.random.BitGenerator`. If an
                ``int`` or ``array_like[ints]`` or None is passed, then it will be
                passed to :class:`numpy.random.SeedSequence` to detive the initial
                :class:`BitGenerator` state. One may also pass in a `SeedSequence
                instance. Adiditionally, when passed :class:`BitGenerator`, it will
                be wrapped by :class:`Generator`. If passed a :class:`Generator`,
                it will be returned unaltered.
    
        Returns:
            Generator: The initialized generator object.
        """  # NOQA, list of types need to be in one line for sphinx
        if runtime.is_hip:
>           raise RuntimeError('Generator API not supported in HIP,'
                               ' please use the legacy one.')
E           RuntimeError: Generator API not supported in HIP, please use the legacy one.

cupy/random/__init__.py:36: RuntimeError
----------------------------- Captured stdout call -----------------------------
{'shape_dtype': <class 'numpy.float32'>, 'scale_dtype': <class 'numpy.float32'>}
_ TestDistributionsGamma_param_20_{dtype=float16, scale_shape=(3, 2), shape=(4, 3, 2), shape_shape=()}.test_gamma_generator _

self = <<cupy_tests.random_tests.test_distributions.TestDistributionsGamma_param_20_{dtype=float16, scale_shape=(3, 2), shape...enerator>  parameter: {'dtype': <class 'numpy.float16'>, 'scale_shape': (3, 2), 'shape': (4, 3, 2), 'shape_shape': ()}>
shape_dtype = <class 'numpy.float32'>, scale_dtype = <class 'numpy.float32'>

    @cupy.testing.for_dtypes_combination(
        _float_dtypes, names=['shape_dtype', 'scale_dtype'])
    def test_gamma_generator(self, shape_dtype, scale_dtype):
>       self.check_distribution(cupy.random.default_rng().gamma,
                                shape_dtype, scale_dtype)

tests/cupy_tests/random_tests/test_distributions.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

seed = None

    def default_rng(seed=None):  # NOQA  avoid redefinition of seed
        """Construct a new Generator with the default BitGenerator (XORWOW).
    
        Args:
            seed (None, int, array_like[ints], numpy.random.SeedSequence, cupy.random.BitGenerator, cupy.random.Generator, optional):
                A seed to initialize the :class:`cupy.random.BitGenerator`. If an
                ``int`` or ``array_like[ints]`` or None is passed, then it will be
                passed to :class:`numpy.random.SeedSequence` to detive the initial
                :class:`BitGenerator` state. One may also pass in a `SeedSequence
                instance. Adiditionally, when passed :class:`BitGenerator`, it will
                be wrapped by :class:`Generator`. If passed a :class:`Generator`,
                it will be returned unaltered.
    
        Returns:
            Generator: The initialized generator object.
        """  # NOQA, list of types need to be in one line for sphinx
        if runtime.is_hip:
>           raise RuntimeError('Generator API not supported in HIP,'
                               ' please use the legacy one.')
E           RuntimeError: Generator API not supported in HIP, please use the legacy one.

cupy/random/__init__.py:36: RuntimeError
----------------------------- Captured stdout call -----------------------------
{'shape_dtype': <class 'numpy.float32'>, 'scale_dtype': <class 'numpy.float32'>}
_ TestDistributionsGamma_param_21_{dtype=float16, scale_shape=(3, 2), shape=(4, 3, 2), shape_shape=(3, 2)}.test_gamma_generator _

self = <<cupy_tests.random_tests.test_distributions.TestDistributionsGamma_param_21_{dtype=float16, scale_shape=(3, 2), shape...ator>  parameter: {'dtype': <class 'numpy.float16'>, 'scale_shape': (3, 2), 'shape': (4, 3, 2), 'shape_shape': (3, 2)}>
shape_dtype = <class 'numpy.float32'>, scale_dtype = <class 'numpy.float32'>

    @cupy.testing.for_dtypes_combination(
        _float_dtypes, names=['shape_dtype', 'scale_dtype'])
    def test_gamma_generator(self, shape_dtype, scale_dtype):
>       self.check_distribution(cupy.random.default_rng().gamma,
                                shape_dtype, scale_dtype)

tests/cupy_tests/random_tests/test_distributions.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

seed = None

    def default_rng(seed=None):  # NOQA  avoid redefinition of seed
        """Construct a new Generator with the default BitGenerator (XORWOW).
    
        Args:
            seed (None, int, array_like[ints], numpy.random.SeedSequence, cupy.random.BitGenerator, cupy.random.Generator, optional):
                A seed to initialize the :class:`cupy.random.BitGenerator`. If an
                ``int`` or ``array_like[ints]`` or None is passed, then it will be
                passed to :class:`numpy.random.SeedSequence` to detive the initial
                :class:`BitGenerator` state. One may also pass in a `SeedSequence
                instance. Adiditionally, when passed :class:`BitGenerator`, it will
                be wrapped by :class:`Generator`. If passed a :class:`Generator`,
                it will be returned unaltered.
    
        Returns:
            Generator: The initialized generator object.
        """  # NOQA, list of types need to be in one line for sphinx
        if runtime.is_hip:
>           raise RuntimeError('Generator API not supported in HIP,'
                               ' please use the legacy one.')
E           RuntimeError: Generator API not supported in HIP, please use the legacy one.

cupy/random/__init__.py:36: RuntimeError
----------------------------- Captured stdout call -----------------------------
{'shape_dtype': <class 'numpy.float32'>, 'scale_dtype': <class 'numpy.float32'>}
_ TestDistributionsGamma_param_22_{dtype=float16, scale_shape=(3, 2), shape=(3, 2), shape_shape=()}.test_gamma_generator _

self = <<cupy_tests.random_tests.test_distributions.TestDistributionsGamma_param_22_{dtype=float16, scale_shape=(3, 2), shape...a_generator>  parameter: {'dtype': <class 'numpy.float16'>, 'scale_shape': (3, 2), 'shape': (3, 2), 'shape_shape': ()}>
shape_dtype = <class 'numpy.float32'>, scale_dtype = <class 'numpy.float32'>

    @cupy.testing.for_dtypes_combination(
        _float_dtypes, names=['shape_dtype', 'scale_dtype'])
    def test_gamma_generator(self, shape_dtype, scale_dtype):
>       self.check_distribution(cupy.random.default_rng().gamma,
                                shape_dtype, scale_dtype)

tests/cupy_tests/random_tests/test_distributions.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

seed = None

    def default_rng(seed=None):  # NOQA  avoid redefinition of seed
        """Construct a new Generator with the default BitGenerator (XORWOW).
    
        Args:
            seed (None, int, array_like[ints], numpy.random.SeedSequence, cupy.random.BitGenerator, cupy.random.Generator, optional):
                A seed to initialize the :class:`cupy.random.BitGenerator`. If an
                ``int`` or ``array_like[ints]`` or None is passed, then it will be
                passed to :class:`numpy.random.SeedSequence` to detive the initial
                :class:`BitGenerator` state. One may also pass in a `SeedSequence
                instance. Adiditionally, when passed :class:`BitGenerator`, it will
                be wrapped by :class:`Generator`. If passed a :class:`Generator`,
                it will be returned unaltered.
    
        Returns:
            Generator: The initialized generator object.
        """  # NOQA, list of types need to be in one line for sphinx
        if runtime.is_hip:
>           raise RuntimeError('Generator API not supported in HIP,'
                               ' please use the legacy one.')
E           RuntimeError: Generator API not supported in HIP, please use the legacy one.

cupy/random/__init__.py:36: RuntimeError
----------------------------- Captured stdout call -----------------------------
{'shape_dtype': <class 'numpy.float32'>, 'scale_dtype': <class 'numpy.float32'>}
_ TestDistributionsGamma_param_23_{dtype=float16, scale_shape=(3, 2), shape=(3, 2), shape_shape=(3, 2)}.test_gamma_generator _

self = <<cupy_tests.random_tests.test_distributions.TestDistributionsGamma_param_23_{dtype=float16, scale_shape=(3, 2), shape...nerator>  parameter: {'dtype': <class 'numpy.float16'>, 'scale_shape': (3, 2), 'shape': (3, 2), 'shape_shape': (3, 2)}>
shape_dtype = <class 'numpy.float32'>, scale_dtype = <class 'numpy.float32'>

    @cupy.testing.for_dtypes_combination(
        _float_dtypes, names=['shape_dtype', 'scale_dtype'])
    def test_gamma_generator(self, shape_dtype, scale_dtype):
>       self.check_distribution(cupy.random.default_rng().gamma,
                                shape_dtype, scale_dtype)

tests/cupy_tests/random_tests/test_distributions.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

seed = None

    def default_rng(seed=None):  # NOQA  avoid redefinition of seed
        """Construct a new Generator with the default BitGenerator (XORWOW).
    
        Args:
            seed (None, int, array_like[ints], numpy.random.SeedSequence, cupy.random.BitGenerator, cupy.random.Generator, optional):
                A seed to initialize the :class:`cupy.random.BitGenerator`. If an
                ``int`` or ``array_like[ints]`` or None is passed, then it will be
                passed to :class:`numpy.random.SeedSequence` to detive the initial
                :class:`BitGenerator` state. One may also pass in a `SeedSequence
                instance. Adiditionally, when passed :class:`BitGenerator`, it will
                be wrapped by :class:`Generator`. If passed a :class:`Generator`,
                it will be returned unaltered.
    
        Returns:
            Generator: The initialized generator object.
        """  # NOQA, list of types need to be in one line for sphinx
        if runtime.is_hip:
>           raise RuntimeError('Generator API not supported in HIP,'
                               ' please use the legacy one.')
E           RuntimeError: Generator API not supported in HIP, please use the legacy one.

cupy/random/__init__.py:36: RuntimeError
----------------------------- Captured stdout call -----------------------------
{'shape_dtype': <class 'numpy.float32'>, 'scale_dtype': <class 'numpy.float32'>}
_ TestDistributionsStandardGamma_param_0_{shape=(4, 3, 2), shape_shape=()}.test_standard_gamma_generator _

self = <<cupy_tests.random_tests.test_distributions.TestDistributionsStandardGamma_param_0_{shape=(4, 3, 2), shape_shape=()} testMethod=test_standard_gamma_generator>  parameter: {'shape': (4, 3, 2), 'shape_shape': ()}>
shape_dtype = <class 'numpy.float64'>, dtype = <class 'numpy.float64'>

    @cupy.testing.for_float_dtypes('dtype', no_float16=True)
    @cupy.testing.for_float_dtypes('shape_dtype')
    def test_standard_gamma_generator(self, shape_dtype, dtype):
        shape = numpy.ones(self.shape_shape, dtype=shape_dtype)
>       self.check_generator_distribution('standard_gamma',
                                          {'shape': shape},
                                          dtype)

tests/cupy_tests/random_tests/test_distributions.py:639: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/random_tests/test_distributions.py:31: in check_generator_distribution
    cp_gen = cupy.random.default_rng()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

seed = None

    def default_rng(seed=None):  # NOQA  avoid redefinition of seed
        """Construct a new Generator with the default BitGenerator (XORWOW).
    
        Args:
            seed (None, int, array_like[ints], numpy.random.SeedSequence, cupy.random.BitGenerator, cupy.random.Generator, optional):
                A seed to initialize the :class:`cupy.random.BitGenerator`. If an
                ``int`` or ``array_like[ints]`` or None is passed, then it will be
                passed to :class:`numpy.random.SeedSequence` to detive the initial
                :class:`BitGenerator` state. One may also pass in a `SeedSequence
                instance. Adiditionally, when passed :class:`BitGenerator`, it will
                be wrapped by :class:`Generator`. If passed a :class:`Generator`,
                it will be returned unaltered.
    
        Returns:
            Generator: The initialized generator object.
        """  # NOQA, list of types need to be in one line for sphinx
        if runtime.is_hip:
>           raise RuntimeError('Generator API not supported in HIP,'
                               ' please use the legacy one.')
E           RuntimeError: Generator API not supported in HIP, please use the legacy one.

cupy/random/__init__.py:36: RuntimeError
----------------------------- Captured stdout call -----------------------------
shape_dtype is <class 'numpy.float64'>
dtype is <class 'numpy.float64'>
_ TestDistributionsStandardGamma_param_1_{shape=(4, 3, 2), shape_shape=(3, 2)}.test_standard_gamma_generator _

self = <<cupy_tests.random_tests.test_distributions.TestDistributionsStandardGamma_param_1_{shape=(4, 3, 2), shape_shape=(3, 2)} testMethod=test_standard_gamma_generator>  parameter: {'shape': (4, 3, 2), 'shape_shape': (3, 2)}>
shape_dtype = <class 'numpy.float64'>, dtype = <class 'numpy.float64'>

    @cupy.testing.for_float_dtypes('dtype', no_float16=True)
    @cupy.testing.for_float_dtypes('shape_dtype')
    def test_standard_gamma_generator(self, shape_dtype, dtype):
        shape = numpy.ones(self.shape_shape, dtype=shape_dtype)
>       self.check_generator_distribution('standard_gamma',
                                          {'shape': shape},
                                          dtype)

tests/cupy_tests/random_tests/test_distributions.py:639: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/random_tests/test_distributions.py:31: in check_generator_distribution
    cp_gen = cupy.random.default_rng()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

seed = None

    def default_rng(seed=None):  # NOQA  avoid redefinition of seed
        """Construct a new Generator with the default BitGenerator (XORWOW).
    
        Args:
            seed (None, int, array_like[ints], numpy.random.SeedSequence, cupy.random.BitGenerator, cupy.random.Generator, optional):
                A seed to initialize the :class:`cupy.random.BitGenerator`. If an
                ``int`` or ``array_like[ints]`` or None is passed, then it will be
                passed to :class:`numpy.random.SeedSequence` to detive the initial
                :class:`BitGenerator` state. One may also pass in a `SeedSequence
                instance. Adiditionally, when passed :class:`BitGenerator`, it will
                be wrapped by :class:`Generator`. If passed a :class:`Generator`,
                it will be returned unaltered.
    
        Returns:
            Generator: The initialized generator object.
        """  # NOQA, list of types need to be in one line for sphinx
        if runtime.is_hip:
>           raise RuntimeError('Generator API not supported in HIP,'
                               ' please use the legacy one.')
E           RuntimeError: Generator API not supported in HIP, please use the legacy one.

cupy/random/__init__.py:36: RuntimeError
----------------------------- Captured stdout call -----------------------------
shape_dtype is <class 'numpy.float64'>
dtype is <class 'numpy.float64'>
_ TestDistributionsStandardGamma_param_2_{shape=(3, 2), shape_shape=()}.test_standard_gamma_generator _

self = <<cupy_tests.random_tests.test_distributions.TestDistributionsStandardGamma_param_2_{shape=(3, 2), shape_shape=()} testMethod=test_standard_gamma_generator>  parameter: {'shape': (3, 2), 'shape_shape': ()}>
shape_dtype = <class 'numpy.float64'>, dtype = <class 'numpy.float64'>

    @cupy.testing.for_float_dtypes('dtype', no_float16=True)
    @cupy.testing.for_float_dtypes('shape_dtype')
    def test_standard_gamma_generator(self, shape_dtype, dtype):
        shape = numpy.ones(self.shape_shape, dtype=shape_dtype)
>       self.check_generator_distribution('standard_gamma',
                                          {'shape': shape},
                                          dtype)

tests/cupy_tests/random_tests/test_distributions.py:639: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/random_tests/test_distributions.py:31: in check_generator_distribution
    cp_gen = cupy.random.default_rng()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

seed = None

    def default_rng(seed=None):  # NOQA  avoid redefinition of seed
        """Construct a new Generator with the default BitGenerator (XORWOW).
    
        Args:
            seed (None, int, array_like[ints], numpy.random.SeedSequence, cupy.random.BitGenerator, cupy.random.Generator, optional):
                A seed to initialize the :class:`cupy.random.BitGenerator`. If an
                ``int`` or ``array_like[ints]`` or None is passed, then it will be
                passed to :class:`numpy.random.SeedSequence` to detive the initial
                :class:`BitGenerator` state. One may also pass in a `SeedSequence
                instance. Adiditionally, when passed :class:`BitGenerator`, it will
                be wrapped by :class:`Generator`. If passed a :class:`Generator`,
                it will be returned unaltered.
    
        Returns:
            Generator: The initialized generator object.
        """  # NOQA, list of types need to be in one line for sphinx
        if runtime.is_hip:
>           raise RuntimeError('Generator API not supported in HIP,'
                               ' please use the legacy one.')
E           RuntimeError: Generator API not supported in HIP, please use the legacy one.

cupy/random/__init__.py:36: RuntimeError
----------------------------- Captured stdout call -----------------------------
shape_dtype is <class 'numpy.float64'>
dtype is <class 'numpy.float64'>
_ TestDistributionsStandardGamma_param_3_{shape=(3, 2), shape_shape=(3, 2)}.test_standard_gamma_generator _

self = <<cupy_tests.random_tests.test_distributions.TestDistributionsStandardGamma_param_3_{shape=(3, 2), shape_shape=(3, 2)} testMethod=test_standard_gamma_generator>  parameter: {'shape': (3, 2), 'shape_shape': (3, 2)}>
shape_dtype = <class 'numpy.float64'>, dtype = <class 'numpy.float64'>

    @cupy.testing.for_float_dtypes('dtype', no_float16=True)
    @cupy.testing.for_float_dtypes('shape_dtype')
    def test_standard_gamma_generator(self, shape_dtype, dtype):
        shape = numpy.ones(self.shape_shape, dtype=shape_dtype)
>       self.check_generator_distribution('standard_gamma',
                                          {'shape': shape},
                                          dtype)

tests/cupy_tests/random_tests/test_distributions.py:639: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/cupy_tests/random_tests/test_distributions.py:31: in check_generator_distribution
    cp_gen = cupy.random.default_rng()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

seed = None

    def default_rng(seed=None):  # NOQA  avoid redefinition of seed
        """Construct a new Generator with the default BitGenerator (XORWOW).
    
        Args:
            seed (None, int, array_like[ints], numpy.random.SeedSequence, cupy.random.BitGenerator, cupy.random.Generator, optional):
                A seed to initialize the :class:`cupy.random.BitGenerator`. If an
                ``int`` or ``array_like[ints]`` or None is passed, then it will be
                passed to :class:`numpy.random.SeedSequence` to detive the initial
                :class:`BitGenerator` state. One may also pass in a `SeedSequence
                instance. Adiditionally, when passed :class:`BitGenerator`, it will
                be wrapped by :class:`Generator`. If passed a :class:`Generator`,
                it will be returned unaltered.
    
        Returns:
            Generator: The initialized generator object.
        """  # NOQA, list of types need to be in one line for sphinx
        if runtime.is_hip:
>           raise RuntimeError('Generator API not supported in HIP,'
                               ' please use the legacy one.')
E           RuntimeError: Generator API not supported in HIP, please use the legacy one.

cupy/random/__init__.py:36: RuntimeError
----------------------------- Captured stdout call -----------------------------
shape_dtype is <class 'numpy.float64'>
dtype is <class 'numpy.float64'>
___________________ TestRaw.test_raw_multidimensional_array ____________________

self = <cupy.cuda.compiler._NVRTCProgram object at 0x7ef7e8268d30>
options = ('-D CUPY_JIT_MODE', '-I/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/_core/include', '-I/home/kmaeh/CuPy_Team/rocm-4.0.1/opt/rocm-4.0.1/include', '-fcuda-flush-denormals-to-zero')
log_stream = None

    def compile(self, options=(), log_stream=None):
        try:
            if self.name_expressions:
                for ker in self.name_expressions:
                    nvrtc.addAddNameExpression(self.ptr, ker)
>           nvrtc.compileProgram(self.ptr, options)

cupy/cuda/compiler.py:623: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   cpdef compileProgram(intptr_t prog, options):

cupy_backends/cuda/libs/nvrtc.pyx:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   check_status(status)

cupy_backends/cuda/libs/nvrtc.pyx:145: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise NVRTCError(status)
E   cupy_backends.cuda.libs.nvrtc.NVRTCError: HIPRTC_ERROR_COMPILATION (6)

cupy_backends/cuda/libs/nvrtc.pyx:64: NVRTCError

During handling of the above exception, another exception occurred:

self = <cupyx_tests.jit_tests.test_raw.TestRaw testMethod=test_raw_multidimensional_array>

    def test_raw_multidimensional_array(self):
        @jit.rawkernel()
        def f(x, y, n_row, n_col):
            tid = jit.threadIdx.x + jit.blockDim.x * jit.blockIdx.x
            ntid = jit.blockDim.x * jit.gridDim.x
            size = n_row * n_col
            for i in range(tid, size, ntid):
                i_row = i // n_col
                i_col = i % n_col
                y[i_row, i_col] = x[i_row, i_col]
    
        n, m = numpy.uint32(12), numpy.uint32(13)
        x = testing.shaped_random((n, m), dtype=numpy.int32, seed=0)
        y = testing.shaped_random((n, m), dtype=numpy.int32, seed=1)
>       f((5,), (6,), (x, y, n, m))

tests/cupyx_tests/jit_tests/test_raw.py:61: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupyx/jit/_interface.py:97: in __call__
    module = cupy._core.core.compile_with_cache(
cupy/_core/core.pyx:1930: in cupy._core.core.compile_with_cache
    cpdef function.Module compile_with_cache(
cupy/_core/core.pyx:1995: in cupy._core.core.compile_with_cache
    return cuda.compile_with_cache(
cupy/cuda/compiler.py:428: in compile_with_cache
    return _compile_with_cache_hip(
cupy/cuda/compiler.py:820: in _compile_with_cache_hip
    binary, mapping = compile_using_nvrtc(
cupy/cuda/compiler.py:271: in compile_using_nvrtc
    return _compile(source, options, cu_path,
cupy/cuda/compiler.py:255: in _compile
    ptx, mapping = prog.compile(options, log_stream)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <cupy.cuda.compiler._NVRTCProgram object at 0x7ef7e8268d30>
options = ('-D CUPY_JIT_MODE', '-I/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/_core/include', '-I/home/kmaeh/CuPy_Team/rocm-4.0.1/opt/rocm-4.0.1/include', '-fcuda-flush-denormals-to-zero')
log_stream = None

    def compile(self, options=(), log_stream=None):
        try:
            if self.name_expressions:
                for ker in self.name_expressions:
                    nvrtc.addAddNameExpression(self.ptr, ker)
            nvrtc.compileProgram(self.ptr, options)
            mapping = None
            if self.name_expressions:
                mapping = {}
                for ker in self.name_expressions:
                    mapping[ker] = nvrtc.getLoweredName(self.ptr, ker)
            if log_stream is not None:
                log_stream.write(nvrtc.getProgramLog(self.ptr))
            # TODO(leofang): use getCUBIN() for _cuda_version >= 11010?
            return nvrtc.getPTX(self.ptr), mapping
        except nvrtc.NVRTCError:
            log = nvrtc.getProgramLog(self.ptr)
>           raise CompileException(log, self.src, self.name, options,
                                   'nvrtc' if not runtime.is_hip else 'hiprtc')
E           cupy.cuda.compiler.CompileException: /tmp/comgr-c390f7/input/CompileSource:5417:7: error: no member named '_indexing' in 'CArray<int, 2, true, true>'
E               y._indexing(thrust::make_tuple(i_row, i_col)) = x._indexing(thrust::make_tuple(i_row, i_col));
E               ~ ^
E           /tmp/comgr-c390f7/input/CompileSource:5417:55: error: no member named '_indexing' in 'CArray<int, 2, true, true>'
E               y._indexing(thrust::make_tuple(i_row, i_col)) = x._indexing(thrust::make_tuple(i_row, i_col));
E                                                               ~ ^
E           /tmp/comgr-c390f7/input/CompileSource:5417:17: error: no member named 'make_tuple' in namespace 'thrust'; did you mean 'std::make_tuple'?
E               y._indexing(thrust::make_tuple(i_row, i_col)) = x._indexing(thrust::make_tuple(i_row, i_col));
E                           ^~~~~~~~~~~~~~~~~~
E                           std::make_tuple
E           /usr/lib/gcc/x86_64-linux-gnu/7.5.0/../../../../include/c++/7.5.0/tuple:1448:5: note: 'std::make_tuple' declared here
E               make_tuple(_Elements&&... __args)
E               ^
E           /tmp/comgr-c390f7/input/CompileSource:5417:65: error: no member named 'make_tuple' in namespace 'thrust'; did you mean 'std::make_tuple'?
E               y._indexing(thrust::make_tuple(i_row, i_col)) = x._indexing(thrust::make_tuple(i_row, i_col));
E                                                                           ^~~~~~~~~~~~~~~~~~
E                                                                           std::make_tuple
E           /usr/lib/gcc/x86_64-linux-gnu/7.5.0/../../../../include/c++/7.5.0/tuple:1448:5: note: 'std::make_tuple' declared here
E               make_tuple(_Elements&&... __args)
E               ^
E           4 errors generated when compiling for gfx906.
E           Error: Failed to compile opencl source (from CL or HIP source to LLVM IR).

cupy/cuda/compiler.py:635: CompileException
______ TestLUSolve_param_0_{shapes=((4, 4), (4,)), trans=0}.test_lu_solve ______

self = <<cupyx_tests.scipy_tests.linalg_tests.test_decomp_lu.TestLUSolve_param_0_{shapes=((4, 4), (4,)), trans=0} testMethod=test_lu_solve>  parameter: {'shapes': ((4, 4), (4,)), 'trans': 0}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>
scp = <module 'cupyx.scipy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupyx/scipy/__init__.py'>
dtype = <class 'numpy.float32'>

    @testing.for_dtypes('fdFD')
    @testing.numpy_cupy_allclose(atol=1e-5, scipy_name='scp')
    def test_lu_solve(self, xp, scp, dtype):
        a_shape, b_shape = self.shapes
        A = testing.shaped_random(a_shape, xp, dtype=dtype)
        b = testing.shaped_random(b_shape, xp, dtype=dtype)
        lu = scp.linalg.lu_factor(A)
>       return scp.linalg.lu_solve(lu, b, trans=self.trans)

tests/cupyx_tests/scipy_tests/linalg_tests/test_decomp_lu.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

lu_and_piv = (array([[ 9.636627  ,  3.8344152 ,  7.91725   ,  5.288949  ],
       [ 0.58946407,  6.995716  , -3.956574  , -2.246352...,
       [ 0.43962973,  0.6823059 ,  0.83048815,  4.776696  ]],
      dtype=float32), array([2, 3, 2, 3], dtype=int32))
b = array([ 0.5098284 ,  0.25080842, -0.34704718,  0.5484196 ], dtype=float32)
trans = 0, overwrite_b = False, check_finite = True

    def lu_solve(lu_and_piv, b, trans=0, overwrite_b=False, check_finite=True):
        """Solve an equation system, ``a * x = b``, given the LU factorization of ``a``
    
        Args:
            lu_and_piv (tuple): LU factorization of matrix ``a`` (``(M, M)``)
                together with pivot indices.
            b (cupy.ndarray): The matrix with dimension ``(M,)`` or
                ``(M, N)``.
            trans ({0, 1, 2}): Type of system to solve:
    
                ========  =========
                trans     system
                ========  =========
                0         a x  = b
                1         a^T x = b
                2         a^H x = b
                ========  =========
            overwrite_b (bool): Allow overwriting data in b (may enhance
                performance)
            check_finite (bool): Whether to check that the input matrices contain
                only finite numbers. Disabling may give a performance gain, but may
                result in problems (crashes, non-termination) if the inputs do
                contain infinities or NaNs.
    
        Returns:
            cupy.ndarray:
                The matrix with dimension ``(M,)`` or ``(M, N)``.
    
        .. seealso:: :func:`scipy.linalg.lu_solve`
        """
    
        (lu, ipiv) = lu_and_piv
    
        _util._assert_cupy_array(lu)
        _util._assert_rank2(lu)
        _util._assert_nd_squareness(lu)
    
        m = lu.shape[0]
        if m != b.shape[0]:
            raise ValueError('incompatible dimensions.')
    
        dtype = lu.dtype
        if dtype.char == 'f':
            getrs = cusolver.sgetrs
        elif dtype.char == 'd':
            getrs = cusolver.dgetrs
        elif dtype.char == 'F':
            getrs = cusolver.cgetrs
        elif dtype.char == 'D':
            getrs = cusolver.zgetrs
        else:
            msg = 'Only float32, float64, complex64 and complex128 are supported.'
            raise NotImplementedError(msg)
    
        if trans == 0:
            trans = cublas.CUBLAS_OP_N
        elif trans == 1:
            trans = cublas.CUBLAS_OP_T
        elif trans == 2:
            trans = cublas.CUBLAS_OP_C
        else:
            raise ValueError('unknown trans')
    
        lu = lu.astype(dtype, order='F', copy=False)
        ipiv = ipiv.astype(ipiv.dtype, order='F', copy=True)
        # cuSolver uses 1-origin while SciPy uses 0-origin
        ipiv += 1
        b = b.astype(dtype, order='F', copy=(not overwrite_b))
    
        if check_finite:
            if lu.dtype.kind == 'f' and not cupy.isfinite(lu).all():
                raise ValueError(
                    'array must not contain infs or NaNs.\n'
                    'Note that when a singular matrix is given, unlike '
                    'scipy.linalg.lu_factor, cupyx.scipy.linalg.lu_factor '
                    'returns an array containing NaN.')
            if b.dtype.kind == 'f' and not cupy.isfinite(b).all():
                raise ValueError(
                    'array must not contain infs or NaNs')
    
        n = 1 if b.ndim == 1 else b.shape[1]
        cusolver_handle = device.get_cusolver_handle()
        dev_info = cupy.empty(1, dtype=numpy.int32)
    
        # solve for the inverse
        getrs(cusolver_handle,
              trans,
              m, n, lu.data.ptr, m, ipiv.data.ptr, b.data.ptr,
              m, dev_info.data.ptr)
    
        if dev_info[0] < 0:
>           raise ValueError('illegal value in %d-th argument of '
                             'internal getrs (lu_solve)' % -dev_info[0])
E           AssertionError: Only cupy raises error
E           
E           Traceback (most recent call last):
E             File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E               result = impl(self, *args, **kw)
E             File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupyx_tests/scipy_tests/linalg_tests/test_decomp_lu.py", line 133, in test_lu_solve
E               return scp.linalg.lu_solve(lu, b, trans=self.trans)
E             File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupyx/scipy/linalg/decomp_lu.py", line 344, in lu_solve
E               raise ValueError('illegal value in %d-th argument of '
E           ValueError: illegal value in 1409886381-th argument of internal getrs (lu_solve)

cupyx/scipy/linalg/decomp_lu.py:344: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is f
______ TestLUSolve_param_2_{shapes=((4, 4), (4,)), trans=2}.test_lu_solve ______

self = <<cupyx_tests.scipy_tests.linalg_tests.test_decomp_lu.TestLUSolve_param_2_{shapes=((4, 4), (4,)), trans=2} testMethod=test_lu_solve>  parameter: {'shapes': ((4, 4), (4,)), 'trans': 2}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>
scp = <module 'cupyx.scipy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupyx/scipy/__init__.py'>
dtype = <class 'numpy.float32'>

    @testing.for_dtypes('fdFD')
    @testing.numpy_cupy_allclose(atol=1e-5, scipy_name='scp')
    def test_lu_solve(self, xp, scp, dtype):
        a_shape, b_shape = self.shapes
        A = testing.shaped_random(a_shape, xp, dtype=dtype)
        b = testing.shaped_random(b_shape, xp, dtype=dtype)
        lu = scp.linalg.lu_factor(A)
>       return scp.linalg.lu_solve(lu, b, trans=self.trans)

tests/cupyx_tests/scipy_tests/linalg_tests/test_decomp_lu.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

lu_and_piv = (array([[ 9.636627  ,  3.8344152 ,  7.91725   ,  5.288949  ],
       [ 0.58946407,  6.995716  , -3.956574  , -2.246352...,
       [ 0.43962973,  0.6823059 ,  0.83048815,  4.776696  ]],
      dtype=float32), array([2, 3, 2, 3], dtype=int32))
b = array([ 1.0000000e+00,  0.0000000e+00, -3.5134796e-08,  5.9604645e-08],
      dtype=float32)
trans = 2, overwrite_b = False, check_finite = True

    def lu_solve(lu_and_piv, b, trans=0, overwrite_b=False, check_finite=True):
        """Solve an equation system, ``a * x = b``, given the LU factorization of ``a``
    
        Args:
            lu_and_piv (tuple): LU factorization of matrix ``a`` (``(M, M)``)
                together with pivot indices.
            b (cupy.ndarray): The matrix with dimension ``(M,)`` or
                ``(M, N)``.
            trans ({0, 1, 2}): Type of system to solve:
    
                ========  =========
                trans     system
                ========  =========
                0         a x  = b
                1         a^T x = b
                2         a^H x = b
                ========  =========
            overwrite_b (bool): Allow overwriting data in b (may enhance
                performance)
            check_finite (bool): Whether to check that the input matrices contain
                only finite numbers. Disabling may give a performance gain, but may
                result in problems (crashes, non-termination) if the inputs do
                contain infinities or NaNs.
    
        Returns:
            cupy.ndarray:
                The matrix with dimension ``(M,)`` or ``(M, N)``.
    
        .. seealso:: :func:`scipy.linalg.lu_solve`
        """
    
        (lu, ipiv) = lu_and_piv
    
        _util._assert_cupy_array(lu)
        _util._assert_rank2(lu)
        _util._assert_nd_squareness(lu)
    
        m = lu.shape[0]
        if m != b.shape[0]:
            raise ValueError('incompatible dimensions.')
    
        dtype = lu.dtype
        if dtype.char == 'f':
            getrs = cusolver.sgetrs
        elif dtype.char == 'd':
            getrs = cusolver.dgetrs
        elif dtype.char == 'F':
            getrs = cusolver.cgetrs
        elif dtype.char == 'D':
            getrs = cusolver.zgetrs
        else:
            msg = 'Only float32, float64, complex64 and complex128 are supported.'
            raise NotImplementedError(msg)
    
        if trans == 0:
            trans = cublas.CUBLAS_OP_N
        elif trans == 1:
            trans = cublas.CUBLAS_OP_T
        elif trans == 2:
            trans = cublas.CUBLAS_OP_C
        else:
            raise ValueError('unknown trans')
    
        lu = lu.astype(dtype, order='F', copy=False)
        ipiv = ipiv.astype(ipiv.dtype, order='F', copy=True)
        # cuSolver uses 1-origin while SciPy uses 0-origin
        ipiv += 1
        b = b.astype(dtype, order='F', copy=(not overwrite_b))
    
        if check_finite:
            if lu.dtype.kind == 'f' and not cupy.isfinite(lu).all():
                raise ValueError(
                    'array must not contain infs or NaNs.\n'
                    'Note that when a singular matrix is given, unlike '
                    'scipy.linalg.lu_factor, cupyx.scipy.linalg.lu_factor '
                    'returns an array containing NaN.')
            if b.dtype.kind == 'f' and not cupy.isfinite(b).all():
                raise ValueError(
                    'array must not contain infs or NaNs')
    
        n = 1 if b.ndim == 1 else b.shape[1]
        cusolver_handle = device.get_cusolver_handle()
        dev_info = cupy.empty(1, dtype=numpy.int32)
    
        # solve for the inverse
        getrs(cusolver_handle,
              trans,
              m, n, lu.data.ptr, m, ipiv.data.ptr, b.data.ptr,
              m, dev_info.data.ptr)
    
        if dev_info[0] < 0:
>           raise ValueError('illegal value in %d-th argument of '
                             'internal getrs (lu_solve)' % -dev_info[0])
E           AssertionError: Only cupy raises error
E           
E           Traceback (most recent call last):
E             File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E               result = impl(self, *args, **kw)
E             File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupyx_tests/scipy_tests/linalg_tests/test_decomp_lu.py", line 133, in test_lu_solve
E               return scp.linalg.lu_solve(lu, b, trans=self.trans)
E             File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupyx/scipy/linalg/decomp_lu.py", line 344, in lu_solve
E               raise ValueError('illegal value in %d-th argument of '
E           ValueError: illegal value in 1558304511-th argument of internal getrs (lu_solve)

cupyx/scipy/linalg/decomp_lu.py:344: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is f
_____ TestLUSolve_param_4_{shapes=((5, 5), (5, 2)), trans=1}.test_lu_solve _____

self = <<cupyx_tests.scipy_tests.linalg_tests.test_decomp_lu.TestLUSolve_param_4_{shapes=((5, 5), (5, 2)), trans=1} testMethod=test_lu_solve>  parameter: {'shapes': ((5, 5), (5, 2)), 'trans': 1}>
xp = <module 'cupy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/__init__.py'>
scp = <module 'cupyx.scipy' from '/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupyx/scipy/__init__.py'>
dtype = <class 'numpy.complex128'>

    @testing.for_dtypes('fdFD')
    @testing.numpy_cupy_allclose(atol=1e-5, scipy_name='scp')
    def test_lu_solve(self, xp, scp, dtype):
        a_shape, b_shape = self.shapes
        A = testing.shaped_random(a_shape, xp, dtype=dtype)
        b = testing.shaped_random(b_shape, xp, dtype=dtype)
        lu = scp.linalg.lu_factor(A)
>       return scp.linalg.lu_solve(lu, b, trans=self.trans)

tests/cupyx_tests/scipy_tests/linalg_tests/test_decomp_lu.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

lu_and_piv = (array([[ 9.78618342 +6.7063787j ,  7.99158564 +2.10382561j,
         4.61479362 +1.28926298j,  7.80529176 +3.15428351...09693 +0.11253535j, -0.19530724 +0.3829403j ,
         1.48165651 +3.00519867j]]), array([4, 1, 4, 3, 4], dtype=int32))
b = array([[-0.12906699+0.83930103j, -0.4556416 +0.47542261j],
       [-1.63805173+0.28560157j, -1.36394374-0.01759107j],
...
       [ 0.64805631-1.5160458j ,  0.17068634-1.2632402j ],
       [-0.4229345 -0.24016447j, -1.34513094-0.06091443j]])
trans = 1, overwrite_b = False, check_finite = True

    def lu_solve(lu_and_piv, b, trans=0, overwrite_b=False, check_finite=True):
        """Solve an equation system, ``a * x = b``, given the LU factorization of ``a``
    
        Args:
            lu_and_piv (tuple): LU factorization of matrix ``a`` (``(M, M)``)
                together with pivot indices.
            b (cupy.ndarray): The matrix with dimension ``(M,)`` or
                ``(M, N)``.
            trans ({0, 1, 2}): Type of system to solve:
    
                ========  =========
                trans     system
                ========  =========
                0         a x  = b
                1         a^T x = b
                2         a^H x = b
                ========  =========
            overwrite_b (bool): Allow overwriting data in b (may enhance
                performance)
            check_finite (bool): Whether to check that the input matrices contain
                only finite numbers. Disabling may give a performance gain, but may
                result in problems (crashes, non-termination) if the inputs do
                contain infinities or NaNs.
    
        Returns:
            cupy.ndarray:
                The matrix with dimension ``(M,)`` or ``(M, N)``.
    
        .. seealso:: :func:`scipy.linalg.lu_solve`
        """
    
        (lu, ipiv) = lu_and_piv
    
        _util._assert_cupy_array(lu)
        _util._assert_rank2(lu)
        _util._assert_nd_squareness(lu)
    
        m = lu.shape[0]
        if m != b.shape[0]:
            raise ValueError('incompatible dimensions.')
    
        dtype = lu.dtype
        if dtype.char == 'f':
            getrs = cusolver.sgetrs
        elif dtype.char == 'd':
            getrs = cusolver.dgetrs
        elif dtype.char == 'F':
            getrs = cusolver.cgetrs
        elif dtype.char == 'D':
            getrs = cusolver.zgetrs
        else:
            msg = 'Only float32, float64, complex64 and complex128 are supported.'
            raise NotImplementedError(msg)
    
        if trans == 0:
            trans = cublas.CUBLAS_OP_N
        elif trans == 1:
            trans = cublas.CUBLAS_OP_T
        elif trans == 2:
            trans = cublas.CUBLAS_OP_C
        else:
            raise ValueError('unknown trans')
    
        lu = lu.astype(dtype, order='F', copy=False)
        ipiv = ipiv.astype(ipiv.dtype, order='F', copy=True)
        # cuSolver uses 1-origin while SciPy uses 0-origin
        ipiv += 1
        b = b.astype(dtype, order='F', copy=(not overwrite_b))
    
        if check_finite:
            if lu.dtype.kind == 'f' and not cupy.isfinite(lu).all():
                raise ValueError(
                    'array must not contain infs or NaNs.\n'
                    'Note that when a singular matrix is given, unlike '
                    'scipy.linalg.lu_factor, cupyx.scipy.linalg.lu_factor '
                    'returns an array containing NaN.')
            if b.dtype.kind == 'f' and not cupy.isfinite(b).all():
                raise ValueError(
                    'array must not contain infs or NaNs')
    
        n = 1 if b.ndim == 1 else b.shape[1]
        cusolver_handle = device.get_cusolver_handle()
        dev_info = cupy.empty(1, dtype=numpy.int32)
    
        # solve for the inverse
        getrs(cusolver_handle,
              trans,
              m, n, lu.data.ptr, m, ipiv.data.ptr, b.data.ptr,
              m, dev_info.data.ptr)
    
        if dev_info[0] < 0:
>           raise ValueError('illegal value in %d-th argument of '
                             'internal getrs (lu_solve)' % -dev_info[0])
E           AssertionError: Only cupy raises error
E           
E           Traceback (most recent call last):
E             File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupy/testing/_helper.py", line 47, in _call_func
E               result = impl(self, *args, **kw)
E             File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupyx_tests/scipy_tests/linalg_tests/test_decomp_lu.py", line 133, in test_lu_solve
E               return scp.linalg.lu_solve(lu, b, trans=self.trans)
E             File "/home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/cupyx/scipy/linalg/decomp_lu.py", line 344, in lu_solve
E               raise ValueError('illegal value in %d-th argument of '
E           ValueError: illegal value in 1857101197-th argument of internal getrs (lu_solve)

cupyx/scipy/linalg/decomp_lu.py:344: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is D
_ TestGenericFilter.test_filter[_param_156_{dtype=uint8, filter='generic_filter', footprint=False, func_or_kernel=(<cupy._core.raw.RawKernel object at 0x7ef8f01938c0>, <function rms_pyfunc at 0x7ef8f1550700>), ksize=3, mode='mirror', shape=(4, 5)}] _

self = <<cupyx_tests.scipy_tests.ndimage_tests.test_filters.TestGenericFilter object at 0x7ef78b7513d0>  parameter: {'filter'...ss 'numpy.uint8'>, 'ksize': 3, 'mode': 'mirror', 'shape': (4, 5), 'function': <function rms_pyfunc at 0x7ef8f1550700>}>
args = (), kw = {}
cupy_result = (array([[21, 31, 40, 31, 33],
       [27, 29, 28, 20, 27],
       [14, 25, 35, 34, 32],
       [27, 26, 33, 25, 31]], dtype=uint8),)
cupy_error = None
numpy_result = (array([[28, 38, 48, 42, 45],
       [32, 36, 44, 37, 44],
       [18, 31, 45, 48, 55],
       [22, 29, 41, 43, 54]], dtype=uint8),)
numpy_error = None
cupy_numpy_result_ndarrays = [(array([[21, 31, 40, 31, 33],
       [27, 29, 28, 20, 27],
       [14, 25, 35, 34, 32],
       [27, 26, 33, 25, 31]],...38, 48, 42, 45],
       [32, 36, 44, 37, 44],
       [18, 31, 45, 48, 55],
       [22, 29, 41, 43, 54]], dtype=uint8))]
cupy_r = array([[21, 31, 40, 31, 33],
       [27, 29, 28, 20, 27],
       [14, 25, 35, 34, 32],
       [27, 26, 33, 25, 31]], dtype=uint8)
numpy_r = array([[28, 38, 48, 42, 45],
       [32, 36, 44, 37, 44],
       [18, 31, 45, 48, 55],
       [22, 29, 41, 43, 54]], dtype=uint8)
skip = False

            @_wraps_partial_xp(impl, name, sp_name, scipy_name)
            def test_func(self, *args, **kw):
                # Run cupy and numpy
                (
                    cupy_result, cupy_error,
                    numpy_result, numpy_error) = (
                        _call_func_numpy_cupy(
                            self, impl, args, kw, name, sp_name, scipy_name))
                assert cupy_result is not None or cupy_error is not None
                assert numpy_result is not None or numpy_error is not None
    
                # Check errors raised
                if cupy_error or numpy_error:
                    _check_cupy_numpy_error(cupy_error,
                                            numpy_error,
                                            accept_error=accept_error)
                    return
    
                # Check returned arrays
    
                if not isinstance(cupy_result, (tuple, list)):
                    cupy_result = cupy_result,
                if not isinstance(numpy_result, (tuple, list)):
                    numpy_result = numpy_result,
    
                assert len(cupy_result) == len(numpy_result)
    
                # Check types
                cupy_numpy_result_ndarrays = [
                    _convert_output_to_ndarray(
                        cupy_r, numpy_r, sp_name, check_sparse_format)
                    for cupy_r, numpy_r in zip(cupy_result, numpy_result)]
    
                # Check dtypes
                if type_check:
                    for cupy_r, numpy_r in cupy_numpy_result_ndarrays:
                        if cupy_r.dtype != numpy_r.dtype:
                            raise AssertionError(
                                '''ndarrays of different dtypes are returned.
    cupy: {}
    numpy: {}'''.format(cupy_r.dtype, numpy_r.dtype))
    
                # Check contiguities
                if contiguous_check:
                    for cupy_r, numpy_r in zip(cupy_result, numpy_result):
                        if isinstance(numpy_r, numpy.ndarray):
                            if (numpy_r.flags.c_contiguous
                                    and not cupy_r.flags.c_contiguous):
                                raise AssertionError(
                                    'The state of c_contiguous flag is false. '
                                    '(cupy_result:{} numpy_result:{})'.format(
                                        cupy_r.flags.c_contiguous,
                                        numpy_r.flags.c_contiguous))
                            if (numpy_r.flags.f_contiguous
                                    and not cupy_r.flags.f_contiguous):
                                raise AssertionError(
                                    'The state of f_contiguous flag is false. '
                                    '(cupy_result:{} numpy_result:{})'.format(
                                        cupy_r.flags.f_contiguous,
                                        numpy_r.flags.f_contiguous))
    
                # Check shapes
                for cupy_r, numpy_r in cupy_numpy_result_ndarrays:
                    assert cupy_r.shape == numpy_r.shape
    
                # Check item values
                for cupy_r, numpy_r in cupy_numpy_result_ndarrays:
                    # Behavior of assigning a negative value to an unsigned integer
                    # variable is undefined.
                    # nVidia GPUs and Intel CPUs behave differently.
                    # To avoid this difference, we need to ignore dimensions whose
                    # values are negative.
    
                    skip = False
                    if (_contains_signed_and_unsigned(kw)
                            and cupy_r.dtype in _unsigned_dtypes):
                        mask = _make_positive_mask(
                            self, impl, args, kw, name, sp_name, scipy_name)
                        if cupy_r.shape == ():
                            skip = (mask == 0).all()
                        else:
                            cupy_r = cupy_r[mask].get()
                            numpy_r = numpy_r[mask]
    
                    if not skip:
>                       check_func(cupy_r, numpy_r)

cupy/testing/_helper.py:343: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/testing/_helper.py:495: in check_func
    _array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[21, 31, 40, 31, 33],
       [27, 29, 28, 20, 27],
       [14, 25, 35, 34, 32],
       [27, 26, 33, 25, 31]], dtype=uint8)
desired = array([[28, 38, 48, 42, 45],
       [32, 36, 44, 37, 44],
       [18, 31, 45, 48, 55],
       [22, 29, 41, 43, 54]], dtype=uint8)
rtol = 1e-05, atol = 1e-05, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-05, atol=1e-05
E       
E       Mismatched elements: 20 / 20 (100%)
E       Max absolute difference: 253
E       Max relative difference: 14.
E        x: array([[21, 31, 40, 31, 33],
E              [27, 29, 28, 20, 27],
E              [14, 25, 35, 34, 32],
E              [27, 26, 33, 25, 31]], dtype=uint8)
E        y: array([[28, 38, 48, 42, 45],
E              [32, 36, 44, 37, 44],
E              [18, 31, 45, 48, 55],
E              [22, 29, 41, 43, 54]], dtype=uint8)

cupy/testing/_array.py:24: AssertionError
_ TestGenericFilter.test_filter[_param_158_{dtype=uint8, filter='generic_filter', footprint=False, func_or_kernel=(<cupy._core.raw.RawKernel object at 0x7ef8f01938c0>, <function rms_pyfunc at 0x7ef8f1550700>), ksize=4, mode='mirror', shape=(4, 5)}] _

self = <<cupyx_tests.scipy_tests.ndimage_tests.test_filters.TestGenericFilter object at 0x7ef78b38e7c0>  parameter: {'filter'...ss 'numpy.uint8'>, 'ksize': 4, 'mode': 'mirror', 'shape': (4, 5), 'function': <function rms_pyfunc at 0x7ef8f1550700>}>
args = (), kw = {}
cupy_result = (array([[28, 24, 32, 32, 39],
       [ 0,  0,  0,  0,  0],
       [ 0,  0,  0,  0,  0],
       [ 0,  0,  0,  0,  0]], dtype=uint8),)
cupy_error = None
numpy_result = (array([[34, 34, 44, 37, 47],
       [34, 34, 44, 37, 47],
       [29, 29, 39, 37, 46],
       [27, 27, 41, 38, 52]], dtype=uint8),)
numpy_error = None
cupy_numpy_result_ndarrays = [(array([[28, 24, 32, 32, 39],
       [ 0,  0,  0,  0,  0],
       [ 0,  0,  0,  0,  0],
       [ 0,  0,  0,  0,  0]],...34, 44, 37, 47],
       [34, 34, 44, 37, 47],
       [29, 29, 39, 37, 46],
       [27, 27, 41, 38, 52]], dtype=uint8))]
cupy_r = array([[28, 24, 32, 32, 39],
       [ 0,  0,  0,  0,  0],
       [ 0,  0,  0,  0,  0],
       [ 0,  0,  0,  0,  0]], dtype=uint8)
numpy_r = array([[34, 34, 44, 37, 47],
       [34, 34, 44, 37, 47],
       [29, 29, 39, 37, 46],
       [27, 27, 41, 38, 52]], dtype=uint8)
skip = False

            @_wraps_partial_xp(impl, name, sp_name, scipy_name)
            def test_func(self, *args, **kw):
                # Run cupy and numpy
                (
                    cupy_result, cupy_error,
                    numpy_result, numpy_error) = (
                        _call_func_numpy_cupy(
                            self, impl, args, kw, name, sp_name, scipy_name))
                assert cupy_result is not None or cupy_error is not None
                assert numpy_result is not None or numpy_error is not None
    
                # Check errors raised
                if cupy_error or numpy_error:
                    _check_cupy_numpy_error(cupy_error,
                                            numpy_error,
                                            accept_error=accept_error)
                    return
    
                # Check returned arrays
    
                if not isinstance(cupy_result, (tuple, list)):
                    cupy_result = cupy_result,
                if not isinstance(numpy_result, (tuple, list)):
                    numpy_result = numpy_result,
    
                assert len(cupy_result) == len(numpy_result)
    
                # Check types
                cupy_numpy_result_ndarrays = [
                    _convert_output_to_ndarray(
                        cupy_r, numpy_r, sp_name, check_sparse_format)
                    for cupy_r, numpy_r in zip(cupy_result, numpy_result)]
    
                # Check dtypes
                if type_check:
                    for cupy_r, numpy_r in cupy_numpy_result_ndarrays:
                        if cupy_r.dtype != numpy_r.dtype:
                            raise AssertionError(
                                '''ndarrays of different dtypes are returned.
    cupy: {}
    numpy: {}'''.format(cupy_r.dtype, numpy_r.dtype))
    
                # Check contiguities
                if contiguous_check:
                    for cupy_r, numpy_r in zip(cupy_result, numpy_result):
                        if isinstance(numpy_r, numpy.ndarray):
                            if (numpy_r.flags.c_contiguous
                                    and not cupy_r.flags.c_contiguous):
                                raise AssertionError(
                                    'The state of c_contiguous flag is false. '
                                    '(cupy_result:{} numpy_result:{})'.format(
                                        cupy_r.flags.c_contiguous,
                                        numpy_r.flags.c_contiguous))
                            if (numpy_r.flags.f_contiguous
                                    and not cupy_r.flags.f_contiguous):
                                raise AssertionError(
                                    'The state of f_contiguous flag is false. '
                                    '(cupy_result:{} numpy_result:{})'.format(
                                        cupy_r.flags.f_contiguous,
                                        numpy_r.flags.f_contiguous))
    
                # Check shapes
                for cupy_r, numpy_r in cupy_numpy_result_ndarrays:
                    assert cupy_r.shape == numpy_r.shape
    
                # Check item values
                for cupy_r, numpy_r in cupy_numpy_result_ndarrays:
                    # Behavior of assigning a negative value to an unsigned integer
                    # variable is undefined.
                    # nVidia GPUs and Intel CPUs behave differently.
                    # To avoid this difference, we need to ignore dimensions whose
                    # values are negative.
    
                    skip = False
                    if (_contains_signed_and_unsigned(kw)
                            and cupy_r.dtype in _unsigned_dtypes):
                        mask = _make_positive_mask(
                            self, impl, args, kw, name, sp_name, scipy_name)
                        if cupy_r.shape == ():
                            skip = (mask == 0).all()
                        else:
                            cupy_r = cupy_r[mask].get()
                            numpy_r = numpy_r[mask]
    
                    if not skip:
>                       check_func(cupy_r, numpy_r)

cupy/testing/_helper.py:343: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/testing/_helper.py:495: in check_func
    _array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[28, 24, 32, 32, 39],
       [ 0,  0,  0,  0,  0],
       [ 0,  0,  0,  0,  0],
       [ 0,  0,  0,  0,  0]], dtype=uint8)
desired = array([[34, 34, 44, 37, 47],
       [34, 34, 44, 37, 47],
       [29, 29, 39, 37, 46],
       [27, 27, 41, 38, 52]], dtype=uint8)
rtol = 1e-05, atol = 1e-05, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-05, atol=1e-05
E       
E       Mismatched elements: 20 / 20 (100%)
E       Max absolute difference: 251
E       Max relative difference: 8.48148148
E        x: array([[28, 24, 32, 32, 39],
E              [ 0,  0,  0,  0,  0],
E              [ 0,  0,  0,  0,  0],
E              [ 0,  0,  0,  0,  0]], dtype=uint8)
E        y: array([[34, 34, 44, 37, 47],
E              [34, 34, 44, 37, 47],
E              [29, 29, 39, 37, 46],
E              [27, 27, 41, 38, 52]], dtype=uint8)

cupy/testing/_array.py:24: AssertionError
_ TestGenericFilter.test_filter[_param_160_{dtype=float64, filter='generic_filter', footprint=False, func_or_kernel=(<cupy._core.raw.RawKernel object at 0x7ef8f01938c0>, <function rms_pyfunc at 0x7ef8f1550700>), ksize=3, mode='mirror', shape=(4, 5)}] _

self = <<cupyx_tests.scipy_tests.ndimage_tests.test_filters.TestGenericFilter object at 0x7ef78b760730>  parameter: {'filter'... 'numpy.float64'>, 'ksize': 3, 'mode': 'mirror', 'shape': (4, 5), 'function': <function rms_pyfunc at 0x7ef8f1550700>}>
args = (), kw = {}
cupy_result = (array([[30.36659675, 39.62975648, 53.45565341, 42.0701155 , 42.81412414],
       [33.36838531, 37.73390254, 33.011765...2, 44.03386405, 43.67148673, 48.63067102],
       [32.28830047, 30.15609296, 36.65741325, 35.73179981, 40.69098504]]),)
cupy_error = None
numpy_result = (array([[32.49418447, 44.26508328, 55.58324819, 50.90632842, 53.13241351],
       [36.78467189, 42.32410703, 50.513759...4, 51.93015205, 56.78985728, 63.23111802],
       [26.45539443, 35.1080233 , 46.86066347, 49.16227375, 60.05539763]]),)
numpy_error = None
cupy_numpy_result_ndarrays = [(array([[30.36659675, 39.62975648, 53.45565341, 42.0701155 , 42.81412414],
       [33.36838531, 37.73390254, 33.01176...4, 51.93015205, 56.78985728, 63.23111802],
       [26.45539443, 35.1080233 , 46.86066347, 49.16227375, 60.05539763]]))]
cupy_r = array([[30.36659675, 39.62975648, 53.45565341, 42.0701155 , 42.81412414],
       [33.36838531, 37.73390254, 33.0117654...672, 44.03386405, 43.67148673, 48.63067102],
       [32.28830047, 30.15609296, 36.65741325, 35.73179981, 40.69098504]])
numpy_r = array([[32.49418447, 44.26508328, 55.58324819, 50.90632842, 53.13241351],
       [36.78467189, 42.32410703, 50.5137596...954, 51.93015205, 56.78985728, 63.23111802],
       [26.45539443, 35.1080233 , 46.86066347, 49.16227375, 60.05539763]])
skip = False

            @_wraps_partial_xp(impl, name, sp_name, scipy_name)
            def test_func(self, *args, **kw):
                # Run cupy and numpy
                (
                    cupy_result, cupy_error,
                    numpy_result, numpy_error) = (
                        _call_func_numpy_cupy(
                            self, impl, args, kw, name, sp_name, scipy_name))
                assert cupy_result is not None or cupy_error is not None
                assert numpy_result is not None or numpy_error is not None
    
                # Check errors raised
                if cupy_error or numpy_error:
                    _check_cupy_numpy_error(cupy_error,
                                            numpy_error,
                                            accept_error=accept_error)
                    return
    
                # Check returned arrays
    
                if not isinstance(cupy_result, (tuple, list)):
                    cupy_result = cupy_result,
                if not isinstance(numpy_result, (tuple, list)):
                    numpy_result = numpy_result,
    
                assert len(cupy_result) == len(numpy_result)
    
                # Check types
                cupy_numpy_result_ndarrays = [
                    _convert_output_to_ndarray(
                        cupy_r, numpy_r, sp_name, check_sparse_format)
                    for cupy_r, numpy_r in zip(cupy_result, numpy_result)]
    
                # Check dtypes
                if type_check:
                    for cupy_r, numpy_r in cupy_numpy_result_ndarrays:
                        if cupy_r.dtype != numpy_r.dtype:
                            raise AssertionError(
                                '''ndarrays of different dtypes are returned.
    cupy: {}
    numpy: {}'''.format(cupy_r.dtype, numpy_r.dtype))
    
                # Check contiguities
                if contiguous_check:
                    for cupy_r, numpy_r in zip(cupy_result, numpy_result):
                        if isinstance(numpy_r, numpy.ndarray):
                            if (numpy_r.flags.c_contiguous
                                    and not cupy_r.flags.c_contiguous):
                                raise AssertionError(
                                    'The state of c_contiguous flag is false. '
                                    '(cupy_result:{} numpy_result:{})'.format(
                                        cupy_r.flags.c_contiguous,
                                        numpy_r.flags.c_contiguous))
                            if (numpy_r.flags.f_contiguous
                                    and not cupy_r.flags.f_contiguous):
                                raise AssertionError(
                                    'The state of f_contiguous flag is false. '
                                    '(cupy_result:{} numpy_result:{})'.format(
                                        cupy_r.flags.f_contiguous,
                                        numpy_r.flags.f_contiguous))
    
                # Check shapes
                for cupy_r, numpy_r in cupy_numpy_result_ndarrays:
                    assert cupy_r.shape == numpy_r.shape
    
                # Check item values
                for cupy_r, numpy_r in cupy_numpy_result_ndarrays:
                    # Behavior of assigning a negative value to an unsigned integer
                    # variable is undefined.
                    # nVidia GPUs and Intel CPUs behave differently.
                    # To avoid this difference, we need to ignore dimensions whose
                    # values are negative.
    
                    skip = False
                    if (_contains_signed_and_unsigned(kw)
                            and cupy_r.dtype in _unsigned_dtypes):
                        mask = _make_positive_mask(
                            self, impl, args, kw, name, sp_name, scipy_name)
                        if cupy_r.shape == ():
                            skip = (mask == 0).all()
                        else:
                            cupy_r = cupy_r[mask].get()
                            numpy_r = numpy_r[mask]
    
                    if not skip:
>                       check_func(cupy_r, numpy_r)

cupy/testing/_helper.py:343: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/testing/_helper.py:495: in check_func
    _array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[30.36659675, 39.62975648, 53.45565341, 42.0701155 , 42.81412414],
       [33.36838531, 37.73390254, 33.0117654...672, 44.03386405, 43.67148673, 48.63067102],
       [32.28830047, 30.15609296, 36.65741325, 35.73179981, 40.69098504]])
desired = array([[32.49418447, 44.26508328, 55.58324819, 50.90632842, 53.13241351],
       [36.78467189, 42.32410703, 50.5137596...954, 51.93015205, 56.78985728, 63.23111802],
       [26.45539443, 35.1080233 , 46.86066347, 49.16227375, 60.05539763]])
rtol = 1e-05, atol = 1e-05, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-05, atol=1e-05
E       
E       Mismatched elements: 20 / 20 (100%)
E       Max absolute difference: 19.36441258
E       Max relative difference: 0.34647974
E        x: array([[30.366597, 39.629756, 53.455653, 42.070115, 42.814124],
E              [33.368385, 37.733903, 33.011765, 32.58301 , 39.999025],
E              [18.994361, 35.440507, 44.033864, 43.671487, 48.630671],
E              [32.2883  , 30.156093, 36.657413, 35.7318  , 40.690985]])
E        y: array([[32.494184, 44.265083, 55.583248, 50.906328, 53.132414],
E              [36.784672, 42.324107, 50.51376 , 43.278745, 49.956693],
E              [22.164907, 37.049   , 51.930152, 56.789857, 63.231118],
E              [26.455394, 35.108023, 46.860663, 49.162274, 60.055398]])

cupy/testing/_array.py:24: AssertionError
_ TestGenericFilter.test_filter[_param_162_{dtype=float64, filter='generic_filter', footprint=False, func_or_kernel=(<cupy._core.raw.RawKernel object at 0x7ef8f01938c0>, <function rms_pyfunc at 0x7ef8f1550700>), ksize=4, mode='mirror', shape=(4, 5)}] _

self = <<cupyx_tests.scipy_tests.ndimage_tests.test_filters.TestGenericFilter object at 0x7ef78b394430>  parameter: {'filter'... 'numpy.float64'>, 'ksize': 4, 'mode': 'mirror', 'shape': (4, 5), 'function': <function rms_pyfunc at 0x7ef8f1550700>}>
args = (), kw = {}
cupy_result = (array([[29.110215  , 29.71338479, 34.75066373, 25.26431988, 31.89720598],
       [ 0.        ,  0.        ,  0.      ... ,  0.        ,  0.        ,  0.        ],
       [ 0.        ,  0.        ,  0.        ,  0.        ,  0.        ]]),)
cupy_error = None
numpy_result = (array([[39.92050807, 39.92050807, 51.40005714, 43.376314  , 54.85586307],
       [39.92050807, 39.92050807, 51.400057...2, 44.98891502, 43.33693082, 53.99120362],
       [33.21871236, 33.21871236, 48.82046921, 44.04305038, 59.64480722]]),)
numpy_error = None
cupy_numpy_result_ndarrays = [(array([[29.110215  , 29.71338479, 34.75066373, 25.26431988, 31.89720598],
       [ 0.        ,  0.        ,  0.     ...2, 44.98891502, 43.33693082, 53.99120362],
       [33.21871236, 33.21871236, 48.82046921, 44.04305038, 59.64480722]]))]
cupy_r = array([[29.110215  , 29.71338479, 34.75066373, 25.26431988, 31.89720598],
       [ 0.        ,  0.        ,  0.       ...   ,  0.        ,  0.        ,  0.        ],
       [ 0.        ,  0.        ,  0.        ,  0.        ,  0.        ]])
numpy_r = array([[39.92050807, 39.92050807, 51.40005714, 43.376314  , 54.85586307],
       [39.92050807, 39.92050807, 51.4000571...222, 44.98891502, 43.33693082, 53.99120362],
       [33.21871236, 33.21871236, 48.82046921, 44.04305038, 59.64480722]])
skip = False

            @_wraps_partial_xp(impl, name, sp_name, scipy_name)
            def test_func(self, *args, **kw):
                # Run cupy and numpy
                (
                    cupy_result, cupy_error,
                    numpy_result, numpy_error) = (
                        _call_func_numpy_cupy(
                            self, impl, args, kw, name, sp_name, scipy_name))
                assert cupy_result is not None or cupy_error is not None
                assert numpy_result is not None or numpy_error is not None
    
                # Check errors raised
                if cupy_error or numpy_error:
                    _check_cupy_numpy_error(cupy_error,
                                            numpy_error,
                                            accept_error=accept_error)
                    return
    
                # Check returned arrays
    
                if not isinstance(cupy_result, (tuple, list)):
                    cupy_result = cupy_result,
                if not isinstance(numpy_result, (tuple, list)):
                    numpy_result = numpy_result,
    
                assert len(cupy_result) == len(numpy_result)
    
                # Check types
                cupy_numpy_result_ndarrays = [
                    _convert_output_to_ndarray(
                        cupy_r, numpy_r, sp_name, check_sparse_format)
                    for cupy_r, numpy_r in zip(cupy_result, numpy_result)]
    
                # Check dtypes
                if type_check:
                    for cupy_r, numpy_r in cupy_numpy_result_ndarrays:
                        if cupy_r.dtype != numpy_r.dtype:
                            raise AssertionError(
                                '''ndarrays of different dtypes are returned.
    cupy: {}
    numpy: {}'''.format(cupy_r.dtype, numpy_r.dtype))
    
                # Check contiguities
                if contiguous_check:
                    for cupy_r, numpy_r in zip(cupy_result, numpy_result):
                        if isinstance(numpy_r, numpy.ndarray):
                            if (numpy_r.flags.c_contiguous
                                    and not cupy_r.flags.c_contiguous):
                                raise AssertionError(
                                    'The state of c_contiguous flag is false. '
                                    '(cupy_result:{} numpy_result:{})'.format(
                                        cupy_r.flags.c_contiguous,
                                        numpy_r.flags.c_contiguous))
                            if (numpy_r.flags.f_contiguous
                                    and not cupy_r.flags.f_contiguous):
                                raise AssertionError(
                                    'The state of f_contiguous flag is false. '
                                    '(cupy_result:{} numpy_result:{})'.format(
                                        cupy_r.flags.f_contiguous,
                                        numpy_r.flags.f_contiguous))
    
                # Check shapes
                for cupy_r, numpy_r in cupy_numpy_result_ndarrays:
                    assert cupy_r.shape == numpy_r.shape
    
                # Check item values
                for cupy_r, numpy_r in cupy_numpy_result_ndarrays:
                    # Behavior of assigning a negative value to an unsigned integer
                    # variable is undefined.
                    # nVidia GPUs and Intel CPUs behave differently.
                    # To avoid this difference, we need to ignore dimensions whose
                    # values are negative.
    
                    skip = False
                    if (_contains_signed_and_unsigned(kw)
                            and cupy_r.dtype in _unsigned_dtypes):
                        mask = _make_positive_mask(
                            self, impl, args, kw, name, sp_name, scipy_name)
                        if cupy_r.shape == ():
                            skip = (mask == 0).all()
                        else:
                            cupy_r = cupy_r[mask].get()
                            numpy_r = numpy_r[mask]
    
                    if not skip:
>                       check_func(cupy_r, numpy_r)

cupy/testing/_helper.py:343: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/testing/_helper.py:495: in check_func
    _array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[29.110215  , 29.71338479, 34.75066373, 25.26431988, 31.89720598],
       [ 0.        ,  0.        ,  0.       ...   ,  0.        ,  0.        ,  0.        ],
       [ 0.        ,  0.        ,  0.        ,  0.        ,  0.        ]])
desired = array([[39.92050807, 39.92050807, 51.40005714, 43.376314  , 54.85586307],
       [39.92050807, 39.92050807, 51.4000571...222, 44.98891502, 43.33693082, 53.99120362],
       [33.21871236, 33.21871236, 48.82046921, 44.04305038, 59.64480722]])
rtol = 1e-05, atol = 1e-05, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-05, atol=1e-05
E       
E       Mismatched elements: 20 / 20 (100%)
E       Max absolute difference: 59.64480722
E       Max relative difference: 1.
E        x: array([[29.110215, 29.713385, 34.750664, 25.26432 , 31.897206],
E              [ 0.      ,  0.      ,  0.      ,  0.      ,  0.      ],
E              [ 0.      ,  0.      ,  0.      ,  0.      ,  0.      ],
E              [ 0.      ,  0.      ,  0.      ,  0.      ,  0.      ]])
E        y: array([[39.920508, 39.920508, 51.400057, 43.376314, 54.855863],
E              [39.920508, 39.920508, 51.400057, 43.376314, 54.855863],
E              [34.334642, 34.334642, 44.988915, 43.336931, 53.991204],
E              [33.218712, 33.218712, 48.820469, 44.04305 , 59.644807]])

cupy/testing/_array.py:24: AssertionError
_ TestGenericFilter.test_filter[_param_324_{dtype=float64, filter='generic_filter', footprint=False, func_or_kernel=(<cupy._core._reduction.ReductionKernel object a...0154880>, <function lt_pyfunc at 0x7ef8f01a3f70>), ksize=3, mode='mirror', shape=(4, 5)}] _

self = <<cupyx_tests.scipy_tests.ndimage_tests.test_filters.TestGenericFilter object at 0x7ef78b3b3280>  parameter: {'filter'...s 'numpy.float64'>, 'ksize': 3, 'mode': 'mirror', 'shape': (4, 5), 'function': <function lt_pyfunc at 0x7ef8f01a3f70>}>
args = (), kw = {}
cupy_result = (array([[4., 6., 3., 4., 3.],
       [5., 7., 7., 5., 3.],
       [6., 5., 4., 3., 2.],
       [5., 7., 6., 4., 3.]]),)
cupy_error = None
numpy_result = (array([[4., 6., 3., 3., 2.],
       [5., 0., 6., 8., 1.],
       [8., 3., 3., 7., 0.],
       [2., 0., 6., 4., 4.]]),)
numpy_error = None
cupy_numpy_result_ndarrays = [(array([[4., 6., 3., 4., 3.],
       [5., 7., 7., 5., 3.],
       [6., 5., 4., 3., 2.],
       [5., 7., 6., 4., 3.]]), array([[4., 6., 3., 3., 2.],
       [5., 0., 6., 8., 1.],
       [8., 3., 3., 7., 0.],
       [2., 0., 6., 4., 4.]]))]
cupy_r = array([[4., 6., 3., 4., 3.],
       [5., 7., 7., 5., 3.],
       [6., 5., 4., 3., 2.],
       [5., 7., 6., 4., 3.]])
numpy_r = array([[4., 6., 3., 3., 2.],
       [5., 0., 6., 8., 1.],
       [8., 3., 3., 7., 0.],
       [2., 0., 6., 4., 4.]])
skip = False

            @_wraps_partial_xp(impl, name, sp_name, scipy_name)
            def test_func(self, *args, **kw):
                # Run cupy and numpy
                (
                    cupy_result, cupy_error,
                    numpy_result, numpy_error) = (
                        _call_func_numpy_cupy(
                            self, impl, args, kw, name, sp_name, scipy_name))
                assert cupy_result is not None or cupy_error is not None
                assert numpy_result is not None or numpy_error is not None
    
                # Check errors raised
                if cupy_error or numpy_error:
                    _check_cupy_numpy_error(cupy_error,
                                            numpy_error,
                                            accept_error=accept_error)
                    return
    
                # Check returned arrays
    
                if not isinstance(cupy_result, (tuple, list)):
                    cupy_result = cupy_result,
                if not isinstance(numpy_result, (tuple, list)):
                    numpy_result = numpy_result,
    
                assert len(cupy_result) == len(numpy_result)
    
                # Check types
                cupy_numpy_result_ndarrays = [
                    _convert_output_to_ndarray(
                        cupy_r, numpy_r, sp_name, check_sparse_format)
                    for cupy_r, numpy_r in zip(cupy_result, numpy_result)]
    
                # Check dtypes
                if type_check:
                    for cupy_r, numpy_r in cupy_numpy_result_ndarrays:
                        if cupy_r.dtype != numpy_r.dtype:
                            raise AssertionError(
                                '''ndarrays of different dtypes are returned.
    cupy: {}
    numpy: {}'''.format(cupy_r.dtype, numpy_r.dtype))
    
                # Check contiguities
                if contiguous_check:
                    for cupy_r, numpy_r in zip(cupy_result, numpy_result):
                        if isinstance(numpy_r, numpy.ndarray):
                            if (numpy_r.flags.c_contiguous
                                    and not cupy_r.flags.c_contiguous):
                                raise AssertionError(
                                    'The state of c_contiguous flag is false. '
                                    '(cupy_result:{} numpy_result:{})'.format(
                                        cupy_r.flags.c_contiguous,
                                        numpy_r.flags.c_contiguous))
                            if (numpy_r.flags.f_contiguous
                                    and not cupy_r.flags.f_contiguous):
                                raise AssertionError(
                                    'The state of f_contiguous flag is false. '
                                    '(cupy_result:{} numpy_result:{})'.format(
                                        cupy_r.flags.f_contiguous,
                                        numpy_r.flags.f_contiguous))
    
                # Check shapes
                for cupy_r, numpy_r in cupy_numpy_result_ndarrays:
                    assert cupy_r.shape == numpy_r.shape
    
                # Check item values
                for cupy_r, numpy_r in cupy_numpy_result_ndarrays:
                    # Behavior of assigning a negative value to an unsigned integer
                    # variable is undefined.
                    # nVidia GPUs and Intel CPUs behave differently.
                    # To avoid this difference, we need to ignore dimensions whose
                    # values are negative.
    
                    skip = False
                    if (_contains_signed_and_unsigned(kw)
                            and cupy_r.dtype in _unsigned_dtypes):
                        mask = _make_positive_mask(
                            self, impl, args, kw, name, sp_name, scipy_name)
                        if cupy_r.shape == ():
                            skip = (mask == 0).all()
                        else:
                            cupy_r = cupy_r[mask].get()
                            numpy_r = numpy_r[mask]
    
                    if not skip:
>                       check_func(cupy_r, numpy_r)

cupy/testing/_helper.py:343: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/testing/_helper.py:495: in check_func
    _array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[4., 6., 3., 4., 3.],
       [5., 7., 7., 5., 3.],
       [6., 5., 4., 3., 2.],
       [5., 7., 6., 4., 3.]])
desired = array([[4., 6., 3., 3., 2.],
       [5., 0., 6., 8., 1.],
       [8., 3., 3., 7., 0.],
       [2., 0., 6., 4., 4.]])
rtol = 1e-05, atol = 1e-05, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-05, atol=1e-05
E       
E       Mismatched elements: 14 / 20 (70%)
E       Max absolute difference: 7.
E       Max relative difference: 2.
E        x: array([[4., 6., 3., 4., 3.],
E              [5., 7., 7., 5., 3.],
E              [6., 5., 4., 3., 2.],
E              [5., 7., 6., 4., 3.]])
E        y: array([[4., 6., 3., 3., 2.],
E              [5., 0., 6., 8., 1.],
E              [8., 3., 3., 7., 0.],
E              [2., 0., 6., 4., 4.]])

cupy/testing/_array.py:24: AssertionError
_ TestGenericFilter.test_filter[_param_326_{dtype=float64, filter='generic_filter', footprint=False, func_or_kernel=(<cupy._core._reduction.ReductionKernel object a...0154880>, <function lt_pyfunc at 0x7ef8f01a3f70>), ksize=4, mode='mirror', shape=(4, 5)}] _

self = <<cupyx_tests.scipy_tests.ndimage_tests.test_filters.TestGenericFilter object at 0x7ef78aa9ad00>  parameter: {'filter'...s 'numpy.float64'>, 'ksize': 4, 'mode': 'mirror', 'shape': (4, 5), 'function': <function lt_pyfunc at 0x7ef8f01a3f70>}>
args = (), kw = {}
cupy_result = (array([[15.,  5., 12.,  7.,  9.],
       [ 0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.]]),)
cupy_error = None
numpy_result = (array([[ 8., 11.,  4., 10.,  7.],
       [14.,  0.,  7.,  4.,  8.],
       [ 8.,  5., 11.,  5.,  5.],
       [14.,  0.,  1.,  0.,  7.]]),)
numpy_error = None
cupy_numpy_result_ndarrays = [(array([[15.,  5., 12.,  7.,  9.],
       [ 0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.],
       [ 0.,  ...4., 10.,  7.],
       [14.,  0.,  7.,  4.,  8.],
       [ 8.,  5., 11.,  5.,  5.],
       [14.,  0.,  1.,  0.,  7.]]))]
cupy_r = array([[15.,  5., 12.,  7.,  9.],
       [ 0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.]])
numpy_r = array([[ 8., 11.,  4., 10.,  7.],
       [14.,  0.,  7.,  4.,  8.],
       [ 8.,  5., 11.,  5.,  5.],
       [14.,  0.,  1.,  0.,  7.]])
skip = False

            @_wraps_partial_xp(impl, name, sp_name, scipy_name)
            def test_func(self, *args, **kw):
                # Run cupy and numpy
                (
                    cupy_result, cupy_error,
                    numpy_result, numpy_error) = (
                        _call_func_numpy_cupy(
                            self, impl, args, kw, name, sp_name, scipy_name))
                assert cupy_result is not None or cupy_error is not None
                assert numpy_result is not None or numpy_error is not None
    
                # Check errors raised
                if cupy_error or numpy_error:
                    _check_cupy_numpy_error(cupy_error,
                                            numpy_error,
                                            accept_error=accept_error)
                    return
    
                # Check returned arrays
    
                if not isinstance(cupy_result, (tuple, list)):
                    cupy_result = cupy_result,
                if not isinstance(numpy_result, (tuple, list)):
                    numpy_result = numpy_result,
    
                assert len(cupy_result) == len(numpy_result)
    
                # Check types
                cupy_numpy_result_ndarrays = [
                    _convert_output_to_ndarray(
                        cupy_r, numpy_r, sp_name, check_sparse_format)
                    for cupy_r, numpy_r in zip(cupy_result, numpy_result)]
    
                # Check dtypes
                if type_check:
                    for cupy_r, numpy_r in cupy_numpy_result_ndarrays:
                        if cupy_r.dtype != numpy_r.dtype:
                            raise AssertionError(
                                '''ndarrays of different dtypes are returned.
    cupy: {}
    numpy: {}'''.format(cupy_r.dtype, numpy_r.dtype))
    
                # Check contiguities
                if contiguous_check:
                    for cupy_r, numpy_r in zip(cupy_result, numpy_result):
                        if isinstance(numpy_r, numpy.ndarray):
                            if (numpy_r.flags.c_contiguous
                                    and not cupy_r.flags.c_contiguous):
                                raise AssertionError(
                                    'The state of c_contiguous flag is false. '
                                    '(cupy_result:{} numpy_result:{})'.format(
                                        cupy_r.flags.c_contiguous,
                                        numpy_r.flags.c_contiguous))
                            if (numpy_r.flags.f_contiguous
                                    and not cupy_r.flags.f_contiguous):
                                raise AssertionError(
                                    'The state of f_contiguous flag is false. '
                                    '(cupy_result:{} numpy_result:{})'.format(
                                        cupy_r.flags.f_contiguous,
                                        numpy_r.flags.f_contiguous))
    
                # Check shapes
                for cupy_r, numpy_r in cupy_numpy_result_ndarrays:
                    assert cupy_r.shape == numpy_r.shape
    
                # Check item values
                for cupy_r, numpy_r in cupy_numpy_result_ndarrays:
                    # Behavior of assigning a negative value to an unsigned integer
                    # variable is undefined.
                    # nVidia GPUs and Intel CPUs behave differently.
                    # To avoid this difference, we need to ignore dimensions whose
                    # values are negative.
    
                    skip = False
                    if (_contains_signed_and_unsigned(kw)
                            and cupy_r.dtype in _unsigned_dtypes):
                        mask = _make_positive_mask(
                            self, impl, args, kw, name, sp_name, scipy_name)
                        if cupy_r.shape == ():
                            skip = (mask == 0).all()
                        else:
                            cupy_r = cupy_r[mask].get()
                            numpy_r = numpy_r[mask]
    
                    if not skip:
>                       check_func(cupy_r, numpy_r)

cupy/testing/_helper.py:343: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/testing/_helper.py:495: in check_func
    _array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[15.,  5., 12.,  7.,  9.],
       [ 0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.]])
desired = array([[ 8., 11.,  4., 10.,  7.],
       [14.,  0.,  7.,  4.,  8.],
       [ 8.,  5., 11.,  5.,  5.],
       [14.,  0.,  1.,  0.,  7.]])
rtol = 1e-05, atol = 1e-05, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-05, atol=1e-05
E       
E       Mismatched elements: 17 / 20 (85%)
E       Max absolute difference: 14.
E       Max relative difference: 2.
E        x: array([[15.,  5., 12.,  7.,  9.],
E              [ 0.,  0.,  0.,  0.,  0.],
E              [ 0.,  0.,  0.,  0.,  0.],
E              [ 0.,  0.,  0.,  0.,  0.]])
E        y: array([[ 8., 11.,  4., 10.,  7.],
E              [14.,  0.,  7.,  4.,  8.],
E              [ 8.,  5., 11.,  5.,  5.],
E              [14.,  0.,  1.,  0.,  7.]])

cupy/testing/_array.py:24: AssertionError
_ TestGenericFilter.test_filter[_param_484_{dtype=uint8, filter='generic_filter', footprint=True, func_or_kernel=(<cupy._core.raw.RawKernel object at 0x7ef8f01938c0>, <function rms_pyfunc at 0x7ef8f1550700>), ksize=3, mode='mirror', shape=(4, 5)}] _

self = <<cupyx_tests.scipy_tests.ndimage_tests.test_filters.TestGenericFilter object at 0x7ef78aaa9070>  parameter: {'filter'...ss 'numpy.uint8'>, 'ksize': 3, 'mode': 'mirror', 'shape': (4, 5), 'function': <function rms_pyfunc at 0x7ef8f1550700>}>
args = (), kw = {}
cupy_result = (array([[21, 28, 45, 28, 29],
       [28, 24, 27, 19, 21],
       [14, 25, 40, 31, 32],
       [28, 19, 33, 25, 26]], dtype=uint8),)
cupy_error = None
numpy_result = (array([[31, 36, 54, 42, 44],
       [32, 37, 44, 33, 44],
       [16, 36, 54, 41, 63],
       [24, 30, 40, 45, 48]], dtype=uint8),)
numpy_error = None
cupy_numpy_result_ndarrays = [(array([[21, 28, 45, 28, 29],
       [28, 24, 27, 19, 21],
       [14, 25, 40, 31, 32],
       [28, 19, 33, 25, 26]],...36, 54, 42, 44],
       [32, 37, 44, 33, 44],
       [16, 36, 54, 41, 63],
       [24, 30, 40, 45, 48]], dtype=uint8))]
cupy_r = array([[21, 28, 45, 28, 29],
       [28, 24, 27, 19, 21],
       [14, 25, 40, 31, 32],
       [28, 19, 33, 25, 26]], dtype=uint8)
numpy_r = array([[31, 36, 54, 42, 44],
       [32, 37, 44, 33, 44],
       [16, 36, 54, 41, 63],
       [24, 30, 40, 45, 48]], dtype=uint8)
skip = False

            @_wraps_partial_xp(impl, name, sp_name, scipy_name)
            def test_func(self, *args, **kw):
                # Run cupy and numpy
                (
                    cupy_result, cupy_error,
                    numpy_result, numpy_error) = (
                        _call_func_numpy_cupy(
                            self, impl, args, kw, name, sp_name, scipy_name))
                assert cupy_result is not None or cupy_error is not None
                assert numpy_result is not None or numpy_error is not None
    
                # Check errors raised
                if cupy_error or numpy_error:
                    _check_cupy_numpy_error(cupy_error,
                                            numpy_error,
                                            accept_error=accept_error)
                    return
    
                # Check returned arrays
    
                if not isinstance(cupy_result, (tuple, list)):
                    cupy_result = cupy_result,
                if not isinstance(numpy_result, (tuple, list)):
                    numpy_result = numpy_result,
    
                assert len(cupy_result) == len(numpy_result)
    
                # Check types
                cupy_numpy_result_ndarrays = [
                    _convert_output_to_ndarray(
                        cupy_r, numpy_r, sp_name, check_sparse_format)
                    for cupy_r, numpy_r in zip(cupy_result, numpy_result)]
    
                # Check dtypes
                if type_check:
                    for cupy_r, numpy_r in cupy_numpy_result_ndarrays:
                        if cupy_r.dtype != numpy_r.dtype:
                            raise AssertionError(
                                '''ndarrays of different dtypes are returned.
    cupy: {}
    numpy: {}'''.format(cupy_r.dtype, numpy_r.dtype))
    
                # Check contiguities
                if contiguous_check:
                    for cupy_r, numpy_r in zip(cupy_result, numpy_result):
                        if isinstance(numpy_r, numpy.ndarray):
                            if (numpy_r.flags.c_contiguous
                                    and not cupy_r.flags.c_contiguous):
                                raise AssertionError(
                                    'The state of c_contiguous flag is false. '
                                    '(cupy_result:{} numpy_result:{})'.format(
                                        cupy_r.flags.c_contiguous,
                                        numpy_r.flags.c_contiguous))
                            if (numpy_r.flags.f_contiguous
                                    and not cupy_r.flags.f_contiguous):
                                raise AssertionError(
                                    'The state of f_contiguous flag is false. '
                                    '(cupy_result:{} numpy_result:{})'.format(
                                        cupy_r.flags.f_contiguous,
                                        numpy_r.flags.f_contiguous))
    
                # Check shapes
                for cupy_r, numpy_r in cupy_numpy_result_ndarrays:
                    assert cupy_r.shape == numpy_r.shape
    
                # Check item values
                for cupy_r, numpy_r in cupy_numpy_result_ndarrays:
                    # Behavior of assigning a negative value to an unsigned integer
                    # variable is undefined.
                    # nVidia GPUs and Intel CPUs behave differently.
                    # To avoid this difference, we need to ignore dimensions whose
                    # values are negative.
    
                    skip = False
                    if (_contains_signed_and_unsigned(kw)
                            and cupy_r.dtype in _unsigned_dtypes):
                        mask = _make_positive_mask(
                            self, impl, args, kw, name, sp_name, scipy_name)
                        if cupy_r.shape == ():
                            skip = (mask == 0).all()
                        else:
                            cupy_r = cupy_r[mask].get()
                            numpy_r = numpy_r[mask]
    
                    if not skip:
>                       check_func(cupy_r, numpy_r)

cupy/testing/_helper.py:343: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/testing/_helper.py:495: in check_func
    _array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[21, 28, 45, 28, 29],
       [28, 24, 27, 19, 21],
       [14, 25, 40, 31, 32],
       [28, 19, 33, 25, 26]], dtype=uint8)
desired = array([[31, 36, 54, 42, 44],
       [32, 37, 44, 33, 44],
       [16, 36, 54, 41, 63],
       [24, 30, 40, 45, 48]], dtype=uint8)
rtol = 1e-05, atol = 1e-05, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-05, atol=1e-05
E       
E       Mismatched elements: 20 / 20 (100%)
E       Max absolute difference: 254
E       Max relative difference: 15.875
E        x: array([[21, 28, 45, 28, 29],
E              [28, 24, 27, 19, 21],
E              [14, 25, 40, 31, 32],
E              [28, 19, 33, 25, 26]], dtype=uint8)
E        y: array([[31, 36, 54, 42, 44],
E              [32, 37, 44, 33, 44],
E              [16, 36, 54, 41, 63],
E              [24, 30, 40, 45, 48]], dtype=uint8)

cupy/testing/_array.py:24: AssertionError
_ TestGenericFilter.test_filter[_param_486_{dtype=uint8, filter='generic_filter', footprint=True, func_or_kernel=(<cupy._core.raw.RawKernel object at 0x7ef8f01938c0>, <function rms_pyfunc at 0x7ef8f1550700>), ksize=4, mode='mirror', shape=(4, 5)}] _

self = <<cupyx_tests.scipy_tests.ndimage_tests.test_filters.TestGenericFilter object at 0x7ef789fd76a0>  parameter: {'filter'...ss 'numpy.uint8'>, 'ksize': 4, 'mode': 'mirror', 'shape': (4, 5), 'function': <function rms_pyfunc at 0x7ef8f1550700>}>
args = (), kw = {}
cupy_result = (array([[23, 27, 36, 28, 53],
       [ 0,  0,  0,  0,  0],
       [ 0,  0,  0,  0,  0],
       [ 0,  0,  0,  0,  0]], dtype=uint8),)
cupy_error = None
numpy_result = (array([[31, 37, 37, 34, 51],
       [36, 33, 47, 34, 49],
       [32, 30, 35, 33, 43],
       [26, 31, 44, 32, 61]], dtype=uint8),)
numpy_error = None
cupy_numpy_result_ndarrays = [(array([[23, 27, 36, 28, 53],
       [ 0,  0,  0,  0,  0],
       [ 0,  0,  0,  0,  0],
       [ 0,  0,  0,  0,  0]],...37, 37, 34, 51],
       [36, 33, 47, 34, 49],
       [32, 30, 35, 33, 43],
       [26, 31, 44, 32, 61]], dtype=uint8))]
cupy_r = array([[23, 27, 36, 28, 53],
       [ 0,  0,  0,  0,  0],
       [ 0,  0,  0,  0,  0],
       [ 0,  0,  0,  0,  0]], dtype=uint8)
numpy_r = array([[31, 37, 37, 34, 51],
       [36, 33, 47, 34, 49],
       [32, 30, 35, 33, 43],
       [26, 31, 44, 32, 61]], dtype=uint8)
skip = False

            @_wraps_partial_xp(impl, name, sp_name, scipy_name)
            def test_func(self, *args, **kw):
                # Run cupy and numpy
                (
                    cupy_result, cupy_error,
                    numpy_result, numpy_error) = (
                        _call_func_numpy_cupy(
                            self, impl, args, kw, name, sp_name, scipy_name))
                assert cupy_result is not None or cupy_error is not None
                assert numpy_result is not None or numpy_error is not None
    
                # Check errors raised
                if cupy_error or numpy_error:
                    _check_cupy_numpy_error(cupy_error,
                                            numpy_error,
                                            accept_error=accept_error)
                    return
    
                # Check returned arrays
    
                if not isinstance(cupy_result, (tuple, list)):
                    cupy_result = cupy_result,
                if not isinstance(numpy_result, (tuple, list)):
                    numpy_result = numpy_result,
    
                assert len(cupy_result) == len(numpy_result)
    
                # Check types
                cupy_numpy_result_ndarrays = [
                    _convert_output_to_ndarray(
                        cupy_r, numpy_r, sp_name, check_sparse_format)
                    for cupy_r, numpy_r in zip(cupy_result, numpy_result)]
    
                # Check dtypes
                if type_check:
                    for cupy_r, numpy_r in cupy_numpy_result_ndarrays:
                        if cupy_r.dtype != numpy_r.dtype:
                            raise AssertionError(
                                '''ndarrays of different dtypes are returned.
    cupy: {}
    numpy: {}'''.format(cupy_r.dtype, numpy_r.dtype))
    
                # Check contiguities
                if contiguous_check:
                    for cupy_r, numpy_r in zip(cupy_result, numpy_result):
                        if isinstance(numpy_r, numpy.ndarray):
                            if (numpy_r.flags.c_contiguous
                                    and not cupy_r.flags.c_contiguous):
                                raise AssertionError(
                                    'The state of c_contiguous flag is false. '
                                    '(cupy_result:{} numpy_result:{})'.format(
                                        cupy_r.flags.c_contiguous,
                                        numpy_r.flags.c_contiguous))
                            if (numpy_r.flags.f_contiguous
                                    and not cupy_r.flags.f_contiguous):
                                raise AssertionError(
                                    'The state of f_contiguous flag is false. '
                                    '(cupy_result:{} numpy_result:{})'.format(
                                        cupy_r.flags.f_contiguous,
                                        numpy_r.flags.f_contiguous))
    
                # Check shapes
                for cupy_r, numpy_r in cupy_numpy_result_ndarrays:
                    assert cupy_r.shape == numpy_r.shape
    
                # Check item values
                for cupy_r, numpy_r in cupy_numpy_result_ndarrays:
                    # Behavior of assigning a negative value to an unsigned integer
                    # variable is undefined.
                    # nVidia GPUs and Intel CPUs behave differently.
                    # To avoid this difference, we need to ignore dimensions whose
                    # values are negative.
    
                    skip = False
                    if (_contains_signed_and_unsigned(kw)
                            and cupy_r.dtype in _unsigned_dtypes):
                        mask = _make_positive_mask(
                            self, impl, args, kw, name, sp_name, scipy_name)
                        if cupy_r.shape == ():
                            skip = (mask == 0).all()
                        else:
                            cupy_r = cupy_r[mask].get()
                            numpy_r = numpy_r[mask]
    
                    if not skip:
>                       check_func(cupy_r, numpy_r)

cupy/testing/_helper.py:343: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/testing/_helper.py:495: in check_func
    _array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[23, 27, 36, 28, 53],
       [ 0,  0,  0,  0,  0],
       [ 0,  0,  0,  0,  0],
       [ 0,  0,  0,  0,  0]], dtype=uint8)
desired = array([[31, 37, 37, 34, 51],
       [36, 33, 47, 34, 49],
       [32, 30, 35, 33, 43],
       [26, 31, 44, 32, 61]], dtype=uint8)
rtol = 1e-05, atol = 1e-05, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-05, atol=1e-05
E       
E       Mismatched elements: 20 / 20 (100%)
E       Max absolute difference: 255
E       Max relative difference: 8.84615385
E        x: array([[23, 27, 36, 28, 53],
E              [ 0,  0,  0,  0,  0],
E              [ 0,  0,  0,  0,  0],
E              [ 0,  0,  0,  0,  0]], dtype=uint8)
E        y: array([[31, 37, 37, 34, 51],
E              [36, 33, 47, 34, 49],
E              [32, 30, 35, 33, 43],
E              [26, 31, 44, 32, 61]], dtype=uint8)

cupy/testing/_array.py:24: AssertionError
_ TestGenericFilter.test_filter[_param_488_{dtype=float64, filter='generic_filter', footprint=True, func_or_kernel=(<cupy._core.raw.RawKernel object at 0x7ef8f01938c0>, <function rms_pyfunc at 0x7ef8f1550700>), ksize=3, mode='mirror', shape=(4, 5)}] _

self = <<cupyx_tests.scipy_tests.ndimage_tests.test_filters.TestGenericFilter object at 0x7ef78b30d610>  parameter: {'filter'... 'numpy.float64'>, 'ksize': 3, 'mode': 'mirror', 'shape': (4, 5), 'function': <function rms_pyfunc at 0x7ef8f1550700>}>
args = (), kw = {}
cupy_result = (array([[32.00449826, 37.68575782, 60.8028936 , 38.48790895, 39.21631239],
       [34.60326543, 32.2532409 , 33.257219...9, 51.41878991, 42.0040045 , 51.31070106],
       [33.21458492, 22.51034287, 37.94448098, 37.08985252, 37.51394469]]),)
cupy_error = None
numpy_result = (array([[34.73996818, 43.64546371, 63.5383726 , 49.84875414, 52.48268444],
       [37.33873469, 42.72655042, 49.589277...5, 62.15186111, 50.87288873, 72.5746653 ],
       [29.90948782, 36.17835396, 46.34962956, 49.94860122, 54.16193588]]),)
numpy_error = None
cupy_numpy_result_ndarrays = [(array([[32.00449826, 37.68575782, 60.8028936 , 38.48790895, 39.21631239],
       [34.60326543, 32.2532409 , 33.25721...5, 62.15186111, 50.87288873, 72.5746653 ],
       [29.90948782, 36.17835396, 46.34962956, 49.94860122, 54.16193588]]))]
cupy_r = array([[32.00449826, 37.68575782, 60.8028936 , 38.48790895, 39.21631239],
       [34.60326543, 32.2532409 , 33.2572195...229, 51.41878991, 42.0040045 , 51.31070106],
       [33.21458492, 22.51034287, 37.94448098, 37.08985252, 37.51394469]])
numpy_r = array([[34.73996818, 43.64546371, 63.5383726 , 49.84875414, 52.48268444],
       [37.33873469, 42.72655042, 49.5892777...725, 62.15186111, 50.87288873, 72.5746653 ],
       [29.90948782, 36.17835396, 46.34962956, 49.94860122, 54.16193588]])
skip = False

            @_wraps_partial_xp(impl, name, sp_name, scipy_name)
            def test_func(self, *args, **kw):
                # Run cupy and numpy
                (
                    cupy_result, cupy_error,
                    numpy_result, numpy_error) = (
                        _call_func_numpy_cupy(
                            self, impl, args, kw, name, sp_name, scipy_name))
                assert cupy_result is not None or cupy_error is not None
                assert numpy_result is not None or numpy_error is not None
    
                # Check errors raised
                if cupy_error or numpy_error:
                    _check_cupy_numpy_error(cupy_error,
                                            numpy_error,
                                            accept_error=accept_error)
                    return
    
                # Check returned arrays
    
                if not isinstance(cupy_result, (tuple, list)):
                    cupy_result = cupy_result,
                if not isinstance(numpy_result, (tuple, list)):
                    numpy_result = numpy_result,
    
                assert len(cupy_result) == len(numpy_result)
    
                # Check types
                cupy_numpy_result_ndarrays = [
                    _convert_output_to_ndarray(
                        cupy_r, numpy_r, sp_name, check_sparse_format)
                    for cupy_r, numpy_r in zip(cupy_result, numpy_result)]
    
                # Check dtypes
                if type_check:
                    for cupy_r, numpy_r in cupy_numpy_result_ndarrays:
                        if cupy_r.dtype != numpy_r.dtype:
                            raise AssertionError(
                                '''ndarrays of different dtypes are returned.
    cupy: {}
    numpy: {}'''.format(cupy_r.dtype, numpy_r.dtype))
    
                # Check contiguities
                if contiguous_check:
                    for cupy_r, numpy_r in zip(cupy_result, numpy_result):
                        if isinstance(numpy_r, numpy.ndarray):
                            if (numpy_r.flags.c_contiguous
                                    and not cupy_r.flags.c_contiguous):
                                raise AssertionError(
                                    'The state of c_contiguous flag is false. '
                                    '(cupy_result:{} numpy_result:{})'.format(
                                        cupy_r.flags.c_contiguous,
                                        numpy_r.flags.c_contiguous))
                            if (numpy_r.flags.f_contiguous
                                    and not cupy_r.flags.f_contiguous):
                                raise AssertionError(
                                    'The state of f_contiguous flag is false. '
                                    '(cupy_result:{} numpy_result:{})'.format(
                                        cupy_r.flags.f_contiguous,
                                        numpy_r.flags.f_contiguous))
    
                # Check shapes
                for cupy_r, numpy_r in cupy_numpy_result_ndarrays:
                    assert cupy_r.shape == numpy_r.shape
    
                # Check item values
                for cupy_r, numpy_r in cupy_numpy_result_ndarrays:
                    # Behavior of assigning a negative value to an unsigned integer
                    # variable is undefined.
                    # nVidia GPUs and Intel CPUs behave differently.
                    # To avoid this difference, we need to ignore dimensions whose
                    # values are negative.
    
                    skip = False
                    if (_contains_signed_and_unsigned(kw)
                            and cupy_r.dtype in _unsigned_dtypes):
                        mask = _make_positive_mask(
                            self, impl, args, kw, name, sp_name, scipy_name)
                        if cupy_r.shape == ():
                            skip = (mask == 0).all()
                        else:
                            cupy_r = cupy_r[mask].get()
                            numpy_r = numpy_r[mask]
    
                    if not skip:
>                       check_func(cupy_r, numpy_r)

cupy/testing/_helper.py:343: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/testing/_helper.py:495: in check_func
    _array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[32.00449826, 37.68575782, 60.8028936 , 38.48790895, 39.21631239],
       [34.60326543, 32.2532409 , 33.2572195...229, 51.41878991, 42.0040045 , 51.31070106],
       [33.21458492, 22.51034287, 37.94448098, 37.08985252, 37.51394469]])
desired = array([[34.73996818, 43.64546371, 63.5383726 , 49.84875414, 52.48268444],
       [37.33873469, 42.72655042, 49.5892777...725, 62.15186111, 50.87288873, 72.5746653 ],
       [29.90948782, 36.17835396, 46.34962956, 49.94860122, 54.16193588]])
rtol = 1e-05, atol = 1e-05, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-05, atol=1e-05
E       
E       Mismatched elements: 20 / 20 (100%)
E       Max absolute difference: 21.26396424
E       Max relative difference: 0.37779527
E        x: array([[32.004498, 37.685758, 60.802894, 38.487909, 39.216312],
E              [34.603265, 32.253241, 33.25722 , 33.041408, 36.624282],
E              [20.112677, 38.150832, 51.41879 , 42.004005, 51.310701],
E              [33.214585, 22.510343, 37.944481, 37.089853, 37.513945]])
E        y: array([[34.739968, 43.645464, 63.538373, 49.848754, 52.482684],
E              [37.338735, 42.72655 , 49.589278, 37.768093, 49.890655],
E              [19.537204, 43.529837, 62.151861, 50.872889, 72.574665],
E              [29.909488, 36.178354, 46.34963 , 49.948601, 54.161936]])

cupy/testing/_array.py:24: AssertionError
_ TestGenericFilter.test_filter[_param_490_{dtype=float64, filter='generic_filter', footprint=True, func_or_kernel=(<cupy._core.raw.RawKernel object at 0x7ef8f01938c0>, <function rms_pyfunc at 0x7ef8f1550700>), ksize=4, mode='mirror', shape=(4, 5)}] _

self = <<cupyx_tests.scipy_tests.ndimage_tests.test_filters.TestGenericFilter object at 0x7ef789ef24c0>  parameter: {'filter'... 'numpy.float64'>, 'ksize': 4, 'mode': 'mirror', 'shape': (4, 5), 'function': <function rms_pyfunc at 0x7ef8f1550700>}>
args = (), kw = {}
cupy_result = (array([[24.21149428, 29.80534893, 37.32798429, 32.88328106, 46.48912698],
       [ 0.        ,  0.        ,  0.      ... ,  0.        ,  0.        ,  0.        ],
       [ 0.        ,  0.        ,  0.        ,  0.        ,  0.        ]]),)
cupy_error = None
numpy_result = (array([[36.86077635, 42.87616583, 43.41972747, 39.82804323, 58.74618737],
       [42.04291274, 39.49732697, 56.260026...8, 40.06613219, 37.53324325, 49.79207175],
       [31.44112421, 37.6867121 , 51.65417609, 39.59452747, 70.43768385]]),)
numpy_error = None
cupy_numpy_result_ndarrays = [(array([[24.21149428, 29.80534893, 37.32798429, 32.88328106, 46.48912698],
       [ 0.        ,  0.        ,  0.     ...8, 40.06613219, 37.53324325, 49.79207175],
       [31.44112421, 37.6867121 , 51.65417609, 39.59452747, 70.43768385]]))]
cupy_r = array([[24.21149428, 29.80534893, 37.32798429, 32.88328106, 46.48912698],
       [ 0.        ,  0.        ,  0.       ...   ,  0.        ,  0.        ,  0.        ],
       [ 0.        ,  0.        ,  0.        ,  0.        ,  0.        ]])
numpy_r = array([[36.86077635, 42.87616583, 43.41972747, 39.82804323, 58.74618737],
       [42.04291274, 39.49732697, 56.2600260...358, 40.06613219, 37.53324325, 49.79207175],
       [31.44112421, 37.6867121 , 51.65417609, 39.59452747, 70.43768385]])
skip = False

            @_wraps_partial_xp(impl, name, sp_name, scipy_name)
            def test_func(self, *args, **kw):
                # Run cupy and numpy
                (
                    cupy_result, cupy_error,
                    numpy_result, numpy_error) = (
                        _call_func_numpy_cupy(
                            self, impl, args, kw, name, sp_name, scipy_name))
                assert cupy_result is not None or cupy_error is not None
                assert numpy_result is not None or numpy_error is not None
    
                # Check errors raised
                if cupy_error or numpy_error:
                    _check_cupy_numpy_error(cupy_error,
                                            numpy_error,
                                            accept_error=accept_error)
                    return
    
                # Check returned arrays
    
                if not isinstance(cupy_result, (tuple, list)):
                    cupy_result = cupy_result,
                if not isinstance(numpy_result, (tuple, list)):
                    numpy_result = numpy_result,
    
                assert len(cupy_result) == len(numpy_result)
    
                # Check types
                cupy_numpy_result_ndarrays = [
                    _convert_output_to_ndarray(
                        cupy_r, numpy_r, sp_name, check_sparse_format)
                    for cupy_r, numpy_r in zip(cupy_result, numpy_result)]
    
                # Check dtypes
                if type_check:
                    for cupy_r, numpy_r in cupy_numpy_result_ndarrays:
                        if cupy_r.dtype != numpy_r.dtype:
                            raise AssertionError(
                                '''ndarrays of different dtypes are returned.
    cupy: {}
    numpy: {}'''.format(cupy_r.dtype, numpy_r.dtype))
    
                # Check contiguities
                if contiguous_check:
                    for cupy_r, numpy_r in zip(cupy_result, numpy_result):
                        if isinstance(numpy_r, numpy.ndarray):
                            if (numpy_r.flags.c_contiguous
                                    and not cupy_r.flags.c_contiguous):
                                raise AssertionError(
                                    'The state of c_contiguous flag is false. '
                                    '(cupy_result:{} numpy_result:{})'.format(
                                        cupy_r.flags.c_contiguous,
                                        numpy_r.flags.c_contiguous))
                            if (numpy_r.flags.f_contiguous
                                    and not cupy_r.flags.f_contiguous):
                                raise AssertionError(
                                    'The state of f_contiguous flag is false. '
                                    '(cupy_result:{} numpy_result:{})'.format(
                                        cupy_r.flags.f_contiguous,
                                        numpy_r.flags.f_contiguous))
    
                # Check shapes
                for cupy_r, numpy_r in cupy_numpy_result_ndarrays:
                    assert cupy_r.shape == numpy_r.shape
    
                # Check item values
                for cupy_r, numpy_r in cupy_numpy_result_ndarrays:
                    # Behavior of assigning a negative value to an unsigned integer
                    # variable is undefined.
                    # nVidia GPUs and Intel CPUs behave differently.
                    # To avoid this difference, we need to ignore dimensions whose
                    # values are negative.
    
                    skip = False
                    if (_contains_signed_and_unsigned(kw)
                            and cupy_r.dtype in _unsigned_dtypes):
                        mask = _make_positive_mask(
                            self, impl, args, kw, name, sp_name, scipy_name)
                        if cupy_r.shape == ():
                            skip = (mask == 0).all()
                        else:
                            cupy_r = cupy_r[mask].get()
                            numpy_r = numpy_r[mask]
    
                    if not skip:
>                       check_func(cupy_r, numpy_r)

cupy/testing/_helper.py:343: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/testing/_helper.py:495: in check_func
    _array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[24.21149428, 29.80534893, 37.32798429, 32.88328106, 46.48912698],
       [ 0.        ,  0.        ,  0.       ...   ,  0.        ,  0.        ,  0.        ],
       [ 0.        ,  0.        ,  0.        ,  0.        ,  0.        ]])
desired = array([[36.86077635, 42.87616583, 43.41972747, 39.82804323, 58.74618737],
       [42.04291274, 39.49732697, 56.2600260...358, 40.06613219, 37.53324325, 49.79207175],
       [31.44112421, 37.6867121 , 51.65417609, 39.59452747, 70.43768385]])
rtol = 1e-05, atol = 1e-05, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-05, atol=1e-05
E       
E       Mismatched elements: 20 / 20 (100%)
E       Max absolute difference: 70.43768385
E       Max relative difference: 1.
E        x: array([[24.211494, 29.805349, 37.327984, 32.883281, 46.489127],
E              [ 0.      ,  0.      ,  0.      ,  0.      ,  0.      ],
E              [ 0.      ,  0.      ,  0.      ,  0.      ,  0.      ],
E              [ 0.      ,  0.      ,  0.      ,  0.      ,  0.      ]])
E        y: array([[36.860776, 42.876166, 43.419727, 39.828043, 58.746187],
E              [42.042913, 39.497327, 56.260026, 40.67984 , 58.57918 ],
E              [36.303403, 34.455314, 40.066132, 37.533243, 49.792072],
E              [31.441124, 37.686712, 51.654176, 39.594527, 70.437684]])

cupy/testing/_array.py:24: AssertionError
_ TestGenericFilter.test_filter[_param_652_{dtype=float64, filter='generic_filter', footprint=True, func_or_kernel=(<cupy._core._reduction.ReductionKernel object a...0154880>, <function lt_pyfunc at 0x7ef8f01a3f70>), ksize=3, mode='mirror', shape=(4, 5)}] _

self = <<cupyx_tests.scipy_tests.ndimage_tests.test_filters.TestGenericFilter object at 0x7ef789ff33d0>  parameter: {'filter'...s 'numpy.float64'>, 'ksize': 3, 'mode': 'mirror', 'shape': (4, 5), 'function': <function lt_pyfunc at 0x7ef8f01a3f70>}>
args = (), kw = {}
cupy_result = (array([[5., 3., 2., 4., 3.],
       [1., 5., 1., 5., 6.],
       [4., 4., 1., 3., 5.],
       [1., 1., 1., 4., 4.]]),)
cupy_error = None
numpy_result = (array([[5., 2., 2., 3., 2.],
       [0., 4., 0., 5., 5.],
       [4., 4., 1., 2., 3.],
       [0., 0., 0., 3., 2.]]),)
numpy_error = None
cupy_numpy_result_ndarrays = [(array([[5., 3., 2., 4., 3.],
       [1., 5., 1., 5., 6.],
       [4., 4., 1., 3., 5.],
       [1., 1., 1., 4., 4.]]), array([[5., 2., 2., 3., 2.],
       [0., 4., 0., 5., 5.],
       [4., 4., 1., 2., 3.],
       [0., 0., 0., 3., 2.]]))]
cupy_r = array([[5., 3., 2., 4., 3.],
       [1., 5., 1., 5., 6.],
       [4., 4., 1., 3., 5.],
       [1., 1., 1., 4., 4.]])
numpy_r = array([[5., 2., 2., 3., 2.],
       [0., 4., 0., 5., 5.],
       [4., 4., 1., 2., 3.],
       [0., 0., 0., 3., 2.]])
skip = False

            @_wraps_partial_xp(impl, name, sp_name, scipy_name)
            def test_func(self, *args, **kw):
                # Run cupy and numpy
                (
                    cupy_result, cupy_error,
                    numpy_result, numpy_error) = (
                        _call_func_numpy_cupy(
                            self, impl, args, kw, name, sp_name, scipy_name))
                assert cupy_result is not None or cupy_error is not None
                assert numpy_result is not None or numpy_error is not None
    
                # Check errors raised
                if cupy_error or numpy_error:
                    _check_cupy_numpy_error(cupy_error,
                                            numpy_error,
                                            accept_error=accept_error)
                    return
    
                # Check returned arrays
    
                if not isinstance(cupy_result, (tuple, list)):
                    cupy_result = cupy_result,
                if not isinstance(numpy_result, (tuple, list)):
                    numpy_result = numpy_result,
    
                assert len(cupy_result) == len(numpy_result)
    
                # Check types
                cupy_numpy_result_ndarrays = [
                    _convert_output_to_ndarray(
                        cupy_r, numpy_r, sp_name, check_sparse_format)
                    for cupy_r, numpy_r in zip(cupy_result, numpy_result)]
    
                # Check dtypes
                if type_check:
                    for cupy_r, numpy_r in cupy_numpy_result_ndarrays:
                        if cupy_r.dtype != numpy_r.dtype:
                            raise AssertionError(
                                '''ndarrays of different dtypes are returned.
    cupy: {}
    numpy: {}'''.format(cupy_r.dtype, numpy_r.dtype))
    
                # Check contiguities
                if contiguous_check:
                    for cupy_r, numpy_r in zip(cupy_result, numpy_result):
                        if isinstance(numpy_r, numpy.ndarray):
                            if (numpy_r.flags.c_contiguous
                                    and not cupy_r.flags.c_contiguous):
                                raise AssertionError(
                                    'The state of c_contiguous flag is false. '
                                    '(cupy_result:{} numpy_result:{})'.format(
                                        cupy_r.flags.c_contiguous,
                                        numpy_r.flags.c_contiguous))
                            if (numpy_r.flags.f_contiguous
                                    and not cupy_r.flags.f_contiguous):
                                raise AssertionError(
                                    'The state of f_contiguous flag is false. '
                                    '(cupy_result:{} numpy_result:{})'.format(
                                        cupy_r.flags.f_contiguous,
                                        numpy_r.flags.f_contiguous))
    
                # Check shapes
                for cupy_r, numpy_r in cupy_numpy_result_ndarrays:
                    assert cupy_r.shape == numpy_r.shape
    
                # Check item values
                for cupy_r, numpy_r in cupy_numpy_result_ndarrays:
                    # Behavior of assigning a negative value to an unsigned integer
                    # variable is undefined.
                    # nVidia GPUs and Intel CPUs behave differently.
                    # To avoid this difference, we need to ignore dimensions whose
                    # values are negative.
    
                    skip = False
                    if (_contains_signed_and_unsigned(kw)
                            and cupy_r.dtype in _unsigned_dtypes):
                        mask = _make_positive_mask(
                            self, impl, args, kw, name, sp_name, scipy_name)
                        if cupy_r.shape == ():
                            skip = (mask == 0).all()
                        else:
                            cupy_r = cupy_r[mask].get()
                            numpy_r = numpy_r[mask]
    
                    if not skip:
>                       check_func(cupy_r, numpy_r)

cupy/testing/_helper.py:343: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/testing/_helper.py:495: in check_func
    _array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[5., 3., 2., 4., 3.],
       [1., 5., 1., 5., 6.],
       [4., 4., 1., 3., 5.],
       [1., 1., 1., 4., 4.]])
desired = array([[5., 2., 2., 3., 2.],
       [0., 4., 0., 5., 5.],
       [4., 4., 1., 2., 3.],
       [0., 0., 0., 3., 2.]])
rtol = 1e-05, atol = 1e-05, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-05, atol=1e-05
E       
E       Mismatched elements: 14 / 20 (70%)
E       Max absolute difference: 2.
E       Max relative difference: 1.
E        x: array([[5., 3., 2., 4., 3.],
E              [1., 5., 1., 5., 6.],
E              [4., 4., 1., 3., 5.],
E              [1., 1., 1., 4., 4.]])
E        y: array([[5., 2., 2., 3., 2.],
E              [0., 4., 0., 5., 5.],
E              [4., 4., 1., 2., 3.],
E              [0., 0., 0., 3., 2.]])

cupy/testing/_array.py:24: AssertionError
_ TestGenericFilter.test_filter[_param_654_{dtype=float64, filter='generic_filter', footprint=True, func_or_kernel=(<cupy._core._reduction.ReductionKernel object a...0154880>, <function lt_pyfunc at 0x7ef8f01a3f70>), ksize=4, mode='mirror', shape=(4, 5)}] _

self = <<cupyx_tests.scipy_tests.ndimage_tests.test_filters.TestGenericFilter object at 0x7ef78973aaf0>  parameter: {'filter'...s 'numpy.float64'>, 'ksize': 4, 'mode': 'mirror', 'shape': (4, 5), 'function': <function lt_pyfunc at 0x7ef8f01a3f70>}>
args = (), kw = {}
cupy_result = (array([[ 6., 10., 10.,  3.,  9.],
       [ 0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.]]),)
cupy_error = None
numpy_result = (array([[ 0., 10., 10.,  1.,  8.],
       [ 7.,  6.,  2.,  2.,  2.],
       [ 1., 10., 10.,  2.,  9.],
       [ 4.,  5.,  9.,  1.,  6.]]),)
numpy_error = None
cupy_numpy_result_ndarrays = [(array([[ 6., 10., 10.,  3.,  9.],
       [ 0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.],
       [ 0.,  ...0.,  1.,  8.],
       [ 7.,  6.,  2.,  2.,  2.],
       [ 1., 10., 10.,  2.,  9.],
       [ 4.,  5.,  9.,  1.,  6.]]))]
cupy_r = array([[ 6., 10., 10.,  3.,  9.],
       [ 0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.]])
numpy_r = array([[ 0., 10., 10.,  1.,  8.],
       [ 7.,  6.,  2.,  2.,  2.],
       [ 1., 10., 10.,  2.,  9.],
       [ 4.,  5.,  9.,  1.,  6.]])
skip = False

            @_wraps_partial_xp(impl, name, sp_name, scipy_name)
            def test_func(self, *args, **kw):
                # Run cupy and numpy
                (
                    cupy_result, cupy_error,
                    numpy_result, numpy_error) = (
                        _call_func_numpy_cupy(
                            self, impl, args, kw, name, sp_name, scipy_name))
                assert cupy_result is not None or cupy_error is not None
                assert numpy_result is not None or numpy_error is not None
    
                # Check errors raised
                if cupy_error or numpy_error:
                    _check_cupy_numpy_error(cupy_error,
                                            numpy_error,
                                            accept_error=accept_error)
                    return
    
                # Check returned arrays
    
                if not isinstance(cupy_result, (tuple, list)):
                    cupy_result = cupy_result,
                if not isinstance(numpy_result, (tuple, list)):
                    numpy_result = numpy_result,
    
                assert len(cupy_result) == len(numpy_result)
    
                # Check types
                cupy_numpy_result_ndarrays = [
                    _convert_output_to_ndarray(
                        cupy_r, numpy_r, sp_name, check_sparse_format)
                    for cupy_r, numpy_r in zip(cupy_result, numpy_result)]
    
                # Check dtypes
                if type_check:
                    for cupy_r, numpy_r in cupy_numpy_result_ndarrays:
                        if cupy_r.dtype != numpy_r.dtype:
                            raise AssertionError(
                                '''ndarrays of different dtypes are returned.
    cupy: {}
    numpy: {}'''.format(cupy_r.dtype, numpy_r.dtype))
    
                # Check contiguities
                if contiguous_check:
                    for cupy_r, numpy_r in zip(cupy_result, numpy_result):
                        if isinstance(numpy_r, numpy.ndarray):
                            if (numpy_r.flags.c_contiguous
                                    and not cupy_r.flags.c_contiguous):
                                raise AssertionError(
                                    'The state of c_contiguous flag is false. '
                                    '(cupy_result:{} numpy_result:{})'.format(
                                        cupy_r.flags.c_contiguous,
                                        numpy_r.flags.c_contiguous))
                            if (numpy_r.flags.f_contiguous
                                    and not cupy_r.flags.f_contiguous):
                                raise AssertionError(
                                    'The state of f_contiguous flag is false. '
                                    '(cupy_result:{} numpy_result:{})'.format(
                                        cupy_r.flags.f_contiguous,
                                        numpy_r.flags.f_contiguous))
    
                # Check shapes
                for cupy_r, numpy_r in cupy_numpy_result_ndarrays:
                    assert cupy_r.shape == numpy_r.shape
    
                # Check item values
                for cupy_r, numpy_r in cupy_numpy_result_ndarrays:
                    # Behavior of assigning a negative value to an unsigned integer
                    # variable is undefined.
                    # nVidia GPUs and Intel CPUs behave differently.
                    # To avoid this difference, we need to ignore dimensions whose
                    # values are negative.
    
                    skip = False
                    if (_contains_signed_and_unsigned(kw)
                            and cupy_r.dtype in _unsigned_dtypes):
                        mask = _make_positive_mask(
                            self, impl, args, kw, name, sp_name, scipy_name)
                        if cupy_r.shape == ():
                            skip = (mask == 0).all()
                        else:
                            cupy_r = cupy_r[mask].get()
                            numpy_r = numpy_r[mask]
    
                    if not skip:
>                       check_func(cupy_r, numpy_r)

cupy/testing/_helper.py:343: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/testing/_helper.py:495: in check_func
    _array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[ 6., 10., 10.,  3.,  9.],
       [ 0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.]])
desired = array([[ 0., 10., 10.,  1.,  8.],
       [ 7.,  6.,  2.,  2.,  2.],
       [ 1., 10., 10.,  2.,  9.],
       [ 4.,  5.,  9.,  1.,  6.]])
rtol = 1e-05, atol = 1e-05, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-05, atol=1e-05
E       
E       Mismatched elements: 18 / 20 (90%)
E       Max absolute difference: 10.
E       Max relative difference: 2.
E        x: array([[ 6., 10., 10.,  3.,  9.],
E              [ 0.,  0.,  0.,  0.,  0.],
E              [ 0.,  0.,  0.,  0.,  0.],
E              [ 0.,  0.,  0.,  0.,  0.]])
E        y: array([[ 0., 10., 10.,  1.,  8.],
E              [ 7.,  6.,  2.,  2.,  2.],
E              [ 1., 10., 10.,  2.,  9.],
E              [ 4.,  5.,  9.,  1.,  6.]])

cupy/testing/_array.py:24: AssertionError
_ TestMeasurementsSelect.test_measurements_select[_param_70_{enable_cub=True, index=1, labels=50, op='extrema', shape=(512,)}] _

self = <<cupyx_tests.scipy_tests.ndimage_tests.test_measurements.TestMeasurementsSelect object at 0x7ef77704a2e0>  parameter: {'enable_cub': True, 'index': 1, 'labels': 50, 'op': 'extrema', 'shape': (512,)}>
args = (), kw = {'dtype': <class 'numpy.float64'>}
dtype = <class 'numpy.float64'>

    @_wraps_partial(impl, name)
    def test_func(self, *args, **kw):
        for dtype in dtypes:
            try:
                kw[name] = numpy.dtype(dtype).type
>               impl(self, *args, **kw)

cupy/testing/_helper.py:825: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/testing/_helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/_helper.py:495: in check_func
    _array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([103]), desired = array([103]), rtol = 1e-07, atol = 0
err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=0
E       
E       Mismatched elements: 1 / 1 (100%)
E       Max absolute difference: 28
E       Max relative difference: 0.27184466
E        x: array([75])
E        y: array([103])

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float64'>
_ TestMeasurementsSelect.test_measurements_select[_param_214_{enable_cub=False, index=1, labels=50, op='extrema', shape=(512,)}] _

self = <<cupyx_tests.scipy_tests.ndimage_tests.test_measurements.TestMeasurementsSelect object at 0x7ef776bc7940>  parameter: {'enable_cub': False, 'index': 1, 'labels': 50, 'op': 'extrema', 'shape': (512,)}>
args = (), kw = {'dtype': <class 'numpy.float32'>}
dtype = <class 'numpy.float32'>

    @_wraps_partial(impl, name)
    def test_func(self, *args, **kw):
        for dtype in dtypes:
            try:
                kw[name] = numpy.dtype(dtype).type
>               impl(self, *args, **kw)

cupy/testing/_helper.py:825: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cupy/testing/_helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/_helper.py:495: in check_func
    _array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([75]), desired = array([75]), rtol = 1e-07, atol = 0
err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=0
E       
E       Mismatched elements: 1 / 1 (100%)
E       Max absolute difference: 28
E       Max relative difference: 0.37333333
E        x: array([103])
E        y: array([75])

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.float32'>
_ TestFFTConvolve_param_12_{mode='full', size1=(3, 4, 10), size2=3}.test_convolve_fft _
cupy/testing/_helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/_helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/_helper.py:495: in check_func
    _array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[[  16,  -24,  -87, -124, -138, -124,  -87,  -56,  -56, -104,
         -131,  -54],
        [  10,  -13,  -63, ...  -41,  -21],
        [ -39,  -75, -132, -164, -162,  -94, -110, -122, -145, -131,
         -118,  -71]]], dtype=int16)
desired = array([[[ 25,  70, 109, 109,  91,  88,  86, 104, 125, 126,  75,  18],
        [ 60, 129, 190, 201, 169, 130,  68, 132,...1, 128, 169, 135, 136,  51],
        [  4,  32,  58,  46,  26,  53,  34,  56,  46,  59,  44,   6]]],
      dtype=int16)
rtol = 1e-08, atol = 1e-08, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-08, atol=1e-08
E       
E       Mismatched elements: 360 / 360 (100%)
E       Max absolute difference: 357
E       Max relative difference: 12.83333333
E        x: array([[[  16,  -24,  -87, -124, -138, -124,  -87,  -56,  -56, -104,
E                -131,  -54],
E               [  10,  -13,  -63,  -97, -125, -114, -103,  -47,  -52,  -57,...
E        y: array([[[ 25,  70, 109, 109,  91,  88,  86, 104, 125, 126,  75,  18],
E               [ 60, 129, 190, 201, 169, 130,  68, 132, 192, 236, 164,  66],
E               [100, 219, 335, 331, 254, 234, 153, 246, 297, 381, 237,  99],...

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.int16'>
_ TestFFTConvolve_param_12_{mode='full', size1=(3, 4, 10), size2=3}.test_correlate_fft _
cupy/testing/_helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/_helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/_helper.py:495: in check_func
    _array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[[ -49, -102,  115,  102, -121,  -88,  -82, -108,  124,  121,
          -97,  -25],
        [ -10,  -17,  -88, ...   -38,    3],
        [ -45, -111,   93,   96,  -98,  -59,  -57,  -85,  -98, -104,
          -49,    2]]], dtype=int8)
desired = array([[[   5,   37,   53,   48,   40,   35,   44,   38,   61,   65,
           27,    3],
        [  42,  116, -109, ...  -119,   75],
        [  24,   76,  112,   94,   92,   84,  109,  101,  123,  117,
           82,   30]]], dtype=int8)
rtol = 1e-08, atol = 1e-08, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-08, atol=1e-08
E       
E       Mismatched elements: 360 / 360 (100%)
E       Max absolute difference: 126
E       Max relative difference: 70.
E        x: array([[[ -49, -102,  115,  102, -121,  -88,  -82, -108,  124,  121,
E                 -97,  -25],
E               [ -10,  -17,  -88, -127,  -87,  -91, -103,  -71,  -63,  -96,...
E        y: array([[[   5,   37,   53,   48,   40,   35,   44,   38,   61,   65,
E                  27,    3],
E               [  42,  116, -109, -104, -107,  102,   80,  122,  -78,  -85,...

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.int8'>
_ TestFFTConvolve_param_12_{mode='full', size1=(3, 4, 10), size2=3}.test_fftconvolve _
cupy/testing/_helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/_helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/_helper.py:495: in check_func
    _array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[[ 1.57320247e+01, -2.43964025e+01, -8.71819445e+01,
         -1.23571539e+02, -1.37530377e+02, -1.24479115e+02...      -1.10318763e+02, -1.22029463e+02, -1.44840012e+02,
         -1.30743145e+02, -1.18356814e+02, -7.09781390e+01]]])
desired = array([[[ 25.,  70., 109., 109.,  91.,  88.,  86., 104., 125., 126.,
          75.,  18.],
        [ 60., 129., 190., ...35.,
         136.,  51.],
        [  4.,  32.,  58.,  46.,  26.,  53.,  34.,  56.,  46.,  59.,
          44.,   6.]]])
rtol = 1e-08, atol = 1e-08, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-08, atol=1e-08
E       
E       Mismatched elements: 360 / 360 (100%)
E       Max absolute difference: 357.12301879
E       Max relative difference: 12.82968983
E        x: array([[[ 1.573202e+01, -2.439640e+01, -8.718194e+01, -1.235715e+02,
E                -1.375304e+02, -1.244791e+02, -8.702280e+01, -5.638640e+01,
E                -5.595508e+01, -1.037896e+02, -1.313684e+02, -5.416580e+01],...
E        y: array([[[ 25.,  70., 109., 109.,  91.,  88.,  86., 104., 125., 126.,
E                 75.,  18.],
E               [ 60., 129., 190., 201., 169., 130.,  68., 132., 192., 236.,...

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.int8'>
_ TestFFTConvolve_param_44_{mode='valid', size1=(3, 4, 10), size2=3}.test_convolve_fft _
cupy/testing/_helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/_helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/_helper.py:495: in check_func
    _array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[[176,  19,  40,   3,  14,  73, 110,  57],
        [205, 174, 105, 102, 175, 151, 222, 153]]], dtype=uint8)
desired = array([[[136, 207,  32, 249, 183,  64,  74, 149],
        [198, 243, 131,  43, 208,  69, 157, 198]]], dtype=uint8)
rtol = 1e-08, atol = 1e-08, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-08, atol=1e-08
E       
E       Mismatched elements: 16 / 16 (100%)
E       Max absolute difference: 230
E       Max relative difference: 1.75572519
E        x: array([[[176,  19,  40,   3,  14,  73, 110,  57],
E               [205, 174, 105, 102, 175, 151, 222, 153]]], dtype=uint8)
E        y: array([[[136, 207,  32, 249, 183,  64,  74, 149],
E               [198, 243, 131,  43, 208,  69, 157, 198]]], dtype=uint8)

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.uint8'>
_ TestFFTConvolve_param_44_{mode='valid', size1=(3, 4, 10), size2=3}.test_correlate_fft _
cupy/testing/_helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/_helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/_helper.py:495: in check_func
    _array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[[  93,  -40,  -15,  104,  -39,   42,  -41,   25],
        [   0,  -28,   -9,  -95, -107,  -99,  112,  -98]]], dtype=int8)
desired = array([[[ 117,  -46,   34,   21,  -26,  -28,  -95,  101],
        [ -62,   -5,   31,  -49, -114,   93, -116,  -39]]], dtype=int8)
rtol = 1e-08, atol = 1e-08, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-08, atol=1e-08
E       
E       Mismatched elements: 16 / 16 (100%)
E       Max absolute difference: 83
E       Max relative difference: 4.6
E        x: array([[[  93,  -40,  -15,  104,  -39,   42,  -41,   25],
E               [   0,  -28,   -9,  -95, -107,  -99,  112,  -98]]], dtype=int8)
E        y: array([[[ 117,  -46,   34,   21,  -26,  -28,  -95,  101],
E               [ -62,   -5,   31,  -49, -114,   93, -116,  -39]]], dtype=int8)

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.int8'>
_ TestFFTConvolve_param_44_{mode='valid', size1=(3, 4, 10), size2=3}.test_fftconvolve _
cupy/testing/_helper.py:825: in test_func
    impl(self, *args, **kw)
cupy/testing/_helper.py:343: in test_func
    check_func(cupy_r, numpy_r)
cupy/testing/_helper.py:495: in check_func
    _array.assert_allclose(c, n, rtol1, atol1, err_msg, verbose)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = array([[[-2.43261889e+10, -3.13349788e+10, -3.94874092e+10,
         -2.04332204e+10, -3.54807814e+10,  2.80540765e+10...39035658e+10,
          2.79547907e+09, -1.53351038e+10, -1.30794244e+10,
         -3.01510435e+10, -3.44682000e+10]]])
desired = array([[[648., 719., 544., 505., 439., 576., 586., 661.],
        [710., 755., 643., 555., 464., 581., 669., 710.]]])
rtol = 1e-08, atol = 1e-08, err_msg = '', verbose = True

    def assert_allclose(actual, desired, rtol=1e-7, atol=0, err_msg='',
                        verbose=True):
        """Raises an AssertionError if objects are not equal up to desired tolerance.
    
        Args:
             actual(numpy.ndarray or cupy.ndarray): The actual object to check.
             desired(numpy.ndarray or cupy.ndarray): The desired, expected object.
             rtol(float): Relative tolerance.
             atol(float): Absolute tolerance.
             err_msg(str): The error message to be printed in case of failure.
             verbose(bool): If ``True``, the conflicting
                 values are appended to the error message.
    
        .. seealso:: :func:`numpy.testing.assert_allclose`
    
        """  # NOQA
>       numpy.testing.assert_allclose(
            cupy.asnumpy(actual), cupy.asnumpy(desired),
            rtol=rtol, atol=atol, err_msg=err_msg, verbose=verbose)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-08, atol=1e-08
E       
E       Mismatched elements: 16 / 16 (100%)
E       Max absolute difference: 4.56333643e+10
E       Max relative difference: 80821826.40318908
E        x: array([[[-2.432619e+10, -3.133498e+10, -3.948741e+10, -2.043322e+10,
E                -3.548078e+10,  2.805408e+10, -3.864539e+10, -1.329273e+10],
E               [-4.161622e+10, -4.563336e+10, -2.390357e+10,  2.795479e+09,
E                -1.533510e+10, -1.307942e+10, -3.015104e+10, -3.446820e+10]]])
E        y: array([[[648., 719., 544., 505., 439., 576., 586., 661.],
E               [710., 755., 643., 555., 464., 581., 669., 710.]]])

cupy/testing/_array.py:24: AssertionError
----------------------------- Captured stdout call -----------------------------
dtype is <class 'numpy.int32'>
=============================== warnings summary ===============================
tests/cupy_tests/core_tests/fusion_tests/test_routines.py::TestFusionNumericalReduction_param_1_{func='prod'}::test_reduction
tests/cupy_tests/math_tests/test_sumprod.py::TestNansumNanprodLong_param_11_{axis=0, func='nanprod', keepdims=True, shape=(20, 30, 40), transpose_axes=False}::test_nansum_all
tests/cupy_tests/math_tests/test_sumprod.py::TestNansumNanprodLong_param_11_{axis=0, func='nanprod', keepdims=True, shape=(20, 30, 40), transpose_axes=False}::test_nansum_axis_transposed
tests/cupy_tests/math_tests/test_sumprod.py::TestNansumNanprodLong_param_15_{axis=0, func='nanprod', keepdims=False, shape=(20, 30, 40), transpose_axes=False}::test_nansum_all
tests/cupy_tests/math_tests/test_sumprod.py::TestNansumNanprodLong_param_15_{axis=0, func='nanprod', keepdims=False, shape=(20, 30, 40), transpose_axes=False}::test_nansum_axis_transposed
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/core/fromnumeric.py:87: RuntimeWarning: overflow encountered in reduce
    return ufunc.reduce(obj, axis, dtype, out, **passkwargs)

tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyval_param_0_{type_l='poly1d', type_r='ndarray'}::test_polyval
tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyval_param_3_{type_l='ndarray', type_r='ndarray'}::test_polyval
tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyvalDtypesCombination::test_polyval_diff_types_array_array
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/lib/polynomial.py:734: RuntimeWarning: overflow encountered in multiply
    y = y * x + p[i]

tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyval_param_1_{type_l='poly1d', type_r='numpy_scalar'}::test_polyval
tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyval_param_4_{type_l='ndarray', type_r='numpy_scalar'}::test_polyval
tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyvalDtypesCombination::test_polyval_diff_types_array_scalar
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/lib/polynomial.py:734: RuntimeWarning: overflow encountered in half_scalars
    y = y * x + p[i]

tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyval_param_1_{type_l='poly1d', type_r='numpy_scalar'}::test_polyval
tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyval_param_4_{type_l='ndarray', type_r='numpy_scalar'}::test_polyval
tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyvalDtypesCombination::test_polyval_diff_types_array_scalar
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/lib/polynomial.py:734: RuntimeWarning: overflow encountered in byte_scalars
    y = y * x + p[i]

tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyval_param_1_{type_l='poly1d', type_r='numpy_scalar'}::test_polyval
tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyval_param_4_{type_l='ndarray', type_r='numpy_scalar'}::test_polyval
tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyvalDtypesCombination::test_polyval_diff_types_array_scalar
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/lib/polynomial.py:734: RuntimeWarning: overflow encountered in short_scalars
    y = y * x + p[i]

tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyval_param_1_{type_l='poly1d', type_r='numpy_scalar'}::test_polyval
tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyval_param_4_{type_l='ndarray', type_r='numpy_scalar'}::test_polyval
tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyvalDtypesCombination::test_polyval_diff_types_array_scalar
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/lib/polynomial.py:734: RuntimeWarning: overflow encountered in ubyte_scalars
    y = y * x + p[i]

tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyval_param_1_{type_l='poly1d', type_r='numpy_scalar'}::test_polyval
tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyval_param_4_{type_l='ndarray', type_r='numpy_scalar'}::test_polyval
tests/cupy_tests/lib_tests/test_polynomial.py::TestPolyvalDtypesCombination::test_polyval_diff_types_array_scalar
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/lib/polynomial.py:734: RuntimeWarning: overflow encountered in ushort_scalars
    y = y * x + p[i]

tests/cupy_tests/linalg_tests/test_norms.py: 14 warnings
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/linalg/linalg.py:2568: RuntimeWarning: divide by zero encountered in power
    absx **= ord

tests/cupy_tests/linalg_tests/test_norms.py: 14 warnings
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/linalg/linalg.py:2568: RuntimeWarning: divide by zero encountered in reciprocal
    absx **= ord

tests/cupy_tests/math_tests/test_misc.py::TestMisc::test_nan_to_num_inf
tests/cupy_tests/math_tests/test_misc.py::TestMisc::test_nan_to_num_inf_nan
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/core/numeric.py:2276: RuntimeWarning: overflow encountered in absolute
    return less_equal(abs(x-y), atol + rtol * abs(y))

tests/cupy_tests/math_tests/test_sumprod.py: 19 warnings
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/core/_methods.py:51: RuntimeWarning: overflow encountered in reduce
    return umr_prod(a, axis, dtype, out, keepdims, initial, where)

tests/cupy_tests/math_tests/test_sumprod.py: 15 warnings
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/core/_methods.py:51: RuntimeWarning: invalid value encountered in reduce
    return umr_prod(a, axis, dtype, out, keepdims, initial, where)

tests/cupy_tests/math_tests/test_sumprod.py::TestNansumNanprodLong_param_11_{axis=0, func='nanprod', keepdims=True, shape=(20, 30, 40), transpose_axes=False}::test_nansum_all
tests/cupy_tests/math_tests/test_sumprod.py::TestNansumNanprodLong_param_11_{axis=0, func='nanprod', keepdims=True, shape=(20, 30, 40), transpose_axes=False}::test_nansum_axis_transposed
tests/cupy_tests/math_tests/test_sumprod.py::TestNansumNanprodLong_param_15_{axis=0, func='nanprod', keepdims=False, shape=(20, 30, 40), transpose_axes=False}::test_nansum_all
tests/cupy_tests/math_tests/test_sumprod.py::TestNansumNanprodLong_param_15_{axis=0, func='nanprod', keepdims=False, shape=(20, 30, 40), transpose_axes=False}::test_nansum_axis_transposed
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/core/fromnumeric.py:87: RuntimeWarning: invalid value encountered in reduce
    return ufunc.reduce(obj, axis, dtype, out, **passkwargs)

tests/cupy_tests/math_tests/test_sumprod.py: 32 warnings
  /home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/math_tests/test_sumprod.py:800: RuntimeWarning: invalid value encountered in true_divide
    a = a / a

tests/cupy_tests/math_tests/test_sumprod.py::TestSumprod::test_sum_all2
tests/cupy_tests/math_tests/test_sumprod.py::TestSumprod::test_sum_all_transposed2
tests/cupy_tests/math_tests/test_sumprod.py::TestSumprod::test_sum_axes2
tests/cupy_tests/math_tests/test_sumprod.py::TestSumprod::test_sum_axes4
tests/cupy_tests/math_tests/test_sumprod.py::TestSumprod::test_sum_axis_transposed2
tests/cupyx_tests/scipy_tests/ndimage_tests/test_measurements.py::TestStats::test_only_input[_param_2_{op='variance'}]
tests/cupyx_tests/scipy_tests/ndimage_tests/test_measurements.py::TestStats::test_only_input[_param_3_{op='standard_deviation'}]
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/core/_methods.py:47: RuntimeWarning: overflow encountered in reduce
    return umr_sum(a, axis, dtype, out, keepdims, initial, where)

tests/cupy_tests/statistics_tests/test_meanvar.py: 28 warnings
  /home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupy_tests/statistics_tests/test_meanvar.py:114: RuntimeWarning: invalid value encountered in true_divide
    a = a / a

tests/cupy_tests/statistics_tests/test_meanvar.py::TestNanMedian_param_4_{axis=0, keepdims=True, overwrite_input=True, shape=(3, 4, 5)}::test_nanmedian
tests/cupy_tests/statistics_tests/test_meanvar.py::TestNanMedian_param_5_{axis=0, keepdims=True, overwrite_input=False, shape=(3, 4, 5)}::test_nanmedian
tests/cupy_tests/statistics_tests/test_meanvar.py::TestNanMedian_param_6_{axis=0, keepdims=False, overwrite_input=True, shape=(3, 4, 5)}::test_nanmedian
tests/cupy_tests/statistics_tests/test_meanvar.py::TestNanMedian_param_7_{axis=0, keepdims=False, overwrite_input=False, shape=(3, 4, 5)}::test_nanmedian
tests/cupy_tests/statistics_tests/test_meanvar.py::TestNanMedian_param_8_{axis=1, keepdims=True, overwrite_input=True, shape=(3, 4, 5)}::test_nanmedian
tests/cupy_tests/statistics_tests/test_meanvar.py::TestNanMedian_param_9_{axis=1, keepdims=True, overwrite_input=False, shape=(3, 4, 5)}::test_nanmedian
tests/cupy_tests/statistics_tests/test_meanvar.py::TestNanMedian_param_10_{axis=1, keepdims=False, overwrite_input=True, shape=(3, 4, 5)}::test_nanmedian
tests/cupy_tests/statistics_tests/test_meanvar.py::TestNanMedian_param_11_{axis=1, keepdims=False, overwrite_input=False, shape=(3, 4, 5)}::test_nanmedian
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/lib/nanfunctions.py:1113: RuntimeWarning: All-NaN slice encountered
    r, k = function_base._ureduce(a, func=_nanmedian, axis=axis, out=out,

tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_1_{func='mean', params=((0,), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_2_{func='mean', params=((0, 0), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_3_{func='mean', params=((0, 0), 1)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_4_{func='mean', params=((0, 0, 0), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_5_{func='mean', params=((0, 0, 0), (0, 2))}::test_external_mean_zero_len
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/core/fromnumeric.py:3372: RuntimeWarning: Mean of empty slice.
    return _methods._mean(a, axis=axis, dtype=dtype,

tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_1_{func='mean', params=((0,), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_2_{func='mean', params=((0, 0), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_4_{func='mean', params=((0, 0, 0), None)}::test_external_mean_zero_len
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/core/_methods.py:170: RuntimeWarning: invalid value encountered in double_scalars
    ret = ret.dtype.type(ret / rcount)

tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_1_{func='mean', params=((0,), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_2_{func='mean', params=((0, 0), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_4_{func='mean', params=((0, 0, 0), None)}::test_external_mean_zero_len
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/core/_methods.py:170: RuntimeWarning: invalid value encountered in true_divide
    ret = ret.dtype.type(ret / rcount)

tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_1_{func='mean', params=((0,), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_2_{func='mean', params=((0, 0), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_4_{func='mean', params=((0, 0, 0), None)}::test_external_mean_zero_len
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/core/_methods.py:168: RuntimeWarning: invalid value encountered in true_divide
    ret = arr.dtype.type(ret / rcount)

tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_7_{func='std', params=((0,), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_8_{func='std', params=((0, 0), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_9_{func='std', params=((0, 0), 1)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_10_{func='std', params=((0, 0, 0), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_11_{func='std', params=((0, 0, 0), (0, 2))}::test_external_mean_zero_len
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/core/_methods.py:233: RuntimeWarning: Degrees of freedom <= 0 for slice
    ret = _var(a, axis=axis, dtype=dtype, out=out, ddof=ddof,

tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_7_{func='std', params=((0,), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_8_{func='std', params=((0, 0), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_10_{func='std', params=((0, 0, 0), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_13_{func='var', params=((0,), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_14_{func='var', params=((0, 0), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_16_{func='var', params=((0, 0, 0), None)}::test_external_mean_zero_len
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/core/_methods.py:194: RuntimeWarning: invalid value encountered in true_divide
    arrmean = um.true_divide(

tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_7_{func='std', params=((0,), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_8_{func='std', params=((0, 0), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_10_{func='std', params=((0, 0, 0), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_13_{func='var', params=((0,), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_14_{func='var', params=((0, 0), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_16_{func='var', params=((0, 0, 0), None)}::test_external_mean_zero_len
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/core/_methods.py:226: RuntimeWarning: invalid value encountered in double_scalars
    ret = ret.dtype.type(ret / rcount)

tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_7_{func='std', params=((0,), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_8_{func='std', params=((0, 0), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_10_{func='std', params=((0, 0, 0), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_13_{func='var', params=((0,), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_14_{func='var', params=((0, 0), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_16_{func='var', params=((0, 0, 0), None)}::test_external_mean_zero_len
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/core/_methods.py:226: RuntimeWarning: invalid value encountered in true_divide
    ret = ret.dtype.type(ret / rcount)

tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_13_{func='var', params=((0,), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_14_{func='var', params=((0, 0), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_15_{func='var', params=((0, 0), 1)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_16_{func='var', params=((0, 0, 0), None)}::test_external_mean_zero_len
tests/cupy_tests/statistics_tests/test_meanvar.py::TestProductZeroLength_param_17_{func='var', params=((0, 0, 0), (0, 2))}::test_external_mean_zero_len
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/numpy/core/fromnumeric.py:3621: RuntimeWarning: Degrees of freedom <= 0 for slice
    return _methods._var(a, axis=axis, dtype=dtype, out=out, ddof=ddof,

tests/cupyx_tests/scipy_tests/ndimage_tests/test_interpolation.py::TestShift::test_shift_int[_param_217_{cval=nan, mode='constant', order=0, output=float64, prefilter=True, shift=0.1}]
tests/cupyx_tests/scipy_tests/ndimage_tests/test_interpolation.py::TestShift::test_shift_int[_param_220_{cval=nan, mode='constant', order=1, output=float64, prefilter=True, shift=0.1}]
tests/cupyx_tests/scipy_tests/ndimage_tests/test_interpolation.py::TestShift::test_shift_int[_param_223_{cval=nan, mode='constant', order=3, output=float64, prefilter=True, shift=0.1}]
tests/cupyx_tests/scipy_tests/ndimage_tests/test_interpolation.py::TestShift::test_shift_int[_param_226_{cval=inf, mode='constant', order=0, output=float64, prefilter=True, shift=0.1}]
tests/cupyx_tests/scipy_tests/ndimage_tests/test_interpolation.py::TestShift::test_shift_int[_param_229_{cval=inf, mode='constant', order=1, output=float64, prefilter=True, shift=0.1}]
tests/cupyx_tests/scipy_tests/ndimage_tests/test_interpolation.py::TestShift::test_shift_int[_param_232_{cval=inf, mode='constant', order=3, output=float64, prefilter=True, shift=0.1}]
tests/cupyx_tests/scipy_tests/ndimage_tests/test_interpolation.py::TestShift::test_shift_int[_param_235_{cval=-inf, mode='constant', order=0, output=float64, prefilter=True, shift=0.1}]
tests/cupyx_tests/scipy_tests/ndimage_tests/test_interpolation.py::TestShift::test_shift_int[_param_238_{cval=-inf, mode='constant', order=1, output=float64, prefilter=True, shift=0.1}]
tests/cupyx_tests/scipy_tests/ndimage_tests/test_interpolation.py::TestShift::test_shift_int[_param_241_{cval=-inf, mode='constant', order=3, output=float64, prefilter=True, shift=0.1}]
  /home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/tests/cupyx_tests/scipy_tests/ndimage_tests/test_interpolation.py:533: RuntimeWarning: invalid value encountered in remainder
    float_out = self._shift(xp, scp, a.astype(xp.float64)) % 1

tests/cupyx_tests/scipy_tests/ndimage_tests/test_measurements.py: 14 warnings
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/scipy/ndimage/measurements.py:684: RuntimeWarning: invalid value encountered in true_divide
    return sum / numpy.asanyarray(count).astype(numpy.float64)

tests/cupyx_tests/scipy_tests/ndimage_tests/test_measurements.py: 28 warnings
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/scipy/ndimage/measurements.py:736: RuntimeWarning: invalid value encountered in true_divide
    return sum_c_sq / np.asanyarray(count).astype(float)

tests/cupyx_tests/scipy_tests/signal_tests/test_signaltools.py::TestWiener_param_0_{im=(10,), mysize=3, noise=False}::test_wiener
tests/cupyx_tests/scipy_tests/signal_tests/test_signaltools.py::TestWiener_param_1_{im=(10,), mysize=3, noise=True}::test_wiener
tests/cupyx_tests/scipy_tests/signal_tests/test_signaltools.py::TestWiener_param_2_{im=(10,), mysize=4, noise=False}::test_wiener
tests/cupyx_tests/scipy_tests/signal_tests/test_signaltools.py::TestWiener_param_3_{im=(10,), mysize=4, noise=True}::test_wiener
tests/cupyx_tests/scipy_tests/signal_tests/test_signaltools.py::TestWiener_param_4_{im=(10,), mysize=(3, 4, 5), noise=False}::test_wiener
tests/cupyx_tests/scipy_tests/signal_tests/test_signaltools.py::TestWiener_param_5_{im=(10,), mysize=(3, 4, 5), noise=True}::test_wiener
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/scipy/signal/signaltools.py:1598: RuntimeWarning: divide by zero encountered in true_divide
    res *= (1 - noise / lVar)

tests/cupyx_tests/scipy_tests/signal_tests/test_signaltools.py::TestWiener_param_0_{im=(10,), mysize=3, noise=False}::test_wiener
tests/cupyx_tests/scipy_tests/signal_tests/test_signaltools.py::TestWiener_param_1_{im=(10,), mysize=3, noise=True}::test_wiener
tests/cupyx_tests/scipy_tests/signal_tests/test_signaltools.py::TestWiener_param_2_{im=(10,), mysize=4, noise=False}::test_wiener
tests/cupyx_tests/scipy_tests/signal_tests/test_signaltools.py::TestWiener_param_3_{im=(10,), mysize=4, noise=True}::test_wiener
tests/cupyx_tests/scipy_tests/signal_tests/test_signaltools.py::TestWiener_param_4_{im=(10,), mysize=(3, 4, 5), noise=False}::test_wiener
tests/cupyx_tests/scipy_tests/signal_tests/test_signaltools.py::TestWiener_param_5_{im=(10,), mysize=(3, 4, 5), noise=True}::test_wiener
  /home/kmaeh/.pyenv/versions/rocm-ci/lib/python3.8/site-packages/scipy/signal/signaltools.py:1598: RuntimeWarning: invalid value encountered in multiply
    res *= (1 - noise / lVar)

-- Docs: https://docs.pytest.org/en/stable/warnings.html
- generated html file: file:///home/kmaeh/Development/cupy-rocm-ci-report/tools/tmp.TYVRbRC1Yb/cupy/_output/report.html -
=========================== short test summary info ============================
FAILED tests/cupy_tests/core_tests/test_ndarray.py::TestNdarrayCopy::test_copy_multi_device_with_stream
FAILED tests/cupy_tests/core_tests/test_ndarray_scatter.py::TestScatterParametrized_param_3_{shape=(3, 4, 5), slices=(slice(None, None, None), [[1, 2], [0, -1]]), value=1}::test_scatter_max
FAILED tests/cupy_tests/core_tests/test_ndarray_scatter.py::TestScatterParametrized_param_3_{shape=(3, 4, 5), slices=(slice(None, None, None), [[1, 2], [0, -1]]), value=1}::test_scatter_min
FAILED tests/cupy_tests/core_tests/test_ndarray_scatter.py::TestScatterParametrized_param_4_{shape=(3, 4, 5), slices=(slice(None, None, None), slice(None, None, None), [[1, 2], [0, 3]]), value=1}::test_scatter_add
FAILED tests/cupy_tests/core_tests/test_ndarray_scatter.py::TestScatterParametrized_param_4_{shape=(3, 4, 5), slices=(slice(None, None, None), slice(None, None, None), [[1, 2], [0, 3]]), value=1}::test_scatter_max
FAILED tests/cupy_tests/core_tests/test_ndarray_scatter.py::TestScatterParametrized_param_4_{shape=(3, 4, 5), slices=(slice(None, None, None), slice(None, None, None), [[1, 2], [0, 3]]), value=1}::test_scatter_min
FAILED tests/cupy_tests/core_tests/test_ndarray_scatter.py::TestScatterParametrized_param_7_{shape=(2, 3), slices=(slice(1, 2, None), [1, 0, 1]), value=1}::test_scatter_add
FAILED tests/cupy_tests/core_tests/test_ndarray_scatter.py::TestScatterParametrized_param_7_{shape=(2, 3), slices=(slice(1, 2, None), [1, 0, 1]), value=1}::test_scatter_max
FAILED tests/cupy_tests/core_tests/test_ndarray_scatter.py::TestScatterParametrized_param_7_{shape=(2, 3), slices=(slice(1, 2, None), [1, 0, 1]), value=1}::test_scatter_min
FAILED tests/cupy_tests/core_tests/test_ndarray_scatter.py::TestScatterParametrized_param_8_{shape=(3, 4, 5), slices=(slice(None, None, None), slice(1, 2, None), [[1, 3], [0, 2]]), value=1}::test_scatter_add
FAILED tests/cupy_tests/core_tests/test_ndarray_scatter.py::TestScatterParametrized_param_8_{shape=(3, 4, 5), slices=(slice(None, None, None), slice(1, 2, None), [[1, 3], [0, 2]]), value=1}::test_scatter_max
FAILED tests/cupy_tests/core_tests/test_ndarray_scatter.py::TestScatterParametrized_param_8_{shape=(3, 4, 5), slices=(slice(None, None, None), slice(1, 2, None), [[1, 3], [0, 2]]), value=1}::test_scatter_min
FAILED tests/cupy_tests/core_tests/test_ndarray_scatter.py::TestScatterParametrized_param_9_{shape=(3, 4, 5), slices=(None, [1, -1]), value=1}::test_scatter_add
FAILED tests/cupy_tests/core_tests/test_ndarray_scatter.py::TestScatterParametrized_param_9_{shape=(3, 4, 5), slices=(None, [1, -1]), value=1}::test_scatter_max
FAILED tests/cupy_tests/core_tests/test_ndarray_scatter.py::TestScatterParametrized_param_9_{shape=(3, 4, 5), slices=(None, [1, -1]), value=1}::test_scatter_min
FAILED tests/cupy_tests/core_tests/test_ndarray_scatter.py::TestScatterParametrized_param_10_{shape=(3, 4, 5), slices=(None, [1, -1], None), value=1}::test_scatter_add
FAILED tests/cupy_tests/core_tests/test_ndarray_scatter.py::TestScatterParametrized_param_10_{shape=(3, 4, 5), slices=(None, [1, -1], None), value=1}::test_scatter_max
FAILED tests/cupy_tests/core_tests/test_ndarray_scatter.py::TestScatterParametrized_param_10_{shape=(3, 4, 5), slices=(None, [1, -1], None), value=1}::test_scatter_min
FAILED tests/cupy_tests/core_tests/test_ndarray_scatter.py::TestScatterParametrized_param_11_{shape=(3, 4, 5), slices=(None, None, None, [1, -1]), value=1}::test_scatter_add
FAILED tests/cupy_tests/core_tests/test_ndarray_scatter.py::TestScatterParametrized_param_11_{shape=(3, 4, 5), slices=(None, None, None, [1, -1]), value=1}::test_scatter_max
FAILED tests/cupy_tests/core_tests/test_ndarray_scatter.py::TestScatterParametrized_param_11_{shape=(3, 4, 5), slices=(None, None, None, [1, -1]), value=1}::test_scatter_min
FAILED tests/cupy_tests/core_tests/test_ndarray_scatter.py::TestScatterParametrized_param_12_{shape=(3, 4, 5), slices=(slice(0, 1, None), None, [1, -1]), value=1}::test_scatter_min
FAILED tests/cupy_tests/core_tests/test_ndarray_scatter.py::TestScatterParametrized_param_13_{shape=(3, 4, 5), slices=(slice(0, 1, None), slice(1, 2, None), [1, -1]), value=1}::test_scatter_add
FAILED tests/cupy_tests/core_tests/test_ndarray_scatter.py::TestScatterParametrized_param_13_{shape=(3, 4, 5), slices=(slice(0, 1, None), slice(1, 2, None), [1, -1]), value=1}::test_scatter_max
FAILED tests/cupy_tests/core_tests/test_ndarray_scatter.py::TestScatterParametrized_param_13_{shape=(3, 4, 5), slices=(slice(0, 1, None), slice(1, 2, None), [1, -1]), value=1}::test_scatter_min
FAILED tests/cupy_tests/core_tests/test_ndarray_scatter.py::TestScatterParametrized_param_14_{shape=(3, 4, 5), slices=(slice(0, 1, None), None, slice(1, 2, None), [1, -1]), value=1}::test_scatter_add
FAILED tests/cupy_tests/core_tests/test_ndarray_scatter.py::TestScatterParametrized_param_14_{shape=(3, 4, 5), slices=(slice(0, 1, None), None, slice(1, 2, None), [1, -1]), value=1}::test_scatter_max
FAILED tests/cupy_tests/core_tests/test_ndarray_scatter.py::TestScatterParametrized_param_14_{shape=(3, 4, 5), slices=(slice(0, 1, None), None, slice(1, 2, None), [1, -1]), value=1}::test_scatter_min
FAILED tests/cupy_tests/core_tests/test_ndarray_scatter.py::TestScatterParametrized_param_15_{shape=(3, 4, 5), slices=(slice(None, None, None), [[1, 2], [0, -1]]), value=array([[[[ 0,  1,  2,  3,  4],
         [ 5,  6,...1, 52, 53, 54],
         [55, 56, 57, 58, 59]]]])}::test_scatter_add - AssertionError: Only cupy raises error
FAILED tests/cupy_tests/core_tests/test_ndarray_scatter.py::TestScatterParametrized_param_15_{shape=(3, 4, 5), slices=(slice(None, None, None), [[1, 2], [0, -1]]), value=array([[[[ 0,  1,  2,  3,  4],
         [ 5,  6,...1, 52, 53, 54],
         [55, 56, 57, 58, 59]]]])}::test_scatter_max - AssertionError: Only cupy raises error
FAILED tests/cupy_tests/core_tests/test_ndarray_scatter.py::TestScatterParametrized_param_15_{shape=(3, 4, 5), slices=(slice(None, None, None), [[1, 2], [0, -1]]), value=array([[[[ 0,  1,  2,  3,  4],
         [ 5,  6,...1, 52, 53, 54],
         [55, 56, 57, 58, 59]]]])}::test_scatter_min - AssertionError: Only cupy raises error
FAILED tests/cupy_tests/core_tests/test_ndarray_scatter.py::TestScatterParametrized_param_16_{shape=(2, 3, 4), slices=([1, 0], [2, 1]), value=array([[0, 1, 2, 3],
       [4, 5, 6, 7]])}::test_scatter_add - AssertionError: Only cupy raises error
FAILED tests/cupy_tests/core_tests/test_ndarray_scatter.py::TestScatterParametrized_param_16_{shape=(2, 3, 4), slices=([1, 0], [2, 1]), value=array([[0, 1, 2, 3],
       [4, 5, 6, 7]])}::test_scatter_max - AssertionError: Only cupy raises error
FAILED tests/cupy_tests/core_tests/test_ndarray_scatter.py::TestScatterParametrized_param_16_{shape=(2, 3, 4), slices=([1, 0], [2, 1]), value=array([[0, 1, 2, 3],
       [4, 5, 6, 7]])}::test_scatter_min - AssertionError: Only cupy raises error
FAILED tests/cupy_tests/core_tests/test_ndarray_scatter.py::TestScatterParametrized_param_17_{shape=(2, 3, 4), slices=([1, 0], slice(None, None, None), [2, 1]), value=array([[0, 1, 2],
       [3, 4, 5]])}::test_scatter_add - AssertionError: Only cupy raises error
FAILED tests/cupy_tests/core_tests/test_ndarray_scatter.py::TestScatterParametrized_param_17_{shape=(2, 3, 4), slices=([1, 0], slice(None, None, None), [2, 1]), value=array([[0, 1, 2],
       [3, 4, 5]])}::test_scatter_max - AssertionError: Only cupy raises error
FAILED tests/cupy_tests/core_tests/test_ndarray_scatter.py::TestScatterParametrized_param_17_{shape=(2, 3, 4), slices=([1, 0], slice(None, None, None), [2, 1]), value=array([[0, 1, 2],
       [3, 4, 5]])}::test_scatter_min - AssertionError: Only cupy raises error
FAILED tests/cupy_tests/core_tests/test_ndarray_scatter.py::TestScatterParametrized_param_18_{shape=(2, 3, 4), slices=([1, 0], slice(None, None, None), [[2, 0], [3, 1]]), value=array([[[ 0,  1,  2],
        [ 3,  4,  5]],

       [[ 6,  7,  8],
        [ 9, 10, 11]]])}::test_scatter_add - AssertionError: Only cupy raises error
FAILED tests/cupy_tests/core_tests/test_ndarray_scatter.py::TestScatterParametrized_param_18_{shape=(2, 3, 4), slices=([1, 0], slice(None, None, None), [[2, 0], [3, 1]]), value=array([[[ 0,  1,  2],
        [ 3,  4,  5]],

       [[ 6,  7,  8],
        [ 9, 10, 11]]])}::test_scatter_max - AssertionError: Only cupy raises error
FAILED tests/cupy_tests/core_tests/test_ndarray_scatter.py::TestScatterParametrized_param_18_{shape=(2, 3, 4), slices=([1, 0], slice(None, None, None), [[2, 0], [3, 1]]), value=array([[[ 0,  1,  2],
        [ 3,  4,  5]],

       [[ 6,  7,  8],
        [ 9, 10, 11]]])}::test_scatter_min - AssertionError: Only cupy raises error
FAILED tests/cupy_tests/core_tests/test_ndarray_scatter.py::TestScatterParametrized_param_19_{shape=(1, 1, 2, 3, 4), slices=(None, slice(None, None, None), 0, [1, 0], slice(0, 2, 2), [2, -1]), value=1}::test_scatter_add
FAILED tests/cupy_tests/core_tests/test_ndarray_scatter.py::TestScatterParametrized_param_19_{shape=(1, 1, 2, 3, 4), slices=(None, slice(None, None, None), 0, [1, 0], slice(0, 2, 2), [2, -1]), value=1}::test_scatter_max
FAILED tests/cupy_tests/core_tests/test_ndarray_scatter.py::TestScatterParametrized_param_19_{shape=(1, 1, 2, 3, 4), slices=(None, slice(None, None, None), 0, [1, 0], slice(0, 2, 2), [2, -1]), value=1}::test_scatter_min
FAILED tests/cupy_tests/core_tests/test_ndarray_scatter.py::TestScatterParametrized_param_20_{shape=(2, 3, 4), slices=([1, 1], [1, 1]), value=array([[0, 1, 2, 3],
       [4, 5, 6, 7]])}::test_scatter_add - AssertionError: Only cupy raises error
FAILED tests/cupy_tests/core_tests/test_ndarray_scatter.py::TestScatterParametrized_param_20_{shape=(2, 3, 4), slices=([1, 1], [1, 1]), value=array([[0, 1, 2, 3],
       [4, 5, 6, 7]])}::test_scatter_max - AssertionError: Only cupy raises error
FAILED tests/cupy_tests/core_tests/test_ndarray_scatter.py::TestScatterParametrized_param_20_{shape=(2, 3, 4), slices=([1, 1], [1, 1]), value=array([[0, 1, 2, 3],
       [4, 5, 6, 7]])}::test_scatter_min - AssertionError: Only cupy raises error
FAILED tests/cupy_tests/core_tests/test_ndarray_scatter.py::TestScatterParametrized_param_21_{shape=(2, 3, 4), slices=([1, 1], slice(None, None, None), [[2, 2], [3, 1]]), value=array([[[ 0,  1,  2],
        [ 3,  4,  5]],

       [[ 6,  7,  8],
        [ 9, 10, 11]]])}::test_scatter_add - AssertionError: Only cupy raises error
FAILED tests/cupy_tests/core_tests/test_ndarray_scatter.py::TestScatterParametrized_param_21_{shape=(2, 3, 4), slices=([1, 1], slice(None, None, None), [[2, 2], [3, 1]]), value=array([[[ 0,  1,  2],
        [ 3,  4,  5]],

       [[ 6,  7,  8],
        [ 9, 10, 11]]])}::test_scatter_max - AssertionError: Only cupy raises error
FAILED tests/cupy_tests/core_tests/test_ndarray_scatter.py::TestScatterParametrized_param_21_{shape=(2, 3, 4), slices=([1, 1], slice(None, None, None), [[2, 2], [3, 1]]), value=array([[[ 0,  1,  2],
        [ 3,  4,  5]],

       [[ 6,  7,  8],
        [ 9, 10, 11]]])}::test_scatter_min - AssertionError: Only cupy raises error
FAILED tests/cupy_tests/core_tests/test_ndarray_scatter.py::TestScatterParametrized_param_22_{shape=(2, 3, 4), slices=([1, 1], 1, [[2, 2], [3, 1]]), value=array([[0, 1],
       [2, 3]])}::test_scatter_add - AssertionError: Only cupy raises error
FAILED tests/cupy_tests/core_tests/test_ndarray_scatter.py::TestScatterParametrized_param_22_{shape=(2, 3, 4), slices=([1, 1], 1, [[2, 2], [3, 1]]), value=array([[0, 1],
       [2, 3]])}::test_scatter_max - AssertionError: Only cupy raises error
FAILED tests/cupy_tests/core_tests/test_ndarray_scatter.py::TestScatterParametrized_param_22_{shape=(2, 3, 4), slices=([1, 1], 1, [[2, 2], [3, 1]]), value=array([[0, 1],
       [2, 3]])}::test_scatter_min - AssertionError: Only cupy raises error
FAILED tests/cupy_tests/core_tests/test_ndarray_scatter.py::TestScatterParametrized_param_23_{shape=(3, 4, 5), slices=(array([[[ True, False, False,  True,  True],
  ...
        [ True,  True,  True,  True, False]]]),), value=1}::test_scatter_add - AssertionError: Only cupy raises error
FAILED tests/cupy_tests/core_tests/test_ndarray_scatter.py::TestScatterParametrized_param_23_{shape=(3, 4, 5), slices=(array([[[ True, False, False,  True,  True],
  ...
        [ True,  True,  True,  True, False]]]),), value=1}::test_scatter_max - AssertionError: Only cupy raises error
FAILED tests/cupy_tests/core_tests/test_ndarray_scatter.py::TestScatterParametrized_param_23_{shape=(3, 4, 5), slices=(array([[[ True, False, False,  True,  True],
  ...
        [ True,  True,  True,  True, False]]]),), value=1}::test_scatter_min - AssertionError: Only cupy raises error
FAILED tests/cupy_tests/core_tests/test_ndarray_scatter.py::TestScatterParametrized_param_24_{shape=(3, 4, 5), slices=(array([ True, False,  True]),), value=array([[ 0,  1,  2,  3,  4],
       [ 5,  6,  7,...0, 11, 12, 13, 14],
       [15, 16, 17, 18, 19]])}::test_scatter_add - AssertionError: Only cupy raises error
FAILED tests/cupy_tests/core_tests/test_ndarray_scatter.py::TestScatterParametrized_param_24_{shape=(3, 4, 5), slices=(array([ True, False,  True]),), value=array([[ 0,  1,  2,  3,  4],
       [ 5,  6,  7,...0, 11, 12, 13, 14],
       [15, 16, 17, 18, 19]])}::test_scatter_max - AssertionError: Only cupy raises error
FAILED tests/cupy_tests/core_tests/test_ndarray_scatter.py::TestScatterParametrized_param_24_{shape=(3, 4, 5), slices=(array([ True, False,  True]),), value=array([[ 0,  1,  2,  3,  4],
       [ 5,  6,  7,...0, 11, 12, 13, 14],
       [15, 16, 17, 18, 19]])}::test_scatter_min - AssertionError: Only cupy raises error
FAILED tests/cupy_tests/core_tests/test_ndarray_scatter.py::TestScatterParametrized_param_25_{shape=(3, 4, 5), slices=(slice(None, None, None), array([ True, False, False,  True])), value=array([[[ 0,  1,  2,  3,  4],
        [ 5,  6,  ... 21, 22, 23, 24],
        [25, 26, 27, 28, 29]]])}::test_scatter_add - AssertionError: Only cupy raises error
FAILED tests/cupy_tests/core_tests/test_ndarray_scatter.py::TestScatterParametrized_param_25_{shape=(3, 4, 5), slices=(slice(None, None, None), array([ True, False, False,  True])), value=array([[[ 0,  1,  2,  3,  4],
        [ 5,  6,  ... 21, 22, 23, 24],
        [25, 26, 27, 28, 29]]])}::test_scatter_max - AssertionError: Only cupy raises error
FAILED tests/cupy_tests/core_tests/test_ndarray_scatter.py::TestScatterParametrized_param_25_{shape=(3, 4, 5), slices=(slice(None, None, None), array([ True, False, False,  True])), value=array([[[ 0,  1,  2,  3,  4],
        [ 5,  6,  ... 21, 22, 23, 24],
        [25, 26, 27, 28, 29]]])}::test_scatter_min - AssertionError: Only cupy raises error
FAILED tests/cupy_tests/core_tests/test_ndarray_scatter.py::TestScatterParametrized_param_41_{shape=(2, 3, 4), slices=[1], value=1}::test_scatter_add
FAILED tests/cupy_tests/core_tests/test_ndarray_scatter.py::TestScatterParametrized_param_41_{shape=(2, 3, 4), slices=[1], value=1}::test_scatter_max
FAILED tests/cupy_tests/core_tests/test_ndarray_scatter.py::TestScatterParametrized_param_41_{shape=(2, 3, 4), slices=[1], value=1}::test_scatter_min
FAILED tests/cupy_tests/core_tests/test_ndarray_scatter.py::TestScatterParametrized_param_42_{shape=(2, 3, 4), slices=[1, 1], value=array([[[ 0,  1,  2,  3],
        [ 4,  5,  6,  ...    [16, 17, 18, 19],
        [20, 21, 22, 23]]])}::test_scatter_add - AssertionError: Only cupy raises error
FAILED tests/cupy_tests/core_tests/test_ndarray_scatter.py::TestScatterParametrized_param_42_{shape=(2, 3, 4), slices=[1, 1], value=array([[[ 0,  1,  2,  3],
        [ 4,  5,  6,  ...    [16, 17, 18, 19],
        [20, 21, 22, 23]]])}::test_scatter_max - AssertionError: Only cupy raises error
FAILED tests/cupy_tests/core_tests/test_ndarray_scatter.py::TestScatterParametrized_param_42_{shape=(2, 3, 4), slices=[1, 1], value=array([[[ 0,  1,  2,  3],
        [ 4,  5,  6,  ...    [16, 17, 18, 19],
        [20, 21, 22, 23]]])}::test_scatter_min - AssertionError: Only cupy raises error
FAILED tests/cupy_tests/core_tests/test_ndarray_scatter.py::TestScatterParametrized_param_43_{shape=(2, 3, 4), slices=([1],), value=1}::test_scatter_add
FAILED tests/cupy_tests/core_tests/test_ndarray_scatter.py::TestScatterParametrized_param_43_{shape=(2, 3, 4), slices=([1],), value=1}::test_scatter_max
FAILED tests/cupy_tests/core_tests/test_ndarray_scatter.py::TestScatterParametrized_param_43_{shape=(2, 3, 4), slices=([1],), value=1}::test_scatter_min
FAILED tests/cupy_tests/core_tests/test_ndarray_scatter.py::TestScatterParametrized_param_47_{shape=(2, 3, 4), slices=([1], slice(1, 2, None)), value=1}::test_scatter_add
FAILED tests/cupy_tests/core_tests/test_ndarray_scatter.py::TestScatterParametrized_param_47_{shape=(2, 3, 4), slices=([1], slice(1, 2, None)), value=1}::test_scatter_max
FAILED tests/cupy_tests/core_tests/test_ndarray_scatter.py::TestScatterParametrized_param_47_{shape=(2, 3, 4), slices=([1], slice(1, 2, None)), value=1}::test_scatter_min
FAILED tests/cupy_tests/core_tests/test_ndarray_scatter.py::TestScatterParametrized_param_48_{shape=(2, 3, 4), slices=([[1]], slice(1, 2, None)), value=1}::test_scatter_add
FAILED tests/cupy_tests/core_tests/test_ndarray_scatter.py::TestScatterParametrized_param_48_{shape=(2, 3, 4), slices=([[1]], slice(1, 2, None)), value=1}::test_scatter_max
FAILED tests/cupy_tests/core_tests/test_ndarray_scatter.py::TestScatterParametrized_param_48_{shape=(2, 3, 4), slices=([[1]], slice(1, 2, None)), value=1}::test_scatter_min
FAILED tests/cupy_tests/core_tests/test_ndarray_scatter.py::TestScatterAdd::test_scatter_add_cupy_arguments
FAILED tests/cupy_tests/core_tests/test_ndarray_scatter.py::TestScatterAdd::test_scatter_add_cupy_arguments_mask
FAILED tests/cupy_tests/core_tests/test_ndarray_scatter.py::TestScatterAdd::test_scatter_add_differnt_dtypes
FAILED tests/cupy_tests/core_tests/test_ndarray_scatter.py::TestScatterAdd::test_scatter_add_differnt_dtypes_mask
FAILED tests/cupy_tests/core_tests/test_ndarray_scatter.py::TestScatterMinMax::test_scatter_minmax_cupy_arguments
FAILED tests/cupy_tests/core_tests/test_ndarray_scatter.py::TestScatterMinMax::test_scatter_minmax_cupy_arguments_mask
FAILED tests/cupy_tests/core_tests/test_ndarray_scatter.py::TestScatterMinMax::test_scatter_minmax_differnt_dtypes
FAILED tests/cupy_tests/core_tests/test_ndarray_scatter.py::TestScatterMinMax::test_scatter_minmax_differnt_dtypes_mask
FAILED tests/cupy_tests/core_tests/test_ndarray_ufunc.py::TestArrayUfunc::test_unary_op
FAILED tests/cupy_tests/core_tests/test_ndarray_ufunc.py::TestArrayUfunc::test_unary_op_out
FAILED tests/cupy_tests/core_tests/test_ndarray_unary_op.py::TestArrayUnaryOp::test_abs_array
FAILED tests/cupy_tests/core_tests/test_ndarray_unary_op.py::TestArrayUnaryOp::test_abs_zerodim
FAILED tests/cupy_tests/core_tests/test_ndarray_unary_op.py::TestArrayUnaryOp::test_abs_zerodim_full
FAILED tests/cupy_tests/core_tests/test_ndarray_unary_op.py::TestArrayUnaryOp::test_neg_array
FAILED tests/cupy_tests/core_tests/test_ndarray_unary_op.py::TestArrayUnaryOp::test_neg_zerodim
FAILED tests/cupy_tests/core_tests/test_ndarray_unary_op.py::TestArrayIntUnaryOp::test_invert_zerodim
FAILED tests/cupy_tests/core_tests/test_reduction.py::TestSimpleReductionFunctionNonContiguous_param_0_{axis=(0, 1), shape=(2, 4, 3), trans=(2, 1, 0)}::test_noncontiguous
FAILED tests/cupy_tests/core_tests/test_reduction.py::TestSimpleReductionFunctionNonContiguous_param_1_{axis=(1, 2), shape=(2, 4, 5, 3), trans=(3, 2, 1, 0)}::test_noncontiguous
FAILED tests/cupy_tests/core_tests/test_reduction.py::TestSimpleReductionFunctionNonContiguous_param_2_{axis=(1, 2), shape=(2, 4, 3), trans=(2, 1, 0)}::test_noncontiguous
FAILED tests/cupy_tests/core_tests/test_reduction.py::TestSimpleReductionFunctionNonContiguous_param_4_{axis=(0, 1, 2), shape=(2, 4, 3), trans=(2, 1, 0)}::test_noncontiguous
FAILED tests/cupy_tests/core_tests/test_reduction.py::TestSimpleReductionFunctionComplexWarning_param_0_{backend=[]}::test_warns
FAILED tests/cupy_tests/core_tests/test_reduction.py::TestSimpleReductionFunctionComplexWarning_param_1_{backend=['cub']}::test_warns
FAILED tests/cupy_tests/core_tests/test_reduction.py::TestReductionKernelNonContiguous_param_0_{axis=(0, 1), shape=(2, 4, 3), trans=(2, 1, 0)}::test_noncontiguous
FAILED tests/cupy_tests/core_tests/test_reduction.py::TestReductionKernelNonContiguous_param_1_{axis=(1, 2), shape=(2, 4, 5, 3), trans=(3, 2, 1, 0)}::test_noncontiguous
FAILED tests/cupy_tests/core_tests/test_reduction.py::TestReductionKernelNonContiguous_param_2_{axis=(1, 2), shape=(2, 4, 3), trans=(2, 1, 0)}::test_noncontiguous
FAILED tests/cupy_tests/core_tests/test_reduction.py::TestReductionKernelNonContiguous_param_4_{axis=(0, 1, 2), shape=(2, 4, 3), trans=(2, 1, 0)}::test_noncontiguous
FAILED tests/cupy_tests/core_tests/test_reduction.py::TestSimpleReductionFunction::test_shape1
FAILED tests/cupy_tests/core_tests/test_reduction.py::TestSimpleReductionFunction::test_shape2
FAILED tests/cupy_tests/core_tests/test_reduction.py::TestSimpleReductionFunction::test_shape3
FAILED tests/cupy_tests/core_tests/test_reduction.py::TestSimpleReductionFunction::test_shape4
FAILED tests/cupy_tests/core_tests/test_reduction.py::TestSimpleReductionFunction::test_shape5
FAILED tests/cupy_tests/core_tests/test_reduction.py::TestReductionKernel::test_shape1
FAILED tests/cupy_tests/core_tests/test_reduction.py::TestReductionKernel::test_shape2
FAILED tests/cupy_tests/core_tests/test_reduction.py::TestReductionKernel::test_shape3
FAILED tests/cupy_tests/core_tests/test_reduction.py::TestReductionKernel::test_shape4
FAILED tests/cupy_tests/core_tests/test_reduction.py::TestLargeMultiDimReduction::test_large_dims_keep_kernels
FAILED tests/cupy_tests/core_tests/test_scan.py::TestScan::test_multi_gpu - O...
FAILED tests/cupy_tests/core_tests/test_scan.py::TestScan::test_scan - OSErro...
FAILED tests/cupy_tests/core_tests/test_scan.py::TestScan::test_scan_out - OS...
FAILED tests/cupy_tests/core_tests/test_userkernel.py::TestUserkernelScalar_param_0_{value=-1}::test_scalar
FAILED tests/cupy_tests/core_tests/test_userkernel.py::TestUserkernelScalar_param_1_{value=4294967296}::test_scalar
FAILED tests/cupy_tests/core_tests/test_userkernel.py::TestUserkernelScalar_param_2_{value=9223372036854775807}::test_scalar
FAILED tests/cupy_tests/core_tests/test_userkernel.py::TestUserkernelScalar_param_3_{value=-9223372036854775808}::test_scalar
FAILED tests/cupy_tests/core_tests/test_userkernel.py::TestUserkernel::test_manual_indexing
FAILED tests/cupy_tests/core_tests/test_userkernel.py::TestUserkernel::test_numpy_scalar
FAILED tests/cupy_tests/core_tests/test_userkernel.py::TestUserkernel::test_python_scalar
FAILED tests/cupy_tests/core_tests/test_userkernel.py::TestElementwiseKernelSize::test_all_raws
FAILED tests/cupy_tests/core_tests/test_userkernel.py::TestElementwiseKernelSize::test_no_input_and_raw_output
FAILED tests/cupy_tests/core_tests/test_userkernel.py::TestElementwiseKernelSize::test_scalars_and_raws
FAILED tests/cupy_tests/core_tests/test_userkernel.py::TestElementwiseKernelSize::test_size_determined_by_output
FAILED tests/cupy_tests/core_tests/test_userkernel.py::TestUserkernelManualBlockSize::test_block_size
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayOperator_param_0_{func=<lambda>, left_value='array', name='neg', right_value='array'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayOperator_param_1_{func=<lambda>, left_value='array', name='neg', right_value='scalar'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayOperator_param_2_{func=<lambda>, left_value='array', name='neg', right_value='primitive'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayOperator_param_3_{func=<lambda>, left_value='scalar', name='neg', right_value='array'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayOperator_param_4_{func=<lambda>, left_value='primitive', name='neg', right_value='array'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayOperator_param_5_{func=<lambda>, left_value='array', name='add', right_value='array'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayOperator_param_6_{func=<lambda>, left_value='array', name='add', right_value='scalar'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayOperator_param_7_{func=<lambda>, left_value='array', name='add', right_value='primitive'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayOperator_param_8_{func=<lambda>, left_value='scalar', name='add', right_value='array'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayOperator_param_9_{func=<lambda>, left_value='primitive', name='add', right_value='array'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayOperator_param_10_{func=<lambda>, left_value='array', name='sub', right_value='array'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayOperator_param_11_{func=<lambda>, left_value='array', name='sub', right_value='scalar'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayOperator_param_12_{func=<lambda>, left_value='array', name='sub', right_value='primitive'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayOperator_param_13_{func=<lambda>, left_value='scalar', name='sub', right_value='array'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayOperator_param_14_{func=<lambda>, left_value='primitive', name='sub', right_value='array'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayOperator_param_15_{func=<lambda>, left_value='array', name='mul', right_value='array'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayOperator_param_16_{func=<lambda>, left_value='array', name='mul', right_value='scalar'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayOperator_param_17_{func=<lambda>, left_value='array', name='mul', right_value='primitive'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayOperator_param_18_{func=<lambda>, left_value='scalar', name='mul', right_value='array'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayOperator_param_19_{func=<lambda>, left_value='primitive', name='mul', right_value='array'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayOperator_param_20_{func=<lambda>, left_value='array', name='div', right_value='array'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayOperator_param_21_{func=<lambda>, left_value='array', name='div', right_value='scalar'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayOperator_param_22_{func=<lambda>, left_value='array', name='div', right_value='primitive'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayOperator_param_23_{func=<lambda>, left_value='scalar', name='div', right_value='array'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayOperator_param_24_{func=<lambda>, left_value='primitive', name='div', right_value='array'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayOperator_param_25_{func=<lambda>, left_value='array', name='pow', right_value='array'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayOperator_param_26_{func=<lambda>, left_value='array', name='pow', right_value='scalar'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayOperator_param_27_{func=<lambda>, left_value='array', name='pow', right_value='primitive'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayOperator_param_28_{func=<lambda>, left_value='scalar', name='pow', right_value='array'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayOperator_param_29_{func=<lambda>, left_value='primitive', name='pow', right_value='array'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayOperator_param_30_{func=<lambda>, left_value='array', name='eq', right_value='array'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayOperator_param_31_{func=<lambda>, left_value='array', name='eq', right_value='scalar'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayOperator_param_32_{func=<lambda>, left_value='array', name='eq', right_value='primitive'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayOperator_param_33_{func=<lambda>, left_value='scalar', name='eq', right_value='array'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayOperator_param_34_{func=<lambda>, left_value='primitive', name='eq', right_value='array'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayOperator_param_35_{func=<lambda>, left_value='array', name='ne', right_value='array'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayOperator_param_36_{func=<lambda>, left_value='array', name='ne', right_value='scalar'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayOperator_param_37_{func=<lambda>, left_value='array', name='ne', right_value='primitive'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayOperator_param_38_{func=<lambda>, left_value='scalar', name='ne', right_value='array'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayOperator_param_39_{func=<lambda>, left_value='primitive', name='ne', right_value='array'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayOperator_param_40_{func=<lambda>, left_value='array', name='lt', right_value='array'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayOperator_param_41_{func=<lambda>, left_value='array', name='lt', right_value='scalar'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayOperator_param_42_{func=<lambda>, left_value='array', name='lt', right_value='primitive'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayOperator_param_43_{func=<lambda>, left_value='scalar', name='lt', right_value='array'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayOperator_param_44_{func=<lambda>, left_value='primitive', name='lt', right_value='array'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayOperator_param_45_{func=<lambda>, left_value='array', name='le', right_value='array'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayOperator_param_46_{func=<lambda>, left_value='array', name='le', right_value='scalar'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayOperator_param_47_{func=<lambda>, left_value='array', name='le', right_value='primitive'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayOperator_param_48_{func=<lambda>, left_value='scalar', name='le', right_value='array'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayOperator_param_49_{func=<lambda>, left_value='primitive', name='le', right_value='array'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayOperator_param_50_{func=<lambda>, left_value='array', name='gt', right_value='array'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayOperator_param_51_{func=<lambda>, left_value='array', name='gt', right_value='scalar'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayOperator_param_52_{func=<lambda>, left_value='array', name='gt', right_value='primitive'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayOperator_param_53_{func=<lambda>, left_value='scalar', name='gt', right_value='array'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayOperator_param_54_{func=<lambda>, left_value='primitive', name='gt', right_value='array'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayOperator_param_55_{func=<lambda>, left_value='array', name='ge', right_value='array'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayOperator_param_56_{func=<lambda>, left_value='array', name='ge', right_value='scalar'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayOperator_param_57_{func=<lambda>, left_value='array', name='ge', right_value='primitive'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayOperator_param_58_{func=<lambda>, left_value='scalar', name='ge', right_value='array'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayOperator_param_59_{func=<lambda>, left_value='primitive', name='ge', right_value='array'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayBitwiseOperator_param_0_{func=<lambda>, left_value='array', name='lshift', right_value='array'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayBitwiseOperator_param_1_{func=<lambda>, left_value='array', name='lshift', right_value='scalar'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayBitwiseOperator_param_2_{func=<lambda>, left_value='array', name='lshift', right_value='primitive'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayBitwiseOperator_param_3_{func=<lambda>, left_value='scalar', name='lshift', right_value='array'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayBitwiseOperator_param_4_{func=<lambda>, left_value='primitive', name='lshift', right_value='array'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayBitwiseOperator_param_5_{func=<lambda>, left_value='array', name='rshift', right_value='array'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayBitwiseOperator_param_6_{func=<lambda>, left_value='array', name='rshift', right_value='scalar'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayBitwiseOperator_param_7_{func=<lambda>, left_value='array', name='rshift', right_value='primitive'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayBitwiseOperator_param_8_{func=<lambda>, left_value='scalar', name='rshift', right_value='array'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayBitwiseOperator_param_9_{func=<lambda>, left_value='primitive', name='rshift', right_value='array'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayBitwiseOperator_param_10_{func=<lambda>, left_value='array', name='and', right_value='array'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayBitwiseOperator_param_11_{func=<lambda>, left_value='array', name='and', right_value='scalar'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayBitwiseOperator_param_12_{func=<lambda>, left_value='array', name='and', right_value='primitive'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayBitwiseOperator_param_13_{func=<lambda>, left_value='scalar', name='and', right_value='array'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayBitwiseOperator_param_14_{func=<lambda>, left_value='primitive', name='and', right_value='array'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayBitwiseOperator_param_15_{func=<lambda>, left_value='array', name='or', right_value='array'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayBitwiseOperator_param_16_{func=<lambda>, left_value='array', name='or', right_value='scalar'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayBitwiseOperator_param_17_{func=<lambda>, left_value='array', name='or', right_value='primitive'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayBitwiseOperator_param_18_{func=<lambda>, left_value='scalar', name='or', right_value='array'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayBitwiseOperator_param_19_{func=<lambda>, left_value='primitive', name='or', right_value='array'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayBitwiseOperator_param_20_{func=<lambda>, left_value='array', name='xor', right_value='array'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayBitwiseOperator_param_21_{func=<lambda>, left_value='array', name='xor', right_value='scalar'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayBitwiseOperator_param_22_{func=<lambda>, left_value='array', name='xor', right_value='primitive'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayBitwiseOperator_param_23_{func=<lambda>, left_value='scalar', name='xor', right_value='array'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayBitwiseOperator_param_24_{func=<lambda>, left_value='primitive', name='xor', right_value='array'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayBitwiseOperator_param_25_{func=<lambda>, left_value='array', name='invert', right_value='array'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayBitwiseOperator_param_26_{func=<lambda>, left_value='array', name='invert', right_value='scalar'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayBitwiseOperator_param_27_{func=<lambda>, left_value='array', name='invert', right_value='primitive'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayBitwiseOperator_param_28_{func=<lambda>, left_value='scalar', name='invert', right_value='array'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayBitwiseOperator_param_29_{func=<lambda>, left_value='primitive', name='invert', right_value='array'}::test_operator
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayFloorDivide_param_0_{left_value='array', right_value='array'}::test_floor_divide
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayFloorDivide_param_1_{left_value='array', right_value='scalar'}::test_floor_divide
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayFloorDivide_param_2_{left_value='array', right_value='primitive'}::test_floor_divide
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayFloorDivide_param_3_{left_value='scalar', right_value='array'}::test_floor_divide
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayFloorDivide_param_4_{left_value='primitive', right_value='array'}::test_floor_divide
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayInplaceOperator_param_0_{left_value='array', right_value='array'}::test_iadd
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayInplaceOperator_param_0_{left_value='array', right_value='array'}::test_iand
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayInplaceOperator_param_0_{left_value='array', right_value='array'}::test_ilshift
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayInplaceOperator_param_0_{left_value='array', right_value='array'}::test_imod
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayInplaceOperator_param_0_{left_value='array', right_value='array'}::test_imul
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayInplaceOperator_param_0_{left_value='array', right_value='array'}::test_ior
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayInplaceOperator_param_0_{left_value='array', right_value='array'}::test_ipow
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayInplaceOperator_param_0_{left_value='array', right_value='array'}::test_irshift
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayInplaceOperator_param_0_{left_value='array', right_value='array'}::test_isub
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayInplaceOperator_param_0_{left_value='array', right_value='array'}::test_itruediv_py3
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayInplaceOperator_param_0_{left_value='array', right_value='array'}::test_ixor
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayInplaceOperator_param_1_{left_value='array', right_value='scalar'}::test_iadd
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayInplaceOperator_param_1_{left_value='array', right_value='scalar'}::test_iand
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayInplaceOperator_param_1_{left_value='array', right_value='scalar'}::test_ilshift
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayInplaceOperator_param_1_{left_value='array', right_value='scalar'}::test_imod
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayInplaceOperator_param_1_{left_value='array', right_value='scalar'}::test_imul
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayInplaceOperator_param_1_{left_value='array', right_value='scalar'}::test_ior
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayInplaceOperator_param_1_{left_value='array', right_value='scalar'}::test_ipow
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayInplaceOperator_param_1_{left_value='array', right_value='scalar'}::test_irshift
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayInplaceOperator_param_1_{left_value='array', right_value='scalar'}::test_isub
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayInplaceOperator_param_1_{left_value='array', right_value='scalar'}::test_itruediv_py3
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayInplaceOperator_param_1_{left_value='array', right_value='scalar'}::test_ixor
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayInplaceOperator_param_2_{left_value='array', right_value='primitive'}::test_iadd
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayInplaceOperator_param_2_{left_value='array', right_value='primitive'}::test_iand
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayInplaceOperator_param_2_{left_value='array', right_value='primitive'}::test_ilshift
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayInplaceOperator_param_2_{left_value='array', right_value='primitive'}::test_imod
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayInplaceOperator_param_2_{left_value='array', right_value='primitive'}::test_imul
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayInplaceOperator_param_2_{left_value='array', right_value='primitive'}::test_ior
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayInplaceOperator_param_2_{left_value='array', right_value='primitive'}::test_ipow
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayInplaceOperator_param_2_{left_value='array', right_value='primitive'}::test_irshift
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayInplaceOperator_param_2_{left_value='array', right_value='primitive'}::test_isub
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayInplaceOperator_param_2_{left_value='array', right_value='primitive'}::test_itruediv_py3
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayInplaceOperator_param_2_{left_value='array', right_value='primitive'}::test_ixor
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArraySetItem::test_setitem_ellipsis
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArraySetItem::test_setitem_non_slice
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayMethods::test_all
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayMethods::test_any
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayMethods::test_copy
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayMethods::test_max
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayMethods::test_min
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayMethods::test_prod
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayMethods::test_sum
FAILED tests/cupy_tests/core_tests/fusion_tests/test_array.py::TestFusionArrayAsType::test_astype
FAILED tests/cupy_tests/core_tests/fusion_tests/test_indexing.py::TestIndexing_param_0_{indices=1, shape=(2, 3, 4)}::test_getitem
FAILED tests/cupy_tests/core_tests/fusion_tests/test_indexing.py::TestIndexing_param_1_{indices=-1, shape=(2, 3, 4)}::test_getitem
FAILED tests/cupy_tests/core_tests/fusion_tests/test_indexing.py::TestIndexing_param_2_{indices=(1,), shape=(2, 3, 4)}::test_getitem
FAILED tests/cupy_tests/core_tests/fusion_tests/test_indexing.py::TestIndexing_param_3_{indices=(1, 0), shape=(2, 3, 4)}::test_getitem
FAILED tests/cupy_tests/core_tests/fusion_tests/test_indexing.py::TestIndexing_param_4_{indices=(1, 0, 2), shape=(2, 3, 4)}::test_getitem
FAILED tests/cupy_tests/core_tests/fusion_tests/test_indexing.py::TestIndexing_param_5_{indices=(-1, 0, -2), shape=(2, 3, 4)}::test_getitem
FAILED tests/cupy_tests/core_tests/fusion_tests/test_indexing.py::TestIndexing_param_6_{indices=slice(None, None, None), shape=(2, 3, 4)}::test_getitem
FAILED tests/cupy_tests/core_tests/fusion_tests/test_indexing.py::TestIndexing_param_7_{indices=slice(None, None, 1), shape=(2, 3, 4)}::test_getitem
FAILED tests/cupy_tests/core_tests/fusion_tests/test_indexing.py::TestIndexing_param_8_{indices=slice(None, None, -1), shape=(2, 3, 4)}::test_getitem
FAILED tests/cupy_tests/core_tests/fusion_tests/test_indexing.py::TestIndexing_param_9_{indices=(slice(None, None, None), slice(None, None, -1)), shape=(2, 3, 4)}::test_getitem
FAILED tests/cupy_tests/core_tests/fusion_tests/test_indexing.py::TestIndexing_param_10_{indices=Ellipsis, shape=(2, 3, 4)}::test_getitem
FAILED tests/cupy_tests/core_tests/fusion_tests/test_indexing.py::TestIndexing_param_11_{indices=(Ellipsis,), shape=(2, 3, 4)}::test_getitem
FAILED tests/cupy_tests/core_tests/fusion_tests/test_indexing.py::TestIndexing_param_12_{indices=None, shape=(2, 3, 4)}::test_getitem
FAILED tests/cupy_tests/core_tests/fusion_tests/test_indexing.py::TestIndexing_param_13_{indices=(None,), shape=(2, 3, 4)}::test_getitem
FAILED tests/cupy_tests/core_tests/fusion_tests/test_indexing.py::TestIndexing_param_14_{indices=(None, None, None), shape=(2, 3, 4)}::test_getitem
FAILED tests/cupy_tests/core_tests/fusion_tests/test_indexing.py::TestIndexing_param_15_{indices=(slice(None, None, None), 0, slice(None, None, -1)), shape=(2, 3, 4)}::test_getitem
FAILED tests/cupy_tests/core_tests/fusion_tests/test_indexing.py::TestIndexing_param_16_{indices=(1, None, slice(None, None, -1), None, 2), shape=(2, 3, 4)}::test_getitem
FAILED tests/cupy_tests/core_tests/fusion_tests/test_indexing.py::TestIndexing_param_17_{indices=(slice(None, None, None), None), shape=(2,)}::test_getitem
FAILED tests/cupy_tests/core_tests/fusion_tests/test_indexing.py::TestIndexing_param_18_{indices=(Ellipsis, 2), shape=(2, 3, 4)}::test_getitem
FAILED tests/cupy_tests/core_tests/fusion_tests/test_indexing.py::TestIndexing_param_19_{indices=(1, Ellipsis), shape=(2, 3, 4)}::test_getitem
FAILED tests/cupy_tests/core_tests/fusion_tests/test_indexing.py::TestIndexing_param_20_{indices=(1, Ellipsis, 3), shape=(2, 3, 4, 5)}::test_getitem
FAILED tests/cupy_tests/core_tests/fusion_tests/test_indexing.py::TestIndexingCombination::test_indexing_and_add_1
FAILED tests/cupy_tests/core_tests/fusion_tests/test_indexing.py::TestIndexingCombination::test_indexing_and_add_2
FAILED tests/cupy_tests/core_tests/fusion_tests/test_indexing.py::TestIndexingCombination::test_indexing_and_add_3
FAILED tests/cupy_tests/core_tests/fusion_tests/test_indexing.py::TestIndexingCombination::test_indexing_and_add_4
FAILED tests/cupy_tests/core_tests/fusion_tests/test_indexing.py::TestIndexingCombination::test_indexing_twice_1
FAILED tests/cupy_tests/core_tests/fusion_tests/test_indexing.py::TestIndexingCombination::test_indexing_twice_2
FAILED tests/cupy_tests/core_tests/fusion_tests/test_kernel_cache.py::TestFusionCache::test_dtype_combinations
FAILED tests/cupy_tests/core_tests/fusion_tests/test_kernel_cache.py::TestFusionCache::test_memoryspace_combinations
FAILED tests/cupy_tests/core_tests/fusion_tests/test_kernel_cache.py::TestFusionCache::test_same_array
FAILED tests/cupy_tests/core_tests/fusion_tests/test_kernel_cache.py::TestFusionCache::test_shape_combinations
FAILED tests/cupy_tests/core_tests/fusion_tests/test_misc.py::TestFusionInplaceUpdate::test_iadd_multiple_times
FAILED tests/cupy_tests/core_tests/fusion_tests/test_misc.py::TestFusionInplaceUpdate::test_outarg_mixed
FAILED tests/cupy_tests/core_tests/fusion_tests/test_misc.py::TestFusionTuple::test_multiple_outputdifferent_type_same_ufunc
FAILED tests/cupy_tests/core_tests/fusion_tests/test_misc.py::TestFusionTuple::test_return_empty_tuple
FAILED tests/cupy_tests/core_tests/fusion_tests/test_misc.py::TestFusionTuple::test_return_singleton_tuple
FAILED tests/cupy_tests/core_tests/fusion_tests/test_misc.py::TestFusionTuple::test_return_tuple
FAILED tests/cupy_tests/core_tests/fusion_tests/test_misc.py::TestFusionTuple::test_tuple
FAILED tests/cupy_tests/core_tests/fusion_tests/test_misc.py::TestReturnNone::test_iadd_once
FAILED tests/cupy_tests/core_tests/fusion_tests/test_misc.py::TestReturnNone::test_iadd_twice
FAILED tests/cupy_tests/core_tests/fusion_tests/test_misc.py::TestFusionNoneParams::test_python_none_parameter
FAILED tests/cupy_tests/core_tests/fusion_tests/test_misc.py::TestFusionKernelName::test_elementwise
FAILED tests/cupy_tests/core_tests/fusion_tests/test_misc.py::TestFusionKernelName::test_elementwise_with_name
FAILED tests/cupy_tests/core_tests/fusion_tests/test_misc.py::TestFusionKernelName::test_reduction_01
FAILED tests/cupy_tests/core_tests/fusion_tests/test_misc.py::TestFusionKernelName::test_reduction_postmap
FAILED tests/cupy_tests/core_tests/fusion_tests/test_misc.py::TestFusionKernelName::test_reduction_premap
FAILED tests/cupy_tests/core_tests/fusion_tests/test_misc.py::TestFusionKernelName::test_reduction_with_name
FAILED tests/cupy_tests/core_tests/fusion_tests/test_misc.py::TestFusionComposition::test_composition
FAILED tests/cupy_tests/core_tests/fusion_tests/test_misc.py::TestFusionCompile::test_clear_cache
FAILED tests/cupy_tests/core_tests/fusion_tests/test_misc.py::TestFusionGetArrayModule::test_get_array_module
FAILED tests/cupy_tests/core_tests/fusion_tests/test_misc.py::TestFusionThread::test_thread
FAILED tests/cupy_tests/core_tests/fusion_tests/test_misc.py::TestFusionThread::test_thread_multiple_dtypes
FAILED tests/cupy_tests/core_tests/fusion_tests/test_misc.py::TestFusionMultiDevice::test_multi_device
FAILED tests/cupy_tests/core_tests/fusion_tests/test_optimization.py::TestOptimizations::test_different_shapes
FAILED tests/cupy_tests/core_tests/fusion_tests/test_optimization.py::TestOptimizations::test_fuse_elementwise_op_1
FAILED tests/cupy_tests/core_tests/fusion_tests/test_optimization.py::TestOptimizations::test_fuse_elementwise_op_2
FAILED tests/cupy_tests/core_tests/fusion_tests/test_optimization.py::TestOptimizations::test_fuse_elementwise_ops_4
FAILED tests/cupy_tests/core_tests/fusion_tests/test_optimization.py::TestOptimizations::test_ignore_op
FAILED tests/cupy_tests/core_tests/fusion_tests/test_optimization.py::TestOptimizations::test_inplace_elementwise_1
FAILED tests/cupy_tests/core_tests/fusion_tests/test_optimization.py::TestOptimizations::test_inplace_elementwise_2
FAILED tests/cupy_tests/core_tests/fusion_tests/test_optimization.py::TestOptimizations::test_inplace_same_memory_space
FAILED tests/cupy_tests/core_tests/fusion_tests/test_optimization.py::TestOptimizations::test_inplace_same_variable
FAILED tests/cupy_tests/core_tests/fusion_tests/test_optimization.py::TestOptimizations::test_one_elementwise_op
FAILED tests/cupy_tests/core_tests/fusion_tests/test_optimization.py::TestOptimizations::test_one_fuse_reduction_premap
FAILED tests/cupy_tests/core_tests/fusion_tests/test_optimization.py::TestOptimizations::test_one_reduction_op
FAILED tests/cupy_tests/core_tests/fusion_tests/test_optimization.py::TestOptimizations::test_one_reduction_op_rotate
FAILED tests/cupy_tests/core_tests/fusion_tests/test_optimization.py::TestOptimizations::test_returns_tuple
FAILED tests/cupy_tests/core_tests/fusion_tests/test_reduction.py::TestFusionReductionAxis_param_6_{axis=-3, shape=(2, 1, 4)}::test_sum_axis
FAILED tests/cupy_tests/core_tests/fusion_tests/test_reduction.py::TestFusionReductionAxis_param_6_{axis=-3, shape=(2, 1, 4)}::test_sum_kwargs_axis
FAILED tests/cupy_tests/core_tests/fusion_tests/test_reduction.py::TestFusionReductionAxis_param_9_{axis=-2, shape=(3, 4)}::test_sum_axis
FAILED tests/cupy_tests/core_tests/fusion_tests/test_reduction.py::TestFusionReductionAxis_param_9_{axis=-2, shape=(3, 4)}::test_sum_kwargs_axis
FAILED tests/cupy_tests/core_tests/fusion_tests/test_reduction.py::TestFusionReductionAxis_param_11_{axis=-2, shape=(2, 0, 3)}::test_sum_axis
FAILED tests/cupy_tests/core_tests/fusion_tests/test_reduction.py::TestFusionReductionAxis_param_11_{axis=-2, shape=(2, 0, 3)}::test_sum_kwargs_axis
FAILED tests/cupy_tests/core_tests/fusion_tests/test_reduction.py::TestFusionReductionAxis_param_13_{axis=-1, shape=(3, 4)}::test_sum_axis
FAILED tests/cupy_tests/core_tests/fusion_tests/test_reduction.py::TestFusionReductionAxis_param_13_{axis=-1, shape=(3, 4)}::test_sum_kwargs_axis
FAILED tests/cupy_tests/core_tests/fusion_tests/test_reduction.py::TestFusionReductionAxis_param_14_{axis=-1, shape=(2, 1, 4)}::test_sum_axis
FAILED tests/cupy_tests/core_tests/fusion_tests/test_reduction.py::TestFusionReductionAxis_param_14_{axis=-1, shape=(2, 1, 4)}::test_sum_kwargs_axis
FAILED tests/cupy_tests/core_tests/fusion_tests/test_reduction.py::TestFusionReductionAxis_param_17_{axis=0, shape=(3, 4)}::test_sum_axis
FAILED tests/cupy_tests/core_tests/fusion_tests/test_reduction.py::TestFusionReductionAxis_param_17_{axis=0, shape=(3, 4)}::test_sum_kwargs_axis
FAILED tests/cupy_tests/core_tests/fusion_tests/test_reduction.py::TestFusionReductionAxis_param_18_{axis=0, shape=(2, 1, 4)}::test_sum_axis
FAILED tests/cupy_tests/core_tests/fusion_tests/test_reduction.py::TestFusionReductionAxis_param_18_{axis=0, shape=(2, 1, 4)}::test_sum_kwargs_axis
FAILED tests/cupy_tests/core_tests/fusion_tests/test_reduction.py::TestFusionReductionAxis_param_21_{axis=1, shape=(3, 4)}::test_sum_axis
FAILED tests/cupy_tests/core_tests/fusion_tests/test_reduction.py::TestFusionReductionAxis_param_21_{axis=1, shape=(3, 4)}::test_sum_kwargs_axis
FAILED tests/cupy_tests/core_tests/fusion_tests/test_reduction.py::TestFusionReductionAxis_param_22_{axis=1, shape=(2, 1, 4)}::test_sum_axis
FAILED tests/cupy_tests/core_tests/fusion_tests/test_reduction.py::TestFusionReductionAxis_param_22_{axis=1, shape=(2, 1, 4)}::test_sum_kwargs_axis
FAILED tests/cupy_tests/core_tests/fusion_tests/test_reduction.py::TestFusionReductionAxis_param_23_{axis=1, shape=(2, 0, 3)}::test_sum_axis
FAILED tests/cupy_tests/core_tests/fusion_tests/test_reduction.py::TestFusionReductionAxis_param_23_{axis=1, shape=(2, 0, 3)}::test_sum_kwargs_axis
FAILED tests/cupy_tests/core_tests/fusion_tests/test_reduction.py::TestFusionReductionAxis_param_26_{axis=2, shape=(2, 1, 4)}::test_sum_axis
FAILED tests/cupy_tests/core_tests/fusion_tests/test_reduction.py::TestFusionReductionAxis_param_26_{axis=2, shape=(2, 1, 4)}::test_sum_kwargs_axis
FAILED tests/cupy_tests/core_tests/fusion_tests/test_reduction.py::TestFusionReductionMultiAxis_param_1_{axis=None, shape=(3, 4)}::test_sum_axis
FAILED tests/cupy_tests/core_tests/fusion_tests/test_reduction.py::TestFusionReductionMultiAxis_param_1_{axis=None, shape=(3, 4)}::test_sum_kwargs_axis
FAILED tests/cupy_tests/core_tests/fusion_tests/test_reduction.py::TestFusionReductionMultiAxis_param_2_{axis=None, shape=(2, 1, 4)}::test_sum_axis
FAILED tests/cupy_tests/core_tests/fusion_tests/test_reduction.py::TestFusionReductionMultiAxis_param_2_{axis=None, shape=(2, 1, 4)}::test_sum_kwargs_axis
FAILED tests/cupy_tests/core_tests/fusion_tests/test_reduction.py::TestFusionReductionMultiAxis_param_3_{axis=None, shape=(2, 0, 3)}::test_sum_axis
FAILED tests/cupy_tests/core_tests/fusion_tests/test_reduction.py::TestFusionReductionMultiAxis_param_3_{axis=None, shape=(2, 0, 3)}::test_sum_kwargs_axis
FAILED tests/cupy_tests/core_tests/fusion_tests/test_reduction.py::TestFusionReductionMultiAxis_param_4_{axis=None, shape=(2, 3, 2, 2, 3)}::test_sum_axis
FAILED tests/cupy_tests/core_tests/fusion_tests/test_reduction.py::TestFusionReductionMultiAxis_param_4_{axis=None, shape=(2, 3, 2, 2, 3)}::test_sum_kwargs_axis
FAILED tests/cupy_tests/core_tests/fusion_tests/test_reduction.py::TestFusionReductionMultiAxis_param_6_{axis=(0,), shape=(3, 4)}::test_sum_axis
FAILED tests/cupy_tests/core_tests/fusion_tests/test_reduction.py::TestFusionReductionMultiAxis_param_6_{axis=(0,), shape=(3, 4)}::test_sum_kwargs_axis
FAILED tests/cupy_tests/core_tests/fusion_tests/test_reduction.py::TestFusionReductionMultiAxis_param_7_{axis=(0,), shape=(2, 1, 4)}::test_sum_axis
FAILED tests/cupy_tests/core_tests/fusion_tests/test_reduction.py::TestFusionReductionMultiAxis_param_7_{axis=(0,), shape=(2, 1, 4)}::test_sum_kwargs_axis
FAILED tests/cupy_tests/core_tests/fusion_tests/test_reduction.py::TestFusionReductionMultiAxis_param_9_{axis=(0,), shape=(2, 3, 2, 2, 3)}::test_sum_axis
FAILED tests/cupy_tests/core_tests/fusion_tests/test_reduction.py::TestFusionReductionMultiAxis_param_9_{axis=(0,), shape=(2, 3, 2, 2, 3)}::test_sum_kwargs_axis
FAILED tests/cupy_tests/core_tests/fusion_tests/test_reduction.py::TestFusionReductionMultiAxis_param_11_{axis=(1,), shape=(3, 4)}::test_sum_axis
FAILED tests/cupy_tests/core_tests/fusion_tests/test_reduction.py::TestFusionReductionMultiAxis_param_11_{axis=(1,), shape=(3, 4)}::test_sum_kwargs_axis
FAILED tests/cupy_tests/core_tests/fusion_tests/test_reduction.py::TestFusionReductionMultiAxis_param_12_{axis=(1,), shape=(2, 1, 4)}::test_sum_axis
FAILED tests/cupy_tests/core_tests/fusion_tests/test_reduction.py::TestFusionReductionMultiAxis_param_12_{axis=(1,), shape=(2, 1, 4)}::test_sum_kwargs_axis
FAILED tests/cupy_tests/core_tests/fusion_tests/test_reduction.py::TestFusionReductionMultiAxis_param_13_{axis=(1,), shape=(2, 0, 3)}::test_sum_axis
FAILED tests/cupy_tests/core_tests/fusion_tests/test_reduction.py::TestFusionReductionMultiAxis_param_13_{axis=(1,), shape=(2, 0, 3)}::test_sum_kwargs_axis
FAILED tests/cupy_tests/core_tests/fusion_tests/test_reduction.py::TestFusionReductionMultiAxis_param_14_{axis=(1,), shape=(2, 3, 2, 2, 3)}::test_sum_axis
FAILED tests/cupy_tests/core_tests/fusion_tests/test_reduction.py::TestFusionReductionMultiAxis_param_14_{axis=(1,), shape=(2, 3, 2, 2, 3)}::test_sum_kwargs_axis
FAILED tests/cupy_tests/core_tests/fusion_tests/test_reduction.py::TestFusionReductionMultiAxis_param_16_{axis=(0, 1), shape=(3, 4)}::test_sum_axis
FAILED tests/cupy_tests/creation_tests/test_from_data.py::TestFromData::test_array_from_list_of_numpy_scalar
FAILED tests/cupy_tests/functional_tests/test_vectorize.py::TestVectorizeStmts::test_return_tuple
FAILED tests/cupy_tests/functional_tests/test_vectorize.py::TestVectorizeStmts::test_tuple
FAILED tests/cupy_tests/random_tests/test_distributions.py::TestDistributionsGamma_param_0_{dtype=float64, scale_shape=(), shape=(4, 3, 2), shape_shape=()}::test_gamma_generator
FAILED tests/cupy_tests/random_tests/test_distributions.py::TestDistributionsGamma_param_1_{dtype=float64, scale_shape=(), shape=(4, 3, 2), shape_shape=(3, 2)}::test_gamma_generator
FAILED tests/cupy_tests/random_tests/test_distributions.py::TestDistributionsGamma_param_2_{dtype=float64, scale_shape=(), shape=(3, 2), shape_shape=()}::test_gamma_generator
FAILED tests/cupy_tests/random_tests/test_distributions.py::TestDistributionsGamma_param_3_{dtype=float64, scale_shape=(), shape=(3, 2), shape_shape=(3, 2)}::test_gamma_generator
FAILED tests/cupy_tests/random_tests/test_distributions.py::TestDistributionsGamma_param_4_{dtype=float64, scale_shape=(3, 2), shape=(4, 3, 2), shape_shape=()}::test_gamma_generator
FAILED tests/cupy_tests/random_tests/test_distributions.py::TestDistributionsGamma_param_5_{dtype=float64, scale_shape=(3, 2), shape=(4, 3, 2), shape_shape=(3, 2)}::test_gamma_generator
FAILED tests/cupy_tests/random_tests/test_distributions.py::TestDistributionsGamma_param_6_{dtype=float64, scale_shape=(3, 2), shape=(3, 2), shape_shape=()}::test_gamma_generator
FAILED tests/cupy_tests/random_tests/test_distributions.py::TestDistributionsGamma_param_7_{dtype=float64, scale_shape=(3, 2), shape=(3, 2), shape_shape=(3, 2)}::test_gamma_generator
FAILED tests/cupy_tests/random_tests/test_distributions.py::TestDistributionsGamma_param_8_{dtype=float32, scale_shape=(), shape=(4, 3, 2), shape_shape=()}::test_gamma_generator
FAILED tests/cupy_tests/random_tests/test_distributions.py::TestDistributionsGamma_param_9_{dtype=float32, scale_shape=(), shape=(4, 3, 2), shape_shape=(3, 2)}::test_gamma_generator
FAILED tests/cupy_tests/random_tests/test_distributions.py::TestDistributionsGamma_param_10_{dtype=float32, scale_shape=(), shape=(3, 2), shape_shape=()}::test_gamma_generator
FAILED tests/cupy_tests/random_tests/test_distributions.py::TestDistributionsGamma_param_11_{dtype=float32, scale_shape=(), shape=(3, 2), shape_shape=(3, 2)}::test_gamma_generator
FAILED tests/cupy_tests/random_tests/test_distributions.py::TestDistributionsGamma_param_12_{dtype=float32, scale_shape=(3, 2), shape=(4, 3, 2), shape_shape=()}::test_gamma_generator
FAILED tests/cupy_tests/random_tests/test_distributions.py::TestDistributionsGamma_param_13_{dtype=float32, scale_shape=(3, 2), shape=(4, 3, 2), shape_shape=(3, 2)}::test_gamma_generator
FAILED tests/cupy_tests/random_tests/test_distributions.py::TestDistributionsGamma_param_14_{dtype=float32, scale_shape=(3, 2), shape=(3, 2), shape_shape=()}::test_gamma_generator
FAILED tests/cupy_tests/random_tests/test_distributions.py::TestDistributionsGamma_param_15_{dtype=float32, scale_shape=(3, 2), shape=(3, 2), shape_shape=(3, 2)}::test_gamma_generator
FAILED tests/cupy_tests/random_tests/test_distributions.py::TestDistributionsGamma_param_16_{dtype=float16, scale_shape=(), shape=(4, 3, 2), shape_shape=()}::test_gamma_generator
FAILED tests/cupy_tests/random_tests/test_distributions.py::TestDistributionsGamma_param_17_{dtype=float16, scale_shape=(), shape=(4, 3, 2), shape_shape=(3, 2)}::test_gamma_generator
FAILED tests/cupy_tests/random_tests/test_distributions.py::TestDistributionsGamma_param_18_{dtype=float16, scale_shape=(), shape=(3, 2), shape_shape=()}::test_gamma_generator
FAILED tests/cupy_tests/random_tests/test_distributions.py::TestDistributionsGamma_param_19_{dtype=float16, scale_shape=(), shape=(3, 2), shape_shape=(3, 2)}::test_gamma_generator
FAILED tests/cupy_tests/random_tests/test_distributions.py::TestDistributionsGamma_param_20_{dtype=float16, scale_shape=(3, 2), shape=(4, 3, 2), shape_shape=()}::test_gamma_generator
FAILED tests/cupy_tests/random_tests/test_distributions.py::TestDistributionsGamma_param_21_{dtype=float16, scale_shape=(3, 2), shape=(4, 3, 2), shape_shape=(3, 2)}::test_gamma_generator
FAILED tests/cupy_tests/random_tests/test_distributions.py::TestDistributionsGamma_param_22_{dtype=float16, scale_shape=(3, 2), shape=(3, 2), shape_shape=()}::test_gamma_generator
FAILED tests/cupy_tests/random_tests/test_distributions.py::TestDistributionsGamma_param_23_{dtype=float16, scale_shape=(3, 2), shape=(3, 2), shape_shape=(3, 2)}::test_gamma_generator
FAILED tests/cupy_tests/random_tests/test_distributions.py::TestDistributionsStandardGamma_param_0_{shape=(4, 3, 2), shape_shape=()}::test_standard_gamma_generator
FAILED tests/cupy_tests/random_tests/test_distributions.py::TestDistributionsStandardGamma_param_1_{shape=(4, 3, 2), shape_shape=(3, 2)}::test_standard_gamma_generator
FAILED tests/cupy_tests/random_tests/test_distributions.py::TestDistributionsStandardGamma_param_2_{shape=(3, 2), shape_shape=()}::test_standard_gamma_generator
FAILED tests/cupy_tests/random_tests/test_distributions.py::TestDistributionsStandardGamma_param_3_{shape=(3, 2), shape_shape=(3, 2)}::test_standard_gamma_generator
FAILED tests/cupyx_tests/jit_tests/test_raw.py::TestRaw::test_raw_multidimensional_array
FAILED tests/cupyx_tests/scipy_tests/linalg_tests/test_decomp_lu.py::TestLUSolve_param_0_{shapes=((4, 4), (4,)), trans=0}::test_lu_solve
FAILED tests/cupyx_tests/scipy_tests/linalg_tests/test_decomp_lu.py::TestLUSolve_param_2_{shapes=((4, 4), (4,)), trans=2}::test_lu_solve
FAILED tests/cupyx_tests/scipy_tests/linalg_tests/test_decomp_lu.py::TestLUSolve_param_4_{shapes=((5, 5), (5, 2)), trans=1}::test_lu_solve
FAILED tests/cupyx_tests/scipy_tests/ndimage_tests/test_filters.py::TestGenericFilter::test_filter[_param_156_{dtype=uint8, filter='generic_filter', footprint=False, func_or_kernel=(<cupy._core.raw.RawKernel object at 0x7ef8f01938c0>, <function rms_pyfunc at 0x7ef8f1550700>), ksize=3, mode='mirror', shape=(4, 5)}]
FAILED tests/cupyx_tests/scipy_tests/ndimage_tests/test_filters.py::TestGenericFilter::test_filter[_param_158_{dtype=uint8, filter='generic_filter', footprint=False, func_or_kernel=(<cupy._core.raw.RawKernel object at 0x7ef8f01938c0>, <function rms_pyfunc at 0x7ef8f1550700>), ksize=4, mode='mirror', shape=(4, 5)}]
FAILED tests/cupyx_tests/scipy_tests/ndimage_tests/test_filters.py::TestGenericFilter::test_filter[_param_160_{dtype=float64, filter='generic_filter', footprint=False, func_or_kernel=(<cupy._core.raw.RawKernel object at 0x7ef8f01938c0>, <function rms_pyfunc at 0x7ef8f1550700>), ksize=3, mode='mirror', shape=(4, 5)}]
FAILED tests/cupyx_tests/scipy_tests/ndimage_tests/test_filters.py::TestGenericFilter::test_filter[_param_162_{dtype=float64, filter='generic_filter', footprint=False, func_or_kernel=(<cupy._core.raw.RawKernel object at 0x7ef8f01938c0>, <function rms_pyfunc at 0x7ef8f1550700>), ksize=4, mode='mirror', shape=(4, 5)}]
FAILED tests/cupyx_tests/scipy_tests/ndimage_tests/test_filters.py::TestGenericFilter::test_filter[_param_324_{dtype=float64, filter='generic_filter', footprint=False, func_or_kernel=(<cupy._core._reduction.ReductionKernel object a...0154880>, <function lt_pyfunc at 0x7ef8f01a3f70>), ksize=3, mode='mirror', shape=(4, 5)}]
FAILED tests/cupyx_tests/scipy_tests/ndimage_tests/test_filters.py::TestGenericFilter::test_filter[_param_326_{dtype=float64, filter='generic_filter', footprint=False, func_or_kernel=(<cupy._core._reduction.ReductionKernel object a...0154880>, <function lt_pyfunc at 0x7ef8f01a3f70>), ksize=4, mode='mirror', shape=(4, 5)}]
FAILED tests/cupyx_tests/scipy_tests/ndimage_tests/test_filters.py::TestGenericFilter::test_filter[_param_484_{dtype=uint8, filter='generic_filter', footprint=True, func_or_kernel=(<cupy._core.raw.RawKernel object at 0x7ef8f01938c0>, <function rms_pyfunc at 0x7ef8f1550700>), ksize=3, mode='mirror', shape=(4, 5)}]
FAILED tests/cupyx_tests/scipy_tests/ndimage_tests/test_filters.py::TestGenericFilter::test_filter[_param_486_{dtype=uint8, filter='generic_filter', footprint=True, func_or_kernel=(<cupy._core.raw.RawKernel object at 0x7ef8f01938c0>, <function rms_pyfunc at 0x7ef8f1550700>), ksize=4, mode='mirror', shape=(4, 5)}]
FAILED tests/cupyx_tests/scipy_tests/ndimage_tests/test_filters.py::TestGenericFilter::test_filter[_param_488_{dtype=float64, filter='generic_filter', footprint=True, func_or_kernel=(<cupy._core.raw.RawKernel object at 0x7ef8f01938c0>, <function rms_pyfunc at 0x7ef8f1550700>), ksize=3, mode='mirror', shape=(4, 5)}]
FAILED tests/cupyx_tests/scipy_tests/ndimage_tests/test_filters.py::TestGenericFilter::test_filter[_param_490_{dtype=float64, filter='generic_filter', footprint=True, func_or_kernel=(<cupy._core.raw.RawKernel object at 0x7ef8f01938c0>, <function rms_pyfunc at 0x7ef8f1550700>), ksize=4, mode='mirror', shape=(4, 5)}]
FAILED tests/cupyx_tests/scipy_tests/ndimage_tests/test_filters.py::TestGenericFilter::test_filter[_param_652_{dtype=float64, filter='generic_filter', footprint=True, func_or_kernel=(<cupy._core._reduction.ReductionKernel object a...0154880>, <function lt_pyfunc at 0x7ef8f01a3f70>), ksize=3, mode='mirror', shape=(4, 5)}]
FAILED tests/cupyx_tests/scipy_tests/ndimage_tests/test_filters.py::TestGenericFilter::test_filter[_param_654_{dtype=float64, filter='generic_filter', footprint=True, func_or_kernel=(<cupy._core._reduction.ReductionKernel object a...0154880>, <function lt_pyfunc at 0x7ef8f01a3f70>), ksize=4, mode='mirror', shape=(4, 5)}]
FAILED tests/cupyx_tests/scipy_tests/ndimage_tests/test_measurements.py::TestMeasurementsSelect::test_measurements_select[_param_70_{enable_cub=True, index=1, labels=50, op='extrema', shape=(512,)}]
FAILED tests/cupyx_tests/scipy_tests/ndimage_tests/test_measurements.py::TestMeasurementsSelect::test_measurements_select[_param_214_{enable_cub=False, index=1, labels=50, op='extrema', shape=(512,)}]
FAILED tests/cupyx_tests/scipy_tests/signal_tests/test_signaltools.py::TestFFTConvolve_param_12_{mode='full', size1=(3, 4, 10), size2=3}::test_convolve_fft
FAILED tests/cupyx_tests/scipy_tests/signal_tests/test_signaltools.py::TestFFTConvolve_param_12_{mode='full', size1=(3, 4, 10), size2=3}::test_correlate_fft
FAILED tests/cupyx_tests/scipy_tests/signal_tests/test_signaltools.py::TestFFTConvolve_param_12_{mode='full', size1=(3, 4, 10), size2=3}::test_fftconvolve
FAILED tests/cupyx_tests/scipy_tests/signal_tests/test_signaltools.py::TestFFTConvolve_param_44_{mode='valid', size1=(3, 4, 10), size2=3}::test_convolve_fft
FAILED tests/cupyx_tests/scipy_tests/signal_tests/test_signaltools.py::TestFFTConvolve_param_44_{mode='valid', size1=(3, 4, 10), size2=3}::test_correlate_fft
FAILED tests/cupyx_tests/scipy_tests/signal_tests/test_signaltools.py::TestFFTConvolve_param_44_{mode='valid', size1=(3, 4, 10), size2=3}::test_fftconvolve
XPASS tests/cupy_tests/core_tests/test_ndarray_unary_op.py::TestArrayBoolOp::test_bool_one_element ROCm/HIP may have a bug
= 432 failed, 63362 passed, 7381 skipped, 65 deselected, 516 xfailed, 1 xpassed, 271 warnings in 24330.45s (6:45:30) =
